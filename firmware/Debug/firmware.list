
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000758c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007728  08007728  00017728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d8  080077d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e0  080077e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080077e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000078  0800785c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  0800785c  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126aa  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a02  00000000  00000000  0003274e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  00035150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e10  00000000  00000000  000360c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017bfb  00000000  00000000  00036ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d83d  00000000  00000000  0004ead3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f441  00000000  00000000  0005c310  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb751  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004328  00000000  00000000  000eb7cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800770c 	.word	0x0800770c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	0800770c 	.word	0x0800770c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b972 	b.w	8000dec <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	4688      	mov	r8, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d14b      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b2e:	428a      	cmp	r2, r1
 8000b30:	4615      	mov	r5, r2
 8000b32:	d967      	bls.n	8000c04 <__udivmoddi4+0xe4>
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0720 	rsb	r7, r2, #32
 8000b3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b42:	fa20 f707 	lsr.w	r7, r0, r7
 8000b46:	4095      	lsls	r5, r2
 8000b48:	ea47 0803 	orr.w	r8, r7, r3
 8000b4c:	4094      	lsls	r4, r2
 8000b4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b52:	0c23      	lsrs	r3, r4, #16
 8000b54:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b58:	fa1f fc85 	uxth.w	ip, r5
 8000b5c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b60:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b64:	fb07 f10c 	mul.w	r1, r7, ip
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x60>
 8000b6c:	18eb      	adds	r3, r5, r3
 8000b6e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b72:	f080 811b 	bcs.w	8000dac <__udivmoddi4+0x28c>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 8118 	bls.w	8000dac <__udivmoddi4+0x28c>
 8000b7c:	3f02      	subs	r7, #2
 8000b7e:	442b      	add	r3, r5
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b94:	45a4      	cmp	ip, r4
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x8c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	442c      	add	r4, r5
 8000bac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bb0:	eba4 040c 	sub.w	r4, r4, ip
 8000bb4:	2700      	movs	r7, #0
 8000bb6:	b11e      	cbz	r6, 8000bc0 <__udivmoddi4+0xa0>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc0:	4639      	mov	r1, r7
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xbe>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80eb 	beq.w	8000da6 <__udivmoddi4+0x286>
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	4639      	mov	r1, r7
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f783 	clz	r7, r3
 8000be2:	2f00      	cmp	r7, #0
 8000be4:	d147      	bne.n	8000c76 <__udivmoddi4+0x156>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd0>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80fa 	bhi.w	8000de4 <__udivmoddi4+0x2c4>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa0>
 8000bfe:	e9c6 4800 	strd	r4, r8, [r6]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xe8>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 808f 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c12:	1b49      	subs	r1, r1, r5
 8000c14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c18:	fa1f f885 	uxth.w	r8, r5
 8000c1c:	2701      	movs	r7, #1
 8000c1e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	f200 80cd 	bhi.w	8000ddc <__udivmoddi4+0x2bc>
 8000c42:	4684      	mov	ip, r0
 8000c44:	1a59      	subs	r1, r3, r1
 8000c46:	b2a3      	uxth	r3, r4
 8000c48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c54:	fb08 f800 	mul.w	r8, r8, r0
 8000c58:	45a0      	cmp	r8, r4
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x14c>
 8000c5c:	192c      	adds	r4, r5, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x14a>
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	f200 80b6 	bhi.w	8000dd6 <__udivmoddi4+0x2b6>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	eba4 0408 	sub.w	r4, r4, r8
 8000c70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c74:	e79f      	b.n	8000bb6 <__udivmoddi4+0x96>
 8000c76:	f1c7 0c20 	rsb	ip, r7, #32
 8000c7a:	40bb      	lsls	r3, r7
 8000c7c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c80:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c84:	fa01 f407 	lsl.w	r4, r1, r7
 8000c88:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c8c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c90:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c94:	4325      	orrs	r5, r4
 8000c96:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c9a:	0c2c      	lsrs	r4, r5, #16
 8000c9c:	fb08 3319 	mls	r3, r8, r9, r3
 8000ca0:	fa1f fa8e 	uxth.w	sl, lr
 8000ca4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cac:	429c      	cmp	r4, r3
 8000cae:	fa02 f207 	lsl.w	r2, r2, r7
 8000cb2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	f080 8087 	bcs.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f240 8084 	bls.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cca:	f1a9 0902 	sub.w	r9, r9, #2
 8000cce:	4473      	add	r3, lr
 8000cd0:	1b1b      	subs	r3, r3, r4
 8000cd2:	b2ad      	uxth	r5, r5
 8000cd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cdc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ce0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce4:	45a2      	cmp	sl, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	d26b      	bcs.n	8000dca <__udivmoddi4+0x2aa>
 8000cf2:	45a2      	cmp	sl, r4
 8000cf4:	d969      	bls.n	8000dca <__udivmoddi4+0x2aa>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4474      	add	r4, lr
 8000cfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	eba4 040a 	sub.w	r4, r4, sl
 8000d06:	454c      	cmp	r4, r9
 8000d08:	46c2      	mov	sl, r8
 8000d0a:	464b      	mov	r3, r9
 8000d0c:	d354      	bcc.n	8000db8 <__udivmoddi4+0x298>
 8000d0e:	d051      	beq.n	8000db4 <__udivmoddi4+0x294>
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d069      	beq.n	8000de8 <__udivmoddi4+0x2c8>
 8000d14:	ebb1 050a 	subs.w	r5, r1, sl
 8000d18:	eb64 0403 	sbc.w	r4, r4, r3
 8000d1c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d20:	40fd      	lsrs	r5, r7
 8000d22:	40fc      	lsrs	r4, r7
 8000d24:	ea4c 0505 	orr.w	r5, ip, r5
 8000d28:	e9c6 5400 	strd	r5, r4, [r6]
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f703 	lsr.w	r7, r0, r3
 8000d38:	4095      	lsls	r5, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d46:	4338      	orrs	r0, r7
 8000d48:	0c01      	lsrs	r1, r0, #16
 8000d4a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4e:	fa1f f885 	uxth.w	r8, r5
 8000d52:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb07 f308 	mul.w	r3, r7, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	fa04 f402 	lsl.w	r4, r4, r2
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x256>
 8000d66:	1869      	adds	r1, r5, r1
 8000d68:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d6c:	d22f      	bcs.n	8000dce <__udivmoddi4+0x2ae>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d92d      	bls.n	8000dce <__udivmoddi4+0x2ae>
 8000d72:	3f02      	subs	r7, #2
 8000d74:	4429      	add	r1, r5
 8000d76:	1acb      	subs	r3, r1, r3
 8000d78:	b281      	uxth	r1, r0
 8000d7a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb00 f308 	mul.w	r3, r0, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x27e>
 8000d8e:	1869      	adds	r1, r5, r1
 8000d90:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d94:	d217      	bcs.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d915      	bls.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4429      	add	r1, r5
 8000d9e:	1ac9      	subs	r1, r1, r3
 8000da0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da4:	e73b      	b.n	8000c1e <__udivmoddi4+0xfe>
 8000da6:	4637      	mov	r7, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e709      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000dac:	4607      	mov	r7, r0
 8000dae:	e6e7      	b.n	8000b80 <__udivmoddi4+0x60>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x8c>
 8000db4:	4541      	cmp	r1, r8
 8000db6:	d2ab      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000db8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dbc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	e7a4      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc6:	4660      	mov	r0, ip
 8000dc8:	e7e9      	b.n	8000d9e <__udivmoddi4+0x27e>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	e795      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dce:	4667      	mov	r7, ip
 8000dd0:	e7d1      	b.n	8000d76 <__udivmoddi4+0x256>
 8000dd2:	4681      	mov	r9, r0
 8000dd4:	e77c      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	442c      	add	r4, r5
 8000dda:	e747      	b.n	8000c6c <__udivmoddi4+0x14c>
 8000ddc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de0:	442b      	add	r3, r5
 8000de2:	e72f      	b.n	8000c44 <__udivmoddi4+0x124>
 8000de4:	4638      	mov	r0, r7
 8000de6:	e708      	b.n	8000bfa <__udivmoddi4+0xda>
 8000de8:	4637      	mov	r7, r6
 8000dea:	e6e9      	b.n	8000bc0 <__udivmoddi4+0xa0>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_DMA_Init+0x6c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <MX_DMA_Init+0x6c>)
 8000e00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_DMA_Init+0x6c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	200c      	movs	r0, #12
 8000e18:	f001 fdd7 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e1c:	200c      	movs	r0, #12
 8000e1e:	f001 fdf0 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	200e      	movs	r0, #14
 8000e28:	f001 fdcf 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e2c:	200e      	movs	r0, #14
 8000e2e:	f001 fde8 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	200f      	movs	r0, #15
 8000e38:	f001 fdc7 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e3c:	200f      	movs	r0, #15
 8000e3e:	f001 fde0 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2010      	movs	r0, #16
 8000e48:	f001 fdbf 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e4c:	2010      	movs	r0, #16
 8000e4e:	f001 fdd8 	bl	8002a02 <HAL_NVIC_EnableIRQ>

}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <make_dshot600_frame>:
  // it have to send 0 value of dshot frame for a while to reset
  // regardless of RC receiver value
}

void make_dshot600_frame(dshot_frame *motor_x, throttle_a value)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
  uint16_t packet = value << 1;
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	83fb      	strh	r3, [r7, #30]

  // compute checksum
  int csum = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  int csum_data = packet;
 8000e76:	8bfb      	ldrh	r3, [r7, #30]
 8000e78:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	e009      	b.n	8000e94 <make_dshot600_frame+0x34>
    csum ^=  csum_data;   // xor data by nibbles
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	4053      	eors	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
    csum_data >>= 4;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	111b      	asrs	r3, r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	3301      	adds	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	ddf2      	ble.n	8000e80 <make_dshot600_frame+0x20>
  }
  csum &= 0xf;
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	f003 030f 	and.w	r3, r3, #15
 8000ea0:	61bb      	str	r3, [r7, #24]

  // append checksum
  packet = (packet << 4) | csum;
 8000ea2:	8bfb      	ldrh	r3, [r7, #30]
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	83fb      	strh	r3, [r7, #30]

  // encoding
  int i;
  for (i = 0; i < 16; i++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	e011      	b.n	8000edc <make_dshot600_frame+0x7c>
  {
      motor_x[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;  // MSB first
 8000eb8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	da01      	bge.n	8000ec4 <make_dshot600_frame+0x64>
 8000ec0:	220e      	movs	r2, #14
 8000ec2:	e000      	b.n	8000ec6 <make_dshot600_frame+0x66>
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	440b      	add	r3, r1
 8000ece:	601a      	str	r2, [r3, #0]
      packet <<= 1;
 8000ed0:	8bfb      	ldrh	r3, [r7, #30]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	83fb      	strh	r3, [r7, #30]
  for (i = 0; i < 16; i++)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	ddea      	ble.n	8000eb8 <make_dshot600_frame+0x58>
  }

  motor_x[i++] = 0;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	60fa      	str	r2, [r7, #12]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
  motor_x[i++] = 0;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	60fa      	str	r2, [r7, #12]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
}
 8000f02:	bf00      	nop
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <run_dshot600>:

void run_dshot600(motors_s *motors, throttle_a value[])
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  // prepare dshot frame
  make_dshot600_frame(motors->motor_1, value[0]);
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4610      	mov	r0, r2
 8000f24:	f7ff ff9c 	bl	8000e60 <make_dshot600_frame>
  make_dshot600_frame(motors->motor_2, value[1]);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3302      	adds	r3, #2
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4610      	mov	r0, r2
 8000f38:	f7ff ff92 	bl	8000e60 <make_dshot600_frame>
  make_dshot600_frame(motors->motor_3, value[2]);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3304      	adds	r3, #4
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	f7ff ff88 	bl	8000e60 <make_dshot600_frame>
  make_dshot600_frame(motors->motor_4, value[3]);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	3306      	adds	r3, #6
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f7ff ff7e 	bl	8000e60 <make_dshot600_frame>

  // and send
  HAL_TIM_PWM_Start_DMA(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL, motors->motor_1, DSHOT_FRAME_SIZE);
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	2312      	movs	r3, #18
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <run_dshot600+0xa8>)
 8000f6c:	f003 fcb4 	bl	80048d8 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL, motors->motor_2, DSHOT_FRAME_SIZE);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8000f76:	2312      	movs	r3, #18
 8000f78:	210c      	movs	r1, #12
 8000f7a:	4810      	ldr	r0, [pc, #64]	; (8000fbc <run_dshot600+0xac>)
 8000f7c:	f003 fcac 	bl	80048d8 <HAL_TIM_PWM_Start_DMA>

  // commit : a0fc3be487dbd174be31abf8ce6e4e3b70c7a07b
  __HAL_TIM_RESET_HANDLE_STATE(&htim5);
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <run_dshot600+0xac>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_TIM_RESET_HANDLE_STATE(&htim2);
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <run_dshot600+0xa8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_PWM_Start_DMA(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL, motors->motor_3, DSHOT_FRAME_SIZE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8000f96:	2312      	movs	r3, #18
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <run_dshot600+0xac>)
 8000f9c:	f003 fc9c 	bl	80048d8 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL, motors->motor_4, DSHOT_FRAME_SIZE);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8000fa6:	2312      	movs	r3, #18
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <run_dshot600+0xa8>)
 8000fac:	f003 fc94 	bl	80048d8 <HAL_TIM_PWM_Start_DMA>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000520 	.word	0x20000520
 8000fbc:	200003e0 	.word	0x200003e0

08000fc0 <ibus_init>:
rc_channel_a test_channel[IBUS_USER_CHANNELS] = {0};


// init
ibus_state ibus_init()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	//HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);
	if(ibus_read_channel(test_channel) == IBUS_DATA_GOOD)
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <ibus_init+0x1c>)
 8000fc6:	f000 f80b 	bl	8000fe0 <ibus_read_channel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d101      	bne.n	8000fd4 <ibus_init+0x14>
		return IBUS_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e000      	b.n	8000fd6 <ibus_init+0x16>
	else
		return IBUS_NOT_OK;
 8000fd4:	2301      	movs	r3, #1
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200000b4 	.word	0x200000b4

08000fe0 <ibus_read_channel>:

// read
ibus_state ibus_read_channel(rc_channel_a *channel)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b08f      	sub	sp, #60	; 0x3c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	uint16_t channel_buffer[IBUS_MAX_CHANNLES] = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]
 8000ffa:	619a      	str	r2, [r3, #24]
	uint16_t checksum_cal, checksum_ibus;

	//HAL_UART_Receive(IBUS_UART, ibus_buffer, 32, 10);

	// is it ibus?
	if(ibus_buffer[0] == IBUS_LENGTH && ibus_buffer[1] == IBUS_COMMAND40)
 8000ffc:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <ibus_read_channel+0x100>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b20      	cmp	r3, #32
 8001002:	d165      	bne.n	80010d0 <ibus_read_channel+0xf0>
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <ibus_read_channel+0x100>)
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	2b40      	cmp	r3, #64	; 0x40
 800100a:	d161      	bne.n	80010d0 <ibus_read_channel+0xf0>
	{
		checksum_cal = 0xffff - ibus_buffer[0] - ibus_buffer[1];
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <ibus_read_channel+0x100>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <ibus_read_channel+0x100>)
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	b29b      	uxth	r3, r3
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	86fb      	strh	r3, [r7, #54]	; 0x36

		// data parsing
		for(int i = 0; i < IBUS_MAX_CHANNLES; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
 8001024:	e02a      	b.n	800107c <ibus_read_channel+0x9c>
		{
			// little endian
			channel_buffer[i] = (uint16_t)(ibus_buffer[i * 2 + 3] << 8 | ibus_buffer[i * 2 + 2]);
 8001026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	3303      	adds	r3, #3
 800102c:	4a2c      	ldr	r2, [pc, #176]	; (80010e0 <ibus_read_channel+0x100>)
 800102e:	5cd3      	ldrb	r3, [r2, r3]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001036:	3301      	adds	r3, #1
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4929      	ldr	r1, [pc, #164]	; (80010e0 <ibus_read_channel+0x100>)
 800103c:	5ccb      	ldrb	r3, [r1, r3]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	b29a      	uxth	r2, r3
 8001046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800104e:	440b      	add	r3, r1
 8001050:	f823 2c2c 	strh.w	r2, [r3, #-44]
			
			// checksum from user calculation
			checksum_cal = checksum_cal - ibus_buffer[i * 2 + 3] - ibus_buffer[i * 2 + 2];
 8001054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	3303      	adds	r3, #3
 800105a:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <ibus_read_channel+0x100>)
 800105c:	5cd3      	ldrb	r3, [r2, r3]
 800105e:	b29b      	uxth	r3, r3
 8001060:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	b29a      	uxth	r2, r3
 8001066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001068:	3301      	adds	r3, #1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	491c      	ldr	r1, [pc, #112]	; (80010e0 <ibus_read_channel+0x100>)
 800106e:	5ccb      	ldrb	r3, [r1, r3]
 8001070:	b29b      	uxth	r3, r3
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	86fb      	strh	r3, [r7, #54]	; 0x36
		for(int i = 0; i < IBUS_MAX_CHANNLES; i++)
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001078:	3301      	adds	r3, #1
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
 800107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107e:	2b0d      	cmp	r3, #13
 8001080:	ddd1      	ble.n	8001026 <ibus_read_channel+0x46>
		}

		// checksum from received data
		checksum_ibus = ibus_buffer[31] << 8 | ibus_buffer[30];
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <ibus_read_channel+0x100>)
 8001084:	7fdb      	ldrb	r3, [r3, #31]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <ibus_read_channel+0x100>)
 800108c:	7f9b      	ldrb	r3, [r3, #30]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21b      	sxth	r3, r3
 8001094:	857b      	strh	r3, [r7, #42]	; 0x2a

		// compare checksum 
		if(checksum_cal == checksum_ibus) 
 8001096:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001098:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800109a:	429a      	cmp	r2, r3
 800109c:	d116      	bne.n	80010cc <ibus_read_channel+0xec>
		{
			// return validated channel data
			for(int ch_index = 0; ch_index < IBUS_USER_CHANNELS; ch_index++)
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010a2:	e00e      	b.n	80010c2 <ibus_read_channel+0xe2>
			{
				channel[ch_index] = channel_buffer[ch_index];
 80010a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	441a      	add	r2, r3
 80010ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80010b4:	440b      	add	r3, r1
 80010b6:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80010ba:	8013      	strh	r3, [r2, #0]
			for(int ch_index = 0; ch_index < IBUS_USER_CHANNELS; ch_index++)
 80010bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010be:	3301      	adds	r3, #1
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	dded      	ble.n	80010a4 <ibus_read_channel+0xc4>
			}

			return IBUS_DATA_GOOD;
 80010c8:	2305      	movs	r3, #5
 80010ca:	e002      	b.n	80010d2 <ibus_read_channel+0xf2>
		}
		// lose data
		else
		{
			return IBUS_DATA_NOT_GOOD;
 80010cc:	2306      	movs	r3, #6
 80010ce:	e000      	b.n	80010d2 <ibus_read_channel+0xf2>
		
	}
	// it isn't ibus
	else
	{
		return IBUS_NOT_OK;
 80010d0:	2301      	movs	r3, #1
	}
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	373c      	adds	r7, #60	; 0x3c
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000094 	.word	0x20000094

080010e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <MX_GPIO_Init+0xc4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <MX_GPIO_Init+0xc4>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <MX_GPIO_Init+0xc4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <MX_GPIO_Init+0xc4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <MX_GPIO_Init+0xc4>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_GPIO_Init+0xc4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_GPIO_Init+0xc4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <MX_GPIO_Init+0xc4>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_GPIO_Init+0xc4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	4815      	ldr	r0, [pc, #84]	; (80011ac <MX_GPIO_Init+0xc8>)
 8001156:	f002 f981 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_ICM20948_CS_GPIO_Port, SPI_ICM20948_CS_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2110      	movs	r1, #16
 800115e:	4814      	ldr	r0, [pc, #80]	; (80011b0 <MX_GPIO_Init+0xcc>)
 8001160:	f002 f97c 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4619      	mov	r1, r3
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <MX_GPIO_Init+0xc8>)
 800117e:	f001 ffeb 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_ICM20948_CS_Pin;
 8001182:	2310      	movs	r3, #16
 8001184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_GPIO_Init+0xcc>)
 800119a:	f001 ffdd 	bl	8003158 <HAL_GPIO_Init>

}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020000 	.word	0x40020000

080011b4 <cs_high>:
offset_t my_offset = {0, };


// cs state
void cs_high()
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PIN_PORT, CS_PIN_NUMBER, SET);	
 80011b8:	2201      	movs	r2, #1
 80011ba:	2110      	movs	r1, #16
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <cs_high+0x14>)
 80011be:	f002 f94d 	bl	800345c <HAL_GPIO_WritePin>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40020000 	.word	0x40020000

080011cc <cs_low>:

void cs_low()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PIN_PORT, CS_PIN_NUMBER, RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2110      	movs	r1, #16
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <cs_low+0x14>)
 80011d6:	f002 f941 	bl	800345c <HAL_GPIO_WritePin>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40020000 	.word	0x40020000

080011e4 <select_user_bank>:

// user bank
void select_user_bank(userbank_e ub)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	icm20948_write(B0_REG_BANK_SEL, ub);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4619      	mov	r1, r3
 80011f2:	207f      	movs	r0, #127	; 0x7f
 80011f4:	f000 f82e 	bl	8001254 <icm20948_write>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <icm20948_read>:

// spi
void icm20948_read(uint8_t regaddr, uint8_t len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	460a      	mov	r2, r1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	71bb      	strb	r3, [r7, #6]
	cs_low();
 8001210:	f7ff ffdc 	bl	80011cc <cs_low>
	tx_buffer[0] = READ | regaddr;
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <icm20948_read+0x48>)
 800121e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_ICM20948, tx_buffer, 1, 10);
 8001220:	230a      	movs	r3, #10
 8001222:	2201      	movs	r2, #1
 8001224:	4908      	ldr	r1, [pc, #32]	; (8001248 <icm20948_read+0x48>)
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <icm20948_read+0x4c>)
 8001228:	f002 fdec 	bl	8003e04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_ICM20948, rx_buffer, len, 10);
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	b29a      	uxth	r2, r3
 8001230:	230a      	movs	r3, #10
 8001232:	4907      	ldr	r1, [pc, #28]	; (8001250 <icm20948_read+0x50>)
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <icm20948_read+0x4c>)
 8001236:	f002 ff19 	bl	800406c <HAL_SPI_Receive>
	cs_high();
 800123a:	f7ff ffbb 	bl	80011b4 <cs_high>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200000c0 	.word	0x200000c0
 800124c:	200002c8 	.word	0x200002c8
 8001250:	200000c8 	.word	0x200000c8

08001254 <icm20948_write>:

void icm20948_write(uint8_t regaddr, uint8_t data)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	71bb      	strb	r3, [r7, #6]
	cs_low();
 8001264:	f7ff ffb2 	bl	80011cc <cs_low>
	tx_buffer[0] = WRITE | regaddr;
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <icm20948_write+0x40>)
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = data;
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <icm20948_write+0x40>)
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	7053      	strb	r3, [r2, #1]
	HAL_SPI_Transmit(SPI_ICM20948, tx_buffer, 2, 10);
 8001274:	230a      	movs	r3, #10
 8001276:	2202      	movs	r2, #2
 8001278:	4906      	ldr	r1, [pc, #24]	; (8001294 <icm20948_write+0x40>)
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <icm20948_write+0x44>)
 800127c:	f002 fdc2 	bl	8003e04 <HAL_SPI_Transmit>
	cs_high();
 8001280:	f7ff ff98 	bl	80011b4 <cs_high>

	// necessary
	HAL_Delay(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f001 faa3 	bl	80027d0 <HAL_Delay>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000c0 	.word	0x200000c0
 8001298:	200002c8 	.word	0x200002c8

0800129c <whoami_icm20948>:
	HAL_Delay(1);
}

// check sensor id
uint8_t whoami_icm20948()
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	select_user_bank(userbank_0);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff ff9f 	bl	80011e4 <select_user_bank>
	icm20948_read(B0_WHO_AM_I, 1);
 80012a6:	2101      	movs	r1, #1
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff ffa9 	bl	8001200 <icm20948_read>

	return rx_buffer[0];
 80012ae:	4b02      	ldr	r3, [pc, #8]	; (80012b8 <whoami_icm20948+0x1c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200000c8 	.word	0x200000c8

080012bc <icm20948_init>:
	return rx_buffer[0];	// 0x09
}

// initialize
void icm20948_init()
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	// ICM20948 Reset
	select_user_bank(userbank_0);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff ff8f 	bl	80011e4 <select_user_bank>
	icm20948_write(B0_PWR_MGMT_1, DEVICE_RESET | 0x41);	// 0x41 is reset value
 80012c6:	21c1      	movs	r1, #193	; 0xc1
 80012c8:	2006      	movs	r0, #6
 80012ca:	f7ff ffc3 	bl	8001254 <icm20948_write>

	// SPI mode only
	select_user_bank(userbank_0);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ff88 	bl	80011e4 <select_user_bank>
	icm20948_write(B0_USER_CTRL, I2C_IF_DIS);
 80012d4:	2110      	movs	r1, #16
 80012d6:	2003      	movs	r0, #3
 80012d8:	f7ff ffbc 	bl	8001254 <icm20948_write>

	// Wake the chip and Recommended clock selection(CLKSEL = 1)
	select_user_bank(userbank_0);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ff81 	bl	80011e4 <select_user_bank>
	icm20948_write(B0_PWR_MGMT_1, WAKE | CLKSEL);
 80012e2:	2101      	movs	r1, #1
 80012e4:	2006      	movs	r0, #6
 80012e6:	f7ff ffb5 	bl	8001254 <icm20948_write>

	// ODR start time alignment
	select_user_bank(userbank_2);
 80012ea:	2020      	movs	r0, #32
 80012ec:	f7ff ff7a 	bl	80011e4 <select_user_bank>
	icm20948_write(B2_ODR_ALIGN_EN, ODR_START_TIME_ALIGNMENT_ENABLE);
 80012f0:	2101      	movs	r1, #1
 80012f2:	2009      	movs	r0, #9
 80012f4:	f7ff ffae 	bl	8001254 <icm20948_write>

	// Set Gyroscope ODR and Scale
	select_user_bank(userbank_2);
 80012f8:	2020      	movs	r0, #32
 80012fa:	f7ff ff73 	bl	80011e4 <select_user_bank>
	icm20948_write(B2_GYRO_SMPLRT_DIV, Gyro_ODR_1125Hz);				// Gyro ODR = 1.125kHz
 80012fe:	2100      	movs	r1, #0
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff ffa7 	bl	8001254 <icm20948_write>
	icm20948_write(B2_GYRO_CONFIG_1, GYRO_FS_SEL_2000dps | GYRO_FCHOICE);	// Gyro scale ±2000dps and Enable DLPF
 8001306:	2107      	movs	r1, #7
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff ffa3 	bl	8001254 <icm20948_write>
																			// 자이로 스케일 키우면 잔떨림은 감지x
	// Set Accelerometer ODR and Scale
	icm20948_write(B2_ACCEL_SMPLRT_DIV_2, Accel_ODR_1125Hz);			// Accel ODR = 1.125kHz
 800130e:	2100      	movs	r1, #0
 8001310:	2011      	movs	r0, #17
 8001312:	f7ff ff9f 	bl	8001254 <icm20948_write>
	icm20948_write(B2_ACCEL_CONFIG, ACCEL_FS_SEL_2g | ACCEL_FCHOICE);	// Accel scale ±2g and Enable DLPF
 8001316:	2101      	movs	r1, #1
 8001318:	2014      	movs	r0, #20
 800131a:	f7ff ff9b 	bl	8001254 <icm20948_write>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <read_gyro_lsb>:



// read gyro
void read_gyro_lsb(icm20948_t* icm20948)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	icm20948_read(B0_GYRO_XOUT_H, 6);
 800132c:	2106      	movs	r1, #6
 800132e:	2033      	movs	r0, #51	; 0x33
 8001330:	f7ff ff66 	bl	8001200 <icm20948_read>

	// calibration
	if(my_offset.offsetting == 1)
 8001334:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <read_gyro_lsb+0xd0>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d036      	beq.n	80013aa <read_gyro_lsb+0x86>
	{
		icm20948->gyro_lsb_x = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]) - my_offset.gyro_x;
 800133c:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <read_gyro_lsb+0xd4>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <read_gyro_lsb+0xd4>)
 8001346:	785b      	ldrb	r3, [r3, #1]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21b      	sxth	r3, r3
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <read_gyro_lsb+0xd0>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	b29b      	uxth	r3, r3
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	801a      	strh	r2, [r3, #0]
		icm20948->gyro_lsb_y = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]) - my_offset.gyro_y;
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <read_gyro_lsb+0xd4>)
 8001362:	789b      	ldrb	r3, [r3, #2]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21a      	sxth	r2, r3
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <read_gyro_lsb+0xd4>)
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21b      	sxth	r3, r3
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <read_gyro_lsb+0xd0>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	b29b      	uxth	r3, r3
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	805a      	strh	r2, [r3, #2]
		icm20948->gyro_lsb_z = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]) - my_offset.gyro_z;
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <read_gyro_lsb+0xd4>)
 8001386:	791b      	ldrb	r3, [r3, #4]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b21a      	sxth	r2, r3
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <read_gyro_lsb+0xd4>)
 800138e:	795b      	ldrb	r3, [r3, #5]
 8001390:	b21b      	sxth	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b21b      	sxth	r3, r3
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <read_gyro_lsb+0xd0>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	b29b      	uxth	r3, r3
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	809a      	strh	r2, [r3, #4]
	{
		icm20948->gyro_lsb_x = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]);
		icm20948->gyro_lsb_y = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]);
		icm20948->gyro_lsb_z = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]);
	}
}
 80013a8:	e020      	b.n	80013ec <read_gyro_lsb+0xc8>
		icm20948->gyro_lsb_x = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]);
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <read_gyro_lsb+0xd4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <read_gyro_lsb+0xd4>)
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	801a      	strh	r2, [r3, #0]
		icm20948->gyro_lsb_y = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]);
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <read_gyro_lsb+0xd4>)
 80013c2:	789b      	ldrb	r3, [r3, #2]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <read_gyro_lsb+0xd4>)
 80013ca:	78db      	ldrb	r3, [r3, #3]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	805a      	strh	r2, [r3, #2]
		icm20948->gyro_lsb_z = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]);
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <read_gyro_lsb+0xd4>)
 80013d8:	791b      	ldrb	r3, [r3, #4]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <read_gyro_lsb+0xd4>)
 80013e0:	795b      	ldrb	r3, [r3, #5]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	809a      	strh	r2, [r3, #4]
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200000d0 	.word	0x200000d0
 80013f8:	200000c8 	.word	0x200000c8
 80013fc:	00000000 	.word	0x00000000

08001400 <read_gyro_dps>:

void read_gyro_dps(icm20948_t* icm20948)	
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	// get lsb data
	read_gyro_lsb(icm20948);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff8b 	bl	8001324 <read_gyro_lsb>

	// divide by 131(lsb/dps)
	icm20948->gyro_dps_x = icm20948->gyro_lsb_x / 16.4;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f831 	bl	800047c <__aeabi_i2d>
 800141a:	a317      	add	r3, pc, #92	; (adr r3, 8001478 <read_gyro_dps+0x78>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f9c0 	bl	80007a4 <__aeabi_ddiv>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	icm20948->gyro_dps_y = icm20948->gyro_lsb_y / 16.4;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f821 	bl	800047c <__aeabi_i2d>
 800143a:	a30f      	add	r3, pc, #60	; (adr r3, 8001478 <read_gyro_dps+0x78>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f9b0 	bl	80007a4 <__aeabi_ddiv>
 8001444:	4603      	mov	r3, r0
 8001446:	460c      	mov	r4, r1
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	icm20948->gyro_dps_z = icm20948->gyro_lsb_z / 16.4;  
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f811 	bl	800047c <__aeabi_i2d>
 800145a:	a307      	add	r3, pc, #28	; (adr r3, 8001478 <read_gyro_dps+0x78>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f9a0 	bl	80007a4 <__aeabi_ddiv>
 8001464:	4603      	mov	r3, r0
 8001466:	460c      	mov	r4, r1
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	bf00      	nop
 8001478:	66666666 	.word	0x66666666
 800147c:	40306666 	.word	0x40306666

08001480 <read_accel_lsb>:


// read aceel
void read_accel_lsb(icm20948_t* icm20948)	// 22us
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	icm20948_read(B0_ACCEL_XOUT_H, 6);
 8001488:	2106      	movs	r1, #6
 800148a:	202d      	movs	r0, #45	; 0x2d
 800148c:	f7ff feb8 	bl	8001200 <icm20948_read>
	
	if(my_offset.offsetting == 1)
 8001490:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <read_accel_lsb+0xd0>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d036      	beq.n	8001506 <read_accel_lsb+0x86>
	{
		icm20948->accel_lsb_x = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]) - my_offset.accel_x;
 8001498:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <read_accel_lsb+0xd4>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b21a      	sxth	r2, r3
 80014a0:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <read_accel_lsb+0xd4>)
 80014a2:	785b      	ldrb	r3, [r3, #1]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <read_accel_lsb+0xd0>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	841a      	strh	r2, [r3, #32]
		icm20948->accel_lsb_y = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]) - my_offset.accel_y;
 80014bc:	4b25      	ldr	r3, [pc, #148]	; (8001554 <read_accel_lsb+0xd4>)
 80014be:	789b      	ldrb	r3, [r3, #2]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <read_accel_lsb+0xd4>)
 80014c6:	78db      	ldrb	r3, [r3, #3]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <read_accel_lsb+0xd0>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b21a      	sxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	845a      	strh	r2, [r3, #34]	; 0x22
		icm20948->accel_lsb_z = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]) - my_offset.accel_z;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <read_accel_lsb+0xd4>)
 80014e2:	791b      	ldrb	r3, [r3, #4]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <read_accel_lsb+0xd4>)
 80014ea:	795b      	ldrb	r3, [r3, #5]
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <read_accel_lsb+0xd0>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b21a      	sxth	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	849a      	strh	r2, [r3, #36]	; 0x24
	{
		icm20948->accel_lsb_x = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]);
		icm20948->accel_lsb_y = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]);
		icm20948->accel_lsb_z = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]);
	}
}
 8001504:	e020      	b.n	8001548 <read_accel_lsb+0xc8>
		icm20948->accel_lsb_x = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]);
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <read_accel_lsb+0xd4>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <read_accel_lsb+0xd4>)
 8001510:	785b      	ldrb	r3, [r3, #1]
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21a      	sxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	841a      	strh	r2, [r3, #32]
		icm20948->accel_lsb_y = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]);
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <read_accel_lsb+0xd4>)
 800151e:	789b      	ldrb	r3, [r3, #2]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <read_accel_lsb+0xd4>)
 8001526:	78db      	ldrb	r3, [r3, #3]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21a      	sxth	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	845a      	strh	r2, [r3, #34]	; 0x22
		icm20948->accel_lsb_z = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]);
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <read_accel_lsb+0xd4>)
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <read_accel_lsb+0xd4>)
 800153c:	795b      	ldrb	r3, [r3, #5]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21a      	sxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200000d0 	.word	0x200000d0
 8001554:	200000c8 	.word	0x200000c8

08001558 <read_accel_g>:

void read_accel_g(icm20948_t* icm20948)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	read_accel_lsb(icm20948);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff8d 	bl	8001480 <read_accel_lsb>

	icm20948->accel_g_x = icm20948->accel_lsb_x / 16384.0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ff85 	bl	800047c <__aeabi_i2d>
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <read_accel_g+0x88>)
 8001578:	f7ff f914 	bl	80007a4 <__aeabi_ddiv>
 800157c:	4603      	mov	r3, r0
 800157e:	460c      	mov	r4, r1
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	icm20948->accel_g_y = icm20948->accel_lsb_y / 16384.0;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff75 	bl	800047c <__aeabi_i2d>
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <read_accel_g+0x88>)
 8001598:	f7ff f904 	bl	80007a4 <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	icm20948->accel_g_z = (icm20948->accel_lsb_z / 16384.0) + 1;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ff65 	bl	800047c <__aeabi_i2d>
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <read_accel_g+0x88>)
 80015b8:	f7ff f8f4 	bl	80007a4 <__aeabi_ddiv>
 80015bc:	4603      	mov	r3, r0
 80015be:	460c      	mov	r4, r1
 80015c0:	4618      	mov	r0, r3
 80015c2:	4621      	mov	r1, r4
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <read_accel_g+0x8c>)
 80015ca:	f7fe fe0b 	bl	80001e4 <__adddf3>
 80015ce:	4603      	mov	r3, r0
 80015d0:	460c      	mov	r4, r1
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	40d00000 	.word	0x40d00000
 80015e4:	3ff00000 	.word	0x3ff00000

080015e8 <calibrate_icm20948>:
}


// calibrate gyro and accel
void calibrate_icm20948(icm20948_t* icm20948, uint16_t samples)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
	// for read function
	select_user_bank(userbank_0);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fdf5 	bl	80011e4 <select_user_bank>

	// average
	for(int i = 0; i < samples; i++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	e038      	b.n	8001672 <calibrate_icm20948+0x8a>
	{
		read_gyro_lsb(icm20948);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fe8f 	bl	8001324 <read_gyro_lsb>
		read_accel_lsb(icm20948);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff3a 	bl	8001480 <read_accel_lsb>

		my_offset.gyro_x += icm20948->gyro_lsb_x;
 800160c:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <calibrate_icm20948+0x108>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001616:	4413      	add	r3, r2
 8001618:	4a35      	ldr	r2, [pc, #212]	; (80016f0 <calibrate_icm20948+0x108>)
 800161a:	6053      	str	r3, [r2, #4]
		my_offset.gyro_y += icm20948->gyro_lsb_y;
 800161c:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <calibrate_icm20948+0x108>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001626:	4413      	add	r3, r2
 8001628:	4a31      	ldr	r2, [pc, #196]	; (80016f0 <calibrate_icm20948+0x108>)
 800162a:	6093      	str	r3, [r2, #8]
		my_offset.gyro_z += icm20948->gyro_lsb_z;
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <calibrate_icm20948+0x108>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001636:	4413      	add	r3, r2
 8001638:	4a2d      	ldr	r2, [pc, #180]	; (80016f0 <calibrate_icm20948+0x108>)
 800163a:	60d3      	str	r3, [r2, #12]

		my_offset.accel_x += icm20948->accel_lsb_x;
 800163c:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <calibrate_icm20948+0x108>)
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8001646:	4413      	add	r3, r2
 8001648:	4a29      	ldr	r2, [pc, #164]	; (80016f0 <calibrate_icm20948+0x108>)
 800164a:	6113      	str	r3, [r2, #16]
		my_offset.accel_y += icm20948->accel_lsb_y;
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <calibrate_icm20948+0x108>)
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8001656:	4413      	add	r3, r2
 8001658:	4a25      	ldr	r2, [pc, #148]	; (80016f0 <calibrate_icm20948+0x108>)
 800165a:	6153      	str	r3, [r2, #20]
		my_offset.accel_z += icm20948->accel_lsb_z;
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <calibrate_icm20948+0x108>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8001666:	4413      	add	r3, r2
 8001668:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <calibrate_icm20948+0x108>)
 800166a:	6193      	str	r3, [r2, #24]
	for(int i = 0; i < samples; i++)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3301      	adds	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	429a      	cmp	r2, r3
 8001678:	dbc2      	blt.n	8001600 <calibrate_icm20948+0x18>
	}

	my_offset.gyro_x /= samples;
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <calibrate_icm20948+0x108>)
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	fb92 f3f3 	sdiv	r3, r2, r3
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <calibrate_icm20948+0x108>)
 8001686:	6053      	str	r3, [r2, #4]
	my_offset.gyro_y /= samples;	
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <calibrate_icm20948+0x108>)
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001692:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <calibrate_icm20948+0x108>)
 8001694:	6093      	str	r3, [r2, #8]
	my_offset.gyro_z /= samples;
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <calibrate_icm20948+0x108>)
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	fb92 f3f3 	sdiv	r3, r2, r3
 80016a0:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <calibrate_icm20948+0x108>)
 80016a2:	60d3      	str	r3, [r2, #12]

	my_offset.accel_x /= samples;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <calibrate_icm20948+0x108>)
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ae:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <calibrate_icm20948+0x108>)
 80016b0:	6113      	str	r3, [r2, #16]
	my_offset.accel_y /= samples;	
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <calibrate_icm20948+0x108>)
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80016bc:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <calibrate_icm20948+0x108>)
 80016be:	6153      	str	r3, [r2, #20]
	my_offset.accel_z /= samples;
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <calibrate_icm20948+0x108>)
 80016c2:	699a      	ldr	r2, [r3, #24]
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <calibrate_icm20948+0x108>)
 80016cc:	6193      	str	r3, [r2, #24]
	
	// 
	my_offset.gyro_x = 25;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <calibrate_icm20948+0x108>)
 80016d0:	2219      	movs	r2, #25
 80016d2:	605a      	str	r2, [r3, #4]
	my_offset.gyro_y = 15;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <calibrate_icm20948+0x108>)
 80016d6:	220f      	movs	r2, #15
 80016d8:	609a      	str	r2, [r3, #8]

	// offset flag
	my_offset.offsetting = 1;
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <calibrate_icm20948+0x108>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]

	// for read function
	select_user_bank(userbank_0);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff fd7f 	bl	80011e4 <select_user_bank>
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200000d0 	.word	0x200000d0
 80016f4:	00000000 	.word	0x00000000

080016f8 <complementary_filter>:


void complementary_filter(icm20948_t *icm20948, angle_t *angle)
{
 80016f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
	read_gyro_dps(icm20948);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fe7b 	bl	8001400 <read_gyro_dps>
	read_accel_g(icm20948);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ff24 	bl	8001558 <read_accel_g>

	// angle from gyro
	// dt : 0.89ms
	angle->gyro_angle_x += icm20948->gyro_dps_x * dt;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800171c:	a38e      	add	r3, pc, #568	; (adr r3, 8001958 <complementary_filter+0x260>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7fe ff15 	bl	8000550 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4620      	mov	r0, r4
 800172c:	4629      	mov	r1, r5
 800172e:	f7fe fd59 	bl	80001e4 <__adddf3>
 8001732:	4603      	mov	r3, r0
 8001734:	460c      	mov	r4, r1
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	e9c2 3400 	strd	r3, r4, [r2]
	angle->gyro_angle_y += icm20948->gyro_dps_y * dt;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001748:	a383      	add	r3, pc, #524	; (adr r3, 8001958 <complementary_filter+0x260>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe feff 	bl	8000550 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4620      	mov	r0, r4
 8001758:	4629      	mov	r1, r5
 800175a:	f7fe fd43 	bl	80001e4 <__adddf3>
 800175e:	4603      	mov	r3, r0
 8001760:	460c      	mov	r4, r1
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	e9c2 3402 	strd	r3, r4, [r2, #8]
	angle->gyro_angle_z += icm20948->gyro_dps_z * dt;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001774:	a378      	add	r3, pc, #480	; (adr r3, 8001958 <complementary_filter+0x260>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe fee9 	bl	8000550 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd2d 	bl	80001e4 <__adddf3>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	e9c2 3404 	strd	r3, r4, [r2, #16]

	// angle from accel
	angle->accel_angle_x = atan(icm20948->accel_g_y / sqrt( pow(icm20948->accel_g_x, 2) + pow(icm20948->accel_g_z, 2) ) ) * 57.3;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80017a0:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8001950 <complementary_filter+0x258>
 80017a4:	eeb0 0a47 	vmov.f32	s0, s14
 80017a8:	eef0 0a67 	vmov.f32	s1, s15
 80017ac:	f004 ff0a 	bl	80065c4 <pow>
 80017b0:	ec59 8b10 	vmov	r8, r9, d0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80017ba:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8001950 <complementary_filter+0x258>
 80017be:	eeb0 0a47 	vmov.f32	s0, s14
 80017c2:	eef0 0a67 	vmov.f32	s1, s15
 80017c6:	f004 fefd 	bl	80065c4 <pow>
 80017ca:	ec53 2b10 	vmov	r2, r3, d0
 80017ce:	4640      	mov	r0, r8
 80017d0:	4649      	mov	r1, r9
 80017d2:	f7fe fd07 	bl	80001e4 <__adddf3>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	ec43 2b17 	vmov	d7, r2, r3
 80017de:	eeb0 0a47 	vmov.f32	s0, s14
 80017e2:	eef0 0a67 	vmov.f32	s1, s15
 80017e6:	f005 f85d 	bl	80068a4 <sqrt>
 80017ea:	ec53 2b10 	vmov	r2, r3, d0
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f7fe ffd7 	bl	80007a4 <__aeabi_ddiv>
 80017f6:	4603      	mov	r3, r0
 80017f8:	460c      	mov	r4, r1
 80017fa:	ec44 3b17 	vmov	d7, r3, r4
 80017fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001802:	eef0 0a67 	vmov.f32	s1, s15
 8001806:	f004 fd33 	bl	8006270 <atan>
 800180a:	ec51 0b10 	vmov	r0, r1, d0
 800180e:	a354      	add	r3, pc, #336	; (adr r3, 8001960 <complementary_filter+0x268>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fe9c 	bl	8000550 <__aeabi_dmul>
 8001818:	4603      	mov	r3, r0
 800181a:	460c      	mov	r4, r1
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	angle->accel_angle_y = atan(icm20948->accel_g_x / sqrt( pow(icm20948->accel_g_y, 2) + pow(icm20948->accel_g_z, 2) ) ) * 57.3;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800182e:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8001950 <complementary_filter+0x258>
 8001832:	eeb0 0a47 	vmov.f32	s0, s14
 8001836:	eef0 0a67 	vmov.f32	s1, s15
 800183a:	f004 fec3 	bl	80065c4 <pow>
 800183e:	ec59 8b10 	vmov	r8, r9, d0
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001848:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001950 <complementary_filter+0x258>
 800184c:	eeb0 0a47 	vmov.f32	s0, s14
 8001850:	eef0 0a67 	vmov.f32	s1, s15
 8001854:	f004 feb6 	bl	80065c4 <pow>
 8001858:	ec53 2b10 	vmov	r2, r3, d0
 800185c:	4640      	mov	r0, r8
 800185e:	4649      	mov	r1, r9
 8001860:	f7fe fcc0 	bl	80001e4 <__adddf3>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	ec43 2b17 	vmov	d7, r2, r3
 800186c:	eeb0 0a47 	vmov.f32	s0, s14
 8001870:	eef0 0a67 	vmov.f32	s1, s15
 8001874:	f005 f816 	bl	80068a4 <sqrt>
 8001878:	ec53 2b10 	vmov	r2, r3, d0
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe ff90 	bl	80007a4 <__aeabi_ddiv>
 8001884:	4603      	mov	r3, r0
 8001886:	460c      	mov	r4, r1
 8001888:	ec44 3b17 	vmov	d7, r3, r4
 800188c:	eeb0 0a47 	vmov.f32	s0, s14
 8001890:	eef0 0a67 	vmov.f32	s1, s15
 8001894:	f004 fcec 	bl	8006270 <atan>
 8001898:	ec51 0b10 	vmov	r0, r1, d0
 800189c:	a330      	add	r3, pc, #192	; (adr r3, 8001960 <complementary_filter+0x268>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fe55 	bl	8000550 <__aeabi_dmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	460c      	mov	r4, r1
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	e9c2 3408 	strd	r3, r4, [r2, #32]
	angle->accel_angle_z = 0;
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	f04f 0400 	mov.w	r4, #0
 80018ba:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	// angle from complementary filter
	angle->angle_x = ALPHA * angle->gyro_angle_x + (1 - ALPHA) * angle->accel_angle_x;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c4:	a328      	add	r3, pc, #160	; (adr r3, 8001968 <complementary_filter+0x270>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fe41 	bl	8000550 <__aeabi_dmul>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	4625      	mov	r5, r4
 80018d4:	461c      	mov	r4, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018dc:	a324      	add	r3, pc, #144	; (adr r3, 8001970 <complementary_filter+0x278>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fe35 	bl	8000550 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe fc79 	bl	80001e4 <__adddf3>
 80018f2:	4603      	mov	r3, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	angle->angle_y = ALPHA * angle->gyro_angle_y + (1 - ALPHA) * angle->accel_angle_y;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001902:	a319      	add	r3, pc, #100	; (adr r3, 8001968 <complementary_filter+0x270>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fe22 	bl	8000550 <__aeabi_dmul>
 800190c:	4603      	mov	r3, r0
 800190e:	460c      	mov	r4, r1
 8001910:	4625      	mov	r5, r4
 8001912:	461c      	mov	r4, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800191a:	a315      	add	r3, pc, #84	; (adr r3, 8001970 <complementary_filter+0x278>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fe16 	bl	8000550 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4620      	mov	r0, r4
 800192a:	4629      	mov	r1, r5
 800192c:	f7fe fc5a 	bl	80001e4 <__adddf3>
 8001930:	4603      	mov	r3, r0
 8001932:	460c      	mov	r4, r1
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	angle->angle_z = angle->gyro_angle_z;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001950:	00000000 	.word	0x00000000
 8001954:	40000000 	.word	0x40000000
 8001958:	f68be2f8 	.word	0xf68be2f8
 800195c:	3f4d2178 	.word	0x3f4d2178
 8001960:	66666666 	.word	0x66666666
 8001964:	404ca666 	.word	0x404ca666
 8001968:	70a3d70a 	.word	0x70a3d70a
 800196c:	3fef0a3d 	.word	0x3fef0a3d
 8001970:	eb851ec0 	.word	0xeb851ec0
 8001974:	3f9eb851 	.word	0x3f9eb851

08001978 <reset_my_variable>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

// reset variable if drone is disarming
void reset_my_variable()
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	// receiver
	//memset(&my_channel, 0, sizeof(rc_channel_a) * IBUS_USER_CHANNELS);

	// sensor
	memset(&my_icm20948, 0, sizeof(icm20948_t));
 800197c:	2240      	movs	r2, #64	; 0x40
 800197e:	2100      	movs	r1, #0
 8001980:	4807      	ldr	r0, [pc, #28]	; (80019a0 <reset_my_variable+0x28>)
 8001982:	f004 fc6d 	bl	8006260 <memset>
	memset(&my_angle, 0, sizeof(angle_t));
 8001986:	2248      	movs	r2, #72	; 0x48
 8001988:	2100      	movs	r1, #0
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <reset_my_variable+0x2c>)
 800198c:	f004 fc68 	bl	8006260 <memset>

	// motor
	memset(&my_value, 0, sizeof(throttle_a) * 4);
 8001990:	2208      	movs	r2, #8
 8001992:	2100      	movs	r1, #0
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <reset_my_variable+0x30>)
 8001996:	f004 fc63 	bl	8006260 <memset>
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200000f0 	.word	0x200000f0
 80019a4:	20000130 	.word	0x20000130
 80019a8:	20000178 	.word	0x20000178

080019ac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */


// preemption priority : 1
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  // 1.125khz loop
  if (htim == &htim11)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d147      	bne.n	8001a4c <HAL_TIM_PeriodElapsedCallback+0xa0>
  {

	  // RC receiver
	  if(my_ibus_state == IBUS_DATA_READY && ibus_read_channel(my_channel) == IBUS_DATA_GOOD)
 80019bc:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d10c      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0x32>
 80019c4:	4825      	ldr	r0, [pc, #148]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80019c6:	f7ff fb0b 	bl	8000fe0 <ibus_read_channel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d106      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0x32>
	  {
		  my_ibus_state = IBUS_READY;
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80019d2:	2202      	movs	r2, #2
 80019d4:	701a      	strb	r2, [r3, #0]
		  my_ibus_check = 0;
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e005      	b.n	80019ea <HAL_TIM_PeriodElapsedCallback+0x3e>
	  }
	  else
	  {
		  my_ibus_check++;
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019e8:	701a      	strb	r2, [r3, #0]
	  }

	  // fail-safe
	  if(my_ibus_check > 10)
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b0a      	cmp	r3, #10
 80019f0:	d902      	bls.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x4c>
	  {
		  my_ibus_state = IBUS_MISSING;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80019f4:	2203      	movs	r2, #3
 80019f6:	701a      	strb	r2, [r3, #0]
	  }


	  // arming & fail-safe
	  if(my_channel[4] == 2000 && my_ibus_state != IBUS_MISSING)
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80019fa:	891b      	ldrh	r3, [r3, #8]
 80019fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a00:	d113      	bne.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x7e>
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d00f      	beq.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x7e>
	  {
		  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a10:	4814      	ldr	r0, [pc, #80]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001a12:	f001 fd23 	bl	800345c <HAL_GPIO_WritePin>

		  // angle
		  complementary_filter(&my_icm20948, &my_angle);
 8001a16:	4914      	ldr	r1, [pc, #80]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a18:	4814      	ldr	r0, [pc, #80]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a1a:	f7ff fe6d 	bl	80016f8 <complementary_filter>

		  // pid
		  //p_control(&my_balancing_force, &my_target_angle, &my_angle);

		  // distribute
		  distribute(my_value, my_channel, &my_balancing_force);
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001a20:	490e      	ldr	r1, [pc, #56]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a22:	4814      	ldr	r0, [pc, #80]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a24:	f000 f906 	bl	8001c34 <distribute>
 8001a28:	e007      	b.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0x8e>
	  }

	  // disarming
	  else
	  {
		  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001a32:	f001 fd13 	bl	800345c <HAL_GPIO_WritePin>

		  // reset variable
		  reset_my_variable();
 8001a36:	f7ff ff9f 	bl	8001978 <reset_my_variable>
	  }

	  // send throttle
	  run_dshot600(&my_motors, my_value);
 8001a3a:	490e      	ldr	r1, [pc, #56]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a3c:	480e      	ldr	r0, [pc, #56]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a3e:	f7ff fa67 	bl	8000f10 <run_dshot600>

	  // running time
	  period_us = __HAL_TIM_GET_COUNTER(&htim11);
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001a4a:	6013      	str	r3, [r2, #0]

  }

}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000420 	.word	0x20000420
 8001a58:	20000180 	.word	0x20000180
 8001a5c:	20000184 	.word	0x20000184
 8001a60:	20000181 	.word	0x20000181
 8001a64:	40020800 	.word	0x40020800
 8001a68:	20000130 	.word	0x20000130
 8001a6c:	200000f0 	.word	0x200000f0
 8001a70:	20000190 	.word	0x20000190
 8001a74:	20000178 	.word	0x20000178
 8001a78:	200001a8 	.word	0x200001a8
 8001a7c:	200000ec 	.word	0x200000ec

08001a80 <HAL_UART_RxCpltCallback>:


// ibus protocol receive interrupt
// preemption priority : 0
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	// receive send data every 7ms

	if(huart->Instance == IBUS_UART_INSTANCE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_UART_RxCpltCallback+0x2c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d107      	bne.n	8001aa2 <HAL_UART_RxCpltCallback+0x22>
	{
		my_ibus_state = IBUS_DATA_READY;
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <HAL_UART_RxCpltCallback+0x30>)
 8001a94:	2204      	movs	r2, #4
 8001a96:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);
 8001a98:	2220      	movs	r2, #32
 8001a9a:	4906      	ldr	r1, [pc, #24]	; (8001ab4 <HAL_UART_RxCpltCallback+0x34>)
 8001a9c:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <HAL_UART_RxCpltCallback+0x38>)
 8001a9e:	f003 fdae 	bl	80055fe <HAL_UART_Receive_IT>

	}

}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	20000180 	.word	0x20000180
 8001ab4:	20000094 	.word	0x20000094
 8001ab8:	20000560 	.word	0x20000560

08001abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac2:	f000 fe13 	bl	80026ec <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac6:	f000 f849 	bl	8001b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aca:	f7ff fb0b 	bl	80010e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ace:	f7ff f98f 	bl	8000df0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001ad2:	f000 f99f 	bl	8001e14 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001ad6:	f000 fabf 	bl	8002058 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001ada:	f000 fb1f 	bl	800211c <MX_TIM5_Init>

  MX_TIM11_Init();
 8001ade:	f000 fb81 	bl	80021e4 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 8001ae2:	f000 fd5f 	bl	80025a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // check rc receiver
  HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	4917      	ldr	r1, [pc, #92]	; (8001b48 <main+0x8c>)
 8001aea:	4818      	ldr	r0, [pc, #96]	; (8001b4c <main+0x90>)
 8001aec:	f003 fd87 	bl	80055fe <HAL_UART_Receive_IT>
  while(ibus_init() != IBUS_OK);
 8001af0:	bf00      	nop
 8001af2:	f7ff fa65 	bl	8000fc0 <ibus_init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1fa      	bne.n	8001af2 <main+0x36>

  // check sensor id
  while(whoami_icm20948() != DEVICE_ID_ICM20948);
 8001afc:	bf00      	nop
 8001afe:	f7ff fbcd 	bl	800129c <whoami_icm20948>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2bea      	cmp	r3, #234	; 0xea
 8001b06:	d1fa      	bne.n	8001afe <main+0x42>
  //while(whoami_ak09916() != DEVICE_ID_AK09916);

  // init sensor
  icm20948_init();
 8001b08:	f7ff fbd8 	bl	80012bc <icm20948_init>
  //ak09916_init();

  // calibrate sensor
  // I think there is a optimized and fixed offset value
  HAL_Delay(100);
 8001b0c:	2064      	movs	r0, #100	; 0x64
 8001b0e:	f000 fe5f 	bl	80027d0 <HAL_Delay>
  calibrate_icm20948(&my_icm20948, 200);
 8001b12:	21c8      	movs	r1, #200	; 0xc8
 8001b14:	480e      	ldr	r0, [pc, #56]	; (8001b50 <main+0x94>)
 8001b16:	f7ff fd67 	bl	80015e8 <calibrate_icm20948>


  // finish init
  for(int i = 0; i < 6; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	e00b      	b.n	8001b38 <main+0x7c>
  {
	  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001b20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <main+0x98>)
 8001b26:	f001 fcb2 	bl	800348e <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8001b2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b2e:	f000 fe4f 	bl	80027d0 <HAL_Delay>
  for(int i = 0; i < 6; i++)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3301      	adds	r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	ddf0      	ble.n	8001b20 <main+0x64>
  }

  // start 1.125khz loop
  HAL_TIM_Base_Start_IT(&htim11);
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <main+0x9c>)
 8001b40:	f002 fe7b 	bl	800483a <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <main+0x88>
 8001b46:	bf00      	nop
 8001b48:	20000094 	.word	0x20000094
 8001b4c:	20000560 	.word	0x20000560
 8001b50:	200000f0 	.word	0x200000f0
 8001b54:	40020800 	.word	0x40020800
 8001b58:	20000420 	.word	0x20000420

08001b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b094      	sub	sp, #80	; 0x50
 8001b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b62:	f107 0320 	add.w	r3, r7, #32
 8001b66:	2230      	movs	r2, #48	; 0x30
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f004 fb78 	bl	8006260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <SystemClock_Config+0xc8>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <SystemClock_Config+0xc8>)
 8001b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <SystemClock_Config+0xc8>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <SystemClock_Config+0xcc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a20      	ldr	r2, [pc, #128]	; (8001c28 <SystemClock_Config+0xcc>)
 8001ba6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <SystemClock_Config+0xcc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bc0:	2310      	movs	r3, #16
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bcc:	2308      	movs	r3, #8
 8001bce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001bd0:	2364      	movs	r3, #100	; 0x64
 8001bd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bdc:	f107 0320 	add.w	r3, r7, #32
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 fc6f 	bl	80034c4 <HAL_RCC_OscConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bec:	f000 f81e 	bl	8001c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f001 fec9 	bl	80039a4 <HAL_RCC_ClockConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c18:	f000 f808 	bl	8001c2c <Error_Handler>
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3750      	adds	r7, #80	; 0x50
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40007000 	.word	0x40007000

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <Error_Handler+0x6>

08001c34 <distribute>:
}


// final value
void distribute(throttle_a *cal_value, rc_channel_a *channel, balancing_force_t *balancing_force)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
    uint16_t defalut_throttle = (channel[2] - 1000) * 2 + 47;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	3304      	adds	r3, #4
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
 8001c4a:	3318      	adds	r3, #24
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	332f      	adds	r3, #47	; 0x2f
 8001c54:	827b      	strh	r3, [r7, #18]

    // motor mixing algorithm
    // add control value to defaut value
    cal_value[0] = defalut_throttle + balancing_force->yaw - balancing_force->pitch + balancing_force->roll;
 8001c56:	8a7b      	ldrh	r3, [r7, #18]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc0f 	bl	800047c <__aeabi_i2d>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4623      	mov	r3, r4
 8001c68:	f7fe fabc 	bl	80001e4 <__adddf3>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	460c      	mov	r4, r1
 8001c70:	4618      	mov	r0, r3
 8001c72:	4621      	mov	r1, r4
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4623      	mov	r3, r4
 8001c7e:	f7fe faaf 	bl	80001e0 <__aeabi_dsub>
 8001c82:	4603      	mov	r3, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	4618      	mov	r0, r3
 8001c88:	4621      	mov	r1, r4
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4623      	mov	r3, r4
 8001c94:	f7fe faa6 	bl	80001e4 <__adddf3>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	f7fe ff06 	bl	8000ab0 <__aeabi_d2uiz>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	801a      	strh	r2, [r3, #0]
    cal_value[1] = defalut_throttle - balancing_force->yaw - balancing_force->pitch - balancing_force->roll;
 8001cac:	8a7b      	ldrh	r3, [r7, #18]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fbe4 	bl	800047c <__aeabi_i2d>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	f7fe fa8f 	bl	80001e0 <__aeabi_dsub>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460c      	mov	r4, r1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	4621      	mov	r1, r4
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	f7fe fa84 	bl	80001e0 <__aeabi_dsub>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	460c      	mov	r4, r1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	4621      	mov	r1, r4
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4623      	mov	r3, r4
 8001cea:	f7fe fa79 	bl	80001e0 <__aeabi_dsub>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460c      	mov	r4, r1
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4622      	mov	r2, r4
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1c9c      	adds	r4, r3, #2
 8001cfa:	4608      	mov	r0, r1
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	f7fe fed7 	bl	8000ab0 <__aeabi_d2uiz>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	8023      	strh	r3, [r4, #0]
    cal_value[2] = defalut_throttle - balancing_force->yaw + balancing_force->pitch + balancing_force->roll;
 8001d08:	8a7b      	ldrh	r3, [r7, #18]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fbb6 	bl	800047c <__aeabi_i2d>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4623      	mov	r3, r4
 8001d1a:	f7fe fa61 	bl	80001e0 <__aeabi_dsub>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460c      	mov	r4, r1
 8001d22:	4618      	mov	r0, r3
 8001d24:	4621      	mov	r1, r4
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	f7fe fa58 	bl	80001e4 <__adddf3>
 8001d34:	4603      	mov	r3, r0
 8001d36:	460c      	mov	r4, r1
 8001d38:	4618      	mov	r0, r3
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4623      	mov	r3, r4
 8001d46:	f7fe fa4d 	bl	80001e4 <__adddf3>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4622      	mov	r2, r4
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1d1c      	adds	r4, r3, #4
 8001d56:	4608      	mov	r0, r1
 8001d58:	4611      	mov	r1, r2
 8001d5a:	f7fe fea9 	bl	8000ab0 <__aeabi_d2uiz>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	8023      	strh	r3, [r4, #0]
    cal_value[3] = defalut_throttle + balancing_force->yaw + balancing_force->pitch - balancing_force->roll;
 8001d64:	8a7b      	ldrh	r3, [r7, #18]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fb88 	bl	800047c <__aeabi_i2d>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001d72:	461a      	mov	r2, r3
 8001d74:	4623      	mov	r3, r4
 8001d76:	f7fe fa35 	bl	80001e4 <__adddf3>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460c      	mov	r4, r1
 8001d7e:	4618      	mov	r0, r3
 8001d80:	4621      	mov	r1, r4
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	f7fe fa2a 	bl	80001e4 <__adddf3>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	4618      	mov	r0, r3
 8001d96:	4621      	mov	r1, r4
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4623      	mov	r3, r4
 8001da2:	f7fe fa1d 	bl	80001e0 <__aeabi_dsub>
 8001da6:	4603      	mov	r3, r0
 8001da8:	460c      	mov	r4, r1
 8001daa:	4619      	mov	r1, r3
 8001dac:	4622      	mov	r2, r4
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1d9c      	adds	r4, r3, #6
 8001db2:	4608      	mov	r0, r1
 8001db4:	4611      	mov	r1, r2
 8001db6:	f7fe fe7b 	bl	8000ab0 <__aeabi_d2uiz>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	8023      	strh	r3, [r4, #0]

    // limit
    for(int i = 0; i < 4; i++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e01e      	b.n	8001e04 <distribute+0x1d0>
    {
        if(cal_value[i] < DSHOT_THROTTLE_MIN) cal_value[i] = DSHOT_THROTTLE_MIN;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	2b2f      	cmp	r3, #47	; 0x2f
 8001dd2:	d805      	bhi.n	8001de0 <distribute+0x1ac>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	2230      	movs	r2, #48	; 0x30
 8001dde:	801a      	strh	r2, [r3, #0]
        if(cal_value[i] > DSHOT_THROTTLE_MAX) cal_value[i] = DSHOT_THROTTLE_MAX;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dee:	d306      	bcc.n	8001dfe <distribute+0x1ca>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001dfc:	801a      	strh	r2, [r3, #0]
    for(int i = 0; i < 4; i++)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3301      	adds	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	dddd      	ble.n	8001dc6 <distribute+0x192>
    }
}
 8001e0a:	bf00      	nop
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
	...

08001e14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001e18:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <MX_SPI1_Init+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e34:	2202      	movs	r2, #2
 8001e36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e48:	2218      	movs	r2, #24
 8001e4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e60:	220a      	movs	r2, #10
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <MX_SPI1_Init+0x64>)
 8001e66:	f001 ff69 	bl	8003d3c <HAL_SPI_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e70:	f7ff fedc 	bl	8001c2c <Error_Handler>
  }

}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200002c8 	.word	0x200002c8
 8001e7c:	40013000 	.word	0x40013000

08001e80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <HAL_SPI_MspInit+0x84>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d12b      	bne.n	8001efa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ICM20948_SCK_Pin|SPI_ICM20948_MISO_Pin|SPI_ICM20948_MOSI_Pin;
 8001eda:	23e0      	movs	r3, #224	; 0xe0
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eea:	2305      	movs	r3, #5
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	; (8001f0c <HAL_SPI_MspInit+0x8c>)
 8001ef6:	f001 f92f 	bl	8003158 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001efa:	bf00      	nop
 8001efc:	3728      	adds	r7, #40	; 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40013000 	.word	0x40013000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020000 	.word	0x40020000

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <NMI_Handler+0x4>

08001f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <MemManage_Handler+0x4>

08001f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fac:	f000 fbf0 	bl	8002790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <DMA1_Stream1_IRQHandler+0x10>)
 8001fba:	f000 fe65 	bl	8002c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200004c0 	.word	0x200004c0

08001fc8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <DMA1_Stream3_IRQHandler+0x10>)
 8001fce:	f000 fe5b 	bl	8002c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000380 	.word	0x20000380

08001fdc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <DMA1_Stream4_IRQHandler+0x10>)
 8001fe2:	f000 fe51 	bl	8002c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000460 	.word	0x20000460

08001ff0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <DMA1_Stream5_IRQHandler+0x10>)
 8001ff6:	f000 fe47 	bl	8002c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000320 	.word	0x20000320

08002004 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800200a:	f002 fd6b 	bl	8004ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000420 	.word	0x20000420

08002018 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <USART1_IRQHandler+0x10>)
 800201e:	f003 fb43 	bl	80056a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000560 	.word	0x20000560

0800202c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <SystemInit+0x28>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	4a07      	ldr	r2, [pc, #28]	; (8002054 <SystemInit+0x28>)
 8002038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SystemInit+0x28>)
 8002042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002046:	609a      	str	r2, [r3, #8]
#endif
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205e:	f107 0320 	add.w	r3, r7, #32
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	611a      	str	r2, [r3, #16]
 8002076:	615a      	str	r2, [r3, #20]
 8002078:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800207a:	4b27      	ldr	r3, [pc, #156]	; (8002118 <MX_TIM2_Init+0xc0>)
 800207c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002080:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <MX_TIM2_Init+0xc0>)
 8002084:	2207      	movs	r2, #7
 8002086:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002088:	4b23      	ldr	r3, [pc, #140]	; (8002118 <MX_TIM2_Init+0xc0>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 800208e:	4b22      	ldr	r3, [pc, #136]	; (8002118 <MX_TIM2_Init+0xc0>)
 8002090:	2214      	movs	r2, #20
 8002092:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <MX_TIM2_Init+0xc0>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209a:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <MX_TIM2_Init+0xc0>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020a0:	481d      	ldr	r0, [pc, #116]	; (8002118 <MX_TIM2_Init+0xc0>)
 80020a2:	f002 fbee 	bl	8004882 <HAL_TIM_PWM_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80020ac:	f7ff fdbe 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020b8:	f107 0320 	add.w	r3, r7, #32
 80020bc:	4619      	mov	r1, r3
 80020be:	4816      	ldr	r0, [pc, #88]	; (8002118 <MX_TIM2_Init+0xc0>)
 80020c0:	f003 f9ce 	bl	8005460 <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80020ca:	f7ff fdaf 	bl	8001c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ce:	2360      	movs	r3, #96	; 0x60
 80020d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2200      	movs	r2, #0
 80020e2:	4619      	mov	r1, r3
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <MX_TIM2_Init+0xc0>)
 80020e6:	f002 fe05 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80020f0:	f7ff fd9c 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	2208      	movs	r2, #8
 80020f8:	4619      	mov	r1, r3
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <MX_TIM2_Init+0xc0>)
 80020fc:	f002 fdfa 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002106:	f7ff fd91 	bl	8001c2c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800210a:	4803      	ldr	r0, [pc, #12]	; (8002118 <MX_TIM2_Init+0xc0>)
 800210c:	f000 f9ec 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 8002110:	bf00      	nop
 8002112:	3728      	adds	r7, #40	; 0x28
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000520 	.word	0x20000520

0800211c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002122:	f107 0320 	add.w	r3, r7, #32
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	615a      	str	r2, [r3, #20]
 800213c:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 800213e:	4b27      	ldr	r3, [pc, #156]	; (80021dc <MX_TIM5_Init+0xc0>)
 8002140:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <MX_TIM5_Init+0xc4>)
 8002142:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8-1;
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <MX_TIM5_Init+0xc0>)
 8002146:	2207      	movs	r2, #7
 8002148:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214a:	4b24      	ldr	r3, [pc, #144]	; (80021dc <MX_TIM5_Init+0xc0>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20;
 8002150:	4b22      	ldr	r3, [pc, #136]	; (80021dc <MX_TIM5_Init+0xc0>)
 8002152:	2214      	movs	r2, #20
 8002154:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <MX_TIM5_Init+0xc0>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <MX_TIM5_Init+0xc0>)
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002162:	481e      	ldr	r0, [pc, #120]	; (80021dc <MX_TIM5_Init+0xc0>)
 8002164:	f002 fb8d 	bl	8004882 <HAL_TIM_PWM_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800216e:	f7ff fd5d 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800217a:	f107 0320 	add.w	r3, r7, #32
 800217e:	4619      	mov	r1, r3
 8002180:	4816      	ldr	r0, [pc, #88]	; (80021dc <MX_TIM5_Init+0xc0>)
 8002182:	f003 f96d 	bl	8005460 <HAL_TIMEx_MasterConfigSynchronization>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800218c:	f7ff fd4e 	bl	8001c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002190:	2360      	movs	r3, #96	; 0x60
 8002192:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	2204      	movs	r2, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	480d      	ldr	r0, [pc, #52]	; (80021dc <MX_TIM5_Init+0xc0>)
 80021a8:	f002 fda4 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80021b2:	f7ff fd3b 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	220c      	movs	r2, #12
 80021ba:	4619      	mov	r1, r3
 80021bc:	4807      	ldr	r0, [pc, #28]	; (80021dc <MX_TIM5_Init+0xc0>)
 80021be:	f002 fd99 	bl	8004cf4 <HAL_TIM_PWM_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80021c8:	f7ff fd30 	bl	8001c2c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <MX_TIM5_Init+0xc0>)
 80021ce:	f000 f98b 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200003e0 	.word	0x200003e0
 80021e0:	40000c00 	.word	0x40000c00

080021e4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_TIM11_Init+0x40>)
 80021ea:	4a0f      	ldr	r2, [pc, #60]	; (8002228 <MX_TIM11_Init+0x44>)
 80021ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <MX_TIM11_Init+0x40>)
 80021f0:	2263      	movs	r2, #99	; 0x63
 80021f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MX_TIM11_Init+0x40>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 889-1;
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <MX_TIM11_Init+0x40>)
 80021fc:	f44f 725e 	mov.w	r2, #888	; 0x378
 8002200:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <MX_TIM11_Init+0x40>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_TIM11_Init+0x40>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_TIM11_Init+0x40>)
 8002210:	f002 fae8 	bl	80047e4 <HAL_TIM_Base_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800221a:	f7ff fd07 	bl	8001c2c <Error_Handler>
  }

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000420 	.word	0x20000420
 8002228:	40014800 	.word	0x40014800

0800222c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223c:	f040 8087 	bne.w	800234e <HAL_TIM_PWM_MspInit+0x122>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	4b8a      	ldr	r3, [pc, #552]	; (8002470 <HAL_TIM_PWM_MspInit+0x244>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4a89      	ldr	r2, [pc, #548]	; (8002470 <HAL_TIM_PWM_MspInit+0x244>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6413      	str	r3, [r2, #64]	; 0x40
 8002250:	4b87      	ldr	r3, [pc, #540]	; (8002470 <HAL_TIM_PWM_MspInit+0x244>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800225c:	4b85      	ldr	r3, [pc, #532]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 800225e:	4a86      	ldr	r2, [pc, #536]	; (8002478 <HAL_TIM_PWM_MspInit+0x24c>)
 8002260:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002262:	4b84      	ldr	r3, [pc, #528]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 8002264:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002268:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800226a:	4b82      	ldr	r3, [pc, #520]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 800226c:	2240      	movs	r2, #64	; 0x40
 800226e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002270:	4b80      	ldr	r3, [pc, #512]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002276:	4b7f      	ldr	r3, [pc, #508]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 8002278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800227c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800227e:	4b7d      	ldr	r3, [pc, #500]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 8002280:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002284:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002286:	4b7b      	ldr	r3, [pc, #492]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 8002288:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800228c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800228e:	4b79      	ldr	r3, [pc, #484]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 8002290:	2200      	movs	r2, #0
 8002292:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002294:	4b77      	ldr	r3, [pc, #476]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 8002296:	2200      	movs	r2, #0
 8002298:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800229a:	4b76      	ldr	r3, [pc, #472]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 800229c:	2204      	movs	r2, #4
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80022a0:	4b74      	ldr	r3, [pc, #464]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80022a6:	4b73      	ldr	r3, [pc, #460]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80022ac:	4b71      	ldr	r3, [pc, #452]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80022b2:	4870      	ldr	r0, [pc, #448]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 80022b4:	f000 fbc0 	bl	8002a38 <HAL_DMA_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_TIM_PWM_MspInit+0x96>
    {
      Error_Handler();
 80022be:	f7ff fcb5 	bl	8001c2c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a6b      	ldr	r2, [pc, #428]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
 80022c8:	4a6a      	ldr	r2, [pc, #424]	; (8002474 <HAL_TIM_PWM_MspInit+0x248>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 80022ce:	4b6b      	ldr	r3, [pc, #428]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 80022d0:	4a6b      	ldr	r2, [pc, #428]	; (8002480 <HAL_TIM_PWM_MspInit+0x254>)
 80022d2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 80022d4:	4b69      	ldr	r3, [pc, #420]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 80022d6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80022da:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022dc:	4b67      	ldr	r3, [pc, #412]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e2:	4b66      	ldr	r3, [pc, #408]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 80022e8:	4b64      	ldr	r3, [pc, #400]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 80022ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ee:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022f0:	4b62      	ldr	r3, [pc, #392]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 80022f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022f8:	4b60      	ldr	r3, [pc, #384]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 80022fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022fe:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8002300:	4b5e      	ldr	r3, [pc, #376]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 8002306:	4b5d      	ldr	r3, [pc, #372]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800230c:	4b5b      	ldr	r3, [pc, #364]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 800230e:	2204      	movs	r2, #4
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002312:	4b5a      	ldr	r3, [pc, #360]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 8002314:	2200      	movs	r2, #0
 8002316:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8002318:	4b58      	ldr	r3, [pc, #352]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 800231a:	2200      	movs	r2, #0
 800231c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800231e:	4b57      	ldr	r3, [pc, #348]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8002324:	4855      	ldr	r0, [pc, #340]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 8002326:	f000 fb87 	bl	8002a38 <HAL_DMA_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_TIM_PWM_MspInit+0x108>
    {
      Error_Handler();
 8002330:	f7ff fc7c 	bl	8001c2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a51      	ldr	r2, [pc, #324]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 8002338:	62da      	str	r2, [r3, #44]	; 0x2c
 800233a:	4a50      	ldr	r2, [pc, #320]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a4e      	ldr	r2, [pc, #312]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 8002344:	621a      	str	r2, [r3, #32]
 8002346:	4a4d      	ldr	r2, [pc, #308]	; (800247c <HAL_TIM_PWM_MspInit+0x250>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800234c:	e08b      	b.n	8002466 <HAL_TIM_PWM_MspInit+0x23a>
  else if(tim_pwmHandle->Instance==TIM5)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a4c      	ldr	r2, [pc, #304]	; (8002484 <HAL_TIM_PWM_MspInit+0x258>)
 8002354:	4293      	cmp	r3, r2
 8002356:	f040 8086 	bne.w	8002466 <HAL_TIM_PWM_MspInit+0x23a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	4b44      	ldr	r3, [pc, #272]	; (8002470 <HAL_TIM_PWM_MspInit+0x244>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a43      	ldr	r2, [pc, #268]	; (8002470 <HAL_TIM_PWM_MspInit+0x244>)
 8002364:	f043 0308 	orr.w	r3, r3, #8
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_TIM_PWM_MspInit+0x244>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002376:	4b44      	ldr	r3, [pc, #272]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 8002378:	4a44      	ldr	r2, [pc, #272]	; (800248c <HAL_TIM_PWM_MspInit+0x260>)
 800237a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 800237c:	4b42      	ldr	r3, [pc, #264]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 800237e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002382:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002384:	4b40      	ldr	r3, [pc, #256]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 8002386:	2240      	movs	r2, #64	; 0x40
 8002388:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 800238c:	2200      	movs	r2, #0
 800238e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002390:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 8002392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002396:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 800239a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800239e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023a0:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 80023a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023a6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80023ae:	4b36      	ldr	r3, [pc, #216]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023b4:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 80023b6:	2204      	movs	r2, #4
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80023ba:	4b33      	ldr	r3, [pc, #204]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80023c0:	4b31      	ldr	r3, [pc, #196]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80023c6:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80023cc:	482e      	ldr	r0, [pc, #184]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 80023ce:	f000 fb33 	bl	8002a38 <HAL_DMA_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_TIM_PWM_MspInit+0x1b0>
      Error_Handler();
 80023d8:	f7ff fc28 	bl	8001c2c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a2a      	ldr	r2, [pc, #168]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 80023e0:	629a      	str	r2, [r3, #40]	; 0x28
 80023e2:	4a29      	ldr	r2, [pc, #164]	; (8002488 <HAL_TIM_PWM_MspInit+0x25c>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 80023e8:	4b29      	ldr	r3, [pc, #164]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 80023ea:	4a2a      	ldr	r2, [pc, #168]	; (8002494 <HAL_TIM_PWM_MspInit+0x268>)
 80023ec:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 80023ee:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 80023f0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80023f4:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 80023f8:	2240      	movs	r2, #64	; 0x40
 80023fa:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 8002404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002408:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 800240c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002410:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 8002414:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002418:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 800241c:	2200      	movs	r2, #0
 800241e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 8002422:	2200      	movs	r2, #0
 8002424:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 8002428:	2204      	movs	r2, #4
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 8002434:	2200      	movs	r2, #0
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 800243a:	2200      	movs	r2, #0
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 800243e:	4814      	ldr	r0, [pc, #80]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 8002440:	f000 fafa 	bl	8002a38 <HAL_DMA_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_TIM_PWM_MspInit+0x222>
      Error_Handler();
 800244a:	f7ff fbef 	bl	8001c2c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
 8002454:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_TIM_PWM_MspInit+0x264>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	20000320 	.word	0x20000320
 8002478:	40026088 	.word	0x40026088
 800247c:	200004c0 	.word	0x200004c0
 8002480:	40026028 	.word	0x40026028
 8002484:	40000c00 	.word	0x40000c00
 8002488:	20000460 	.word	0x20000460
 800248c:	40026070 	.word	0x40026070
 8002490:	20000380 	.word	0x20000380
 8002494:	40026058 	.word	0x40026058

08002498 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <HAL_TIM_Base_MspInit+0x48>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d115      	bne.n	80024d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_TIM_Base_MspInit+0x4c>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <HAL_TIM_Base_MspInit+0x4c>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_TIM_Base_MspInit+0x4c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2101      	movs	r1, #1
 80024ca:	201a      	movs	r0, #26
 80024cc:	f000 fa7d 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80024d0:	201a      	movs	r0, #26
 80024d2:	f000 fa96 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40014800 	.word	0x40014800
 80024e4:	40023800 	.word	0x40023800

080024e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002508:	d11e      	bne.n	8002548 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	4b22      	ldr	r3, [pc, #136]	; (8002598 <HAL_TIM_MspPostInit+0xb0>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a21      	ldr	r2, [pc, #132]	; (8002598 <HAL_TIM_MspPostInit+0xb0>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <HAL_TIM_MspPostInit+0xb0>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_4_Pin|MOTOR_1_Pin;
 8002526:	2305      	movs	r3, #5
 8002528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002536:	2301      	movs	r3, #1
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	4619      	mov	r1, r3
 8002540:	4816      	ldr	r0, [pc, #88]	; (800259c <HAL_TIM_MspPostInit+0xb4>)
 8002542:	f000 fe09 	bl	8003158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002546:	e022      	b.n	800258e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <HAL_TIM_MspPostInit+0xb8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d11d      	bne.n	800258e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_TIM_MspPostInit+0xb0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <HAL_TIM_MspPostInit+0xb0>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_TIM_MspPostInit+0xb0>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_2_Pin;
 800256e:	230a      	movs	r3, #10
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800257e:	2302      	movs	r3, #2
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <HAL_TIM_MspPostInit+0xb4>)
 800258a:	f000 fde5 	bl	8003158 <HAL_GPIO_Init>
}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40020000 	.word	0x40020000
 80025a0:	40000c00 	.word	0x40000c00

080025a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <MX_USART1_UART_Init+0x4c>)
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <MX_USART1_UART_Init+0x50>)
 80025ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <MX_USART1_UART_Init+0x4c>)
 80025b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <MX_USART1_UART_Init+0x4c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_USART1_UART_Init+0x4c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <MX_USART1_UART_Init+0x4c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <MX_USART1_UART_Init+0x4c>)
 80025ca:	2204      	movs	r2, #4
 80025cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <MX_USART1_UART_Init+0x4c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <MX_USART1_UART_Init+0x4c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025da:	4805      	ldr	r0, [pc, #20]	; (80025f0 <MX_USART1_UART_Init+0x4c>)
 80025dc:	f002 ffc2 	bl	8005564 <HAL_UART_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025e6:	f7ff fb21 	bl	8001c2c <Error_Handler>
  }

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000560 	.word	0x20000560
 80025f4:	40011000 	.word	0x40011000

080025f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1d      	ldr	r2, [pc, #116]	; (800268c <HAL_UART_MspInit+0x94>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d134      	bne.n	8002684 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_UART_MspInit+0x98>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a1b      	ldr	r2, [pc, #108]	; (8002690 <HAL_UART_MspInit+0x98>)
 8002624:	f043 0310 	orr.w	r3, r3, #16
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_UART_MspInit+0x98>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_UART_MspInit+0x98>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a14      	ldr	r2, [pc, #80]	; (8002690 <HAL_UART_MspInit+0x98>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_UART_MspInit+0x98>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = IBUS_TX_Pin|IBUS_RX_Pin;
 8002652:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002660:	2303      	movs	r3, #3
 8002662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002664:	2307      	movs	r3, #7
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	4809      	ldr	r0, [pc, #36]	; (8002694 <HAL_UART_MspInit+0x9c>)
 8002670:	f000 fd72 	bl	8003158 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	2025      	movs	r0, #37	; 0x25
 800267a:	f000 f9a6 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800267e:	2025      	movs	r0, #37	; 0x25
 8002680:	f000 f9bf 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002684:	bf00      	nop
 8002686:	3728      	adds	r7, #40	; 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40011000 	.word	0x40011000
 8002690:	40023800 	.word	0x40023800
 8002694:	40020000 	.word	0x40020000

08002698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800269c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800269e:	e003      	b.n	80026a8 <LoopCopyDataInit>

080026a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026a6:	3104      	adds	r1, #4

080026a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026a8:	480b      	ldr	r0, [pc, #44]	; (80026d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026b0:	d3f6      	bcc.n	80026a0 <CopyDataInit>
  ldr  r2, =_sbss
 80026b2:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026b4:	e002      	b.n	80026bc <LoopFillZerobss>

080026b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026b8:	f842 3b04 	str.w	r3, [r2], #4

080026bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026c0:	d3f9      	bcc.n	80026b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026c2:	f7ff fcb3 	bl	800202c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026c6:	f003 fda7 	bl	8006218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ca:	f7ff f9f7 	bl	8001abc <main>
  bx  lr    
 80026ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80026d4:	080077e8 	.word	0x080077e8
  ldr  r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026dc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80026e0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80026e4:	200005a4 	.word	0x200005a4

080026e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e8:	e7fe      	b.n	80026e8 <ADC_IRQHandler>
	...

080026ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <HAL_Init+0x40>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0d      	ldr	r2, [pc, #52]	; (800272c <HAL_Init+0x40>)
 80026f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_Init+0x40>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <HAL_Init+0x40>)
 8002702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <HAL_Init+0x40>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <HAL_Init+0x40>)
 800270e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002714:	2003      	movs	r0, #3
 8002716:	f000 f94d 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800271a:	2000      	movs	r0, #0
 800271c:	f000 f808 	bl	8002730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002720:	f7ff fbf6 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023c00 	.word	0x40023c00

08002730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_InitTick+0x54>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_InitTick+0x58>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002746:	fbb3 f3f1 	udiv	r3, r3, r1
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f965 	bl	8002a1e <HAL_SYSTICK_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e00e      	b.n	800277c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b0f      	cmp	r3, #15
 8002762:	d80a      	bhi.n	800277a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002764:	2200      	movs	r2, #0
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f000 f92d 	bl	80029ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002770:	4a06      	ldr	r2, [pc, #24]	; (800278c <HAL_InitTick+0x5c>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000000 	.word	0x20000000
 8002788:	20000008 	.word	0x20000008
 800278c:	20000004 	.word	0x20000004

08002790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_IncTick+0x20>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_IncTick+0x24>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <HAL_IncTick+0x24>)
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000008 	.word	0x20000008
 80027b4:	200005a0 	.word	0x200005a0

080027b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return uwTick;
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <HAL_GetTick+0x14>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	200005a0 	.word	0x200005a0

080027d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff ffee 	bl	80027b8 <HAL_GetTick>
 80027dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d005      	beq.n	80027f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_Delay+0x40>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027f6:	bf00      	nop
 80027f8:	f7ff ffde 	bl	80027b8 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	d8f7      	bhi.n	80027f8 <HAL_Delay+0x28>
  {
  }
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000008 	.word	0x20000008

08002814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800283c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__NVIC_GetPriorityGrouping+0x18>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	2b00      	cmp	r3, #0
 8002888:	db0b      	blt.n	80028a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4907      	ldr	r1, [pc, #28]	; (80028b0 <__NVIC_EnableIRQ+0x38>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2001      	movs	r0, #1
 800289a:	fa00 f202 	lsl.w	r2, r0, r2
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000e100 	.word	0xe000e100

080028b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	db0a      	blt.n	80028de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	490c      	ldr	r1, [pc, #48]	; (8002900 <__NVIC_SetPriority+0x4c>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	440b      	add	r3, r1
 80028d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028dc:	e00a      	b.n	80028f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4908      	ldr	r1, [pc, #32]	; (8002904 <__NVIC_SetPriority+0x50>)
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3b04      	subs	r3, #4
 80028ec:	0112      	lsls	r2, r2, #4
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	440b      	add	r3, r1
 80028f2:	761a      	strb	r2, [r3, #24]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000e100 	.word	0xe000e100
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f1c3 0307 	rsb	r3, r3, #7
 8002922:	2b04      	cmp	r3, #4
 8002924:	bf28      	it	cs
 8002926:	2304      	movcs	r3, #4
 8002928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3304      	adds	r3, #4
 800292e:	2b06      	cmp	r3, #6
 8002930:	d902      	bls.n	8002938 <NVIC_EncodePriority+0x30>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3b03      	subs	r3, #3
 8002936:	e000      	b.n	800293a <NVIC_EncodePriority+0x32>
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	f04f 32ff 	mov.w	r2, #4294967295
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002950:	f04f 31ff 	mov.w	r1, #4294967295
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43d9      	mvns	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	4313      	orrs	r3, r2
         );
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002980:	d301      	bcc.n	8002986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002982:	2301      	movs	r3, #1
 8002984:	e00f      	b.n	80029a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <SysTick_Config+0x40>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298e:	210f      	movs	r1, #15
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f7ff ff8e 	bl	80028b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Config+0x40>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SysTick_Config+0x40>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff29 	bl	8002814 <__NVIC_SetPriorityGrouping>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff3e 	bl	800285c <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff8e 	bl	8002908 <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5d 	bl	80028b4 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff31 	bl	8002878 <__NVIC_EnableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffa2 	bl	8002970 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff feb8 	bl	80027b8 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e099      	b.n	8002b88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a74:	e00f      	b.n	8002a96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a76:	f7ff fe9f 	bl	80027b8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d908      	bls.n	8002a96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e078      	b.n	8002b88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e8      	bne.n	8002a76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4b38      	ldr	r3, [pc, #224]	; (8002b90 <HAL_DMA_Init+0x158>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d107      	bne.n	8002b00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4313      	orrs	r3, r2
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0307 	bic.w	r3, r3, #7
 8002b16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d117      	bne.n	8002b5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00e      	beq.n	8002b5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fa91 	bl	8003064 <DMA_CheckFifoParam>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b56:	2301      	movs	r3, #1
 8002b58:	e016      	b.n	8002b88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fa48 	bl	8002ff8 <DMA_CalcBaseAndBitshift>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	223f      	movs	r2, #63	; 0x3f
 8002b72:	409a      	lsls	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	f010803f 	.word	0xf010803f

08002b94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <HAL_DMA_Start_IT+0x26>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e040      	b.n	8002c3c <HAL_DMA_Start_IT+0xa8>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d12f      	bne.n	8002c2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f9da 	bl	8002f9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	223f      	movs	r2, #63	; 0x3f
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0216 	orr.w	r2, r2, #22
 8002c02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0208 	orr.w	r2, r2, #8
 8002c1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e005      	b.n	8002c3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
 8002c38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d004      	beq.n	8002c62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00c      	b.n	8002c7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2205      	movs	r2, #5
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0201 	bic.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c94:	4b92      	ldr	r3, [pc, #584]	; (8002ee0 <HAL_DMA_IRQHandler+0x258>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a92      	ldr	r2, [pc, #584]	; (8002ee4 <HAL_DMA_IRQHandler+0x25c>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	0a9b      	lsrs	r3, r3, #10
 8002ca0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01a      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d013      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0204 	bic.w	r2, r2, #4
 8002cda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d012      	beq.n	8002d2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	2201      	movs	r2, #1
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	f043 0202 	orr.w	r2, r3, #2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	2204      	movs	r2, #4
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d012      	beq.n	8002d60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00b      	beq.n	8002d60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f043 0204 	orr.w	r2, r3, #4
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	2210      	movs	r2, #16
 8002d66:	409a      	lsls	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d043      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d03c      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	2210      	movs	r2, #16
 8002d84:	409a      	lsls	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d018      	beq.n	8002dca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d108      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d024      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
 8002db6:	e01f      	b.n	8002df8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01b      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
 8002dc8:	e016      	b.n	8002df8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0208 	bic.w	r2, r2, #8
 8002de6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 808e 	beq.w	8002f26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8086 	beq.w	8002f26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	2220      	movs	r2, #32
 8002e20:	409a      	lsls	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d136      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0216 	bic.w	r2, r2, #22
 8002e40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <HAL_DMA_IRQHandler+0x1da>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0208 	bic.w	r2, r2, #8
 8002e70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	223f      	movs	r2, #63	; 0x3f
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d07d      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
        }
        return;
 8002e9e:	e078      	b.n	8002f92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01c      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d108      	bne.n	8002ece <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d030      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
 8002ecc:	e02b      	b.n	8002f26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d027      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
 8002ede:	e022      	b.n	8002f26 <HAL_DMA_IRQHandler+0x29e>
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0210 	bic.w	r2, r2, #16
 8002f04:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d032      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d022      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3301      	adds	r3, #1
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d307      	bcc.n	8002f6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f2      	bne.n	8002f52 <HAL_DMA_IRQHandler+0x2ca>
 8002f6c:	e000      	b.n	8002f70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f6e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
 8002f90:	e000      	b.n	8002f94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f92:	bf00      	nop
    }
  }
}
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop

08002f9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d108      	bne.n	8002fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fda:	e007      	b.n	8002fec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	60da      	str	r2, [r3, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	3b10      	subs	r3, #16
 8003008:	4a14      	ldr	r2, [pc, #80]	; (800305c <DMA_CalcBaseAndBitshift+0x64>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003012:	4a13      	ldr	r2, [pc, #76]	; (8003060 <DMA_CalcBaseAndBitshift+0x68>)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d909      	bls.n	800303a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	1d1a      	adds	r2, r3, #4
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	659a      	str	r2, [r3, #88]	; 0x58
 8003038:	e007      	b.n	800304a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003042:	f023 0303 	bic.w	r3, r3, #3
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	aaaaaaab 	.word	0xaaaaaaab
 8003060:	08007740 	.word	0x08007740

08003064 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d11f      	bne.n	80030be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d855      	bhi.n	8003130 <DMA_CheckFifoParam+0xcc>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <DMA_CheckFifoParam+0x28>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	0800309d 	.word	0x0800309d
 8003090:	080030af 	.word	0x080030af
 8003094:	0800309d 	.word	0x0800309d
 8003098:	08003131 	.word	0x08003131
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d045      	beq.n	8003134 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ac:	e042      	b.n	8003134 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030b6:	d13f      	bne.n	8003138 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030bc:	e03c      	b.n	8003138 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c6:	d121      	bne.n	800310c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d836      	bhi.n	800313c <DMA_CheckFifoParam+0xd8>
 80030ce:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <DMA_CheckFifoParam+0x70>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030eb 	.word	0x080030eb
 80030dc:	080030e5 	.word	0x080030e5
 80030e0:	080030fd 	.word	0x080030fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      break;
 80030e8:	e02f      	b.n	800314a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d024      	beq.n	8003140 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fa:	e021      	b.n	8003140 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003104:	d11e      	bne.n	8003144 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800310a:	e01b      	b.n	8003144 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d902      	bls.n	8003118 <DMA_CheckFifoParam+0xb4>
 8003112:	2b03      	cmp	r3, #3
 8003114:	d003      	beq.n	800311e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003116:	e018      	b.n	800314a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e015      	b.n	800314a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00e      	beq.n	8003148 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
      break;
 800312e:	e00b      	b.n	8003148 <DMA_CheckFifoParam+0xe4>
      break;
 8003130:	bf00      	nop
 8003132:	e00a      	b.n	800314a <DMA_CheckFifoParam+0xe6>
      break;
 8003134:	bf00      	nop
 8003136:	e008      	b.n	800314a <DMA_CheckFifoParam+0xe6>
      break;
 8003138:	bf00      	nop
 800313a:	e006      	b.n	800314a <DMA_CheckFifoParam+0xe6>
      break;
 800313c:	bf00      	nop
 800313e:	e004      	b.n	800314a <DMA_CheckFifoParam+0xe6>
      break;
 8003140:	bf00      	nop
 8003142:	e002      	b.n	800314a <DMA_CheckFifoParam+0xe6>
      break;   
 8003144:	bf00      	nop
 8003146:	e000      	b.n	800314a <DMA_CheckFifoParam+0xe6>
      break;
 8003148:	bf00      	nop
    }
  } 
  
  return status; 
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e159      	b.n	8003428 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	429a      	cmp	r2, r3
 800318e:	f040 8148 	bne.w	8003422 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d00b      	beq.n	80031b2 <HAL_GPIO_Init+0x5a>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d007      	beq.n	80031b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a6:	2b11      	cmp	r3, #17
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b12      	cmp	r3, #18
 80031b0:	d130      	bne.n	8003214 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d003      	beq.n	8003254 <HAL_GPIO_Init+0xfc>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b12      	cmp	r3, #18
 8003252:	d123      	bne.n	800329c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	08da      	lsrs	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3208      	adds	r2, #8
 800325c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	220f      	movs	r2, #15
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	08da      	lsrs	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	69b9      	ldr	r1, [r7, #24]
 8003298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0203 	and.w	r2, r3, #3
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a2 	beq.w	8003422 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b56      	ldr	r3, [pc, #344]	; (800343c <HAL_GPIO_Init+0x2e4>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	4a55      	ldr	r2, [pc, #340]	; (800343c <HAL_GPIO_Init+0x2e4>)
 80032e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ec:	6453      	str	r3, [r2, #68]	; 0x44
 80032ee:	4b53      	ldr	r3, [pc, #332]	; (800343c <HAL_GPIO_Init+0x2e4>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032fa:	4a51      	ldr	r2, [pc, #324]	; (8003440 <HAL_GPIO_Init+0x2e8>)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3302      	adds	r3, #2
 8003302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	220f      	movs	r2, #15
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a48      	ldr	r2, [pc, #288]	; (8003444 <HAL_GPIO_Init+0x2ec>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d019      	beq.n	800335a <HAL_GPIO_Init+0x202>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a47      	ldr	r2, [pc, #284]	; (8003448 <HAL_GPIO_Init+0x2f0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_GPIO_Init+0x1fe>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a46      	ldr	r2, [pc, #280]	; (800344c <HAL_GPIO_Init+0x2f4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00d      	beq.n	8003352 <HAL_GPIO_Init+0x1fa>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a45      	ldr	r2, [pc, #276]	; (8003450 <HAL_GPIO_Init+0x2f8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <HAL_GPIO_Init+0x1f6>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a44      	ldr	r2, [pc, #272]	; (8003454 <HAL_GPIO_Init+0x2fc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <HAL_GPIO_Init+0x1f2>
 8003346:	2304      	movs	r3, #4
 8003348:	e008      	b.n	800335c <HAL_GPIO_Init+0x204>
 800334a:	2307      	movs	r3, #7
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x204>
 800334e:	2303      	movs	r3, #3
 8003350:	e004      	b.n	800335c <HAL_GPIO_Init+0x204>
 8003352:	2302      	movs	r3, #2
 8003354:	e002      	b.n	800335c <HAL_GPIO_Init+0x204>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_GPIO_Init+0x204>
 800335a:	2300      	movs	r3, #0
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	f002 0203 	and.w	r2, r2, #3
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	4093      	lsls	r3, r2
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800336c:	4934      	ldr	r1, [pc, #208]	; (8003440 <HAL_GPIO_Init+0x2e8>)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	3302      	adds	r3, #2
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800337a:	4b37      	ldr	r3, [pc, #220]	; (8003458 <HAL_GPIO_Init+0x300>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800339e:	4a2e      	ldr	r2, [pc, #184]	; (8003458 <HAL_GPIO_Init+0x300>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_GPIO_Init+0x300>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033c8:	4a23      	ldr	r2, [pc, #140]	; (8003458 <HAL_GPIO_Init+0x300>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <HAL_GPIO_Init+0x300>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033f2:	4a19      	ldr	r2, [pc, #100]	; (8003458 <HAL_GPIO_Init+0x300>)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <HAL_GPIO_Init+0x300>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800341c:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <HAL_GPIO_Init+0x300>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3301      	adds	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	f67f aea2 	bls.w	8003174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003430:	bf00      	nop
 8003432:	3724      	adds	r7, #36	; 0x24
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40023800 	.word	0x40023800
 8003440:	40013800 	.word	0x40013800
 8003444:	40020000 	.word	0x40020000
 8003448:	40020400 	.word	0x40020400
 800344c:	40020800 	.word	0x40020800
 8003450:	40020c00 	.word	0x40020c00
 8003454:	40021000 	.word	0x40021000
 8003458:	40013c00 	.word	0x40013c00

0800345c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
 8003468:	4613      	mov	r3, r2
 800346a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800346c:	787b      	ldrb	r3, [r7, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003472:	887a      	ldrh	r2, [r7, #2]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003478:	e003      	b.n	8003482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800347a:	887b      	ldrh	r3, [r7, #2]
 800347c:	041a      	lsls	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	619a      	str	r2, [r3, #24]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	887b      	ldrh	r3, [r7, #2]
 80034a0:	401a      	ands	r2, r3
 80034a2:	887b      	ldrh	r3, [r7, #2]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d104      	bne.n	80034b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	041a      	lsls	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80034b0:	e002      	b.n	80034b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80034b2:	887a      	ldrh	r2, [r7, #2]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	619a      	str	r2, [r3, #24]
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e25b      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d075      	beq.n	80035ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034e2:	4ba3      	ldr	r3, [pc, #652]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d00c      	beq.n	8003508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ee:	4ba0      	ldr	r3, [pc, #640]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d112      	bne.n	8003520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fa:	4b9d      	ldr	r3, [pc, #628]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003506:	d10b      	bne.n	8003520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	4b99      	ldr	r3, [pc, #612]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d05b      	beq.n	80035cc <HAL_RCC_OscConfig+0x108>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d157      	bne.n	80035cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e236      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x74>
 800352a:	4b91      	ldr	r3, [pc, #580]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a90      	ldr	r2, [pc, #576]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e01d      	b.n	8003574 <HAL_RCC_OscConfig+0xb0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x98>
 8003542:	4b8b      	ldr	r3, [pc, #556]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a8a      	ldr	r2, [pc, #552]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a87      	ldr	r2, [pc, #540]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e00b      	b.n	8003574 <HAL_RCC_OscConfig+0xb0>
 800355c:	4b84      	ldr	r3, [pc, #528]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a83      	ldr	r2, [pc, #524]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a80      	ldr	r2, [pc, #512]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 800356e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7ff f91c 	bl	80027b8 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003584:	f7ff f918 	bl	80027b8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e1fb      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0xc0>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7ff f908 	bl	80027b8 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ac:	f7ff f904 	bl	80027b8 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e1e7      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	4b6c      	ldr	r3, [pc, #432]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0xe8>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d063      	beq.n	80036a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035da:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00b      	beq.n	80035fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e6:	4b62      	ldr	r3, [pc, #392]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d11c      	bne.n	800362c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f2:	4b5f      	ldr	r3, [pc, #380]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d116      	bne.n	800362c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	4b5c      	ldr	r3, [pc, #368]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_RCC_OscConfig+0x152>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d001      	beq.n	8003616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e1bb      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	4b56      	ldr	r3, [pc, #344]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4952      	ldr	r1, [pc, #328]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362a:	e03a      	b.n	80036a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003634:	4b4f      	ldr	r3, [pc, #316]	; (8003774 <HAL_RCC_OscConfig+0x2b0>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363a:	f7ff f8bd 	bl	80027b8 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003642:	f7ff f8b9 	bl	80027b8 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e19c      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	4b46      	ldr	r3, [pc, #280]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	4b43      	ldr	r3, [pc, #268]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4940      	ldr	r1, [pc, #256]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]
 8003674:	e015      	b.n	80036a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003676:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_RCC_OscConfig+0x2b0>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7ff f89c 	bl	80027b8 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003684:	f7ff f898 	bl	80027b8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e17b      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	4b36      	ldr	r3, [pc, #216]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d030      	beq.n	8003710 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d016      	beq.n	80036e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b6:	4b30      	ldr	r3, [pc, #192]	; (8003778 <HAL_RCC_OscConfig+0x2b4>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7ff f87c 	bl	80027b8 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c4:	f7ff f878 	bl	80027b8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e15b      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	4b26      	ldr	r3, [pc, #152]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x200>
 80036e2:	e015      	b.n	8003710 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e4:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_RCC_OscConfig+0x2b4>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ea:	f7ff f865 	bl	80027b8 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f2:	f7ff f861 	bl	80027b8 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e144      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a0 	beq.w	800385e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373c:	6413      	str	r3, [r2, #64]	; 0x40
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374a:	2301      	movs	r3, #1
 800374c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_OscConfig+0x2b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d121      	bne.n	800379e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_RCC_OscConfig+0x2b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a07      	ldr	r2, [pc, #28]	; (800377c <HAL_RCC_OscConfig+0x2b8>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003766:	f7ff f827 	bl	80027b8 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	e011      	b.n	8003792 <HAL_RCC_OscConfig+0x2ce>
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
 8003774:	42470000 	.word	0x42470000
 8003778:	42470e80 	.word	0x42470e80
 800377c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003780:	f7ff f81a 	bl	80027b8 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0fd      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003792:	4b81      	ldr	r3, [pc, #516]	; (8003998 <HAL_RCC_OscConfig+0x4d4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_OscConfig+0x2f0>
 80037a6:	4b7d      	ldr	r3, [pc, #500]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	4a7c      	ldr	r2, [pc, #496]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	6713      	str	r3, [r2, #112]	; 0x70
 80037b2:	e01c      	b.n	80037ee <HAL_RCC_OscConfig+0x32a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d10c      	bne.n	80037d6 <HAL_RCC_OscConfig+0x312>
 80037bc:	4b77      	ldr	r3, [pc, #476]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a76      	ldr	r2, [pc, #472]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
 80037c8:	4b74      	ldr	r3, [pc, #464]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a73      	ldr	r2, [pc, #460]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
 80037d4:	e00b      	b.n	80037ee <HAL_RCC_OscConfig+0x32a>
 80037d6:	4b71      	ldr	r3, [pc, #452]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a70      	ldr	r2, [pc, #448]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
 80037e2:	4b6e      	ldr	r3, [pc, #440]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a6d      	ldr	r2, [pc, #436]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d015      	beq.n	8003822 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fe ffdf 	bl	80027b8 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fe ffdb 	bl	80027b8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0bc      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003814:	4b61      	ldr	r3, [pc, #388]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ee      	beq.n	80037fe <HAL_RCC_OscConfig+0x33a>
 8003820:	e014      	b.n	800384c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003822:	f7fe ffc9 	bl	80027b8 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fe ffc5 	bl	80027b8 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0a6      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003840:	4b56      	ldr	r3, [pc, #344]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ee      	bne.n	800382a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d105      	bne.n	800385e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003852:	4b52      	ldr	r3, [pc, #328]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a51      	ldr	r2, [pc, #324]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 8003858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8092 	beq.w	800398c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003868:	4b4c      	ldr	r3, [pc, #304]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d05c      	beq.n	800392e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d141      	bne.n	8003900 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387c:	4b48      	ldr	r3, [pc, #288]	; (80039a0 <HAL_RCC_OscConfig+0x4dc>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fe ff99 	bl	80027b8 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388a:	f7fe ff95 	bl	80027b8 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e078      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389c:	4b3f      	ldr	r3, [pc, #252]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	019b      	lsls	r3, r3, #6
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	3b01      	subs	r3, #1
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	061b      	lsls	r3, r3, #24
 80038cc:	4933      	ldr	r1, [pc, #204]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d2:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <HAL_RCC_OscConfig+0x4dc>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fe ff6e 	bl	80027b8 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fe ff6a 	bl	80027b8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e04d      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b2a      	ldr	r3, [pc, #168]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x41c>
 80038fe:	e045      	b.n	800398c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003900:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <HAL_RCC_OscConfig+0x4dc>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fe ff57 	bl	80027b8 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390e:	f7fe ff53 	bl	80027b8 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e036      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003920:	4b1e      	ldr	r3, [pc, #120]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f0      	bne.n	800390e <HAL_RCC_OscConfig+0x44a>
 800392c:	e02e      	b.n	800398c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e029      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_RCC_OscConfig+0x4d8>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	429a      	cmp	r2, r3
 800394c:	d11c      	bne.n	8003988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003958:	429a      	cmp	r2, r3
 800395a:	d115      	bne.n	8003988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003962:	4013      	ands	r3, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003968:	4293      	cmp	r3, r2
 800396a:	d10d      	bne.n	8003988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40007000 	.word	0x40007000
 800399c:	40023800 	.word	0x40023800
 80039a0:	42470060 	.word	0x42470060

080039a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0cc      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b8:	4b68      	ldr	r3, [pc, #416]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d90c      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b65      	ldr	r3, [pc, #404]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b63      	ldr	r3, [pc, #396]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0b8      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d020      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f8:	4b59      	ldr	r3, [pc, #356]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a58      	ldr	r2, [pc, #352]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a10:	4b53      	ldr	r3, [pc, #332]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4a52      	ldr	r2, [pc, #328]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a1c:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	494d      	ldr	r1, [pc, #308]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d044      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d107      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d119      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e07f      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d003      	beq.n	8003a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a62:	4b3f      	ldr	r3, [pc, #252]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e06f      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a72:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e067      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a82:	4b37      	ldr	r3, [pc, #220]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 0203 	bic.w	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4934      	ldr	r1, [pc, #208]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a94:	f7fe fe90 	bl	80027b8 <HAL_GetTick>
 8003a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9c:	f7fe fe8c 	bl	80027b8 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e04f      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	4b2b      	ldr	r3, [pc, #172]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 020c 	and.w	r2, r3, #12
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d1eb      	bne.n	8003a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac4:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 030f 	and.w	r3, r3, #15
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d20c      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad2:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_RCC_ClockConfig+0x1b8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e032      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af8:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4916      	ldr	r1, [pc, #88]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b16:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	490e      	ldr	r1, [pc, #56]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b2a:	f000 f821 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
 8003b2e:	4601      	mov	r1, r0
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <HAL_RCC_ClockConfig+0x1c0>)
 8003b3c:	5cd3      	ldrb	r3, [r2, r3]
 8003b3e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b42:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe fdf0 	bl	8002730 <HAL_InitTick>

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023c00 	.word	0x40023c00
 8003b60:	40023800 	.word	0x40023800
 8003b64:	08007728 	.word	0x08007728
 8003b68:	20000000 	.word	0x20000000
 8003b6c:	20000004 	.word	0x20000004

08003b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b86:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d007      	beq.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x32>
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d008      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x38>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 808d 	bne.w	8003cb6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b9e:	60bb      	str	r3, [r7, #8]
       break;
 8003ba0:	e08c      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ba2:	4b4b      	ldr	r3, [pc, #300]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ba4:	60bb      	str	r3, [r7, #8]
      break;
 8003ba6:	e089      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba8:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb2:	4b45      	ldr	r3, [pc, #276]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d023      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bbe:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	099b      	lsrs	r3, r3, #6
 8003bc4:	f04f 0400 	mov.w	r4, #0
 8003bc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	ea03 0501 	and.w	r5, r3, r1
 8003bd4:	ea04 0602 	and.w	r6, r4, r2
 8003bd8:	4a3d      	ldr	r2, [pc, #244]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bda:	fb02 f106 	mul.w	r1, r2, r6
 8003bde:	2200      	movs	r2, #0
 8003be0:	fb02 f205 	mul.w	r2, r2, r5
 8003be4:	440a      	add	r2, r1
 8003be6:	493a      	ldr	r1, [pc, #232]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003be8:	fba5 0101 	umull	r0, r1, r5, r1
 8003bec:	1853      	adds	r3, r2, r1
 8003bee:	4619      	mov	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f04f 0400 	mov.w	r4, #0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	f7fc ff79 	bl	8000af0 <__aeabi_uldivmod>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	e049      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	f04f 0400 	mov.w	r4, #0
 8003c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	ea03 0501 	and.w	r5, r3, r1
 8003c1c:	ea04 0602 	and.w	r6, r4, r2
 8003c20:	4629      	mov	r1, r5
 8003c22:	4632      	mov	r2, r6
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	0154      	lsls	r4, r2, #5
 8003c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c32:	014b      	lsls	r3, r1, #5
 8003c34:	4619      	mov	r1, r3
 8003c36:	4622      	mov	r2, r4
 8003c38:	1b49      	subs	r1, r1, r5
 8003c3a:	eb62 0206 	sbc.w	r2, r2, r6
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	f04f 0400 	mov.w	r4, #0
 8003c46:	0194      	lsls	r4, r2, #6
 8003c48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c4c:	018b      	lsls	r3, r1, #6
 8003c4e:	1a5b      	subs	r3, r3, r1
 8003c50:	eb64 0402 	sbc.w	r4, r4, r2
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	00e2      	lsls	r2, r4, #3
 8003c5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c62:	00d9      	lsls	r1, r3, #3
 8003c64:	460b      	mov	r3, r1
 8003c66:	4614      	mov	r4, r2
 8003c68:	195b      	adds	r3, r3, r5
 8003c6a:	eb44 0406 	adc.w	r4, r4, r6
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	02a2      	lsls	r2, r4, #10
 8003c78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c7c:	0299      	lsls	r1, r3, #10
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4614      	mov	r4, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	4621      	mov	r1, r4
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4623      	mov	r3, r4
 8003c90:	f7fc ff2e 	bl	8000af0 <__aeabi_uldivmod>
 8003c94:	4603      	mov	r3, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	60bb      	str	r3, [r7, #8]
      break;
 8003cb4:	e002      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x15c>)
 8003cb8:	60bb      	str	r3, [r7, #8]
      break;
 8003cba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	00f42400 	.word	0x00f42400
 8003cd0:	017d7840 	.word	0x017d7840

08003cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000000 	.word	0x20000000

08003cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf0:	f7ff fff0 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4601      	mov	r1, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0a9b      	lsrs	r3, r3, #10
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4a03      	ldr	r2, [pc, #12]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d02:	5cd3      	ldrb	r3, [r2, r3]
 8003d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	08007738 	.word	0x08007738

08003d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d18:	f7ff ffdc 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d1c:	4601      	mov	r1, r0
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	0b5b      	lsrs	r3, r3, #13
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	4a03      	ldr	r2, [pc, #12]	; (8003d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2a:	5cd3      	ldrb	r3, [r2, r3]
 8003d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40023800 	.word	0x40023800
 8003d38:	08007738 	.word	0x08007738

08003d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e056      	b.n	8003dfc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7fe f889 	bl	8001e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	ea42 0103 	orr.w	r1, r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	0c1b      	lsrs	r3, r3, #16
 8003dcc:	f003 0104 	and.w	r1, r3, #4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69da      	ldr	r2, [r3, #28]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_SPI_Transmit+0x22>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e11e      	b.n	8004064 <HAL_SPI_Transmit+0x260>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e2e:	f7fe fcc3 	bl	80027b8 <HAL_GetTick>
 8003e32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d002      	beq.n	8003e4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e48:	e103      	b.n	8004052 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_SPI_Transmit+0x52>
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e5a:	e0fa      	b.n	8004052 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea2:	d107      	bne.n	8003eb4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d007      	beq.n	8003ed2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eda:	d14b      	bne.n	8003f74 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_SPI_Transmit+0xe6>
 8003ee4:	8afb      	ldrh	r3, [r7, #22]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d13e      	bne.n	8003f68 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	881a      	ldrh	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	1c9a      	adds	r2, r3, #2
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f0e:	e02b      	b.n	8003f68 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d112      	bne.n	8003f44 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	881a      	ldrh	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	1c9a      	adds	r2, r3, #2
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f42:	e011      	b.n	8003f68 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f44:	f7fe fc38 	bl	80027b8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d803      	bhi.n	8003f5c <HAL_SPI_Transmit+0x158>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5a:	d102      	bne.n	8003f62 <HAL_SPI_Transmit+0x15e>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d102      	bne.n	8003f68 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f66:	e074      	b.n	8004052 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1ce      	bne.n	8003f10 <HAL_SPI_Transmit+0x10c>
 8003f72:	e04c      	b.n	800400e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_SPI_Transmit+0x17e>
 8003f7c:	8afb      	ldrh	r3, [r7, #22]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d140      	bne.n	8004004 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	7812      	ldrb	r2, [r2, #0]
 8003f8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fa8:	e02c      	b.n	8004004 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d113      	bne.n	8003fe0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fde:	e011      	b.n	8004004 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fe0:	f7fe fbea 	bl	80027b8 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d803      	bhi.n	8003ff8 <HAL_SPI_Transmit+0x1f4>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d102      	bne.n	8003ffe <HAL_SPI_Transmit+0x1fa>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d102      	bne.n	8004004 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004002:	e026      	b.n	8004052 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1cd      	bne.n	8003faa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	6839      	ldr	r1, [r7, #0]
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fba4 	bl	8004760 <SPI_EndRxTxTransaction>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e000      	b.n	8004052 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004050:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004062:	7ffb      	ldrb	r3, [r7, #31]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004088:	d112      	bne.n	80040b0 <HAL_SPI_Receive+0x44>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10e      	bne.n	80040b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2204      	movs	r2, #4
 8004096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800409a:	88fa      	ldrh	r2, [r7, #6]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f8e9 	bl	800427e <HAL_SPI_TransmitReceive>
 80040ac:	4603      	mov	r3, r0
 80040ae:	e0e2      	b.n	8004276 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_SPI_Receive+0x52>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e0db      	b.n	8004276 <HAL_SPI_Receive+0x20a>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040c6:	f7fe fb77 	bl	80027b8 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d002      	beq.n	80040de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80040d8:	2302      	movs	r3, #2
 80040da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040dc:	e0c2      	b.n	8004264 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_SPI_Receive+0x7e>
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040ee:	e0b9      	b.n	8004264 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2204      	movs	r2, #4
 80040f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	88fa      	ldrh	r2, [r7, #6]
 800410e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004136:	d107      	bne.n	8004148 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004146:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d007      	beq.n	8004166 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004164:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d162      	bne.n	8004234 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800416e:	e02e      	b.n	80041ce <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d115      	bne.n	80041aa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f103 020c 	add.w	r2, r3, #12
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	7812      	ldrb	r2, [r2, #0]
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041a8:	e011      	b.n	80041ce <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041aa:	f7fe fb05 	bl	80027b8 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d803      	bhi.n	80041c2 <HAL_SPI_Receive+0x156>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d102      	bne.n	80041c8 <HAL_SPI_Receive+0x15c>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041cc:	e04a      	b.n	8004264 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1cb      	bne.n	8004170 <HAL_SPI_Receive+0x104>
 80041d8:	e031      	b.n	800423e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d113      	bne.n	8004210 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	b292      	uxth	r2, r2
 80041f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800420e:	e011      	b.n	8004234 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004210:	f7fe fad2 	bl	80027b8 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d803      	bhi.n	8004228 <HAL_SPI_Receive+0x1bc>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d102      	bne.n	800422e <HAL_SPI_Receive+0x1c2>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004232:	e017      	b.n	8004264 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1cd      	bne.n	80041da <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fa27 	bl	8004696 <SPI_EndRxTransaction>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	75fb      	strb	r3, [r7, #23]
 8004260:	e000      	b.n	8004264 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004262:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004274:	7dfb      	ldrb	r3, [r7, #23]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b08c      	sub	sp, #48	; 0x30
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800428c:	2301      	movs	r3, #1
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x26>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e18a      	b.n	80045ba <HAL_SPI_TransmitReceive+0x33c>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ac:	f7fe fa84 	bl	80027b8 <HAL_GetTick>
 80042b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042c2:	887b      	ldrh	r3, [r7, #2]
 80042c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d00f      	beq.n	80042ee <HAL_SPI_TransmitReceive+0x70>
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d4:	d107      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x68>
 80042de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d003      	beq.n	80042ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
 80042e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042ec:	e15b      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_SPI_TransmitReceive+0x82>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_TransmitReceive+0x82>
 80042fa:	887b      	ldrh	r3, [r7, #2]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d103      	bne.n	8004308 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004306:	e14e      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b04      	cmp	r3, #4
 8004312:	d003      	beq.n	800431c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2205      	movs	r2, #5
 8004318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	887a      	ldrh	r2, [r7, #2]
 8004332:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	887a      	ldrh	r2, [r7, #2]
 800433e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d007      	beq.n	8004370 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800436e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004378:	d178      	bne.n	800446c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_SPI_TransmitReceive+0x10a>
 8004382:	8b7b      	ldrh	r3, [r7, #26]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d166      	bne.n	8004456 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	881a      	ldrh	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	1c9a      	adds	r2, r3, #2
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ac:	e053      	b.n	8004456 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d11b      	bne.n	80043f4 <HAL_SPI_TransmitReceive+0x176>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d016      	beq.n	80043f4 <HAL_SPI_TransmitReceive+0x176>
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d113      	bne.n	80043f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	881a      	ldrh	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	1c9a      	adds	r2, r3, #2
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d119      	bne.n	8004436 <HAL_SPI_TransmitReceive+0x1b8>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d014      	beq.n	8004436 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	b292      	uxth	r2, r2
 8004418:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	1c9a      	adds	r2, r3, #2
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004432:	2301      	movs	r3, #1
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004436:	f7fe f9bf 	bl	80027b8 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004442:	429a      	cmp	r2, r3
 8004444:	d807      	bhi.n	8004456 <HAL_SPI_TransmitReceive+0x1d8>
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d003      	beq.n	8004456 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004454:	e0a7      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1a6      	bne.n	80043ae <HAL_SPI_TransmitReceive+0x130>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1a1      	bne.n	80043ae <HAL_SPI_TransmitReceive+0x130>
 800446a:	e07c      	b.n	8004566 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <HAL_SPI_TransmitReceive+0x1fc>
 8004474:	8b7b      	ldrh	r3, [r7, #26]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d16b      	bne.n	8004552 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	7812      	ldrb	r2, [r2, #0]
 8004486:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044a0:	e057      	b.n	8004552 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d11c      	bne.n	80044ea <HAL_SPI_TransmitReceive+0x26c>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d017      	beq.n	80044ea <HAL_SPI_TransmitReceive+0x26c>
 80044ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d114      	bne.n	80044ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	7812      	ldrb	r2, [r2, #0]
 80044cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d119      	bne.n	800452c <HAL_SPI_TransmitReceive+0x2ae>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d014      	beq.n	800452c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004528:	2301      	movs	r3, #1
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800452c:	f7fe f944 	bl	80027b8 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004538:	429a      	cmp	r2, r3
 800453a:	d803      	bhi.n	8004544 <HAL_SPI_TransmitReceive+0x2c6>
 800453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004542:	d102      	bne.n	800454a <HAL_SPI_TransmitReceive+0x2cc>
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	2b00      	cmp	r3, #0
 8004548:	d103      	bne.n	8004552 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004550:	e029      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1a2      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x224>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d19d      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004568:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f8f8 	bl	8004760 <SPI_EndRxTxTransaction>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d006      	beq.n	8004584 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004582:	e010      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10b      	bne.n	80045a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	e000      	b.n	80045a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80045a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3730      	adds	r7, #48	; 0x30
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045d2:	e04c      	b.n	800466e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d048      	beq.n	800466e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80045dc:	f7fe f8ec 	bl	80027b8 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d902      	bls.n	80045f2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d13d      	bne.n	800466e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004600:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800460a:	d111      	bne.n	8004630 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004614:	d004      	beq.n	8004620 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d107      	bne.n	8004630 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004638:	d10f      	bne.n	800465a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e00f      	b.n	800468e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	429a      	cmp	r2, r3
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	429a      	cmp	r2, r3
 800468a:	d1a3      	bne.n	80045d4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af02      	add	r7, sp, #8
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046aa:	d111      	bne.n	80046d0 <SPI_EndRxTransaction+0x3a>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b4:	d004      	beq.n	80046c0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046be:	d107      	bne.n	80046d0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ce:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d8:	d12a      	bne.n	8004730 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e2:	d012      	beq.n	800470a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2200      	movs	r2, #0
 80046ec:	2180      	movs	r1, #128	; 0x80
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff ff67 	bl	80045c2 <SPI_WaitFlagStateUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d02d      	beq.n	8004756 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	f043 0220 	orr.w	r2, r3, #32
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e026      	b.n	8004758 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2200      	movs	r2, #0
 8004712:	2101      	movs	r1, #1
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff ff54 	bl	80045c2 <SPI_WaitFlagStateUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e013      	b.n	8004758 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2200      	movs	r2, #0
 8004738:	2101      	movs	r1, #1
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7ff ff41 	bl	80045c2 <SPI_WaitFlagStateUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	f043 0220 	orr.w	r2, r3, #32
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e000      	b.n	8004758 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800476c:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <SPI_EndRxTxTransaction+0x7c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <SPI_EndRxTxTransaction+0x80>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	0d5b      	lsrs	r3, r3, #21
 8004778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800477c:	fb02 f303 	mul.w	r3, r2, r3
 8004780:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800478a:	d112      	bne.n	80047b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2200      	movs	r2, #0
 8004794:	2180      	movs	r1, #128	; 0x80
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f7ff ff13 	bl	80045c2 <SPI_WaitFlagStateUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e00f      	b.n	80047d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c8:	2b80      	cmp	r3, #128	; 0x80
 80047ca:	d0f2      	beq.n	80047b2 <SPI_EndRxTxTransaction+0x52>
 80047cc:	e000      	b.n	80047d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80047ce:	bf00      	nop
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000000 	.word	0x20000000
 80047e0:	165e9f81 	.word	0x165e9f81

080047e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e01d      	b.n	8004832 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fd fe44 	bl	8002498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3304      	adds	r3, #4
 8004820:	4619      	mov	r1, r3
 8004822:	4610      	mov	r0, r2
 8004824:	f000 fbea 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b06      	cmp	r3, #6
 8004862:	d007      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e01d      	b.n	80048d0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fd fcbf 	bl	800222c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3304      	adds	r3, #4
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f000 fb9b 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
 80048f4:	e0e9      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d10b      	bne.n	800491a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <HAL_TIM_PWM_Start_DMA+0x3a>
 8004908:	887b      	ldrh	r3, [r7, #2]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0db      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b0c      	cmp	r3, #12
 800491e:	f200 80ad 	bhi.w	8004a7c <HAL_TIM_PWM_Start_DMA+0x1a4>
 8004922:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <HAL_TIM_PWM_Start_DMA+0x50>)
 8004924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004928:	0800495d 	.word	0x0800495d
 800492c:	08004a7d 	.word	0x08004a7d
 8004930:	08004a7d 	.word	0x08004a7d
 8004934:	08004a7d 	.word	0x08004a7d
 8004938:	080049a5 	.word	0x080049a5
 800493c:	08004a7d 	.word	0x08004a7d
 8004940:	08004a7d 	.word	0x08004a7d
 8004944:	08004a7d 	.word	0x08004a7d
 8004948:	080049ed 	.word	0x080049ed
 800494c:	08004a7d 	.word	0x08004a7d
 8004950:	08004a7d 	.word	0x08004a7d
 8004954:	08004a7d 	.word	0x08004a7d
 8004958:	08004a35 	.word	0x08004a35
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	4a5c      	ldr	r2, [pc, #368]	; (8004ad4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8004962:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	4a5b      	ldr	r2, [pc, #364]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x200>)
 800496a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	4a5a      	ldr	r2, [pc, #360]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x204>)
 8004972:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3334      	adds	r3, #52	; 0x34
 8004980:	461a      	mov	r2, r3
 8004982:	887b      	ldrh	r3, [r7, #2]
 8004984:	f7fe f906 	bl	8002b94 <HAL_DMA_Start_IT>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e09b      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a0:	60da      	str	r2, [r3, #12]
      break;
 80049a2:	e06c      	b.n	8004a7e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	4a4a      	ldr	r2, [pc, #296]	; (8004ad4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80049aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	4a49      	ldr	r2, [pc, #292]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x200>)
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	4a48      	ldr	r2, [pc, #288]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x204>)
 80049ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3338      	adds	r3, #56	; 0x38
 80049c8:	461a      	mov	r2, r3
 80049ca:	887b      	ldrh	r3, [r7, #2]
 80049cc:	f7fe f8e2 	bl	8002b94 <HAL_DMA_Start_IT>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e077      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049e8:	60da      	str	r2, [r3, #12]
      break;
 80049ea:	e048      	b.n	8004a7e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	4a38      	ldr	r2, [pc, #224]	; (8004ad4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80049f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	4a37      	ldr	r2, [pc, #220]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x200>)
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	4a36      	ldr	r2, [pc, #216]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x204>)
 8004a02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	333c      	adds	r3, #60	; 0x3c
 8004a10:	461a      	mov	r2, r3
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	f7fe f8be 	bl	8002b94 <HAL_DMA_Start_IT>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e053      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a30:	60da      	str	r2, [r3, #12]
      break;
 8004a32:	e024      	b.n	8004a7e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	4a26      	ldr	r2, [pc, #152]	; (8004ad4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8004a3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	4a25      	ldr	r2, [pc, #148]	; (8004ad8 <HAL_TIM_PWM_Start_DMA+0x200>)
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	4a24      	ldr	r2, [pc, #144]	; (8004adc <HAL_TIM_PWM_Start_DMA+0x204>)
 8004a4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3340      	adds	r3, #64	; 0x40
 8004a58:	461a      	mov	r2, r3
 8004a5a:	887b      	ldrh	r3, [r7, #2]
 8004a5c:	f7fe f89a 	bl	8002b94 <HAL_DMA_Start_IT>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e02f      	b.n	8004aca <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a78:	60da      	str	r2, [r3, #12]
      break;
 8004a7a:	e000      	b.n	8004a7e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8004a7c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fcc4 	bl	8005414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <HAL_TIM_PWM_Start_DMA+0x208>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d107      	bne.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b06      	cmp	r3, #6
 8004ab6:	d007      	beq.n	8004ac8 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	08004f1d 	.word	0x08004f1d
 8004ad8:	08004f8d 	.word	0x08004f8d
 8004adc:	08004ef9 	.word	0x08004ef9
 8004ae0:	40010000 	.word	0x40010000

08004ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d122      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d11b      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0202 	mvn.w	r2, #2
 8004b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f9b4 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9a6 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f9b7 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d122      	bne.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d11b      	bne.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0204 	mvn.w	r2, #4
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f98a 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f97c 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f98d 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d122      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d11b      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0208 	mvn.w	r2, #8
 8004bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f960 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f952 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f963 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d122      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d11b      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0210 	mvn.w	r2, #16
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2208      	movs	r2, #8
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f936 	bl	8004e94 <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f928 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f939 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10e      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d107      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0201 	mvn.w	r2, #1
 8004c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc fea2 	bl	80019ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c72:	2b80      	cmp	r3, #128	; 0x80
 8004c74:	d10e      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c80:	2b80      	cmp	r3, #128	; 0x80
 8004c82:	d107      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fc5e 	bl	8005550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b40      	cmp	r3, #64	; 0x40
 8004ca0:	d10e      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d107      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f908 	bl	8004ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d10e      	bne.n	8004cec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d107      	bne.n	8004cec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0220 	mvn.w	r2, #32
 8004ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fc28 	bl	800553c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cec:	bf00      	nop
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e0b4      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	f200 809f 	bhi.w	8004e64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d61 	.word	0x08004d61
 8004d30:	08004e65 	.word	0x08004e65
 8004d34:	08004e65 	.word	0x08004e65
 8004d38:	08004e65 	.word	0x08004e65
 8004d3c:	08004da1 	.word	0x08004da1
 8004d40:	08004e65 	.word	0x08004e65
 8004d44:	08004e65 	.word	0x08004e65
 8004d48:	08004e65 	.word	0x08004e65
 8004d4c:	08004de3 	.word	0x08004de3
 8004d50:	08004e65 	.word	0x08004e65
 8004d54:	08004e65 	.word	0x08004e65
 8004d58:	08004e65 	.word	0x08004e65
 8004d5c:	08004e23 	.word	0x08004e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f9c8 	bl	80050fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0208 	orr.w	r2, r2, #8
 8004d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6999      	ldr	r1, [r3, #24]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	619a      	str	r2, [r3, #24]
      break;
 8004d9e:	e062      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa0e 	bl	80051c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6999      	ldr	r1, [r3, #24]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	021a      	lsls	r2, r3, #8
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	619a      	str	r2, [r3, #24]
      break;
 8004de0:	e041      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fa59 	bl	80052a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0208 	orr.w	r2, r2, #8
 8004dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0204 	bic.w	r2, r2, #4
 8004e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69d9      	ldr	r1, [r3, #28]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	61da      	str	r2, [r3, #28]
      break;
 8004e20:	e021      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 faa3 	bl	8005374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69d9      	ldr	r1, [r3, #28]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	021a      	lsls	r2, r3, #8
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	61da      	str	r2, [r3, #28]
      break;
 8004e62:	e000      	b.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004e64:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f7ff ffe8 	bl	8004ee4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d103      	bne.n	8004f44 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	771a      	strb	r2, [r3, #28]
 8004f42:	e019      	b.n	8004f78 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d103      	bne.n	8004f56 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2202      	movs	r2, #2
 8004f52:	771a      	strb	r2, [r3, #28]
 8004f54:	e010      	b.n	8004f78 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d103      	bne.n	8004f68 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2204      	movs	r2, #4
 8004f64:	771a      	strb	r2, [r3, #28]
 8004f66:	e007      	b.n	8004f78 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d102      	bne.n	8004f78 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2208      	movs	r2, #8
 8004f76:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff ff95 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d103      	bne.n	8004fb4 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	771a      	strb	r2, [r3, #28]
 8004fb2:	e019      	b.n	8004fe8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d103      	bne.n	8004fc6 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	771a      	strb	r2, [r3, #28]
 8004fc4:	e010      	b.n	8004fe8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d103      	bne.n	8004fd8 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	771a      	strb	r2, [r3, #28]
 8004fd6:	e007      	b.n	8004fe8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d102      	bne.n	8004fe8 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2208      	movs	r2, #8
 8004fe6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff ff67 	bl	8004ebc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	771a      	strb	r2, [r3, #28]
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a34      	ldr	r2, [pc, #208]	; (80050e0 <TIM_Base_SetConfig+0xe4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00f      	beq.n	8005034 <TIM_Base_SetConfig+0x38>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501a:	d00b      	beq.n	8005034 <TIM_Base_SetConfig+0x38>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a31      	ldr	r2, [pc, #196]	; (80050e4 <TIM_Base_SetConfig+0xe8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_Base_SetConfig+0x38>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a30      	ldr	r2, [pc, #192]	; (80050e8 <TIM_Base_SetConfig+0xec>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0x38>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a2f      	ldr	r2, [pc, #188]	; (80050ec <TIM_Base_SetConfig+0xf0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d108      	bne.n	8005046 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a25      	ldr	r2, [pc, #148]	; (80050e0 <TIM_Base_SetConfig+0xe4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01b      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d017      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <TIM_Base_SetConfig+0xe8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a21      	ldr	r2, [pc, #132]	; (80050e8 <TIM_Base_SetConfig+0xec>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00f      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a20      	ldr	r2, [pc, #128]	; (80050ec <TIM_Base_SetConfig+0xf0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00b      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1f      	ldr	r2, [pc, #124]	; (80050f0 <TIM_Base_SetConfig+0xf4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d007      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <TIM_Base_SetConfig+0xf8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <TIM_Base_SetConfig+0xfc>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d108      	bne.n	8005098 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <TIM_Base_SetConfig+0xe4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d103      	bne.n	80050cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	615a      	str	r2, [r3, #20]
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 0302 	bic.w	r3, r3, #2
 8005144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <TIM_OC1_SetConfig+0xc8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d10c      	bne.n	8005172 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0308 	bic.w	r3, r3, #8
 800515e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 0304 	bic.w	r3, r3, #4
 8005170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <TIM_OC1_SetConfig+0xc8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d111      	bne.n	800519e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40010000 	.word	0x40010000

080051c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0210 	bic.w	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f023 0320 	bic.w	r3, r3, #32
 8005212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1e      	ldr	r2, [pc, #120]	; (800529c <TIM_OC2_SetConfig+0xd4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d10d      	bne.n	8005244 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800522e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005242:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <TIM_OC2_SetConfig+0xd4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d113      	bne.n	8005274 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40010000 	.word	0x40010000

080052a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1d      	ldr	r2, [pc, #116]	; (8005370 <TIM_OC3_SetConfig+0xd0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d10d      	bne.n	800531a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a14      	ldr	r2, [pc, #80]	; (8005370 <TIM_OC3_SetConfig+0xd0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d113      	bne.n	800534a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	621a      	str	r2, [r3, #32]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	40010000 	.word	0x40010000

08005374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	031b      	lsls	r3, r3, #12
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a10      	ldr	r2, [pc, #64]	; (8005410 <TIM_OC4_SetConfig+0x9c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d109      	bne.n	80053e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	019b      	lsls	r3, r3, #6
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000

08005414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	2201      	movs	r2, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	43db      	mvns	r3, r3
 8005436:	401a      	ands	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a1a      	ldr	r2, [r3, #32]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	fa01 f303 	lsl.w	r3, r1, r3
 800544c:	431a      	orrs	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005474:	2302      	movs	r3, #2
 8005476:	e050      	b.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d018      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c4:	d013      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a18      	ldr	r2, [pc, #96]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00e      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a16      	ldr	r2, [pc, #88]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d009      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a15      	ldr	r2, [pc, #84]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a13      	ldr	r2, [pc, #76]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d10c      	bne.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40010000 	.word	0x40010000
 800552c:	40000400 	.word	0x40000400
 8005530:	40000800 	.word	0x40000800
 8005534:	40000c00 	.word	0x40000c00
 8005538:	40014000 	.word	0x40014000

0800553c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e03f      	b.n	80055f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fd f834 	bl	80025f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2224      	movs	r2, #36	; 0x24
 8005594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fab3 	bl	8005b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	4613      	mov	r3, r2
 800560a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b20      	cmp	r3, #32
 8005616:	d140      	bne.n	800569a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_UART_Receive_IT+0x26>
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e039      	b.n	800569c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_UART_Receive_IT+0x38>
 8005632:	2302      	movs	r3, #2
 8005634:	e032      	b.n	800569c <HAL_UART_Receive_IT+0x9e>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	88fa      	ldrh	r2, [r7, #6]
 8005648:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2222      	movs	r2, #34	; 0x22
 800565a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005674:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0220 	orr.w	r2, r2, #32
 8005694:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	e000      	b.n	800569c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800569a:	2302      	movs	r3, #2
  }
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10d      	bne.n	80056fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <HAL_UART_IRQHandler+0x52>
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f98c 	bl	8005a10 <UART_Receive_IT>
      return;
 80056f8:	e0d1      	b.n	800589e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80b0 	beq.w	8005862 <HAL_UART_IRQHandler+0x1ba>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <HAL_UART_IRQHandler+0x70>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80a5 	beq.w	8005862 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_UART_IRQHandler+0x90>
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005730:	f043 0201 	orr.w	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_UART_IRQHandler+0xb0>
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005750:	f043 0202 	orr.w	r2, r3, #2
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <HAL_UART_IRQHandler+0xd0>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005770:	f043 0204 	orr.w	r2, r3, #4
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00f      	beq.n	80057a2 <HAL_UART_IRQHandler+0xfa>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <HAL_UART_IRQHandler+0xee>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	f043 0208 	orr.w	r2, r3, #8
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d078      	beq.n	800589c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d007      	beq.n	80057c4 <HAL_UART_IRQHandler+0x11c>
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f926 	bl	8005a10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ce:	2b40      	cmp	r3, #64	; 0x40
 80057d0:	bf0c      	ite	eq
 80057d2:	2301      	moveq	r3, #1
 80057d4:	2300      	movne	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <HAL_UART_IRQHandler+0x144>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d031      	beq.n	8005850 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f86f 	bl	80058d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d123      	bne.n	8005848 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800580e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005814:	2b00      	cmp	r3, #0
 8005816:	d013      	beq.n	8005840 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <HAL_UART_IRQHandler+0x1fc>)
 800581e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	4618      	mov	r0, r3
 8005826:	f7fd fa0d 	bl	8002c44 <HAL_DMA_Abort_IT>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d016      	beq.n	800585e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800583a:	4610      	mov	r0, r2
 800583c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583e:	e00e      	b.n	800585e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f83b 	bl	80058bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005846:	e00a      	b.n	800585e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f837 	bl	80058bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584e:	e006      	b.n	800585e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f833 	bl	80058bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800585c:	e01e      	b.n	800589c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585e:	bf00      	nop
    return;
 8005860:	e01c      	b.n	800589c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_UART_IRQHandler+0x1d6>
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f85c 	bl	8005934 <UART_Transmit_IT>
    return;
 800587c:	e00f      	b.n	800589e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <HAL_UART_IRQHandler+0x1f6>
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f8a4 	bl	80059e0 <UART_EndTransmit_IT>
    return;
 8005898:	bf00      	nop
 800589a:	e000      	b.n	800589e <HAL_UART_IRQHandler+0x1f6>
    return;
 800589c:	bf00      	nop
  }
}
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	0800590d 	.word	0x0800590d

080058a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695a      	ldr	r2, [r3, #20]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0201 	bic.w	r2, r2, #1
 80058f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff ffc8 	bl	80058bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b21      	cmp	r3, #33	; 0x21
 8005946:	d144      	bne.n	80059d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005950:	d11a      	bne.n	8005988 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005966:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d105      	bne.n	800597c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	1c9a      	adds	r2, r3, #2
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	621a      	str	r2, [r3, #32]
 800597a:	e00e      	b.n	800599a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	621a      	str	r2, [r3, #32]
 8005986:	e008      	b.n	800599a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	1c59      	adds	r1, r3, #1
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6211      	str	r1, [r2, #32]
 8005992:	781a      	ldrb	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	4619      	mov	r1, r3
 80059a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e000      	b.n	80059d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
  }
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff ff51 	bl	80058a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b22      	cmp	r3, #34	; 0x22
 8005a22:	d171      	bne.n	8005b08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2c:	d123      	bne.n	8005a76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10e      	bne.n	8005a5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	1c9a      	adds	r2, r3, #2
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28
 8005a58:	e029      	b.n	8005aae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	629a      	str	r2, [r3, #40]	; 0x28
 8005a74:	e01b      	b.n	8005aae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6858      	ldr	r0, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	1c59      	adds	r1, r3, #1
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6291      	str	r1, [r2, #40]	; 0x28
 8005a8e:	b2c2      	uxtb	r2, r0
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e00c      	b.n	8005aae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	1c58      	adds	r0, r3, #1
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	6288      	str	r0, [r1, #40]	; 0x28
 8005aa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4619      	mov	r1, r3
 8005abc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d120      	bne.n	8005b04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0220 	bic.w	r2, r2, #32
 8005ad0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ae0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fb ffc0 	bl	8001a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e002      	b.n	8005b0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	e000      	b.n	8005b0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005b08:	2302      	movs	r3, #2
  }
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b56:	f023 030c 	bic.w	r3, r3, #12
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	430b      	orrs	r3, r1
 8005b62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b82:	f040 818b 	bne.w	8005e9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4ac1      	ldr	r2, [pc, #772]	; (8005e90 <UART_SetConfig+0x37c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d005      	beq.n	8005b9c <UART_SetConfig+0x88>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4abf      	ldr	r2, [pc, #764]	; (8005e94 <UART_SetConfig+0x380>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	f040 80bd 	bne.w	8005d16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fe f8ba 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8005ba0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	461d      	mov	r5, r3
 8005ba6:	f04f 0600 	mov.w	r6, #0
 8005baa:	46a8      	mov	r8, r5
 8005bac:	46b1      	mov	r9, r6
 8005bae:	eb18 0308 	adds.w	r3, r8, r8
 8005bb2:	eb49 0409 	adc.w	r4, r9, r9
 8005bb6:	4698      	mov	r8, r3
 8005bb8:	46a1      	mov	r9, r4
 8005bba:	eb18 0805 	adds.w	r8, r8, r5
 8005bbe:	eb49 0906 	adc.w	r9, r9, r6
 8005bc2:	f04f 0100 	mov.w	r1, #0
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bd6:	4688      	mov	r8, r1
 8005bd8:	4691      	mov	r9, r2
 8005bda:	eb18 0005 	adds.w	r0, r8, r5
 8005bde:	eb49 0106 	adc.w	r1, r9, r6
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	461d      	mov	r5, r3
 8005be8:	f04f 0600 	mov.w	r6, #0
 8005bec:	196b      	adds	r3, r5, r5
 8005bee:	eb46 0406 	adc.w	r4, r6, r6
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	f7fa ff7b 	bl	8000af0 <__aeabi_uldivmod>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	461a      	mov	r2, r3
 8005c00:	4ba5      	ldr	r3, [pc, #660]	; (8005e98 <UART_SetConfig+0x384>)
 8005c02:	fba3 2302 	umull	r2, r3, r3, r2
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	461d      	mov	r5, r3
 8005c10:	f04f 0600 	mov.w	r6, #0
 8005c14:	46a9      	mov	r9, r5
 8005c16:	46b2      	mov	sl, r6
 8005c18:	eb19 0309 	adds.w	r3, r9, r9
 8005c1c:	eb4a 040a 	adc.w	r4, sl, sl
 8005c20:	4699      	mov	r9, r3
 8005c22:	46a2      	mov	sl, r4
 8005c24:	eb19 0905 	adds.w	r9, r9, r5
 8005c28:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c40:	4689      	mov	r9, r1
 8005c42:	4692      	mov	sl, r2
 8005c44:	eb19 0005 	adds.w	r0, r9, r5
 8005c48:	eb4a 0106 	adc.w	r1, sl, r6
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	461d      	mov	r5, r3
 8005c52:	f04f 0600 	mov.w	r6, #0
 8005c56:	196b      	adds	r3, r5, r5
 8005c58:	eb46 0406 	adc.w	r4, r6, r6
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4623      	mov	r3, r4
 8005c60:	f7fa ff46 	bl	8000af0 <__aeabi_uldivmod>
 8005c64:	4603      	mov	r3, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b8b      	ldr	r3, [pc, #556]	; (8005e98 <UART_SetConfig+0x384>)
 8005c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	2164      	movs	r1, #100	; 0x64
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	3332      	adds	r3, #50	; 0x32
 8005c7e:	4a86      	ldr	r2, [pc, #536]	; (8005e98 <UART_SetConfig+0x384>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c8c:	4498      	add	r8, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	461d      	mov	r5, r3
 8005c92:	f04f 0600 	mov.w	r6, #0
 8005c96:	46a9      	mov	r9, r5
 8005c98:	46b2      	mov	sl, r6
 8005c9a:	eb19 0309 	adds.w	r3, r9, r9
 8005c9e:	eb4a 040a 	adc.w	r4, sl, sl
 8005ca2:	4699      	mov	r9, r3
 8005ca4:	46a2      	mov	sl, r4
 8005ca6:	eb19 0905 	adds.w	r9, r9, r5
 8005caa:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cae:	f04f 0100 	mov.w	r1, #0
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cc2:	4689      	mov	r9, r1
 8005cc4:	4692      	mov	sl, r2
 8005cc6:	eb19 0005 	adds.w	r0, r9, r5
 8005cca:	eb4a 0106 	adc.w	r1, sl, r6
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	f04f 0600 	mov.w	r6, #0
 8005cd8:	196b      	adds	r3, r5, r5
 8005cda:	eb46 0406 	adc.w	r4, r6, r6
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	f7fa ff05 	bl	8000af0 <__aeabi_uldivmod>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	460c      	mov	r4, r1
 8005cea:	461a      	mov	r2, r3
 8005cec:	4b6a      	ldr	r3, [pc, #424]	; (8005e98 <UART_SetConfig+0x384>)
 8005cee:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2164      	movs	r1, #100	; 0x64
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	3332      	adds	r3, #50	; 0x32
 8005d00:	4a65      	ldr	r2, [pc, #404]	; (8005e98 <UART_SetConfig+0x384>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	f003 0207 	and.w	r2, r3, #7
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4442      	add	r2, r8
 8005d12:	609a      	str	r2, [r3, #8]
 8005d14:	e26f      	b.n	80061f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d16:	f7fd ffe9 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8005d1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	461d      	mov	r5, r3
 8005d20:	f04f 0600 	mov.w	r6, #0
 8005d24:	46a8      	mov	r8, r5
 8005d26:	46b1      	mov	r9, r6
 8005d28:	eb18 0308 	adds.w	r3, r8, r8
 8005d2c:	eb49 0409 	adc.w	r4, r9, r9
 8005d30:	4698      	mov	r8, r3
 8005d32:	46a1      	mov	r9, r4
 8005d34:	eb18 0805 	adds.w	r8, r8, r5
 8005d38:	eb49 0906 	adc.w	r9, r9, r6
 8005d3c:	f04f 0100 	mov.w	r1, #0
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d50:	4688      	mov	r8, r1
 8005d52:	4691      	mov	r9, r2
 8005d54:	eb18 0005 	adds.w	r0, r8, r5
 8005d58:	eb49 0106 	adc.w	r1, r9, r6
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	461d      	mov	r5, r3
 8005d62:	f04f 0600 	mov.w	r6, #0
 8005d66:	196b      	adds	r3, r5, r5
 8005d68:	eb46 0406 	adc.w	r4, r6, r6
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4623      	mov	r3, r4
 8005d70:	f7fa febe 	bl	8000af0 <__aeabi_uldivmod>
 8005d74:	4603      	mov	r3, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4b47      	ldr	r3, [pc, #284]	; (8005e98 <UART_SetConfig+0x384>)
 8005d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	461d      	mov	r5, r3
 8005d8a:	f04f 0600 	mov.w	r6, #0
 8005d8e:	46a9      	mov	r9, r5
 8005d90:	46b2      	mov	sl, r6
 8005d92:	eb19 0309 	adds.w	r3, r9, r9
 8005d96:	eb4a 040a 	adc.w	r4, sl, sl
 8005d9a:	4699      	mov	r9, r3
 8005d9c:	46a2      	mov	sl, r4
 8005d9e:	eb19 0905 	adds.w	r9, r9, r5
 8005da2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005da6:	f04f 0100 	mov.w	r1, #0
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005db2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dba:	4689      	mov	r9, r1
 8005dbc:	4692      	mov	sl, r2
 8005dbe:	eb19 0005 	adds.w	r0, r9, r5
 8005dc2:	eb4a 0106 	adc.w	r1, sl, r6
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	461d      	mov	r5, r3
 8005dcc:	f04f 0600 	mov.w	r6, #0
 8005dd0:	196b      	adds	r3, r5, r5
 8005dd2:	eb46 0406 	adc.w	r4, r6, r6
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	4623      	mov	r3, r4
 8005dda:	f7fa fe89 	bl	8000af0 <__aeabi_uldivmod>
 8005dde:	4603      	mov	r3, r0
 8005de0:	460c      	mov	r4, r1
 8005de2:	461a      	mov	r2, r3
 8005de4:	4b2c      	ldr	r3, [pc, #176]	; (8005e98 <UART_SetConfig+0x384>)
 8005de6:	fba3 1302 	umull	r1, r3, r3, r2
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	2164      	movs	r1, #100	; 0x64
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	3332      	adds	r3, #50	; 0x32
 8005df8:	4a27      	ldr	r2, [pc, #156]	; (8005e98 <UART_SetConfig+0x384>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e06:	4498      	add	r8, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	461d      	mov	r5, r3
 8005e0c:	f04f 0600 	mov.w	r6, #0
 8005e10:	46a9      	mov	r9, r5
 8005e12:	46b2      	mov	sl, r6
 8005e14:	eb19 0309 	adds.w	r3, r9, r9
 8005e18:	eb4a 040a 	adc.w	r4, sl, sl
 8005e1c:	4699      	mov	r9, r3
 8005e1e:	46a2      	mov	sl, r4
 8005e20:	eb19 0905 	adds.w	r9, r9, r5
 8005e24:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e28:	f04f 0100 	mov.w	r1, #0
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e3c:	4689      	mov	r9, r1
 8005e3e:	4692      	mov	sl, r2
 8005e40:	eb19 0005 	adds.w	r0, r9, r5
 8005e44:	eb4a 0106 	adc.w	r1, sl, r6
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	461d      	mov	r5, r3
 8005e4e:	f04f 0600 	mov.w	r6, #0
 8005e52:	196b      	adds	r3, r5, r5
 8005e54:	eb46 0406 	adc.w	r4, r6, r6
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4623      	mov	r3, r4
 8005e5c:	f7fa fe48 	bl	8000af0 <__aeabi_uldivmod>
 8005e60:	4603      	mov	r3, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	461a      	mov	r2, r3
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <UART_SetConfig+0x384>)
 8005e68:	fba3 1302 	umull	r1, r3, r3, r2
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	2164      	movs	r1, #100	; 0x64
 8005e70:	fb01 f303 	mul.w	r3, r1, r3
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	3332      	adds	r3, #50	; 0x32
 8005e7a:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <UART_SetConfig+0x384>)
 8005e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	f003 0207 	and.w	r2, r3, #7
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4442      	add	r2, r8
 8005e8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e8e:	e1b2      	b.n	80061f6 <UART_SetConfig+0x6e2>
 8005e90:	40011000 	.word	0x40011000
 8005e94:	40011400 	.word	0x40011400
 8005e98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4ad7      	ldr	r2, [pc, #860]	; (8006200 <UART_SetConfig+0x6ec>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d005      	beq.n	8005eb2 <UART_SetConfig+0x39e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4ad6      	ldr	r2, [pc, #856]	; (8006204 <UART_SetConfig+0x6f0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	f040 80d1 	bne.w	8006054 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eb2:	f7fd ff2f 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8005eb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	469a      	mov	sl, r3
 8005ebc:	f04f 0b00 	mov.w	fp, #0
 8005ec0:	46d0      	mov	r8, sl
 8005ec2:	46d9      	mov	r9, fp
 8005ec4:	eb18 0308 	adds.w	r3, r8, r8
 8005ec8:	eb49 0409 	adc.w	r4, r9, r9
 8005ecc:	4698      	mov	r8, r3
 8005ece:	46a1      	mov	r9, r4
 8005ed0:	eb18 080a 	adds.w	r8, r8, sl
 8005ed4:	eb49 090b 	adc.w	r9, r9, fp
 8005ed8:	f04f 0100 	mov.w	r1, #0
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ee4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ee8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005eec:	4688      	mov	r8, r1
 8005eee:	4691      	mov	r9, r2
 8005ef0:	eb1a 0508 	adds.w	r5, sl, r8
 8005ef4:	eb4b 0609 	adc.w	r6, fp, r9
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	4619      	mov	r1, r3
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	f04f 0400 	mov.w	r4, #0
 8005f0a:	0094      	lsls	r4, r2, #2
 8005f0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f10:	008b      	lsls	r3, r1, #2
 8005f12:	461a      	mov	r2, r3
 8005f14:	4623      	mov	r3, r4
 8005f16:	4628      	mov	r0, r5
 8005f18:	4631      	mov	r1, r6
 8005f1a:	f7fa fde9 	bl	8000af0 <__aeabi_uldivmod>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	460c      	mov	r4, r1
 8005f22:	461a      	mov	r2, r3
 8005f24:	4bb8      	ldr	r3, [pc, #736]	; (8006208 <UART_SetConfig+0x6f4>)
 8005f26:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	469b      	mov	fp, r3
 8005f34:	f04f 0c00 	mov.w	ip, #0
 8005f38:	46d9      	mov	r9, fp
 8005f3a:	46e2      	mov	sl, ip
 8005f3c:	eb19 0309 	adds.w	r3, r9, r9
 8005f40:	eb4a 040a 	adc.w	r4, sl, sl
 8005f44:	4699      	mov	r9, r3
 8005f46:	46a2      	mov	sl, r4
 8005f48:	eb19 090b 	adds.w	r9, r9, fp
 8005f4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f50:	f04f 0100 	mov.w	r1, #0
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f64:	4689      	mov	r9, r1
 8005f66:	4692      	mov	sl, r2
 8005f68:	eb1b 0509 	adds.w	r5, fp, r9
 8005f6c:	eb4c 060a 	adc.w	r6, ip, sl
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4619      	mov	r1, r3
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	f04f 0400 	mov.w	r4, #0
 8005f82:	0094      	lsls	r4, r2, #2
 8005f84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f88:	008b      	lsls	r3, r1, #2
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4623      	mov	r3, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	4631      	mov	r1, r6
 8005f92:	f7fa fdad 	bl	8000af0 <__aeabi_uldivmod>
 8005f96:	4603      	mov	r3, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	4b9a      	ldr	r3, [pc, #616]	; (8006208 <UART_SetConfig+0x6f4>)
 8005f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	2164      	movs	r1, #100	; 0x64
 8005fa6:	fb01 f303 	mul.w	r3, r1, r3
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	3332      	adds	r3, #50	; 0x32
 8005fb0:	4a95      	ldr	r2, [pc, #596]	; (8006208 <UART_SetConfig+0x6f4>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fbc:	4498      	add	r8, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	469b      	mov	fp, r3
 8005fc2:	f04f 0c00 	mov.w	ip, #0
 8005fc6:	46d9      	mov	r9, fp
 8005fc8:	46e2      	mov	sl, ip
 8005fca:	eb19 0309 	adds.w	r3, r9, r9
 8005fce:	eb4a 040a 	adc.w	r4, sl, sl
 8005fd2:	4699      	mov	r9, r3
 8005fd4:	46a2      	mov	sl, r4
 8005fd6:	eb19 090b 	adds.w	r9, r9, fp
 8005fda:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fde:	f04f 0100 	mov.w	r1, #0
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ff2:	4689      	mov	r9, r1
 8005ff4:	4692      	mov	sl, r2
 8005ff6:	eb1b 0509 	adds.w	r5, fp, r9
 8005ffa:	eb4c 060a 	adc.w	r6, ip, sl
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4619      	mov	r1, r3
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	f04f 0400 	mov.w	r4, #0
 8006010:	0094      	lsls	r4, r2, #2
 8006012:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006016:	008b      	lsls	r3, r1, #2
 8006018:	461a      	mov	r2, r3
 800601a:	4623      	mov	r3, r4
 800601c:	4628      	mov	r0, r5
 800601e:	4631      	mov	r1, r6
 8006020:	f7fa fd66 	bl	8000af0 <__aeabi_uldivmod>
 8006024:	4603      	mov	r3, r0
 8006026:	460c      	mov	r4, r1
 8006028:	461a      	mov	r2, r3
 800602a:	4b77      	ldr	r3, [pc, #476]	; (8006208 <UART_SetConfig+0x6f4>)
 800602c:	fba3 1302 	umull	r1, r3, r3, r2
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	2164      	movs	r1, #100	; 0x64
 8006034:	fb01 f303 	mul.w	r3, r1, r3
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	3332      	adds	r3, #50	; 0x32
 800603e:	4a72      	ldr	r2, [pc, #456]	; (8006208 <UART_SetConfig+0x6f4>)
 8006040:	fba2 2303 	umull	r2, r3, r2, r3
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	f003 020f 	and.w	r2, r3, #15
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4442      	add	r2, r8
 8006050:	609a      	str	r2, [r3, #8]
 8006052:	e0d0      	b.n	80061f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006054:	f7fd fe4a 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8006058:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	469a      	mov	sl, r3
 800605e:	f04f 0b00 	mov.w	fp, #0
 8006062:	46d0      	mov	r8, sl
 8006064:	46d9      	mov	r9, fp
 8006066:	eb18 0308 	adds.w	r3, r8, r8
 800606a:	eb49 0409 	adc.w	r4, r9, r9
 800606e:	4698      	mov	r8, r3
 8006070:	46a1      	mov	r9, r4
 8006072:	eb18 080a 	adds.w	r8, r8, sl
 8006076:	eb49 090b 	adc.w	r9, r9, fp
 800607a:	f04f 0100 	mov.w	r1, #0
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006086:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800608a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800608e:	4688      	mov	r8, r1
 8006090:	4691      	mov	r9, r2
 8006092:	eb1a 0508 	adds.w	r5, sl, r8
 8006096:	eb4b 0609 	adc.w	r6, fp, r9
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4619      	mov	r1, r3
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	f04f 0400 	mov.w	r4, #0
 80060ac:	0094      	lsls	r4, r2, #2
 80060ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060b2:	008b      	lsls	r3, r1, #2
 80060b4:	461a      	mov	r2, r3
 80060b6:	4623      	mov	r3, r4
 80060b8:	4628      	mov	r0, r5
 80060ba:	4631      	mov	r1, r6
 80060bc:	f7fa fd18 	bl	8000af0 <__aeabi_uldivmod>
 80060c0:	4603      	mov	r3, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	461a      	mov	r2, r3
 80060c6:	4b50      	ldr	r3, [pc, #320]	; (8006208 <UART_SetConfig+0x6f4>)
 80060c8:	fba3 2302 	umull	r2, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	469b      	mov	fp, r3
 80060d6:	f04f 0c00 	mov.w	ip, #0
 80060da:	46d9      	mov	r9, fp
 80060dc:	46e2      	mov	sl, ip
 80060de:	eb19 0309 	adds.w	r3, r9, r9
 80060e2:	eb4a 040a 	adc.w	r4, sl, sl
 80060e6:	4699      	mov	r9, r3
 80060e8:	46a2      	mov	sl, r4
 80060ea:	eb19 090b 	adds.w	r9, r9, fp
 80060ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060f2:	f04f 0100 	mov.w	r1, #0
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006102:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006106:	4689      	mov	r9, r1
 8006108:	4692      	mov	sl, r2
 800610a:	eb1b 0509 	adds.w	r5, fp, r9
 800610e:	eb4c 060a 	adc.w	r6, ip, sl
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4619      	mov	r1, r3
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	f04f 0400 	mov.w	r4, #0
 8006124:	0094      	lsls	r4, r2, #2
 8006126:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800612a:	008b      	lsls	r3, r1, #2
 800612c:	461a      	mov	r2, r3
 800612e:	4623      	mov	r3, r4
 8006130:	4628      	mov	r0, r5
 8006132:	4631      	mov	r1, r6
 8006134:	f7fa fcdc 	bl	8000af0 <__aeabi_uldivmod>
 8006138:	4603      	mov	r3, r0
 800613a:	460c      	mov	r4, r1
 800613c:	461a      	mov	r2, r3
 800613e:	4b32      	ldr	r3, [pc, #200]	; (8006208 <UART_SetConfig+0x6f4>)
 8006140:	fba3 1302 	umull	r1, r3, r3, r2
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	2164      	movs	r1, #100	; 0x64
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	3332      	adds	r3, #50	; 0x32
 8006152:	4a2d      	ldr	r2, [pc, #180]	; (8006208 <UART_SetConfig+0x6f4>)
 8006154:	fba2 2303 	umull	r2, r3, r2, r3
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800615e:	4498      	add	r8, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	469b      	mov	fp, r3
 8006164:	f04f 0c00 	mov.w	ip, #0
 8006168:	46d9      	mov	r9, fp
 800616a:	46e2      	mov	sl, ip
 800616c:	eb19 0309 	adds.w	r3, r9, r9
 8006170:	eb4a 040a 	adc.w	r4, sl, sl
 8006174:	4699      	mov	r9, r3
 8006176:	46a2      	mov	sl, r4
 8006178:	eb19 090b 	adds.w	r9, r9, fp
 800617c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006180:	f04f 0100 	mov.w	r1, #0
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800618c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006190:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006194:	4689      	mov	r9, r1
 8006196:	4692      	mov	sl, r2
 8006198:	eb1b 0509 	adds.w	r5, fp, r9
 800619c:	eb4c 060a 	adc.w	r6, ip, sl
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	4619      	mov	r1, r3
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	f04f 0400 	mov.w	r4, #0
 80061b2:	0094      	lsls	r4, r2, #2
 80061b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061b8:	008b      	lsls	r3, r1, #2
 80061ba:	461a      	mov	r2, r3
 80061bc:	4623      	mov	r3, r4
 80061be:	4628      	mov	r0, r5
 80061c0:	4631      	mov	r1, r6
 80061c2:	f7fa fc95 	bl	8000af0 <__aeabi_uldivmod>
 80061c6:	4603      	mov	r3, r0
 80061c8:	460c      	mov	r4, r1
 80061ca:	461a      	mov	r2, r3
 80061cc:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <UART_SetConfig+0x6f4>)
 80061ce:	fba3 1302 	umull	r1, r3, r3, r2
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	2164      	movs	r1, #100	; 0x64
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	3332      	adds	r3, #50	; 0x32
 80061e0:	4a09      	ldr	r2, [pc, #36]	; (8006208 <UART_SetConfig+0x6f4>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	f003 020f 	and.w	r2, r3, #15
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4442      	add	r2, r8
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	e7ff      	b.n	80061f6 <UART_SetConfig+0x6e2>
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006200:	40011000 	.word	0x40011000
 8006204:	40011400 	.word	0x40011400
 8006208:	51eb851f 	.word	0x51eb851f

0800620c <__errno>:
 800620c:	4b01      	ldr	r3, [pc, #4]	; (8006214 <__errno+0x8>)
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	2000000c 	.word	0x2000000c

08006218 <__libc_init_array>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4e0d      	ldr	r6, [pc, #52]	; (8006250 <__libc_init_array+0x38>)
 800621c:	4c0d      	ldr	r4, [pc, #52]	; (8006254 <__libc_init_array+0x3c>)
 800621e:	1ba4      	subs	r4, r4, r6
 8006220:	10a4      	asrs	r4, r4, #2
 8006222:	2500      	movs	r5, #0
 8006224:	42a5      	cmp	r5, r4
 8006226:	d109      	bne.n	800623c <__libc_init_array+0x24>
 8006228:	4e0b      	ldr	r6, [pc, #44]	; (8006258 <__libc_init_array+0x40>)
 800622a:	4c0c      	ldr	r4, [pc, #48]	; (800625c <__libc_init_array+0x44>)
 800622c:	f001 fa6e 	bl	800770c <_init>
 8006230:	1ba4      	subs	r4, r4, r6
 8006232:	10a4      	asrs	r4, r4, #2
 8006234:	2500      	movs	r5, #0
 8006236:	42a5      	cmp	r5, r4
 8006238:	d105      	bne.n	8006246 <__libc_init_array+0x2e>
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006240:	4798      	blx	r3
 8006242:	3501      	adds	r5, #1
 8006244:	e7ee      	b.n	8006224 <__libc_init_array+0xc>
 8006246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800624a:	4798      	blx	r3
 800624c:	3501      	adds	r5, #1
 800624e:	e7f2      	b.n	8006236 <__libc_init_array+0x1e>
 8006250:	080077e0 	.word	0x080077e0
 8006254:	080077e0 	.word	0x080077e0
 8006258:	080077e0 	.word	0x080077e0
 800625c:	080077e4 	.word	0x080077e4

08006260 <memset>:
 8006260:	4402      	add	r2, r0
 8006262:	4603      	mov	r3, r0
 8006264:	4293      	cmp	r3, r2
 8006266:	d100      	bne.n	800626a <memset+0xa>
 8006268:	4770      	bx	lr
 800626a:	f803 1b01 	strb.w	r1, [r3], #1
 800626e:	e7f9      	b.n	8006264 <memset+0x4>

08006270 <atan>:
 8006270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	ec55 4b10 	vmov	r4, r5, d0
 8006278:	4bc3      	ldr	r3, [pc, #780]	; (8006588 <atan+0x318>)
 800627a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800627e:	429e      	cmp	r6, r3
 8006280:	46ab      	mov	fp, r5
 8006282:	dd18      	ble.n	80062b6 <atan+0x46>
 8006284:	4bc1      	ldr	r3, [pc, #772]	; (800658c <atan+0x31c>)
 8006286:	429e      	cmp	r6, r3
 8006288:	dc01      	bgt.n	800628e <atan+0x1e>
 800628a:	d109      	bne.n	80062a0 <atan+0x30>
 800628c:	b144      	cbz	r4, 80062a0 <atan+0x30>
 800628e:	4622      	mov	r2, r4
 8006290:	462b      	mov	r3, r5
 8006292:	4620      	mov	r0, r4
 8006294:	4629      	mov	r1, r5
 8006296:	f7f9 ffa5 	bl	80001e4 <__adddf3>
 800629a:	4604      	mov	r4, r0
 800629c:	460d      	mov	r5, r1
 800629e:	e006      	b.n	80062ae <atan+0x3e>
 80062a0:	f1bb 0f00 	cmp.w	fp, #0
 80062a4:	f340 8131 	ble.w	800650a <atan+0x29a>
 80062a8:	a59b      	add	r5, pc, #620	; (adr r5, 8006518 <atan+0x2a8>)
 80062aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80062ae:	ec45 4b10 	vmov	d0, r4, r5
 80062b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b6:	4bb6      	ldr	r3, [pc, #728]	; (8006590 <atan+0x320>)
 80062b8:	429e      	cmp	r6, r3
 80062ba:	dc14      	bgt.n	80062e6 <atan+0x76>
 80062bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80062c0:	429e      	cmp	r6, r3
 80062c2:	dc0d      	bgt.n	80062e0 <atan+0x70>
 80062c4:	a396      	add	r3, pc, #600	; (adr r3, 8006520 <atan+0x2b0>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	ee10 0a10 	vmov	r0, s0
 80062ce:	4629      	mov	r1, r5
 80062d0:	f7f9 ff88 	bl	80001e4 <__adddf3>
 80062d4:	2200      	movs	r2, #0
 80062d6:	4baf      	ldr	r3, [pc, #700]	; (8006594 <atan+0x324>)
 80062d8:	f7fa fbca 	bl	8000a70 <__aeabi_dcmpgt>
 80062dc:	2800      	cmp	r0, #0
 80062de:	d1e6      	bne.n	80062ae <atan+0x3e>
 80062e0:	f04f 3aff 	mov.w	sl, #4294967295
 80062e4:	e02b      	b.n	800633e <atan+0xce>
 80062e6:	f000 f963 	bl	80065b0 <fabs>
 80062ea:	4bab      	ldr	r3, [pc, #684]	; (8006598 <atan+0x328>)
 80062ec:	429e      	cmp	r6, r3
 80062ee:	ec55 4b10 	vmov	r4, r5, d0
 80062f2:	f300 80bf 	bgt.w	8006474 <atan+0x204>
 80062f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80062fa:	429e      	cmp	r6, r3
 80062fc:	f300 80a0 	bgt.w	8006440 <atan+0x1d0>
 8006300:	ee10 2a10 	vmov	r2, s0
 8006304:	ee10 0a10 	vmov	r0, s0
 8006308:	462b      	mov	r3, r5
 800630a:	4629      	mov	r1, r5
 800630c:	f7f9 ff6a 	bl	80001e4 <__adddf3>
 8006310:	2200      	movs	r2, #0
 8006312:	4ba0      	ldr	r3, [pc, #640]	; (8006594 <atan+0x324>)
 8006314:	f7f9 ff64 	bl	80001e0 <__aeabi_dsub>
 8006318:	2200      	movs	r2, #0
 800631a:	4606      	mov	r6, r0
 800631c:	460f      	mov	r7, r1
 800631e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006322:	4620      	mov	r0, r4
 8006324:	4629      	mov	r1, r5
 8006326:	f7f9 ff5d 	bl	80001e4 <__adddf3>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4630      	mov	r0, r6
 8006330:	4639      	mov	r1, r7
 8006332:	f7fa fa37 	bl	80007a4 <__aeabi_ddiv>
 8006336:	f04f 0a00 	mov.w	sl, #0
 800633a:	4604      	mov	r4, r0
 800633c:	460d      	mov	r5, r1
 800633e:	4622      	mov	r2, r4
 8006340:	462b      	mov	r3, r5
 8006342:	4620      	mov	r0, r4
 8006344:	4629      	mov	r1, r5
 8006346:	f7fa f903 	bl	8000550 <__aeabi_dmul>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4680      	mov	r8, r0
 8006350:	4689      	mov	r9, r1
 8006352:	f7fa f8fd 	bl	8000550 <__aeabi_dmul>
 8006356:	a374      	add	r3, pc, #464	; (adr r3, 8006528 <atan+0x2b8>)
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	4606      	mov	r6, r0
 800635e:	460f      	mov	r7, r1
 8006360:	f7fa f8f6 	bl	8000550 <__aeabi_dmul>
 8006364:	a372      	add	r3, pc, #456	; (adr r3, 8006530 <atan+0x2c0>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	f7f9 ff3b 	bl	80001e4 <__adddf3>
 800636e:	4632      	mov	r2, r6
 8006370:	463b      	mov	r3, r7
 8006372:	f7fa f8ed 	bl	8000550 <__aeabi_dmul>
 8006376:	a370      	add	r3, pc, #448	; (adr r3, 8006538 <atan+0x2c8>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7f9 ff32 	bl	80001e4 <__adddf3>
 8006380:	4632      	mov	r2, r6
 8006382:	463b      	mov	r3, r7
 8006384:	f7fa f8e4 	bl	8000550 <__aeabi_dmul>
 8006388:	a36d      	add	r3, pc, #436	; (adr r3, 8006540 <atan+0x2d0>)
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f7f9 ff29 	bl	80001e4 <__adddf3>
 8006392:	4632      	mov	r2, r6
 8006394:	463b      	mov	r3, r7
 8006396:	f7fa f8db 	bl	8000550 <__aeabi_dmul>
 800639a:	a36b      	add	r3, pc, #428	; (adr r3, 8006548 <atan+0x2d8>)
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f7f9 ff20 	bl	80001e4 <__adddf3>
 80063a4:	4632      	mov	r2, r6
 80063a6:	463b      	mov	r3, r7
 80063a8:	f7fa f8d2 	bl	8000550 <__aeabi_dmul>
 80063ac:	a368      	add	r3, pc, #416	; (adr r3, 8006550 <atan+0x2e0>)
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f7f9 ff17 	bl	80001e4 <__adddf3>
 80063b6:	4642      	mov	r2, r8
 80063b8:	464b      	mov	r3, r9
 80063ba:	f7fa f8c9 	bl	8000550 <__aeabi_dmul>
 80063be:	a366      	add	r3, pc, #408	; (adr r3, 8006558 <atan+0x2e8>)
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	4680      	mov	r8, r0
 80063c6:	4689      	mov	r9, r1
 80063c8:	4630      	mov	r0, r6
 80063ca:	4639      	mov	r1, r7
 80063cc:	f7fa f8c0 	bl	8000550 <__aeabi_dmul>
 80063d0:	a363      	add	r3, pc, #396	; (adr r3, 8006560 <atan+0x2f0>)
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f7f9 ff03 	bl	80001e0 <__aeabi_dsub>
 80063da:	4632      	mov	r2, r6
 80063dc:	463b      	mov	r3, r7
 80063de:	f7fa f8b7 	bl	8000550 <__aeabi_dmul>
 80063e2:	a361      	add	r3, pc, #388	; (adr r3, 8006568 <atan+0x2f8>)
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f7f9 fefa 	bl	80001e0 <__aeabi_dsub>
 80063ec:	4632      	mov	r2, r6
 80063ee:	463b      	mov	r3, r7
 80063f0:	f7fa f8ae 	bl	8000550 <__aeabi_dmul>
 80063f4:	a35e      	add	r3, pc, #376	; (adr r3, 8006570 <atan+0x300>)
 80063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fa:	f7f9 fef1 	bl	80001e0 <__aeabi_dsub>
 80063fe:	4632      	mov	r2, r6
 8006400:	463b      	mov	r3, r7
 8006402:	f7fa f8a5 	bl	8000550 <__aeabi_dmul>
 8006406:	a35c      	add	r3, pc, #368	; (adr r3, 8006578 <atan+0x308>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7f9 fee8 	bl	80001e0 <__aeabi_dsub>
 8006410:	4632      	mov	r2, r6
 8006412:	463b      	mov	r3, r7
 8006414:	f7fa f89c 	bl	8000550 <__aeabi_dmul>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4640      	mov	r0, r8
 800641e:	4649      	mov	r1, r9
 8006420:	f7f9 fee0 	bl	80001e4 <__adddf3>
 8006424:	4622      	mov	r2, r4
 8006426:	462b      	mov	r3, r5
 8006428:	f7fa f892 	bl	8000550 <__aeabi_dmul>
 800642c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	d14b      	bne.n	80064ce <atan+0x25e>
 8006436:	4620      	mov	r0, r4
 8006438:	4629      	mov	r1, r5
 800643a:	f7f9 fed1 	bl	80001e0 <__aeabi_dsub>
 800643e:	e72c      	b.n	800629a <atan+0x2a>
 8006440:	ee10 0a10 	vmov	r0, s0
 8006444:	2200      	movs	r2, #0
 8006446:	4b53      	ldr	r3, [pc, #332]	; (8006594 <atan+0x324>)
 8006448:	4629      	mov	r1, r5
 800644a:	f7f9 fec9 	bl	80001e0 <__aeabi_dsub>
 800644e:	2200      	movs	r2, #0
 8006450:	4606      	mov	r6, r0
 8006452:	460f      	mov	r7, r1
 8006454:	4b4f      	ldr	r3, [pc, #316]	; (8006594 <atan+0x324>)
 8006456:	4620      	mov	r0, r4
 8006458:	4629      	mov	r1, r5
 800645a:	f7f9 fec3 	bl	80001e4 <__adddf3>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	4630      	mov	r0, r6
 8006464:	4639      	mov	r1, r7
 8006466:	f7fa f99d 	bl	80007a4 <__aeabi_ddiv>
 800646a:	f04f 0a01 	mov.w	sl, #1
 800646e:	4604      	mov	r4, r0
 8006470:	460d      	mov	r5, r1
 8006472:	e764      	b.n	800633e <atan+0xce>
 8006474:	4b49      	ldr	r3, [pc, #292]	; (800659c <atan+0x32c>)
 8006476:	429e      	cmp	r6, r3
 8006478:	dc1d      	bgt.n	80064b6 <atan+0x246>
 800647a:	ee10 0a10 	vmov	r0, s0
 800647e:	2200      	movs	r2, #0
 8006480:	4b47      	ldr	r3, [pc, #284]	; (80065a0 <atan+0x330>)
 8006482:	4629      	mov	r1, r5
 8006484:	f7f9 feac 	bl	80001e0 <__aeabi_dsub>
 8006488:	2200      	movs	r2, #0
 800648a:	4606      	mov	r6, r0
 800648c:	460f      	mov	r7, r1
 800648e:	4b44      	ldr	r3, [pc, #272]	; (80065a0 <atan+0x330>)
 8006490:	4620      	mov	r0, r4
 8006492:	4629      	mov	r1, r5
 8006494:	f7fa f85c 	bl	8000550 <__aeabi_dmul>
 8006498:	2200      	movs	r2, #0
 800649a:	4b3e      	ldr	r3, [pc, #248]	; (8006594 <atan+0x324>)
 800649c:	f7f9 fea2 	bl	80001e4 <__adddf3>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4630      	mov	r0, r6
 80064a6:	4639      	mov	r1, r7
 80064a8:	f7fa f97c 	bl	80007a4 <__aeabi_ddiv>
 80064ac:	f04f 0a02 	mov.w	sl, #2
 80064b0:	4604      	mov	r4, r0
 80064b2:	460d      	mov	r5, r1
 80064b4:	e743      	b.n	800633e <atan+0xce>
 80064b6:	462b      	mov	r3, r5
 80064b8:	ee10 2a10 	vmov	r2, s0
 80064bc:	2000      	movs	r0, #0
 80064be:	4939      	ldr	r1, [pc, #228]	; (80065a4 <atan+0x334>)
 80064c0:	f7fa f970 	bl	80007a4 <__aeabi_ddiv>
 80064c4:	f04f 0a03 	mov.w	sl, #3
 80064c8:	4604      	mov	r4, r0
 80064ca:	460d      	mov	r5, r1
 80064cc:	e737      	b.n	800633e <atan+0xce>
 80064ce:	4b36      	ldr	r3, [pc, #216]	; (80065a8 <atan+0x338>)
 80064d0:	4e36      	ldr	r6, [pc, #216]	; (80065ac <atan+0x33c>)
 80064d2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80064d6:	4456      	add	r6, sl
 80064d8:	449a      	add	sl, r3
 80064da:	e9da 2300 	ldrd	r2, r3, [sl]
 80064de:	f7f9 fe7f 	bl	80001e0 <__aeabi_dsub>
 80064e2:	4622      	mov	r2, r4
 80064e4:	462b      	mov	r3, r5
 80064e6:	f7f9 fe7b 	bl	80001e0 <__aeabi_dsub>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 80064f2:	f7f9 fe75 	bl	80001e0 <__aeabi_dsub>
 80064f6:	f1bb 0f00 	cmp.w	fp, #0
 80064fa:	4604      	mov	r4, r0
 80064fc:	460d      	mov	r5, r1
 80064fe:	f6bf aed6 	bge.w	80062ae <atan+0x3e>
 8006502:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006506:	461d      	mov	r5, r3
 8006508:	e6d1      	b.n	80062ae <atan+0x3e>
 800650a:	a51d      	add	r5, pc, #116	; (adr r5, 8006580 <atan+0x310>)
 800650c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006510:	e6cd      	b.n	80062ae <atan+0x3e>
 8006512:	bf00      	nop
 8006514:	f3af 8000 	nop.w
 8006518:	54442d18 	.word	0x54442d18
 800651c:	3ff921fb 	.word	0x3ff921fb
 8006520:	8800759c 	.word	0x8800759c
 8006524:	7e37e43c 	.word	0x7e37e43c
 8006528:	e322da11 	.word	0xe322da11
 800652c:	3f90ad3a 	.word	0x3f90ad3a
 8006530:	24760deb 	.word	0x24760deb
 8006534:	3fa97b4b 	.word	0x3fa97b4b
 8006538:	a0d03d51 	.word	0xa0d03d51
 800653c:	3fb10d66 	.word	0x3fb10d66
 8006540:	c54c206e 	.word	0xc54c206e
 8006544:	3fb745cd 	.word	0x3fb745cd
 8006548:	920083ff 	.word	0x920083ff
 800654c:	3fc24924 	.word	0x3fc24924
 8006550:	5555550d 	.word	0x5555550d
 8006554:	3fd55555 	.word	0x3fd55555
 8006558:	2c6a6c2f 	.word	0x2c6a6c2f
 800655c:	bfa2b444 	.word	0xbfa2b444
 8006560:	52defd9a 	.word	0x52defd9a
 8006564:	3fadde2d 	.word	0x3fadde2d
 8006568:	af749a6d 	.word	0xaf749a6d
 800656c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006570:	fe231671 	.word	0xfe231671
 8006574:	3fbc71c6 	.word	0x3fbc71c6
 8006578:	9998ebc4 	.word	0x9998ebc4
 800657c:	3fc99999 	.word	0x3fc99999
 8006580:	54442d18 	.word	0x54442d18
 8006584:	bff921fb 	.word	0xbff921fb
 8006588:	440fffff 	.word	0x440fffff
 800658c:	7ff00000 	.word	0x7ff00000
 8006590:	3fdbffff 	.word	0x3fdbffff
 8006594:	3ff00000 	.word	0x3ff00000
 8006598:	3ff2ffff 	.word	0x3ff2ffff
 800659c:	40037fff 	.word	0x40037fff
 80065a0:	3ff80000 	.word	0x3ff80000
 80065a4:	bff00000 	.word	0xbff00000
 80065a8:	08007768 	.word	0x08007768
 80065ac:	08007748 	.word	0x08007748

080065b0 <fabs>:
 80065b0:	ec51 0b10 	vmov	r0, r1, d0
 80065b4:	ee10 2a10 	vmov	r2, s0
 80065b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065bc:	ec43 2b10 	vmov	d0, r2, r3
 80065c0:	4770      	bx	lr
	...

080065c4 <pow>:
 80065c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	ed2d 8b04 	vpush	{d8-d9}
 80065cc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80068a0 <pow+0x2dc>
 80065d0:	b08d      	sub	sp, #52	; 0x34
 80065d2:	ec57 6b10 	vmov	r6, r7, d0
 80065d6:	ec55 4b11 	vmov	r4, r5, d1
 80065da:	f000 f9bd 	bl	8006958 <__ieee754_pow>
 80065de:	f999 3000 	ldrsb.w	r3, [r9]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	eeb0 8a40 	vmov.f32	s16, s0
 80065ea:	eef0 8a60 	vmov.f32	s17, s1
 80065ee:	46c8      	mov	r8, r9
 80065f0:	d05f      	beq.n	80066b2 <pow+0xee>
 80065f2:	4622      	mov	r2, r4
 80065f4:	462b      	mov	r3, r5
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7fa fa43 	bl	8000a84 <__aeabi_dcmpun>
 80065fe:	4683      	mov	fp, r0
 8006600:	2800      	cmp	r0, #0
 8006602:	d156      	bne.n	80066b2 <pow+0xee>
 8006604:	4632      	mov	r2, r6
 8006606:	463b      	mov	r3, r7
 8006608:	4630      	mov	r0, r6
 800660a:	4639      	mov	r1, r7
 800660c:	f7fa fa3a 	bl	8000a84 <__aeabi_dcmpun>
 8006610:	9001      	str	r0, [sp, #4]
 8006612:	b1e8      	cbz	r0, 8006650 <pow+0x8c>
 8006614:	2200      	movs	r2, #0
 8006616:	2300      	movs	r3, #0
 8006618:	4620      	mov	r0, r4
 800661a:	4629      	mov	r1, r5
 800661c:	f7fa fa00 	bl	8000a20 <__aeabi_dcmpeq>
 8006620:	2800      	cmp	r0, #0
 8006622:	d046      	beq.n	80066b2 <pow+0xee>
 8006624:	2301      	movs	r3, #1
 8006626:	9302      	str	r3, [sp, #8]
 8006628:	4b96      	ldr	r3, [pc, #600]	; (8006884 <pow+0x2c0>)
 800662a:	9303      	str	r3, [sp, #12]
 800662c:	4b96      	ldr	r3, [pc, #600]	; (8006888 <pow+0x2c4>)
 800662e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8006632:	2200      	movs	r2, #0
 8006634:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006638:	9b00      	ldr	r3, [sp, #0]
 800663a:	2b02      	cmp	r3, #2
 800663c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006640:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006644:	d033      	beq.n	80066ae <pow+0xea>
 8006646:	a802      	add	r0, sp, #8
 8006648:	f000 ff4c 	bl	80074e4 <matherr>
 800664c:	bb48      	cbnz	r0, 80066a2 <pow+0xde>
 800664e:	e05d      	b.n	800670c <pow+0x148>
 8006650:	f04f 0a00 	mov.w	sl, #0
 8006654:	f04f 0b00 	mov.w	fp, #0
 8006658:	4652      	mov	r2, sl
 800665a:	465b      	mov	r3, fp
 800665c:	4630      	mov	r0, r6
 800665e:	4639      	mov	r1, r7
 8006660:	f7fa f9de 	bl	8000a20 <__aeabi_dcmpeq>
 8006664:	ec4b ab19 	vmov	d9, sl, fp
 8006668:	2800      	cmp	r0, #0
 800666a:	d054      	beq.n	8006716 <pow+0x152>
 800666c:	4652      	mov	r2, sl
 800666e:	465b      	mov	r3, fp
 8006670:	4620      	mov	r0, r4
 8006672:	4629      	mov	r1, r5
 8006674:	f7fa f9d4 	bl	8000a20 <__aeabi_dcmpeq>
 8006678:	4680      	mov	r8, r0
 800667a:	b318      	cbz	r0, 80066c4 <pow+0x100>
 800667c:	2301      	movs	r3, #1
 800667e:	9302      	str	r3, [sp, #8]
 8006680:	4b80      	ldr	r3, [pc, #512]	; (8006884 <pow+0x2c0>)
 8006682:	9303      	str	r3, [sp, #12]
 8006684:	9b01      	ldr	r3, [sp, #4]
 8006686:	930a      	str	r3, [sp, #40]	; 0x28
 8006688:	9b00      	ldr	r3, [sp, #0]
 800668a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800668e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006692:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0d5      	beq.n	8006646 <pow+0x82>
 800669a:	4b7b      	ldr	r3, [pc, #492]	; (8006888 <pow+0x2c4>)
 800669c:	2200      	movs	r2, #0
 800669e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80066a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a4:	b11b      	cbz	r3, 80066ae <pow+0xea>
 80066a6:	f7ff fdb1 	bl	800620c <__errno>
 80066aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ac:	6003      	str	r3, [r0, #0]
 80066ae:	ed9d 8b08 	vldr	d8, [sp, #32]
 80066b2:	eeb0 0a48 	vmov.f32	s0, s16
 80066b6:	eef0 0a68 	vmov.f32	s1, s17
 80066ba:	b00d      	add	sp, #52	; 0x34
 80066bc:	ecbd 8b04 	vpop	{d8-d9}
 80066c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c4:	ec45 4b10 	vmov	d0, r4, r5
 80066c8:	f000 ff04 	bl	80074d4 <finite>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d0f0      	beq.n	80066b2 <pow+0xee>
 80066d0:	4652      	mov	r2, sl
 80066d2:	465b      	mov	r3, fp
 80066d4:	4620      	mov	r0, r4
 80066d6:	4629      	mov	r1, r5
 80066d8:	f7fa f9ac 	bl	8000a34 <__aeabi_dcmplt>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d0e8      	beq.n	80066b2 <pow+0xee>
 80066e0:	2301      	movs	r3, #1
 80066e2:	9302      	str	r3, [sp, #8]
 80066e4:	4b67      	ldr	r3, [pc, #412]	; (8006884 <pow+0x2c0>)
 80066e6:	9303      	str	r3, [sp, #12]
 80066e8:	f999 3000 	ldrsb.w	r3, [r9]
 80066ec:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80066f0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80066f4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80066f8:	b913      	cbnz	r3, 8006700 <pow+0x13c>
 80066fa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80066fe:	e7a2      	b.n	8006646 <pow+0x82>
 8006700:	4962      	ldr	r1, [pc, #392]	; (800688c <pow+0x2c8>)
 8006702:	2000      	movs	r0, #0
 8006704:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d19c      	bne.n	8006646 <pow+0x82>
 800670c:	f7ff fd7e 	bl	800620c <__errno>
 8006710:	2321      	movs	r3, #33	; 0x21
 8006712:	6003      	str	r3, [r0, #0]
 8006714:	e7c5      	b.n	80066a2 <pow+0xde>
 8006716:	eeb0 0a48 	vmov.f32	s0, s16
 800671a:	eef0 0a68 	vmov.f32	s1, s17
 800671e:	f000 fed9 	bl	80074d4 <finite>
 8006722:	9000      	str	r0, [sp, #0]
 8006724:	2800      	cmp	r0, #0
 8006726:	f040 8081 	bne.w	800682c <pow+0x268>
 800672a:	ec47 6b10 	vmov	d0, r6, r7
 800672e:	f000 fed1 	bl	80074d4 <finite>
 8006732:	2800      	cmp	r0, #0
 8006734:	d07a      	beq.n	800682c <pow+0x268>
 8006736:	ec45 4b10 	vmov	d0, r4, r5
 800673a:	f000 fecb 	bl	80074d4 <finite>
 800673e:	2800      	cmp	r0, #0
 8006740:	d074      	beq.n	800682c <pow+0x268>
 8006742:	ec53 2b18 	vmov	r2, r3, d8
 8006746:	ee18 0a10 	vmov	r0, s16
 800674a:	4619      	mov	r1, r3
 800674c:	f7fa f99a 	bl	8000a84 <__aeabi_dcmpun>
 8006750:	f999 9000 	ldrsb.w	r9, [r9]
 8006754:	4b4b      	ldr	r3, [pc, #300]	; (8006884 <pow+0x2c0>)
 8006756:	b1b0      	cbz	r0, 8006786 <pow+0x1c2>
 8006758:	2201      	movs	r2, #1
 800675a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800675e:	9b00      	ldr	r3, [sp, #0]
 8006760:	930a      	str	r3, [sp, #40]	; 0x28
 8006762:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006766:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800676a:	f1b9 0f00 	cmp.w	r9, #0
 800676e:	d0c4      	beq.n	80066fa <pow+0x136>
 8006770:	4652      	mov	r2, sl
 8006772:	465b      	mov	r3, fp
 8006774:	4650      	mov	r0, sl
 8006776:	4659      	mov	r1, fp
 8006778:	f7fa f814 	bl	80007a4 <__aeabi_ddiv>
 800677c:	f1b9 0f02 	cmp.w	r9, #2
 8006780:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006784:	e7c1      	b.n	800670a <pow+0x146>
 8006786:	2203      	movs	r2, #3
 8006788:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800678c:	900a      	str	r0, [sp, #40]	; 0x28
 800678e:	4629      	mov	r1, r5
 8006790:	4620      	mov	r0, r4
 8006792:	2200      	movs	r2, #0
 8006794:	4b3e      	ldr	r3, [pc, #248]	; (8006890 <pow+0x2cc>)
 8006796:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800679a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800679e:	f7f9 fed7 	bl	8000550 <__aeabi_dmul>
 80067a2:	4604      	mov	r4, r0
 80067a4:	460d      	mov	r5, r1
 80067a6:	f1b9 0f00 	cmp.w	r9, #0
 80067aa:	d124      	bne.n	80067f6 <pow+0x232>
 80067ac:	4b39      	ldr	r3, [pc, #228]	; (8006894 <pow+0x2d0>)
 80067ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80067b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067b6:	4630      	mov	r0, r6
 80067b8:	4652      	mov	r2, sl
 80067ba:	465b      	mov	r3, fp
 80067bc:	4639      	mov	r1, r7
 80067be:	f7fa f939 	bl	8000a34 <__aeabi_dcmplt>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d056      	beq.n	8006874 <pow+0x2b0>
 80067c6:	ec45 4b10 	vmov	d0, r4, r5
 80067ca:	f000 fe95 	bl	80074f8 <rint>
 80067ce:	4622      	mov	r2, r4
 80067d0:	462b      	mov	r3, r5
 80067d2:	ec51 0b10 	vmov	r0, r1, d0
 80067d6:	f7fa f923 	bl	8000a20 <__aeabi_dcmpeq>
 80067da:	b920      	cbnz	r0, 80067e6 <pow+0x222>
 80067dc:	4b2e      	ldr	r3, [pc, #184]	; (8006898 <pow+0x2d4>)
 80067de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80067e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067e6:	f998 3000 	ldrsb.w	r3, [r8]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d142      	bne.n	8006874 <pow+0x2b0>
 80067ee:	f7ff fd0d 	bl	800620c <__errno>
 80067f2:	2322      	movs	r3, #34	; 0x22
 80067f4:	e78d      	b.n	8006712 <pow+0x14e>
 80067f6:	4b29      	ldr	r3, [pc, #164]	; (800689c <pow+0x2d8>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067fe:	4630      	mov	r0, r6
 8006800:	4652      	mov	r2, sl
 8006802:	465b      	mov	r3, fp
 8006804:	4639      	mov	r1, r7
 8006806:	f7fa f915 	bl	8000a34 <__aeabi_dcmplt>
 800680a:	2800      	cmp	r0, #0
 800680c:	d0eb      	beq.n	80067e6 <pow+0x222>
 800680e:	ec45 4b10 	vmov	d0, r4, r5
 8006812:	f000 fe71 	bl	80074f8 <rint>
 8006816:	4622      	mov	r2, r4
 8006818:	462b      	mov	r3, r5
 800681a:	ec51 0b10 	vmov	r0, r1, d0
 800681e:	f7fa f8ff 	bl	8000a20 <__aeabi_dcmpeq>
 8006822:	2800      	cmp	r0, #0
 8006824:	d1df      	bne.n	80067e6 <pow+0x222>
 8006826:	2200      	movs	r2, #0
 8006828:	4b18      	ldr	r3, [pc, #96]	; (800688c <pow+0x2c8>)
 800682a:	e7da      	b.n	80067e2 <pow+0x21e>
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	ec51 0b18 	vmov	r0, r1, d8
 8006834:	f7fa f8f4 	bl	8000a20 <__aeabi_dcmpeq>
 8006838:	2800      	cmp	r0, #0
 800683a:	f43f af3a 	beq.w	80066b2 <pow+0xee>
 800683e:	ec47 6b10 	vmov	d0, r6, r7
 8006842:	f000 fe47 	bl	80074d4 <finite>
 8006846:	2800      	cmp	r0, #0
 8006848:	f43f af33 	beq.w	80066b2 <pow+0xee>
 800684c:	ec45 4b10 	vmov	d0, r4, r5
 8006850:	f000 fe40 	bl	80074d4 <finite>
 8006854:	2800      	cmp	r0, #0
 8006856:	f43f af2c 	beq.w	80066b2 <pow+0xee>
 800685a:	2304      	movs	r3, #4
 800685c:	9302      	str	r3, [sp, #8]
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <pow+0x2c0>)
 8006860:	9303      	str	r3, [sp, #12]
 8006862:	2300      	movs	r3, #0
 8006864:	930a      	str	r3, [sp, #40]	; 0x28
 8006866:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800686a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800686e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8006872:	e7b8      	b.n	80067e6 <pow+0x222>
 8006874:	a802      	add	r0, sp, #8
 8006876:	f000 fe35 	bl	80074e4 <matherr>
 800687a:	2800      	cmp	r0, #0
 800687c:	f47f af11 	bne.w	80066a2 <pow+0xde>
 8006880:	e7b5      	b.n	80067ee <pow+0x22a>
 8006882:	bf00      	nop
 8006884:	08007788 	.word	0x08007788
 8006888:	3ff00000 	.word	0x3ff00000
 800688c:	fff00000 	.word	0xfff00000
 8006890:	3fe00000 	.word	0x3fe00000
 8006894:	47efffff 	.word	0x47efffff
 8006898:	c7efffff 	.word	0xc7efffff
 800689c:	7ff00000 	.word	0x7ff00000
 80068a0:	20000070 	.word	0x20000070

080068a4 <sqrt>:
 80068a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068a8:	ed2d 8b02 	vpush	{d8}
 80068ac:	b08b      	sub	sp, #44	; 0x2c
 80068ae:	ec55 4b10 	vmov	r4, r5, d0
 80068b2:	f000 fd5f 	bl	8007374 <__ieee754_sqrt>
 80068b6:	4b26      	ldr	r3, [pc, #152]	; (8006950 <sqrt+0xac>)
 80068b8:	eeb0 8a40 	vmov.f32	s16, s0
 80068bc:	eef0 8a60 	vmov.f32	s17, s1
 80068c0:	f993 6000 	ldrsb.w	r6, [r3]
 80068c4:	1c73      	adds	r3, r6, #1
 80068c6:	d02a      	beq.n	800691e <sqrt+0x7a>
 80068c8:	4622      	mov	r2, r4
 80068ca:	462b      	mov	r3, r5
 80068cc:	4620      	mov	r0, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	f7fa f8d8 	bl	8000a84 <__aeabi_dcmpun>
 80068d4:	4607      	mov	r7, r0
 80068d6:	bb10      	cbnz	r0, 800691e <sqrt+0x7a>
 80068d8:	f04f 0800 	mov.w	r8, #0
 80068dc:	f04f 0900 	mov.w	r9, #0
 80068e0:	4642      	mov	r2, r8
 80068e2:	464b      	mov	r3, r9
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f7fa f8a4 	bl	8000a34 <__aeabi_dcmplt>
 80068ec:	b1b8      	cbz	r0, 800691e <sqrt+0x7a>
 80068ee:	2301      	movs	r3, #1
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	4b18      	ldr	r3, [pc, #96]	; (8006954 <sqrt+0xb0>)
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	9708      	str	r7, [sp, #32]
 80068f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80068fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006900:	b9b6      	cbnz	r6, 8006930 <sqrt+0x8c>
 8006902:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006906:	4668      	mov	r0, sp
 8006908:	f000 fdec 	bl	80074e4 <matherr>
 800690c:	b1d0      	cbz	r0, 8006944 <sqrt+0xa0>
 800690e:	9b08      	ldr	r3, [sp, #32]
 8006910:	b11b      	cbz	r3, 800691a <sqrt+0x76>
 8006912:	f7ff fc7b 	bl	800620c <__errno>
 8006916:	9b08      	ldr	r3, [sp, #32]
 8006918:	6003      	str	r3, [r0, #0]
 800691a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800691e:	eeb0 0a48 	vmov.f32	s0, s16
 8006922:	eef0 0a68 	vmov.f32	s1, s17
 8006926:	b00b      	add	sp, #44	; 0x2c
 8006928:	ecbd 8b02 	vpop	{d8}
 800692c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006930:	4642      	mov	r2, r8
 8006932:	464b      	mov	r3, r9
 8006934:	4640      	mov	r0, r8
 8006936:	4649      	mov	r1, r9
 8006938:	f7f9 ff34 	bl	80007a4 <__aeabi_ddiv>
 800693c:	2e02      	cmp	r6, #2
 800693e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006942:	d1e0      	bne.n	8006906 <sqrt+0x62>
 8006944:	f7ff fc62 	bl	800620c <__errno>
 8006948:	2321      	movs	r3, #33	; 0x21
 800694a:	6003      	str	r3, [r0, #0]
 800694c:	e7df      	b.n	800690e <sqrt+0x6a>
 800694e:	bf00      	nop
 8006950:	20000070 	.word	0x20000070
 8006954:	0800778c 	.word	0x0800778c

08006958 <__ieee754_pow>:
 8006958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	b091      	sub	sp, #68	; 0x44
 800695e:	ed8d 1b00 	vstr	d1, [sp]
 8006962:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006966:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800696a:	ea58 0302 	orrs.w	r3, r8, r2
 800696e:	ec57 6b10 	vmov	r6, r7, d0
 8006972:	f000 84be 	beq.w	80072f2 <__ieee754_pow+0x99a>
 8006976:	4b7a      	ldr	r3, [pc, #488]	; (8006b60 <__ieee754_pow+0x208>)
 8006978:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800697c:	429c      	cmp	r4, r3
 800697e:	463d      	mov	r5, r7
 8006980:	ee10 aa10 	vmov	sl, s0
 8006984:	dc09      	bgt.n	800699a <__ieee754_pow+0x42>
 8006986:	d103      	bne.n	8006990 <__ieee754_pow+0x38>
 8006988:	b93e      	cbnz	r6, 800699a <__ieee754_pow+0x42>
 800698a:	45a0      	cmp	r8, r4
 800698c:	dc0d      	bgt.n	80069aa <__ieee754_pow+0x52>
 800698e:	e001      	b.n	8006994 <__ieee754_pow+0x3c>
 8006990:	4598      	cmp	r8, r3
 8006992:	dc02      	bgt.n	800699a <__ieee754_pow+0x42>
 8006994:	4598      	cmp	r8, r3
 8006996:	d10e      	bne.n	80069b6 <__ieee754_pow+0x5e>
 8006998:	b16a      	cbz	r2, 80069b6 <__ieee754_pow+0x5e>
 800699a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800699e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80069a2:	ea54 030a 	orrs.w	r3, r4, sl
 80069a6:	f000 84a4 	beq.w	80072f2 <__ieee754_pow+0x99a>
 80069aa:	486e      	ldr	r0, [pc, #440]	; (8006b64 <__ieee754_pow+0x20c>)
 80069ac:	b011      	add	sp, #68	; 0x44
 80069ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b2:	f000 bd99 	b.w	80074e8 <nan>
 80069b6:	2d00      	cmp	r5, #0
 80069b8:	da53      	bge.n	8006a62 <__ieee754_pow+0x10a>
 80069ba:	4b6b      	ldr	r3, [pc, #428]	; (8006b68 <__ieee754_pow+0x210>)
 80069bc:	4598      	cmp	r8, r3
 80069be:	dc4d      	bgt.n	8006a5c <__ieee754_pow+0x104>
 80069c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80069c4:	4598      	cmp	r8, r3
 80069c6:	dd4c      	ble.n	8006a62 <__ieee754_pow+0x10a>
 80069c8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80069cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80069d0:	2b14      	cmp	r3, #20
 80069d2:	dd26      	ble.n	8006a22 <__ieee754_pow+0xca>
 80069d4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80069d8:	fa22 f103 	lsr.w	r1, r2, r3
 80069dc:	fa01 f303 	lsl.w	r3, r1, r3
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d13e      	bne.n	8006a62 <__ieee754_pow+0x10a>
 80069e4:	f001 0101 	and.w	r1, r1, #1
 80069e8:	f1c1 0b02 	rsb	fp, r1, #2
 80069ec:	2a00      	cmp	r2, #0
 80069ee:	d15b      	bne.n	8006aa8 <__ieee754_pow+0x150>
 80069f0:	4b5b      	ldr	r3, [pc, #364]	; (8006b60 <__ieee754_pow+0x208>)
 80069f2:	4598      	cmp	r8, r3
 80069f4:	d124      	bne.n	8006a40 <__ieee754_pow+0xe8>
 80069f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80069fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80069fe:	ea53 030a 	orrs.w	r3, r3, sl
 8006a02:	f000 8476 	beq.w	80072f2 <__ieee754_pow+0x99a>
 8006a06:	4b59      	ldr	r3, [pc, #356]	; (8006b6c <__ieee754_pow+0x214>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	dd2d      	ble.n	8006a68 <__ieee754_pow+0x110>
 8006a0c:	f1b9 0f00 	cmp.w	r9, #0
 8006a10:	f280 8473 	bge.w	80072fa <__ieee754_pow+0x9a2>
 8006a14:	2000      	movs	r0, #0
 8006a16:	2100      	movs	r1, #0
 8006a18:	ec41 0b10 	vmov	d0, r0, r1
 8006a1c:	b011      	add	sp, #68	; 0x44
 8006a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a22:	2a00      	cmp	r2, #0
 8006a24:	d13e      	bne.n	8006aa4 <__ieee754_pow+0x14c>
 8006a26:	f1c3 0314 	rsb	r3, r3, #20
 8006a2a:	fa48 f103 	asr.w	r1, r8, r3
 8006a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a32:	4543      	cmp	r3, r8
 8006a34:	f040 8469 	bne.w	800730a <__ieee754_pow+0x9b2>
 8006a38:	f001 0101 	and.w	r1, r1, #1
 8006a3c:	f1c1 0b02 	rsb	fp, r1, #2
 8006a40:	4b4b      	ldr	r3, [pc, #300]	; (8006b70 <__ieee754_pow+0x218>)
 8006a42:	4598      	cmp	r8, r3
 8006a44:	d118      	bne.n	8006a78 <__ieee754_pow+0x120>
 8006a46:	f1b9 0f00 	cmp.w	r9, #0
 8006a4a:	f280 845a 	bge.w	8007302 <__ieee754_pow+0x9aa>
 8006a4e:	4948      	ldr	r1, [pc, #288]	; (8006b70 <__ieee754_pow+0x218>)
 8006a50:	4632      	mov	r2, r6
 8006a52:	463b      	mov	r3, r7
 8006a54:	2000      	movs	r0, #0
 8006a56:	f7f9 fea5 	bl	80007a4 <__aeabi_ddiv>
 8006a5a:	e7dd      	b.n	8006a18 <__ieee754_pow+0xc0>
 8006a5c:	f04f 0b02 	mov.w	fp, #2
 8006a60:	e7c4      	b.n	80069ec <__ieee754_pow+0x94>
 8006a62:	f04f 0b00 	mov.w	fp, #0
 8006a66:	e7c1      	b.n	80069ec <__ieee754_pow+0x94>
 8006a68:	f1b9 0f00 	cmp.w	r9, #0
 8006a6c:	dad2      	bge.n	8006a14 <__ieee754_pow+0xbc>
 8006a6e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006a72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a76:	e7cf      	b.n	8006a18 <__ieee754_pow+0xc0>
 8006a78:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006a7c:	d106      	bne.n	8006a8c <__ieee754_pow+0x134>
 8006a7e:	4632      	mov	r2, r6
 8006a80:	463b      	mov	r3, r7
 8006a82:	4610      	mov	r0, r2
 8006a84:	4619      	mov	r1, r3
 8006a86:	f7f9 fd63 	bl	8000550 <__aeabi_dmul>
 8006a8a:	e7c5      	b.n	8006a18 <__ieee754_pow+0xc0>
 8006a8c:	4b39      	ldr	r3, [pc, #228]	; (8006b74 <__ieee754_pow+0x21c>)
 8006a8e:	4599      	cmp	r9, r3
 8006a90:	d10a      	bne.n	8006aa8 <__ieee754_pow+0x150>
 8006a92:	2d00      	cmp	r5, #0
 8006a94:	db08      	blt.n	8006aa8 <__ieee754_pow+0x150>
 8006a96:	ec47 6b10 	vmov	d0, r6, r7
 8006a9a:	b011      	add	sp, #68	; 0x44
 8006a9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	f000 bc68 	b.w	8007374 <__ieee754_sqrt>
 8006aa4:	f04f 0b00 	mov.w	fp, #0
 8006aa8:	ec47 6b10 	vmov	d0, r6, r7
 8006aac:	f7ff fd80 	bl	80065b0 <fabs>
 8006ab0:	ec51 0b10 	vmov	r0, r1, d0
 8006ab4:	f1ba 0f00 	cmp.w	sl, #0
 8006ab8:	d127      	bne.n	8006b0a <__ieee754_pow+0x1b2>
 8006aba:	b124      	cbz	r4, 8006ac6 <__ieee754_pow+0x16e>
 8006abc:	4b2c      	ldr	r3, [pc, #176]	; (8006b70 <__ieee754_pow+0x218>)
 8006abe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d121      	bne.n	8006b0a <__ieee754_pow+0x1b2>
 8006ac6:	f1b9 0f00 	cmp.w	r9, #0
 8006aca:	da05      	bge.n	8006ad8 <__ieee754_pow+0x180>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	4927      	ldr	r1, [pc, #156]	; (8006b70 <__ieee754_pow+0x218>)
 8006ad4:	f7f9 fe66 	bl	80007a4 <__aeabi_ddiv>
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	da9d      	bge.n	8006a18 <__ieee754_pow+0xc0>
 8006adc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006ae0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006ae4:	ea54 030b 	orrs.w	r3, r4, fp
 8006ae8:	d108      	bne.n	8006afc <__ieee754_pow+0x1a4>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4610      	mov	r0, r2
 8006af0:	4619      	mov	r1, r3
 8006af2:	f7f9 fb75 	bl	80001e0 <__aeabi_dsub>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	e7ac      	b.n	8006a56 <__ieee754_pow+0xfe>
 8006afc:	f1bb 0f01 	cmp.w	fp, #1
 8006b00:	d18a      	bne.n	8006a18 <__ieee754_pow+0xc0>
 8006b02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b06:	4619      	mov	r1, r3
 8006b08:	e786      	b.n	8006a18 <__ieee754_pow+0xc0>
 8006b0a:	0fed      	lsrs	r5, r5, #31
 8006b0c:	1e6b      	subs	r3, r5, #1
 8006b0e:	930d      	str	r3, [sp, #52]	; 0x34
 8006b10:	ea5b 0303 	orrs.w	r3, fp, r3
 8006b14:	d102      	bne.n	8006b1c <__ieee754_pow+0x1c4>
 8006b16:	4632      	mov	r2, r6
 8006b18:	463b      	mov	r3, r7
 8006b1a:	e7e8      	b.n	8006aee <__ieee754_pow+0x196>
 8006b1c:	4b16      	ldr	r3, [pc, #88]	; (8006b78 <__ieee754_pow+0x220>)
 8006b1e:	4598      	cmp	r8, r3
 8006b20:	f340 80fe 	ble.w	8006d20 <__ieee754_pow+0x3c8>
 8006b24:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006b28:	4598      	cmp	r8, r3
 8006b2a:	dd0a      	ble.n	8006b42 <__ieee754_pow+0x1ea>
 8006b2c:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <__ieee754_pow+0x214>)
 8006b2e:	429c      	cmp	r4, r3
 8006b30:	dc0d      	bgt.n	8006b4e <__ieee754_pow+0x1f6>
 8006b32:	f1b9 0f00 	cmp.w	r9, #0
 8006b36:	f6bf af6d 	bge.w	8006a14 <__ieee754_pow+0xbc>
 8006b3a:	a307      	add	r3, pc, #28	; (adr r3, 8006b58 <__ieee754_pow+0x200>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	e79f      	b.n	8006a82 <__ieee754_pow+0x12a>
 8006b42:	4b0e      	ldr	r3, [pc, #56]	; (8006b7c <__ieee754_pow+0x224>)
 8006b44:	429c      	cmp	r4, r3
 8006b46:	ddf4      	ble.n	8006b32 <__ieee754_pow+0x1da>
 8006b48:	4b09      	ldr	r3, [pc, #36]	; (8006b70 <__ieee754_pow+0x218>)
 8006b4a:	429c      	cmp	r4, r3
 8006b4c:	dd18      	ble.n	8006b80 <__ieee754_pow+0x228>
 8006b4e:	f1b9 0f00 	cmp.w	r9, #0
 8006b52:	dcf2      	bgt.n	8006b3a <__ieee754_pow+0x1e2>
 8006b54:	e75e      	b.n	8006a14 <__ieee754_pow+0xbc>
 8006b56:	bf00      	nop
 8006b58:	8800759c 	.word	0x8800759c
 8006b5c:	7e37e43c 	.word	0x7e37e43c
 8006b60:	7ff00000 	.word	0x7ff00000
 8006b64:	08007790 	.word	0x08007790
 8006b68:	433fffff 	.word	0x433fffff
 8006b6c:	3fefffff 	.word	0x3fefffff
 8006b70:	3ff00000 	.word	0x3ff00000
 8006b74:	3fe00000 	.word	0x3fe00000
 8006b78:	41e00000 	.word	0x41e00000
 8006b7c:	3feffffe 	.word	0x3feffffe
 8006b80:	2200      	movs	r2, #0
 8006b82:	4b63      	ldr	r3, [pc, #396]	; (8006d10 <__ieee754_pow+0x3b8>)
 8006b84:	f7f9 fb2c 	bl	80001e0 <__aeabi_dsub>
 8006b88:	a355      	add	r3, pc, #340	; (adr r3, 8006ce0 <__ieee754_pow+0x388>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	f7f9 fcdd 	bl	8000550 <__aeabi_dmul>
 8006b96:	a354      	add	r3, pc, #336	; (adr r3, 8006ce8 <__ieee754_pow+0x390>)
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	460f      	mov	r7, r1
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	f7f9 fcd4 	bl	8000550 <__aeabi_dmul>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bae:	4b59      	ldr	r3, [pc, #356]	; (8006d14 <__ieee754_pow+0x3bc>)
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f7f9 fccc 	bl	8000550 <__aeabi_dmul>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	a14c      	add	r1, pc, #304	; (adr r1, 8006cf0 <__ieee754_pow+0x398>)
 8006bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc2:	f7f9 fb0d 	bl	80001e0 <__aeabi_dsub>
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	462b      	mov	r3, r5
 8006bca:	f7f9 fcc1 	bl	8000550 <__aeabi_dmul>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	4950      	ldr	r1, [pc, #320]	; (8006d18 <__ieee754_pow+0x3c0>)
 8006bd6:	f7f9 fb03 	bl	80001e0 <__aeabi_dsub>
 8006bda:	4622      	mov	r2, r4
 8006bdc:	462b      	mov	r3, r5
 8006bde:	4680      	mov	r8, r0
 8006be0:	4689      	mov	r9, r1
 8006be2:	4620      	mov	r0, r4
 8006be4:	4629      	mov	r1, r5
 8006be6:	f7f9 fcb3 	bl	8000550 <__aeabi_dmul>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4640      	mov	r0, r8
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	f7f9 fcad 	bl	8000550 <__aeabi_dmul>
 8006bf6:	a340      	add	r3, pc, #256	; (adr r3, 8006cf8 <__ieee754_pow+0x3a0>)
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f7f9 fca8 	bl	8000550 <__aeabi_dmul>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c08:	f7f9 faea 	bl	80001e0 <__aeabi_dsub>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4604      	mov	r4, r0
 8006c12:	460d      	mov	r5, r1
 8006c14:	4630      	mov	r0, r6
 8006c16:	4639      	mov	r1, r7
 8006c18:	f7f9 fae4 	bl	80001e4 <__adddf3>
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c22:	4632      	mov	r2, r6
 8006c24:	463b      	mov	r3, r7
 8006c26:	f7f9 fadb 	bl	80001e0 <__aeabi_dsub>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4620      	mov	r0, r4
 8006c30:	4629      	mov	r1, r5
 8006c32:	f7f9 fad5 	bl	80001e0 <__aeabi_dsub>
 8006c36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c38:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	4606      	mov	r6, r0
 8006c40:	460f      	mov	r7, r1
 8006c42:	f040 81eb 	bne.w	800701c <__ieee754_pow+0x6c4>
 8006c46:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006d00 <__ieee754_pow+0x3a8>
 8006c4a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006c4e:	2400      	movs	r4, #0
 8006c50:	4622      	mov	r2, r4
 8006c52:	462b      	mov	r3, r5
 8006c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c5c:	f7f9 fac0 	bl	80001e0 <__aeabi_dsub>
 8006c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c64:	f7f9 fc74 	bl	8000550 <__aeabi_dmul>
 8006c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	4689      	mov	r9, r1
 8006c70:	4630      	mov	r0, r6
 8006c72:	4639      	mov	r1, r7
 8006c74:	f7f9 fc6c 	bl	8000550 <__aeabi_dmul>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4640      	mov	r0, r8
 8006c7e:	4649      	mov	r1, r9
 8006c80:	f7f9 fab0 	bl	80001e4 <__adddf3>
 8006c84:	4622      	mov	r2, r4
 8006c86:	462b      	mov	r3, r5
 8006c88:	4680      	mov	r8, r0
 8006c8a:	4689      	mov	r9, r1
 8006c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c90:	f7f9 fc5e 	bl	8000550 <__aeabi_dmul>
 8006c94:	460b      	mov	r3, r1
 8006c96:	4604      	mov	r4, r0
 8006c98:	460d      	mov	r5, r1
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	e9cd 4500 	strd	r4, r5, [sp]
 8006ca4:	f7f9 fa9e 	bl	80001e4 <__adddf3>
 8006ca8:	4b1c      	ldr	r3, [pc, #112]	; (8006d1c <__ieee754_pow+0x3c4>)
 8006caa:	4299      	cmp	r1, r3
 8006cac:	4606      	mov	r6, r0
 8006cae:	460f      	mov	r7, r1
 8006cb0:	468b      	mov	fp, r1
 8006cb2:	f340 82f7 	ble.w	80072a4 <__ieee754_pow+0x94c>
 8006cb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006cba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006cbe:	4303      	orrs	r3, r0
 8006cc0:	f000 81ea 	beq.w	8007098 <__ieee754_pow+0x740>
 8006cc4:	a310      	add	r3, pc, #64	; (adr r3, 8006d08 <__ieee754_pow+0x3b0>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cce:	f7f9 fc3f 	bl	8000550 <__aeabi_dmul>
 8006cd2:	a30d      	add	r3, pc, #52	; (adr r3, 8006d08 <__ieee754_pow+0x3b0>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	e6d5      	b.n	8006a86 <__ieee754_pow+0x12e>
 8006cda:	bf00      	nop
 8006cdc:	f3af 8000 	nop.w
 8006ce0:	60000000 	.word	0x60000000
 8006ce4:	3ff71547 	.word	0x3ff71547
 8006ce8:	f85ddf44 	.word	0xf85ddf44
 8006cec:	3e54ae0b 	.word	0x3e54ae0b
 8006cf0:	55555555 	.word	0x55555555
 8006cf4:	3fd55555 	.word	0x3fd55555
 8006cf8:	652b82fe 	.word	0x652b82fe
 8006cfc:	3ff71547 	.word	0x3ff71547
 8006d00:	00000000 	.word	0x00000000
 8006d04:	bff00000 	.word	0xbff00000
 8006d08:	8800759c 	.word	0x8800759c
 8006d0c:	7e37e43c 	.word	0x7e37e43c
 8006d10:	3ff00000 	.word	0x3ff00000
 8006d14:	3fd00000 	.word	0x3fd00000
 8006d18:	3fe00000 	.word	0x3fe00000
 8006d1c:	408fffff 	.word	0x408fffff
 8006d20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	da05      	bge.n	8006d36 <__ieee754_pow+0x3de>
 8006d2a:	4bd3      	ldr	r3, [pc, #844]	; (8007078 <__ieee754_pow+0x720>)
 8006d2c:	f7f9 fc10 	bl	8000550 <__aeabi_dmul>
 8006d30:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006d34:	460c      	mov	r4, r1
 8006d36:	1523      	asrs	r3, r4, #20
 8006d38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d3c:	4413      	add	r3, r2
 8006d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d40:	4bce      	ldr	r3, [pc, #824]	; (800707c <__ieee754_pow+0x724>)
 8006d42:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006d46:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006d4a:	429c      	cmp	r4, r3
 8006d4c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d50:	dd08      	ble.n	8006d64 <__ieee754_pow+0x40c>
 8006d52:	4bcb      	ldr	r3, [pc, #812]	; (8007080 <__ieee754_pow+0x728>)
 8006d54:	429c      	cmp	r4, r3
 8006d56:	f340 815e 	ble.w	8007016 <__ieee754_pow+0x6be>
 8006d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d60:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006d64:	f04f 0a00 	mov.w	sl, #0
 8006d68:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8006d6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d70:	4bc4      	ldr	r3, [pc, #784]	; (8007084 <__ieee754_pow+0x72c>)
 8006d72:	4413      	add	r3, r2
 8006d74:	ed93 7b00 	vldr	d7, [r3]
 8006d78:	4629      	mov	r1, r5
 8006d7a:	ec53 2b17 	vmov	r2, r3, d7
 8006d7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006d82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d86:	f7f9 fa2b 	bl	80001e0 <__aeabi_dsub>
 8006d8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d8e:	4606      	mov	r6, r0
 8006d90:	460f      	mov	r7, r1
 8006d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d96:	f7f9 fa25 	bl	80001e4 <__adddf3>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	2000      	movs	r0, #0
 8006da0:	49b9      	ldr	r1, [pc, #740]	; (8007088 <__ieee754_pow+0x730>)
 8006da2:	f7f9 fcff 	bl	80007a4 <__aeabi_ddiv>
 8006da6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4630      	mov	r0, r6
 8006db0:	4639      	mov	r1, r7
 8006db2:	f7f9 fbcd 	bl	8000550 <__aeabi_dmul>
 8006db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006dbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9302      	str	r3, [sp, #8]
 8006dc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006dca:	106d      	asrs	r5, r5, #1
 8006dcc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006dd0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	4614      	mov	r4, r2
 8006de0:	461d      	mov	r5, r3
 8006de2:	f7f9 fbb5 	bl	8000550 <__aeabi_dmul>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4630      	mov	r0, r6
 8006dec:	4639      	mov	r1, r7
 8006dee:	f7f9 f9f7 	bl	80001e0 <__aeabi_dsub>
 8006df2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006df6:	4606      	mov	r6, r0
 8006df8:	460f      	mov	r7, r1
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	f7f9 f9ef 	bl	80001e0 <__aeabi_dsub>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e0a:	f7f9 f9e9 	bl	80001e0 <__aeabi_dsub>
 8006e0e:	4642      	mov	r2, r8
 8006e10:	464b      	mov	r3, r9
 8006e12:	f7f9 fb9d 	bl	8000550 <__aeabi_dmul>
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	4639      	mov	r1, r7
 8006e1e:	f7f9 f9df 	bl	80001e0 <__aeabi_dsub>
 8006e22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006e26:	f7f9 fb93 	bl	8000550 <__aeabi_dmul>
 8006e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e32:	4610      	mov	r0, r2
 8006e34:	4619      	mov	r1, r3
 8006e36:	f7f9 fb8b 	bl	8000550 <__aeabi_dmul>
 8006e3a:	a37b      	add	r3, pc, #492	; (adr r3, 8007028 <__ieee754_pow+0x6d0>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	4604      	mov	r4, r0
 8006e42:	460d      	mov	r5, r1
 8006e44:	f7f9 fb84 	bl	8000550 <__aeabi_dmul>
 8006e48:	a379      	add	r3, pc, #484	; (adr r3, 8007030 <__ieee754_pow+0x6d8>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	f7f9 f9c9 	bl	80001e4 <__adddf3>
 8006e52:	4622      	mov	r2, r4
 8006e54:	462b      	mov	r3, r5
 8006e56:	f7f9 fb7b 	bl	8000550 <__aeabi_dmul>
 8006e5a:	a377      	add	r3, pc, #476	; (adr r3, 8007038 <__ieee754_pow+0x6e0>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f7f9 f9c0 	bl	80001e4 <__adddf3>
 8006e64:	4622      	mov	r2, r4
 8006e66:	462b      	mov	r3, r5
 8006e68:	f7f9 fb72 	bl	8000550 <__aeabi_dmul>
 8006e6c:	a374      	add	r3, pc, #464	; (adr r3, 8007040 <__ieee754_pow+0x6e8>)
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	f7f9 f9b7 	bl	80001e4 <__adddf3>
 8006e76:	4622      	mov	r2, r4
 8006e78:	462b      	mov	r3, r5
 8006e7a:	f7f9 fb69 	bl	8000550 <__aeabi_dmul>
 8006e7e:	a372      	add	r3, pc, #456	; (adr r3, 8007048 <__ieee754_pow+0x6f0>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f7f9 f9ae 	bl	80001e4 <__adddf3>
 8006e88:	4622      	mov	r2, r4
 8006e8a:	462b      	mov	r3, r5
 8006e8c:	f7f9 fb60 	bl	8000550 <__aeabi_dmul>
 8006e90:	a36f      	add	r3, pc, #444	; (adr r3, 8007050 <__ieee754_pow+0x6f8>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f7f9 f9a5 	bl	80001e4 <__adddf3>
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	460f      	mov	r7, r1
 8006ea0:	462b      	mov	r3, r5
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	f7f9 fb53 	bl	8000550 <__aeabi_dmul>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4630      	mov	r0, r6
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	f7f9 fb4d 	bl	8000550 <__aeabi_dmul>
 8006eb6:	4642      	mov	r2, r8
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ec2:	f7f9 f98f 	bl	80001e4 <__adddf3>
 8006ec6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eca:	f7f9 fb41 	bl	8000550 <__aeabi_dmul>
 8006ece:	4622      	mov	r2, r4
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	f7f9 f987 	bl	80001e4 <__adddf3>
 8006ed6:	4642      	mov	r2, r8
 8006ed8:	4606      	mov	r6, r0
 8006eda:	460f      	mov	r7, r1
 8006edc:	464b      	mov	r3, r9
 8006ede:	4640      	mov	r0, r8
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	f7f9 fb35 	bl	8000550 <__aeabi_dmul>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	4b68      	ldr	r3, [pc, #416]	; (800708c <__ieee754_pow+0x734>)
 8006eea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006eee:	f7f9 f979 	bl	80001e4 <__adddf3>
 8006ef2:	4632      	mov	r2, r6
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	f7f9 f975 	bl	80001e4 <__adddf3>
 8006efa:	9802      	ldr	r0, [sp, #8]
 8006efc:	460d      	mov	r5, r1
 8006efe:	4604      	mov	r4, r0
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4640      	mov	r0, r8
 8006f06:	4649      	mov	r1, r9
 8006f08:	f7f9 fb22 	bl	8000550 <__aeabi_dmul>
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4680      	mov	r8, r0
 8006f10:	4689      	mov	r9, r1
 8006f12:	4b5e      	ldr	r3, [pc, #376]	; (800708c <__ieee754_pow+0x734>)
 8006f14:	4620      	mov	r0, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	f7f9 f962 	bl	80001e0 <__aeabi_dsub>
 8006f1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f20:	f7f9 f95e 	bl	80001e0 <__aeabi_dsub>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 f958 	bl	80001e0 <__aeabi_dsub>
 8006f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f34:	f7f9 fb0c 	bl	8000550 <__aeabi_dmul>
 8006f38:	4622      	mov	r2, r4
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460f      	mov	r7, r1
 8006f3e:	462b      	mov	r3, r5
 8006f40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f44:	f7f9 fb04 	bl	8000550 <__aeabi_dmul>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	4639      	mov	r1, r7
 8006f50:	f7f9 f948 	bl	80001e4 <__adddf3>
 8006f54:	4606      	mov	r6, r0
 8006f56:	460f      	mov	r7, r1
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	4649      	mov	r1, r9
 8006f60:	f7f9 f940 	bl	80001e4 <__adddf3>
 8006f64:	9802      	ldr	r0, [sp, #8]
 8006f66:	a33c      	add	r3, pc, #240	; (adr r3, 8007058 <__ieee754_pow+0x700>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	460d      	mov	r5, r1
 8006f70:	f7f9 faee 	bl	8000550 <__aeabi_dmul>
 8006f74:	4642      	mov	r2, r8
 8006f76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	4629      	mov	r1, r5
 8006f80:	f7f9 f92e 	bl	80001e0 <__aeabi_dsub>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4630      	mov	r0, r6
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	f7f9 f928 	bl	80001e0 <__aeabi_dsub>
 8006f90:	a333      	add	r3, pc, #204	; (adr r3, 8007060 <__ieee754_pow+0x708>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 fadb 	bl	8000550 <__aeabi_dmul>
 8006f9a:	a333      	add	r3, pc, #204	; (adr r3, 8007068 <__ieee754_pow+0x710>)
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	460f      	mov	r7, r1
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f7f9 fad2 	bl	8000550 <__aeabi_dmul>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	f7f9 f916 	bl	80001e4 <__adddf3>
 8006fb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fba:	4b35      	ldr	r3, [pc, #212]	; (8007090 <__ieee754_pow+0x738>)
 8006fbc:	4413      	add	r3, r2
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f7f9 f90f 	bl	80001e4 <__adddf3>
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fca:	460d      	mov	r5, r1
 8006fcc:	f7f9 fa56 	bl	800047c <__aeabi_i2d>
 8006fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fd2:	4b30      	ldr	r3, [pc, #192]	; (8007094 <__ieee754_pow+0x73c>)
 8006fd4:	4413      	add	r3, r2
 8006fd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fda:	4606      	mov	r6, r0
 8006fdc:	460f      	mov	r7, r1
 8006fde:	4622      	mov	r2, r4
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fe6:	f7f9 f8fd 	bl	80001e4 <__adddf3>
 8006fea:	4642      	mov	r2, r8
 8006fec:	464b      	mov	r3, r9
 8006fee:	f7f9 f8f9 	bl	80001e4 <__adddf3>
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	f7f9 f8f5 	bl	80001e4 <__adddf3>
 8006ffa:	9802      	ldr	r0, [sp, #8]
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	463b      	mov	r3, r7
 8007000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007004:	f7f9 f8ec 	bl	80001e0 <__aeabi_dsub>
 8007008:	4642      	mov	r2, r8
 800700a:	464b      	mov	r3, r9
 800700c:	f7f9 f8e8 	bl	80001e0 <__aeabi_dsub>
 8007010:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007014:	e607      	b.n	8006c26 <__ieee754_pow+0x2ce>
 8007016:	f04f 0a01 	mov.w	sl, #1
 800701a:	e6a5      	b.n	8006d68 <__ieee754_pow+0x410>
 800701c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007070 <__ieee754_pow+0x718>
 8007020:	e613      	b.n	8006c4a <__ieee754_pow+0x2f2>
 8007022:	bf00      	nop
 8007024:	f3af 8000 	nop.w
 8007028:	4a454eef 	.word	0x4a454eef
 800702c:	3fca7e28 	.word	0x3fca7e28
 8007030:	93c9db65 	.word	0x93c9db65
 8007034:	3fcd864a 	.word	0x3fcd864a
 8007038:	a91d4101 	.word	0xa91d4101
 800703c:	3fd17460 	.word	0x3fd17460
 8007040:	518f264d 	.word	0x518f264d
 8007044:	3fd55555 	.word	0x3fd55555
 8007048:	db6fabff 	.word	0xdb6fabff
 800704c:	3fdb6db6 	.word	0x3fdb6db6
 8007050:	33333303 	.word	0x33333303
 8007054:	3fe33333 	.word	0x3fe33333
 8007058:	e0000000 	.word	0xe0000000
 800705c:	3feec709 	.word	0x3feec709
 8007060:	dc3a03fd 	.word	0xdc3a03fd
 8007064:	3feec709 	.word	0x3feec709
 8007068:	145b01f5 	.word	0x145b01f5
 800706c:	be3e2fe0 	.word	0xbe3e2fe0
 8007070:	00000000 	.word	0x00000000
 8007074:	3ff00000 	.word	0x3ff00000
 8007078:	43400000 	.word	0x43400000
 800707c:	0003988e 	.word	0x0003988e
 8007080:	000bb679 	.word	0x000bb679
 8007084:	08007798 	.word	0x08007798
 8007088:	3ff00000 	.word	0x3ff00000
 800708c:	40080000 	.word	0x40080000
 8007090:	080077b8 	.word	0x080077b8
 8007094:	080077a8 	.word	0x080077a8
 8007098:	a3b4      	add	r3, pc, #720	; (adr r3, 800736c <__ieee754_pow+0xa14>)
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	4640      	mov	r0, r8
 80070a0:	4649      	mov	r1, r9
 80070a2:	f7f9 f89f 	bl	80001e4 <__adddf3>
 80070a6:	4622      	mov	r2, r4
 80070a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070ac:	462b      	mov	r3, r5
 80070ae:	4630      	mov	r0, r6
 80070b0:	4639      	mov	r1, r7
 80070b2:	f7f9 f895 	bl	80001e0 <__aeabi_dsub>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070be:	f7f9 fcd7 	bl	8000a70 <__aeabi_dcmpgt>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	f47f adfe 	bne.w	8006cc4 <__ieee754_pow+0x36c>
 80070c8:	4aa3      	ldr	r2, [pc, #652]	; (8007358 <__ieee754_pow+0xa00>)
 80070ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070ce:	4293      	cmp	r3, r2
 80070d0:	f340 810a 	ble.w	80072e8 <__ieee754_pow+0x990>
 80070d4:	151b      	asrs	r3, r3, #20
 80070d6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80070da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80070de:	fa4a f303 	asr.w	r3, sl, r3
 80070e2:	445b      	add	r3, fp
 80070e4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80070e8:	4e9c      	ldr	r6, [pc, #624]	; (800735c <__ieee754_pow+0xa04>)
 80070ea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80070ee:	4116      	asrs	r6, r2
 80070f0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80070f4:	2000      	movs	r0, #0
 80070f6:	ea23 0106 	bic.w	r1, r3, r6
 80070fa:	f1c2 0214 	rsb	r2, r2, #20
 80070fe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007102:	fa4a fa02 	asr.w	sl, sl, r2
 8007106:	f1bb 0f00 	cmp.w	fp, #0
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	4620      	mov	r0, r4
 8007110:	4629      	mov	r1, r5
 8007112:	bfb8      	it	lt
 8007114:	f1ca 0a00 	rsblt	sl, sl, #0
 8007118:	f7f9 f862 	bl	80001e0 <__aeabi_dsub>
 800711c:	e9cd 0100 	strd	r0, r1, [sp]
 8007120:	4642      	mov	r2, r8
 8007122:	464b      	mov	r3, r9
 8007124:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007128:	f7f9 f85c 	bl	80001e4 <__adddf3>
 800712c:	2000      	movs	r0, #0
 800712e:	a378      	add	r3, pc, #480	; (adr r3, 8007310 <__ieee754_pow+0x9b8>)
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	4604      	mov	r4, r0
 8007136:	460d      	mov	r5, r1
 8007138:	f7f9 fa0a 	bl	8000550 <__aeabi_dmul>
 800713c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007140:	4606      	mov	r6, r0
 8007142:	460f      	mov	r7, r1
 8007144:	4620      	mov	r0, r4
 8007146:	4629      	mov	r1, r5
 8007148:	f7f9 f84a 	bl	80001e0 <__aeabi_dsub>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4640      	mov	r0, r8
 8007152:	4649      	mov	r1, r9
 8007154:	f7f9 f844 	bl	80001e0 <__aeabi_dsub>
 8007158:	a36f      	add	r3, pc, #444	; (adr r3, 8007318 <__ieee754_pow+0x9c0>)
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	f7f9 f9f7 	bl	8000550 <__aeabi_dmul>
 8007162:	a36f      	add	r3, pc, #444	; (adr r3, 8007320 <__ieee754_pow+0x9c8>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	4680      	mov	r8, r0
 800716a:	4689      	mov	r9, r1
 800716c:	4620      	mov	r0, r4
 800716e:	4629      	mov	r1, r5
 8007170:	f7f9 f9ee 	bl	8000550 <__aeabi_dmul>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4640      	mov	r0, r8
 800717a:	4649      	mov	r1, r9
 800717c:	f7f9 f832 	bl	80001e4 <__adddf3>
 8007180:	4604      	mov	r4, r0
 8007182:	460d      	mov	r5, r1
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4630      	mov	r0, r6
 800718a:	4639      	mov	r1, r7
 800718c:	f7f9 f82a 	bl	80001e4 <__adddf3>
 8007190:	4632      	mov	r2, r6
 8007192:	463b      	mov	r3, r7
 8007194:	4680      	mov	r8, r0
 8007196:	4689      	mov	r9, r1
 8007198:	f7f9 f822 	bl	80001e0 <__aeabi_dsub>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4620      	mov	r0, r4
 80071a2:	4629      	mov	r1, r5
 80071a4:	f7f9 f81c 	bl	80001e0 <__aeabi_dsub>
 80071a8:	4642      	mov	r2, r8
 80071aa:	4606      	mov	r6, r0
 80071ac:	460f      	mov	r7, r1
 80071ae:	464b      	mov	r3, r9
 80071b0:	4640      	mov	r0, r8
 80071b2:	4649      	mov	r1, r9
 80071b4:	f7f9 f9cc 	bl	8000550 <__aeabi_dmul>
 80071b8:	a35b      	add	r3, pc, #364	; (adr r3, 8007328 <__ieee754_pow+0x9d0>)
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	4604      	mov	r4, r0
 80071c0:	460d      	mov	r5, r1
 80071c2:	f7f9 f9c5 	bl	8000550 <__aeabi_dmul>
 80071c6:	a35a      	add	r3, pc, #360	; (adr r3, 8007330 <__ieee754_pow+0x9d8>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f7f9 f808 	bl	80001e0 <__aeabi_dsub>
 80071d0:	4622      	mov	r2, r4
 80071d2:	462b      	mov	r3, r5
 80071d4:	f7f9 f9bc 	bl	8000550 <__aeabi_dmul>
 80071d8:	a357      	add	r3, pc, #348	; (adr r3, 8007338 <__ieee754_pow+0x9e0>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f9 f801 	bl	80001e4 <__adddf3>
 80071e2:	4622      	mov	r2, r4
 80071e4:	462b      	mov	r3, r5
 80071e6:	f7f9 f9b3 	bl	8000550 <__aeabi_dmul>
 80071ea:	a355      	add	r3, pc, #340	; (adr r3, 8007340 <__ieee754_pow+0x9e8>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f7f8 fff6 	bl	80001e0 <__aeabi_dsub>
 80071f4:	4622      	mov	r2, r4
 80071f6:	462b      	mov	r3, r5
 80071f8:	f7f9 f9aa 	bl	8000550 <__aeabi_dmul>
 80071fc:	a352      	add	r3, pc, #328	; (adr r3, 8007348 <__ieee754_pow+0x9f0>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f8 ffef 	bl	80001e4 <__adddf3>
 8007206:	4622      	mov	r2, r4
 8007208:	462b      	mov	r3, r5
 800720a:	f7f9 f9a1 	bl	8000550 <__aeabi_dmul>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4640      	mov	r0, r8
 8007214:	4649      	mov	r1, r9
 8007216:	f7f8 ffe3 	bl	80001e0 <__aeabi_dsub>
 800721a:	4604      	mov	r4, r0
 800721c:	460d      	mov	r5, r1
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	4640      	mov	r0, r8
 8007224:	4649      	mov	r1, r9
 8007226:	f7f9 f993 	bl	8000550 <__aeabi_dmul>
 800722a:	2200      	movs	r2, #0
 800722c:	e9cd 0100 	strd	r0, r1, [sp]
 8007230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007234:	4620      	mov	r0, r4
 8007236:	4629      	mov	r1, r5
 8007238:	f7f8 ffd2 	bl	80001e0 <__aeabi_dsub>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007244:	f7f9 faae 	bl	80007a4 <__aeabi_ddiv>
 8007248:	4632      	mov	r2, r6
 800724a:	4604      	mov	r4, r0
 800724c:	460d      	mov	r5, r1
 800724e:	463b      	mov	r3, r7
 8007250:	4640      	mov	r0, r8
 8007252:	4649      	mov	r1, r9
 8007254:	f7f9 f97c 	bl	8000550 <__aeabi_dmul>
 8007258:	4632      	mov	r2, r6
 800725a:	463b      	mov	r3, r7
 800725c:	f7f8 ffc2 	bl	80001e4 <__adddf3>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4620      	mov	r0, r4
 8007266:	4629      	mov	r1, r5
 8007268:	f7f8 ffba 	bl	80001e0 <__aeabi_dsub>
 800726c:	4642      	mov	r2, r8
 800726e:	464b      	mov	r3, r9
 8007270:	f7f8 ffb6 	bl	80001e0 <__aeabi_dsub>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	2000      	movs	r0, #0
 800727a:	4939      	ldr	r1, [pc, #228]	; (8007360 <__ieee754_pow+0xa08>)
 800727c:	f7f8 ffb0 	bl	80001e0 <__aeabi_dsub>
 8007280:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007284:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	da2f      	bge.n	80072ee <__ieee754_pow+0x996>
 800728e:	4650      	mov	r0, sl
 8007290:	ec43 2b10 	vmov	d0, r2, r3
 8007294:	f000 f9b4 	bl	8007600 <scalbn>
 8007298:	ec51 0b10 	vmov	r0, r1, d0
 800729c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072a0:	f7ff bbf1 	b.w	8006a86 <__ieee754_pow+0x12e>
 80072a4:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <__ieee754_pow+0xa0c>)
 80072a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80072aa:	429e      	cmp	r6, r3
 80072ac:	f77f af0c 	ble.w	80070c8 <__ieee754_pow+0x770>
 80072b0:	4b2d      	ldr	r3, [pc, #180]	; (8007368 <__ieee754_pow+0xa10>)
 80072b2:	440b      	add	r3, r1
 80072b4:	4303      	orrs	r3, r0
 80072b6:	d00b      	beq.n	80072d0 <__ieee754_pow+0x978>
 80072b8:	a325      	add	r3, pc, #148	; (adr r3, 8007350 <__ieee754_pow+0x9f8>)
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072c2:	f7f9 f945 	bl	8000550 <__aeabi_dmul>
 80072c6:	a322      	add	r3, pc, #136	; (adr r3, 8007350 <__ieee754_pow+0x9f8>)
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f7ff bbdb 	b.w	8006a86 <__ieee754_pow+0x12e>
 80072d0:	4622      	mov	r2, r4
 80072d2:	462b      	mov	r3, r5
 80072d4:	f7f8 ff84 	bl	80001e0 <__aeabi_dsub>
 80072d8:	4642      	mov	r2, r8
 80072da:	464b      	mov	r3, r9
 80072dc:	f7f9 fbbe 	bl	8000a5c <__aeabi_dcmpge>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	f43f aef1 	beq.w	80070c8 <__ieee754_pow+0x770>
 80072e6:	e7e7      	b.n	80072b8 <__ieee754_pow+0x960>
 80072e8:	f04f 0a00 	mov.w	sl, #0
 80072ec:	e718      	b.n	8007120 <__ieee754_pow+0x7c8>
 80072ee:	4621      	mov	r1, r4
 80072f0:	e7d4      	b.n	800729c <__ieee754_pow+0x944>
 80072f2:	2000      	movs	r0, #0
 80072f4:	491a      	ldr	r1, [pc, #104]	; (8007360 <__ieee754_pow+0xa08>)
 80072f6:	f7ff bb8f 	b.w	8006a18 <__ieee754_pow+0xc0>
 80072fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072fe:	f7ff bb8b 	b.w	8006a18 <__ieee754_pow+0xc0>
 8007302:	4630      	mov	r0, r6
 8007304:	4639      	mov	r1, r7
 8007306:	f7ff bb87 	b.w	8006a18 <__ieee754_pow+0xc0>
 800730a:	4693      	mov	fp, r2
 800730c:	f7ff bb98 	b.w	8006a40 <__ieee754_pow+0xe8>
 8007310:	00000000 	.word	0x00000000
 8007314:	3fe62e43 	.word	0x3fe62e43
 8007318:	fefa39ef 	.word	0xfefa39ef
 800731c:	3fe62e42 	.word	0x3fe62e42
 8007320:	0ca86c39 	.word	0x0ca86c39
 8007324:	be205c61 	.word	0xbe205c61
 8007328:	72bea4d0 	.word	0x72bea4d0
 800732c:	3e663769 	.word	0x3e663769
 8007330:	c5d26bf1 	.word	0xc5d26bf1
 8007334:	3ebbbd41 	.word	0x3ebbbd41
 8007338:	af25de2c 	.word	0xaf25de2c
 800733c:	3f11566a 	.word	0x3f11566a
 8007340:	16bebd93 	.word	0x16bebd93
 8007344:	3f66c16c 	.word	0x3f66c16c
 8007348:	5555553e 	.word	0x5555553e
 800734c:	3fc55555 	.word	0x3fc55555
 8007350:	c2f8f359 	.word	0xc2f8f359
 8007354:	01a56e1f 	.word	0x01a56e1f
 8007358:	3fe00000 	.word	0x3fe00000
 800735c:	000fffff 	.word	0x000fffff
 8007360:	3ff00000 	.word	0x3ff00000
 8007364:	4090cbff 	.word	0x4090cbff
 8007368:	3f6f3400 	.word	0x3f6f3400
 800736c:	652b82fe 	.word	0x652b82fe
 8007370:	3c971547 	.word	0x3c971547

08007374 <__ieee754_sqrt>:
 8007374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007378:	4955      	ldr	r1, [pc, #340]	; (80074d0 <__ieee754_sqrt+0x15c>)
 800737a:	ec55 4b10 	vmov	r4, r5, d0
 800737e:	43a9      	bics	r1, r5
 8007380:	462b      	mov	r3, r5
 8007382:	462a      	mov	r2, r5
 8007384:	d112      	bne.n	80073ac <__ieee754_sqrt+0x38>
 8007386:	ee10 2a10 	vmov	r2, s0
 800738a:	ee10 0a10 	vmov	r0, s0
 800738e:	4629      	mov	r1, r5
 8007390:	f7f9 f8de 	bl	8000550 <__aeabi_dmul>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4620      	mov	r0, r4
 800739a:	4629      	mov	r1, r5
 800739c:	f7f8 ff22 	bl	80001e4 <__adddf3>
 80073a0:	4604      	mov	r4, r0
 80073a2:	460d      	mov	r5, r1
 80073a4:	ec45 4b10 	vmov	d0, r4, r5
 80073a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ac:	2d00      	cmp	r5, #0
 80073ae:	ee10 0a10 	vmov	r0, s0
 80073b2:	4621      	mov	r1, r4
 80073b4:	dc0f      	bgt.n	80073d6 <__ieee754_sqrt+0x62>
 80073b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80073ba:	4330      	orrs	r0, r6
 80073bc:	d0f2      	beq.n	80073a4 <__ieee754_sqrt+0x30>
 80073be:	b155      	cbz	r5, 80073d6 <__ieee754_sqrt+0x62>
 80073c0:	ee10 2a10 	vmov	r2, s0
 80073c4:	4620      	mov	r0, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	f7f8 ff0a 	bl	80001e0 <__aeabi_dsub>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	f7f9 f9e8 	bl	80007a4 <__aeabi_ddiv>
 80073d4:	e7e4      	b.n	80073a0 <__ieee754_sqrt+0x2c>
 80073d6:	151b      	asrs	r3, r3, #20
 80073d8:	d073      	beq.n	80074c2 <__ieee754_sqrt+0x14e>
 80073da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80073de:	07dd      	lsls	r5, r3, #31
 80073e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80073e4:	bf48      	it	mi
 80073e6:	0fc8      	lsrmi	r0, r1, #31
 80073e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80073ec:	bf44      	itt	mi
 80073ee:	0049      	lslmi	r1, r1, #1
 80073f0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80073f4:	2500      	movs	r5, #0
 80073f6:	1058      	asrs	r0, r3, #1
 80073f8:	0fcb      	lsrs	r3, r1, #31
 80073fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80073fe:	0049      	lsls	r1, r1, #1
 8007400:	2316      	movs	r3, #22
 8007402:	462c      	mov	r4, r5
 8007404:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007408:	19a7      	adds	r7, r4, r6
 800740a:	4297      	cmp	r7, r2
 800740c:	bfde      	ittt	le
 800740e:	19bc      	addle	r4, r7, r6
 8007410:	1bd2      	suble	r2, r2, r7
 8007412:	19ad      	addle	r5, r5, r6
 8007414:	0fcf      	lsrs	r7, r1, #31
 8007416:	3b01      	subs	r3, #1
 8007418:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800741c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007420:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007424:	d1f0      	bne.n	8007408 <__ieee754_sqrt+0x94>
 8007426:	f04f 0c20 	mov.w	ip, #32
 800742a:	469e      	mov	lr, r3
 800742c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007430:	42a2      	cmp	r2, r4
 8007432:	eb06 070e 	add.w	r7, r6, lr
 8007436:	dc02      	bgt.n	800743e <__ieee754_sqrt+0xca>
 8007438:	d112      	bne.n	8007460 <__ieee754_sqrt+0xec>
 800743a:	428f      	cmp	r7, r1
 800743c:	d810      	bhi.n	8007460 <__ieee754_sqrt+0xec>
 800743e:	2f00      	cmp	r7, #0
 8007440:	eb07 0e06 	add.w	lr, r7, r6
 8007444:	da42      	bge.n	80074cc <__ieee754_sqrt+0x158>
 8007446:	f1be 0f00 	cmp.w	lr, #0
 800744a:	db3f      	blt.n	80074cc <__ieee754_sqrt+0x158>
 800744c:	f104 0801 	add.w	r8, r4, #1
 8007450:	1b12      	subs	r2, r2, r4
 8007452:	428f      	cmp	r7, r1
 8007454:	bf88      	it	hi
 8007456:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800745a:	1bc9      	subs	r1, r1, r7
 800745c:	4433      	add	r3, r6
 800745e:	4644      	mov	r4, r8
 8007460:	0052      	lsls	r2, r2, #1
 8007462:	f1bc 0c01 	subs.w	ip, ip, #1
 8007466:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800746a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800746e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007472:	d1dd      	bne.n	8007430 <__ieee754_sqrt+0xbc>
 8007474:	430a      	orrs	r2, r1
 8007476:	d006      	beq.n	8007486 <__ieee754_sqrt+0x112>
 8007478:	1c5c      	adds	r4, r3, #1
 800747a:	bf13      	iteet	ne
 800747c:	3301      	addne	r3, #1
 800747e:	3501      	addeq	r5, #1
 8007480:	4663      	moveq	r3, ip
 8007482:	f023 0301 	bicne.w	r3, r3, #1
 8007486:	106a      	asrs	r2, r5, #1
 8007488:	085b      	lsrs	r3, r3, #1
 800748a:	07e9      	lsls	r1, r5, #31
 800748c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007490:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007494:	bf48      	it	mi
 8007496:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800749a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800749e:	461c      	mov	r4, r3
 80074a0:	e780      	b.n	80073a4 <__ieee754_sqrt+0x30>
 80074a2:	0aca      	lsrs	r2, r1, #11
 80074a4:	3815      	subs	r0, #21
 80074a6:	0549      	lsls	r1, r1, #21
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	d0fa      	beq.n	80074a2 <__ieee754_sqrt+0x12e>
 80074ac:	02d6      	lsls	r6, r2, #11
 80074ae:	d50a      	bpl.n	80074c6 <__ieee754_sqrt+0x152>
 80074b0:	f1c3 0420 	rsb	r4, r3, #32
 80074b4:	fa21 f404 	lsr.w	r4, r1, r4
 80074b8:	1e5d      	subs	r5, r3, #1
 80074ba:	4099      	lsls	r1, r3
 80074bc:	4322      	orrs	r2, r4
 80074be:	1b43      	subs	r3, r0, r5
 80074c0:	e78b      	b.n	80073da <__ieee754_sqrt+0x66>
 80074c2:	4618      	mov	r0, r3
 80074c4:	e7f0      	b.n	80074a8 <__ieee754_sqrt+0x134>
 80074c6:	0052      	lsls	r2, r2, #1
 80074c8:	3301      	adds	r3, #1
 80074ca:	e7ef      	b.n	80074ac <__ieee754_sqrt+0x138>
 80074cc:	46a0      	mov	r8, r4
 80074ce:	e7bf      	b.n	8007450 <__ieee754_sqrt+0xdc>
 80074d0:	7ff00000 	.word	0x7ff00000

080074d4 <finite>:
 80074d4:	ee10 3a90 	vmov	r3, s1
 80074d8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80074dc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80074e0:	0fc0      	lsrs	r0, r0, #31
 80074e2:	4770      	bx	lr

080074e4 <matherr>:
 80074e4:	2000      	movs	r0, #0
 80074e6:	4770      	bx	lr

080074e8 <nan>:
 80074e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80074f0 <nan+0x8>
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	00000000 	.word	0x00000000
 80074f4:	7ff80000 	.word	0x7ff80000

080074f8 <rint>:
 80074f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074fa:	ec51 0b10 	vmov	r0, r1, d0
 80074fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007502:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007506:	2e13      	cmp	r6, #19
 8007508:	460b      	mov	r3, r1
 800750a:	ee10 4a10 	vmov	r4, s0
 800750e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007512:	dc56      	bgt.n	80075c2 <rint+0xca>
 8007514:	2e00      	cmp	r6, #0
 8007516:	da2b      	bge.n	8007570 <rint+0x78>
 8007518:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800751c:	4302      	orrs	r2, r0
 800751e:	d023      	beq.n	8007568 <rint+0x70>
 8007520:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007524:	4302      	orrs	r2, r0
 8007526:	4254      	negs	r4, r2
 8007528:	4314      	orrs	r4, r2
 800752a:	0c4b      	lsrs	r3, r1, #17
 800752c:	0b24      	lsrs	r4, r4, #12
 800752e:	045b      	lsls	r3, r3, #17
 8007530:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007534:	ea44 0103 	orr.w	r1, r4, r3
 8007538:	460b      	mov	r3, r1
 800753a:	492f      	ldr	r1, [pc, #188]	; (80075f8 <rint+0x100>)
 800753c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8007540:	e9d1 6700 	ldrd	r6, r7, [r1]
 8007544:	4602      	mov	r2, r0
 8007546:	4639      	mov	r1, r7
 8007548:	4630      	mov	r0, r6
 800754a:	f7f8 fe4b 	bl	80001e4 <__adddf3>
 800754e:	e9cd 0100 	strd	r0, r1, [sp]
 8007552:	463b      	mov	r3, r7
 8007554:	4632      	mov	r2, r6
 8007556:	e9dd 0100 	ldrd	r0, r1, [sp]
 800755a:	f7f8 fe41 	bl	80001e0 <__aeabi_dsub>
 800755e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007562:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007566:	4639      	mov	r1, r7
 8007568:	ec41 0b10 	vmov	d0, r0, r1
 800756c:	b003      	add	sp, #12
 800756e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007570:	4a22      	ldr	r2, [pc, #136]	; (80075fc <rint+0x104>)
 8007572:	4132      	asrs	r2, r6
 8007574:	ea01 0702 	and.w	r7, r1, r2
 8007578:	4307      	orrs	r7, r0
 800757a:	d0f5      	beq.n	8007568 <rint+0x70>
 800757c:	0852      	lsrs	r2, r2, #1
 800757e:	4011      	ands	r1, r2
 8007580:	430c      	orrs	r4, r1
 8007582:	d00b      	beq.n	800759c <rint+0xa4>
 8007584:	ea23 0202 	bic.w	r2, r3, r2
 8007588:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800758c:	2e13      	cmp	r6, #19
 800758e:	fa43 f306 	asr.w	r3, r3, r6
 8007592:	bf0c      	ite	eq
 8007594:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007598:	2400      	movne	r4, #0
 800759a:	4313      	orrs	r3, r2
 800759c:	4916      	ldr	r1, [pc, #88]	; (80075f8 <rint+0x100>)
 800759e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80075a2:	4622      	mov	r2, r4
 80075a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80075a8:	4620      	mov	r0, r4
 80075aa:	4629      	mov	r1, r5
 80075ac:	f7f8 fe1a 	bl	80001e4 <__adddf3>
 80075b0:	e9cd 0100 	strd	r0, r1, [sp]
 80075b4:	4622      	mov	r2, r4
 80075b6:	462b      	mov	r3, r5
 80075b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075bc:	f7f8 fe10 	bl	80001e0 <__aeabi_dsub>
 80075c0:	e7d2      	b.n	8007568 <rint+0x70>
 80075c2:	2e33      	cmp	r6, #51	; 0x33
 80075c4:	dd07      	ble.n	80075d6 <rint+0xde>
 80075c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80075ca:	d1cd      	bne.n	8007568 <rint+0x70>
 80075cc:	ee10 2a10 	vmov	r2, s0
 80075d0:	f7f8 fe08 	bl	80001e4 <__adddf3>
 80075d4:	e7c8      	b.n	8007568 <rint+0x70>
 80075d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80075da:	f04f 32ff 	mov.w	r2, #4294967295
 80075de:	40f2      	lsrs	r2, r6
 80075e0:	4210      	tst	r0, r2
 80075e2:	d0c1      	beq.n	8007568 <rint+0x70>
 80075e4:	0852      	lsrs	r2, r2, #1
 80075e6:	4210      	tst	r0, r2
 80075e8:	bf1f      	itttt	ne
 80075ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80075ee:	ea20 0202 	bicne.w	r2, r0, r2
 80075f2:	4134      	asrne	r4, r6
 80075f4:	4314      	orrne	r4, r2
 80075f6:	e7d1      	b.n	800759c <rint+0xa4>
 80075f8:	080077c8 	.word	0x080077c8
 80075fc:	000fffff 	.word	0x000fffff

08007600 <scalbn>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	ec55 4b10 	vmov	r4, r5, d0
 8007606:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800760a:	4606      	mov	r6, r0
 800760c:	462b      	mov	r3, r5
 800760e:	b9aa      	cbnz	r2, 800763c <scalbn+0x3c>
 8007610:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007614:	4323      	orrs	r3, r4
 8007616:	d03b      	beq.n	8007690 <scalbn+0x90>
 8007618:	4b31      	ldr	r3, [pc, #196]	; (80076e0 <scalbn+0xe0>)
 800761a:	4629      	mov	r1, r5
 800761c:	2200      	movs	r2, #0
 800761e:	ee10 0a10 	vmov	r0, s0
 8007622:	f7f8 ff95 	bl	8000550 <__aeabi_dmul>
 8007626:	4b2f      	ldr	r3, [pc, #188]	; (80076e4 <scalbn+0xe4>)
 8007628:	429e      	cmp	r6, r3
 800762a:	4604      	mov	r4, r0
 800762c:	460d      	mov	r5, r1
 800762e:	da12      	bge.n	8007656 <scalbn+0x56>
 8007630:	a327      	add	r3, pc, #156	; (adr r3, 80076d0 <scalbn+0xd0>)
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	f7f8 ff8b 	bl	8000550 <__aeabi_dmul>
 800763a:	e009      	b.n	8007650 <scalbn+0x50>
 800763c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007640:	428a      	cmp	r2, r1
 8007642:	d10c      	bne.n	800765e <scalbn+0x5e>
 8007644:	ee10 2a10 	vmov	r2, s0
 8007648:	4620      	mov	r0, r4
 800764a:	4629      	mov	r1, r5
 800764c:	f7f8 fdca 	bl	80001e4 <__adddf3>
 8007650:	4604      	mov	r4, r0
 8007652:	460d      	mov	r5, r1
 8007654:	e01c      	b.n	8007690 <scalbn+0x90>
 8007656:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800765a:	460b      	mov	r3, r1
 800765c:	3a36      	subs	r2, #54	; 0x36
 800765e:	4432      	add	r2, r6
 8007660:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007664:	428a      	cmp	r2, r1
 8007666:	dd0b      	ble.n	8007680 <scalbn+0x80>
 8007668:	ec45 4b11 	vmov	d1, r4, r5
 800766c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80076d8 <scalbn+0xd8>
 8007670:	f000 f83c 	bl	80076ec <copysign>
 8007674:	a318      	add	r3, pc, #96	; (adr r3, 80076d8 <scalbn+0xd8>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	ec51 0b10 	vmov	r0, r1, d0
 800767e:	e7da      	b.n	8007636 <scalbn+0x36>
 8007680:	2a00      	cmp	r2, #0
 8007682:	dd08      	ble.n	8007696 <scalbn+0x96>
 8007684:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007688:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800768c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007690:	ec45 4b10 	vmov	d0, r4, r5
 8007694:	bd70      	pop	{r4, r5, r6, pc}
 8007696:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800769a:	da0d      	bge.n	80076b8 <scalbn+0xb8>
 800769c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80076a0:	429e      	cmp	r6, r3
 80076a2:	ec45 4b11 	vmov	d1, r4, r5
 80076a6:	dce1      	bgt.n	800766c <scalbn+0x6c>
 80076a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80076d0 <scalbn+0xd0>
 80076ac:	f000 f81e 	bl	80076ec <copysign>
 80076b0:	a307      	add	r3, pc, #28	; (adr r3, 80076d0 <scalbn+0xd0>)
 80076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b6:	e7e0      	b.n	800767a <scalbn+0x7a>
 80076b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076bc:	3236      	adds	r2, #54	; 0x36
 80076be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80076c6:	4620      	mov	r0, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	2200      	movs	r2, #0
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <scalbn+0xe8>)
 80076ce:	e7b2      	b.n	8007636 <scalbn+0x36>
 80076d0:	c2f8f359 	.word	0xc2f8f359
 80076d4:	01a56e1f 	.word	0x01a56e1f
 80076d8:	8800759c 	.word	0x8800759c
 80076dc:	7e37e43c 	.word	0x7e37e43c
 80076e0:	43500000 	.word	0x43500000
 80076e4:	ffff3cb0 	.word	0xffff3cb0
 80076e8:	3c900000 	.word	0x3c900000

080076ec <copysign>:
 80076ec:	ec51 0b10 	vmov	r0, r1, d0
 80076f0:	ee11 0a90 	vmov	r0, s3
 80076f4:	ee10 2a10 	vmov	r2, s0
 80076f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80076fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007700:	ea41 0300 	orr.w	r3, r1, r0
 8007704:	ec43 2b10 	vmov	d0, r2, r3
 8007708:	4770      	bx	lr
	...

0800770c <_init>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	bf00      	nop
 8007710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007712:	bc08      	pop	{r3}
 8007714:	469e      	mov	lr, r3
 8007716:	4770      	bx	lr

08007718 <_fini>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	bf00      	nop
 800771c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	469e      	mov	lr, r3
 8007722:	4770      	bx	lr
