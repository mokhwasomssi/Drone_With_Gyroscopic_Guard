
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800597c  0800597c  0001597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a4c  08005a4c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a54  08005a54  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a54  08005a54  00015a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a58  08005a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000074  08005ad0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08005ad0  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c1b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000352d  00000000  00000000  00038cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0003c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  0003d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abf0  00000000  00000000  0003dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147a7  00000000  00000000  00058bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b767  00000000  00000000  0006d36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108ad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004528  00000000  00000000  00108b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005964 	.word	0x08005964

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08005964 	.word	0x08005964

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d6:	463b      	mov	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004e2:	4b21      	ldr	r3, [pc, #132]	; (8000568 <MX_ADC1_Init+0x98>)
 80004e4:	4a21      	ldr	r2, [pc, #132]	; (800056c <MX_ADC1_Init+0x9c>)
 80004e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e8:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <MX_ADC1_Init+0x98>)
 80004ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <MX_ADC1_Init+0x98>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <MX_ADC1_Init+0x98>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004fc:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_ADC1_Init+0x98>)
 80004fe:	2201      	movs	r2, #1
 8000500:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000502:	4b19      	ldr	r3, [pc, #100]	; (8000568 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_ADC1_Init+0x98>)
 8000512:	4a17      	ldr	r2, [pc, #92]	; (8000570 <MX_ADC1_Init+0xa0>)
 8000514:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_ADC1_Init+0x98>)
 800051e:	2201      	movs	r2, #1
 8000520:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_ADC1_Init+0x98>)
 8000524:	2201      	movs	r2, #1
 8000526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_ADC1_Init+0x98>)
 800052c:	2201      	movs	r2, #1
 800052e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <MX_ADC1_Init+0x98>)
 8000532:	f000 ffe3 	bl	80014fc <HAL_ADC_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800053c:	f000 fa5c 	bl	80009f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000540:	2308      	movs	r3, #8
 8000542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000544:	2301      	movs	r3, #1
 8000546:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000548:	2304      	movs	r3, #4
 800054a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	463b      	mov	r3, r7
 800054e:	4619      	mov	r1, r3
 8000550:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_ADC1_Init+0x98>)
 8000552:	f001 f925 	bl	80017a0 <HAL_ADC_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800055c:	f000 fa4c 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200000ac 	.word	0x200000ac
 800056c:	40012000 	.word	0x40012000
 8000570:	0f000001 	.word	0x0f000001

08000574 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <HAL_ADC_MspInit+0xdc>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d157      	bne.n	8000646 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <HAL_ADC_MspInit+0xe0>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059e:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <HAL_ADC_MspInit+0xe0>)
 80005a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a4:	6453      	str	r3, [r2, #68]	; 0x44
 80005a6:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <HAL_ADC_MspInit+0xe0>)
 80005a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b27      	ldr	r3, [pc, #156]	; (8000654 <HAL_ADC_MspInit+0xe0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a26      	ldr	r2, [pc, #152]	; (8000654 <HAL_ADC_MspInit+0xe0>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <HAL_ADC_MspInit+0xe0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 80005ce:	2301      	movs	r3, #1
 80005d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d2:	2303      	movs	r3, #3
 80005d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	481d      	ldr	r0, [pc, #116]	; (8000658 <HAL_ADC_MspInit+0xe4>)
 80005e2:	f002 f80f 	bl	8002604 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <HAL_ADC_MspInit+0xe8>)
 80005e8:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <HAL_ADC_MspInit+0xec>)
 80005ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <HAL_ADC_MspInit+0xe8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <HAL_ADC_MspInit+0xe8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_ADC_MspInit+0xe8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <HAL_ADC_MspInit+0xe8>)
 8000600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000604:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_ADC_MspInit+0xe8>)
 8000608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800060c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <HAL_ADC_MspInit+0xe8>)
 8000610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000614:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_ADC_MspInit+0xe8>)
 8000618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800061c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_ADC_MspInit+0xe8>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <HAL_ADC_MspInit+0xe8>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800062a:	480c      	ldr	r0, [pc, #48]	; (800065c <HAL_ADC_MspInit+0xe8>)
 800062c:	f001 fc7a 	bl	8001f24 <HAL_DMA_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000636:	f000 f9df 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <HAL_ADC_MspInit+0xe8>)
 800063e:	639a      	str	r2, [r3, #56]	; 0x38
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <HAL_ADC_MspInit+0xe8>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	; 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40012000 	.word	0x40012000
 8000654:	40023800 	.word	0x40023800
 8000658:	40020400 	.word	0x40020400
 800065c:	200000f4 	.word	0x200000f4
 8000660:	40026410 	.word	0x40026410

08000664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b23      	ldr	r3, [pc, #140]	; (80006fc <MX_DMA_Init+0x98>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a22      	ldr	r2, [pc, #136]	; (80006fc <MX_DMA_Init+0x98>)
 8000674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <MX_DMA_Init+0x98>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_DMA_Init+0x98>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <MX_DMA_Init+0x98>)
 8000690:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_DMA_Init+0x98>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	200c      	movs	r0, #12
 80006a8:	f001 fc05 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006ac:	200c      	movs	r0, #12
 80006ae:	f001 fc1e 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	200e      	movs	r0, #14
 80006b8:	f001 fbfd 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006bc:	200e      	movs	r0, #14
 80006be:	f001 fc16 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	200f      	movs	r0, #15
 80006c8:	f001 fbf5 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006cc:	200f      	movs	r0, #15
 80006ce:	f001 fc0e 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2010      	movs	r0, #16
 80006d8:	f001 fbed 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006dc:	2010      	movs	r0, #16
 80006de:	f001 fc06 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	2038      	movs	r0, #56	; 0x38
 80006e8:	f001 fbe5 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006ec:	2038      	movs	r0, #56	; 0x38
 80006ee:	f001 fbfe 	bl	8001eee <HAL_NVIC_EnableIRQ>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800

08000700 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_GPIO_Init+0x10c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a3b      	ldr	r2, [pc, #236]	; (800080c <MX_GPIO_Init+0x10c>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <MX_GPIO_Init+0x10c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b35      	ldr	r3, [pc, #212]	; (800080c <MX_GPIO_Init+0x10c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a34      	ldr	r2, [pc, #208]	; (800080c <MX_GPIO_Init+0x10c>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <MX_GPIO_Init+0x10c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_GPIO_Init+0x10c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a2d      	ldr	r2, [pc, #180]	; (800080c <MX_GPIO_Init+0x10c>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_GPIO_Init+0x10c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_GPIO_Init+0x10c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a26      	ldr	r2, [pc, #152]	; (800080c <MX_GPIO_Init+0x10c>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_GPIO_Init+0x10c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078c:	4820      	ldr	r0, [pc, #128]	; (8000810 <MX_GPIO_Init+0x110>)
 800078e:	f002 f8bd 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000798:	481e      	ldr	r0, [pc, #120]	; (8000814 <MX_GPIO_Init+0x114>)
 800079a:	f002 f8b7 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|SPI2_CE_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f243 0106 	movw	r1, #12294	; 0x3006
 80007a4:	481c      	ldr	r0, [pc, #112]	; (8000818 <MX_GPIO_Init+0x118>)
 80007a6:	f002 f8b1 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80007aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <MX_GPIO_Init+0x110>)
 80007c4:	f001 ff1e 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|Buzzer_Pin;
 80007c8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_GPIO_Init+0x114>)
 80007e2:	f001 ff0f 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|SPI2_CE_Pin|SPI2_CS_Pin;
 80007e6:	f243 0306 	movw	r3, #12294	; 0x3006
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <MX_GPIO_Init+0x118>)
 8000800:	f001 ff00 	bl	8002604 <HAL_GPIO_Init>

}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400

0800081c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000824:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000828:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	2b00      	cmp	r3, #0
 8000832:	d013      	beq.n	800085c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000834:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000838:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800083c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00b      	beq.n	800085c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000844:	e000      	b.n	8000848 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000846:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000848:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f9      	beq.n	8000846 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000852:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800085c:	687b      	ldr	r3, [r7, #4]
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	e009      	b.n	8000890 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	60ba      	str	r2, [r7, #8]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ffc9 	bl	800081c <ITM_SendChar>
	for(int i = 0; i < len; i++)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbf1      	blt.n	800087c <_write+0x12>
	}
	return len;
 8000898:	687b      	ldr	r3, [r7, #4]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a8:	f000 fd92 	bl	80013d0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ac:	f000 f83c 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b0:	f7ff ff26 	bl	8000700 <MX_GPIO_Init>
  MX_DMA_Init();
 80008b4:	f7ff fed6 	bl	8000664 <MX_DMA_Init>
  MX_SPI1_Init();
 80008b8:	f000 f8a4 	bl	8000a04 <MX_SPI1_Init>
  MX_TIM2_Init();
 80008bc:	f000 fab8 	bl	8000e30 <MX_TIM2_Init>
  MX_TIM5_Init();
 80008c0:	f000 fb18 	bl	8000ef4 <MX_TIM5_Init>
  MX_TIM11_Init();
 80008c4:	f000 fb7a 	bl	8000fbc <MX_TIM11_Init>
  MX_ADC1_Init();
 80008c8:	f7ff fe02 	bl	80004d0 <MX_ADC1_Init>
  MX_SPI2_Init();
 80008cc:	f000 f8d0 	bl	8000a70 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  led1_on();
 80008d0:	f004 fb2c 	bl	8004f2c <led1_on>

  buzzer_time(100);
 80008d4:	2064      	movs	r0, #100	; 0x64
 80008d6:	f003 ff23 	bl	8004720 <buzzer_time>

  battery_monitor_init();
 80008da:	f003 ff11 	bl	8004700 <battery_monitor_init>
  icm20948_init(gy_fs_2000dps, odr_1125_hz, ac_fs_2g, odr_1125_hz);
 80008de:	2300      	movs	r3, #0
 80008e0:	2201      	movs	r2, #1
 80008e2:	2100      	movs	r1, #0
 80008e4:	2006      	movs	r0, #6
 80008e6:	f004 f8ef 	bl	8004ac8 <icm20948_init>
  ak09916_init(continuous_measure_100hz);
 80008ea:	2008      	movs	r0, #8
 80008ec:	f004 f930 	bl	8004b50 <ak09916_init>

  whoami_icm20948();
 80008f0:	f004 f800 	bl	80048f4 <whoami_icm20948>
  led2_on();
 80008f4:	f004 fb26 	bl	8004f44 <led2_on>
  whoami_ak09916();
 80008f8:	f004 f818 	bl	800492c <whoami_ak09916>
  led3_on();
 80008fc:	f004 fb2e 	bl	8004f5c <led3_on>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //battery_monitor_read();
	  read_gyro(&gyro_data, unit_lsb);
 8000900:	2100      	movs	r1, #0
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <main+0x78>)
 8000904:	f004 f950 	bl	8004ba8 <read_gyro>
	  read_accel(&accel_data, unit_lsb);
 8000908:	2100      	movs	r1, #0
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <main+0x7c>)
 800090c:	f004 f9da 	bl	8004cc4 <read_accel>
	  read_mag(&mag_data, unit_lsb);
 8000910:	2100      	movs	r1, #0
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <main+0x80>)
 8000914:	f004 fa64 	bl	8004de0 <read_mag>
	  read_gyro(&gyro_data, unit_lsb);
 8000918:	e7f2      	b.n	8000900 <main+0x5c>
 800091a:	bf00      	nop
 800091c:	20000160 	.word	0x20000160
 8000920:	20000154 	.word	0x20000154
 8000924:	2000016c 	.word	0x2000016c

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f004 fb46 	bl	8004fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <SystemClock_Config+0xc8>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <SystemClock_Config+0xc8>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <SystemClock_Config+0xc8>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <SystemClock_Config+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <SystemClock_Config+0xcc>)
 8000972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <SystemClock_Config+0xcc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000988:	2301      	movs	r3, #1
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	2310      	movs	r3, #16
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000990:	2302      	movs	r3, #2
 8000992:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000994:	2300      	movs	r3, #0
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000998:	2308      	movs	r3, #8
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 ffc7 	bl	8002940 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b8:	f000 f81e 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2103      	movs	r1, #3
 80009d8:	4618      	mov	r0, r3
 80009da:	f002 fa29 	bl	8002e30 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009e4:	f000 f808 	bl	80009f8 <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3750      	adds	r7, #80	; 0x50
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a0a:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <MX_SPI1_Init+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a38:	2218      	movs	r2, #24
 8000a3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a50:	220a      	movs	r2, #10
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_SPI1_Init+0x64>)
 8000a56:	f002 fb87 	bl	8003168 <HAL_SPI_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a60:	f7ff ffca 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200001d0 	.word	0x200001d0
 8000a6c:	40013000 	.word	0x40013000

08000a70 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a76:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <MX_SPI2_Init+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000abc:	220a      	movs	r2, #10
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000ac2:	f002 fb51 	bl	8003168 <HAL_SPI_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000acc:	f7ff ff94 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000178 	.word	0x20000178
 8000ad8:	40003800 	.word	0x40003800

08000adc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a32      	ldr	r2, [pc, #200]	; (8000bc4 <HAL_SPI_MspInit+0xe8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12c      	bne.n	8000b58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b36:	23e0      	movs	r3, #224	; 0xe0
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b46:	2305      	movs	r3, #5
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	481e      	ldr	r0, [pc, #120]	; (8000bcc <HAL_SPI_MspInit+0xf0>)
 8000b52:	f001 fd57 	bl	8002604 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b56:	e031      	b.n	8000bbc <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <HAL_SPI_MspInit+0xf4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12c      	bne.n	8000bbc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_SPI_MspInit+0xec>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000b9a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bac:	2305      	movs	r3, #5
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <HAL_SPI_MspInit+0xf8>)
 8000bb8:	f001 fd24 	bl	8002604 <HAL_GPIO_Init>
}
 8000bbc:	bf00      	nop
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40013000 	.word	0x40013000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40003800 	.word	0x40003800
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 fbfe 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <DMA1_Stream1_IRQHandler+0x10>)
 8000c82:	f001 fa55 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200003d8 	.word	0x200003d8

08000c90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <DMA1_Stream3_IRQHandler+0x10>)
 8000c96:	f001 fa4b 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000288 	.word	0x20000288

08000ca4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <DMA1_Stream4_IRQHandler+0x10>)
 8000caa:	f001 fa41 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000378 	.word	0x20000378

08000cb8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <DMA1_Stream5_IRQHandler+0x10>)
 8000cbe:	f001 fa37 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000228 	.word	0x20000228

08000ccc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000cd2:	f003 f88f 	bl	8003df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000330 	.word	0x20000330

08000ce0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <DMA2_Stream0_IRQHandler+0x10>)
 8000ce6:	f001 fa23 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000f4 	.word	0x200000f4

08000cf4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e00a      	b.n	8000d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d06:	f3af 8000 	nop.w
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	b2ca      	uxtb	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	dbf0      	blt.n	8000d06 <_read+0x12>
	}

return len;
 8000d24:	687b      	ldr	r3, [r7, #4]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	return -1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d56:	605a      	str	r2, [r3, #4]
	return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <_isatty>:

int _isatty(int file)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
	return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc8:	f004 f8d4 	bl	8004f74 <__errno>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20020000 	.word	0x20020000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	20000090 	.word	0x20000090
 8000e00:	200004a8 	.word	0x200004a8

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <SystemInit+0x28>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <SystemInit+0x28>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SystemInit+0x28>)
 8000e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <MX_TIM2_Init+0xc0>)
 8000e54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <MX_TIM2_Init+0xc0>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <MX_TIM2_Init+0xc0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <MX_TIM2_Init+0xc0>)
 8000e68:	2214      	movs	r2, #20
 8000e6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <MX_TIM2_Init+0xc0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_TIM2_Init+0xc0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e78:	481d      	ldr	r0, [pc, #116]	; (8000ef0 <MX_TIM2_Init+0xc0>)
 8000e7a:	f002 ff6c 	bl	8003d56 <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e84:	f7ff fdb8 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	4619      	mov	r1, r3
 8000e96:	4816      	ldr	r0, [pc, #88]	; (8000ef0 <MX_TIM2_Init+0xc0>)
 8000e98:	f003 fbb0 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000ea2:	f7ff fda9 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea6:	2360      	movs	r3, #96	; 0x60
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_TIM2_Init+0xc0>)
 8000ebe:	f003 f8a1 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000ec8:	f7ff fd96 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2208      	movs	r2, #8
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <MX_TIM2_Init+0xc0>)
 8000ed4:	f003 f896 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ede:	f7ff fd8b 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ee2:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <MX_TIM2_Init+0xc0>)
 8000ee4:	f000 f9ec 	bl	80012c0 <HAL_TIM_MspPostInit>

}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000438 	.word	0x20000438

08000ef4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efa:	f107 0320 	add.w	r3, r7, #32
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <MX_TIM5_Init+0xc0>)
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <MX_TIM5_Init+0xc4>)
 8000f1a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8-1;
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <MX_TIM5_Init+0xc0>)
 8000f1e:	2207      	movs	r2, #7
 8000f20:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <MX_TIM5_Init+0xc0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20;
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <MX_TIM5_Init+0xc0>)
 8000f2a:	2214      	movs	r2, #20
 8000f2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <MX_TIM5_Init+0xc0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_TIM5_Init+0xc0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f3a:	481e      	ldr	r0, [pc, #120]	; (8000fb4 <MX_TIM5_Init+0xc0>)
 8000f3c:	f002 ff0b 	bl	8003d56 <HAL_TIM_PWM_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000f46:	f7ff fd57 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	4619      	mov	r1, r3
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <MX_TIM5_Init+0xc0>)
 8000f5a:	f003 fb4f 	bl	80045fc <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000f64:	f7ff fd48 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	; 0x60
 8000f6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_TIM5_Init+0xc0>)
 8000f80:	f003 f840 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f8a:	f7ff fd35 	bl	80009f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	220c      	movs	r2, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <MX_TIM5_Init+0xc0>)
 8000f96:	f003 f835 	bl	8004004 <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000fa0:	f7ff fd2a 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <MX_TIM5_Init+0xc0>)
 8000fa6:	f000 f98b 	bl	80012c0 <HAL_TIM_MspPostInit>

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200002e8 	.word	0x200002e8
 8000fb8:	40000c00 	.word	0x40000c00

08000fbc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_TIM11_Init+0x40>)
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <MX_TIM11_Init+0x44>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <MX_TIM11_Init+0x40>)
 8000fc8:	2263      	movs	r2, #99	; 0x63
 8000fca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <MX_TIM11_Init+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 889-1;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <MX_TIM11_Init+0x40>)
 8000fd4:	f44f 725e 	mov.w	r2, #888	; 0x378
 8000fd8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <MX_TIM11_Init+0x40>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_TIM11_Init+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_TIM11_Init+0x40>)
 8000fe8:	f002 fe66 	bl	8003cb8 <HAL_TIM_Base_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000ff2:	f7ff fd01 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000330 	.word	0x20000330
 8001000:	40014800 	.word	0x40014800

08001004 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001014:	f040 8087 	bne.w	8001126 <HAL_TIM_PWM_MspInit+0x122>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4b8a      	ldr	r3, [pc, #552]	; (8001248 <HAL_TIM_PWM_MspInit+0x244>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a89      	ldr	r2, [pc, #548]	; (8001248 <HAL_TIM_PWM_MspInit+0x244>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b87      	ldr	r3, [pc, #540]	; (8001248 <HAL_TIM_PWM_MspInit+0x244>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001034:	4b85      	ldr	r3, [pc, #532]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 8001036:	4a86      	ldr	r2, [pc, #536]	; (8001250 <HAL_TIM_PWM_MspInit+0x24c>)
 8001038:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 800103a:	4b84      	ldr	r3, [pc, #528]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 800103c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001040:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001042:	4b82      	ldr	r3, [pc, #520]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001048:	4b80      	ldr	r3, [pc, #512]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800104e:	4b7f      	ldr	r3, [pc, #508]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 8001050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001054:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001056:	4b7d      	ldr	r3, [pc, #500]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 8001058:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800105c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800105e:	4b7b      	ldr	r3, [pc, #492]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 8001060:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001064:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001066:	4b79      	ldr	r3, [pc, #484]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800106c:	4b77      	ldr	r3, [pc, #476]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001072:	4b76      	ldr	r3, [pc, #472]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 8001074:	2204      	movs	r2, #4
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001078:	4b74      	ldr	r3, [pc, #464]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 800107e:	4b73      	ldr	r3, [pc, #460]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001084:	4b71      	ldr	r3, [pc, #452]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 8001086:	2200      	movs	r2, #0
 8001088:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800108a:	4870      	ldr	r0, [pc, #448]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 800108c:	f000 ff4a 	bl	8001f24 <HAL_DMA_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_TIM_PWM_MspInit+0x96>
    {
      Error_Handler();
 8001096:	f7ff fcaf 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a6b      	ldr	r2, [pc, #428]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
 80010a0:	4a6a      	ldr	r2, [pc, #424]	; (800124c <HAL_TIM_PWM_MspInit+0x248>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 80010a6:	4b6b      	ldr	r3, [pc, #428]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010a8:	4a6b      	ldr	r2, [pc, #428]	; (8001258 <HAL_TIM_PWM_MspInit+0x254>)
 80010aa:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 80010ac:	4b69      	ldr	r3, [pc, #420]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010ae:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80010b2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b4:	4b67      	ldr	r3, [pc, #412]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010b6:	2240      	movs	r2, #64	; 0x40
 80010b8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ba:	4b66      	ldr	r3, [pc, #408]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 80010c0:	4b64      	ldr	r3, [pc, #400]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010c8:	4b62      	ldr	r3, [pc, #392]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ce:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010d0:	4b60      	ldr	r3, [pc, #384]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010d6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 80010d8:	4b5e      	ldr	r3, [pc, #376]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 80010de:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010e4:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010e6:	2204      	movs	r2, #4
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80010ea:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 80010f0:	4b58      	ldr	r3, [pc, #352]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010f6:	4b57      	ldr	r3, [pc, #348]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 80010fc:	4855      	ldr	r0, [pc, #340]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 80010fe:	f000 ff11 	bl	8001f24 <HAL_DMA_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_TIM_PWM_MspInit+0x108>
    {
      Error_Handler();
 8001108:	f7ff fc76 	bl	80009f8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a51      	ldr	r2, [pc, #324]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c
 8001112:	4a50      	ldr	r2, [pc, #320]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 800111c:	621a      	str	r2, [r3, #32]
 800111e:	4a4d      	ldr	r2, [pc, #308]	; (8001254 <HAL_TIM_PWM_MspInit+0x250>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001124:	e08b      	b.n	800123e <HAL_TIM_PWM_MspInit+0x23a>
  else if(tim_pwmHandle->Instance==TIM5)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a4c      	ldr	r2, [pc, #304]	; (800125c <HAL_TIM_PWM_MspInit+0x258>)
 800112c:	4293      	cmp	r3, r2
 800112e:	f040 8086 	bne.w	800123e <HAL_TIM_PWM_MspInit+0x23a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b44      	ldr	r3, [pc, #272]	; (8001248 <HAL_TIM_PWM_MspInit+0x244>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a43      	ldr	r2, [pc, #268]	; (8001248 <HAL_TIM_PWM_MspInit+0x244>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <HAL_TIM_PWM_MspInit+0x244>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 800114e:	4b44      	ldr	r3, [pc, #272]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 8001150:	4a44      	ldr	r2, [pc, #272]	; (8001264 <HAL_TIM_PWM_MspInit+0x260>)
 8001152:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8001154:	4b42      	ldr	r3, [pc, #264]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 8001156:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800115a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115c:	4b40      	ldr	r3, [pc, #256]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 800115e:	2240      	movs	r2, #64	; 0x40
 8001160:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001168:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 800116a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001170:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 8001172:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001176:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001178:	4b39      	ldr	r3, [pc, #228]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 800117a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001180:	4b37      	ldr	r3, [pc, #220]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001186:	4b36      	ldr	r3, [pc, #216]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800118c:	4b34      	ldr	r3, [pc, #208]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 800118e:	2204      	movs	r2, #4
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001192:	4b33      	ldr	r3, [pc, #204]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 8001194:	2200      	movs	r2, #0
 8001196:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8001198:	4b31      	ldr	r3, [pc, #196]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 800119a:	2200      	movs	r2, #0
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80011a4:	482e      	ldr	r0, [pc, #184]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 80011a6:	f000 febd 	bl	8001f24 <HAL_DMA_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_TIM_PWM_MspInit+0x1b0>
      Error_Handler();
 80011b0:	f7ff fc22 	bl	80009f8 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a2a      	ldr	r2, [pc, #168]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
 80011ba:	4a29      	ldr	r2, [pc, #164]	; (8001260 <HAL_TIM_PWM_MspInit+0x25c>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 80011c2:	4a2a      	ldr	r2, [pc, #168]	; (800126c <HAL_TIM_PWM_MspInit+0x268>)
 80011c4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 80011c6:	4b28      	ldr	r3, [pc, #160]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 80011c8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80011cc:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 80011d0:	2240      	movs	r2, #64	; 0x40
 80011d2:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 80011dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e0:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 80011e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e8:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 80011ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f0:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_LOW;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 8001200:	2204      	movs	r2, #4
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 800120c:	2200      	movs	r2, #0
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 8001212:	2200      	movs	r2, #0
 8001214:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8001216:	4814      	ldr	r0, [pc, #80]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 8001218:	f000 fe84 	bl	8001f24 <HAL_DMA_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_TIM_PWM_MspInit+0x222>
      Error_Handler();
 8001222:	f7ff fbe9 	bl	80009f8 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 8001236:	639a      	str	r2, [r3, #56]	; 0x38
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_TIM_PWM_MspInit+0x264>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	20000228 	.word	0x20000228
 8001250:	40026088 	.word	0x40026088
 8001254:	200003d8 	.word	0x200003d8
 8001258:	40026028 	.word	0x40026028
 800125c:	40000c00 	.word	0x40000c00
 8001260:	20000378 	.word	0x20000378
 8001264:	40026070 	.word	0x40026070
 8001268:	20000288 	.word	0x20000288
 800126c:	40026058 	.word	0x40026058

08001270 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_TIM_Base_MspInit+0x48>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d115      	bne.n	80012ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_TIM_Base_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_TIM_Base_MspInit+0x4c>)
 800128c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_TIM_Base_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	201a      	movs	r0, #26
 80012a4:	f000 fe07 	bl	8001eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012a8:	201a      	movs	r0, #26
 80012aa:	f000 fe20 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40014800 	.word	0x40014800
 80012bc:	40023800 	.word	0x40023800

080012c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e0:	d11e      	bne.n	8001320 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <HAL_TIM_MspPostInit+0xb0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a21      	ldr	r2, [pc, #132]	; (8001370 <HAL_TIM_MspPostInit+0xb0>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <HAL_TIM_MspPostInit+0xb0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_4_Pin|MOTOR_1_Pin;
 80012fe:	2305      	movs	r3, #5
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800130e:	2301      	movs	r3, #1
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	4816      	ldr	r0, [pc, #88]	; (8001374 <HAL_TIM_MspPostInit+0xb4>)
 800131a:	f001 f973 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800131e:	e022      	b.n	8001366 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <HAL_TIM_MspPostInit+0xb8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d11d      	bne.n	8001366 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_TIM_MspPostInit+0xb0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <HAL_TIM_MspPostInit+0xb0>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_TIM_MspPostInit+0xb0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_2_Pin;
 8001346:	230a      	movs	r3, #10
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001356:	2302      	movs	r3, #2
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <HAL_TIM_MspPostInit+0xb4>)
 8001362:	f001 f94f 	bl	8002604 <HAL_GPIO_Init>
}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	; 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40020000 	.word	0x40020000
 8001378:	40000c00 	.word	0x40000c00

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001380:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001382:	e003      	b.n	800138c <LoopCopyDataInit>

08001384 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001386:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001388:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800138a:	3104      	adds	r1, #4

0800138c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001390:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001392:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001394:	d3f6      	bcc.n	8001384 <CopyDataInit>
  ldr  r2, =_sbss
 8001396:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001398:	e002      	b.n	80013a0 <LoopFillZerobss>

0800139a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800139a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800139c:	f842 3b04 	str.w	r3, [r2], #4

080013a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013a4:	d3f9      	bcc.n	800139a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013a6:	f7ff fd2d 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f003 fde9 	bl	8004f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff fa79 	bl	80008a4 <main>
  bx  lr    
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013b8:	08005a5c 	.word	0x08005a5c
  ldr  r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013c0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80013c4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80013c8:	200004a4 	.word	0x200004a4

080013cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC_IRQHandler>
	...

080013d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_Init+0x40>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_Init+0x40>)
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_Init+0x40>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 fd51 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 f808 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001404:	f7ff fbe8 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x54>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x58>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f000 fd69 	bl	8001f0a <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f000 fd31 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_InitTick+0x5c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000000 	.word	0x20000000
 800146c:	20000008 	.word	0x20000008
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008
 8001498:	20000480 	.word	0x20000480

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000480 	.word	0x20000480

080014b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff ffee 	bl	800149c <HAL_GetTick>
 80014c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	d005      	beq.n	80014da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_Delay+0x44>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014da:	bf00      	nop
 80014dc:	f7ff ffde 	bl	800149c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8f7      	bhi.n	80014dc <HAL_Delay+0x28>
  {
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e033      	b.n	800157a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff f82a 	bl	8000574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	d118      	bne.n	800156c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001542:	f023 0302 	bic.w	r3, r3, #2
 8001546:	f043 0202 	orr.w	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 fa58 	bl	8001a04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f023 0303 	bic.w	r3, r3, #3
 8001562:	f043 0201 	orr.w	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
 800156a:	e001      	b.n	8001570 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_ADC_Start_DMA+0x1e>
 800159e:	2302      	movs	r3, #2
 80015a0:	e0ce      	b.n	8001740 <HAL_ADC_Start_DMA+0x1bc>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d018      	beq.n	80015ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015c8:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <HAL_ADC_Start_DMA+0x1c4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a5f      	ldr	r2, [pc, #380]	; (800174c <HAL_ADC_Start_DMA+0x1c8>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0c9a      	lsrs	r2, r3, #18
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015f8:	d107      	bne.n	800160a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001608:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b01      	cmp	r3, #1
 8001616:	f040 8086 	bne.w	8001726 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001638:	2b00      	cmp	r3, #0
 800163a:	d007      	beq.n	800164c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001644:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001658:	d106      	bne.n	8001668 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f023 0206 	bic.w	r2, r3, #6
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	645a      	str	r2, [r3, #68]	; 0x44
 8001666:	e002      	b.n	800166e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001676:	4b36      	ldr	r3, [pc, #216]	; (8001750 <HAL_ADC_Start_DMA+0x1cc>)
 8001678:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167e:	4a35      	ldr	r2, [pc, #212]	; (8001754 <HAL_ADC_Start_DMA+0x1d0>)
 8001680:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	4a34      	ldr	r2, [pc, #208]	; (8001758 <HAL_ADC_Start_DMA+0x1d4>)
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	4a33      	ldr	r2, [pc, #204]	; (800175c <HAL_ADC_Start_DMA+0x1d8>)
 8001690:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800169a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80016aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	334c      	adds	r3, #76	; 0x4c
 80016c6:	4619      	mov	r1, r3
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f000 fcd8 	bl	8002080 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10f      	bne.n	80016fc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d129      	bne.n	800173e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	e020      	b.n	800173e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_ADC_Start_DMA+0x1dc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d11b      	bne.n	800173e <HAL_ADC_Start_DMA+0x1ba>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d114      	bne.n	800173e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	e00b      	b.n	800173e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f043 0210 	orr.w	r2, r3, #16
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	431bde83 	.word	0x431bde83
 8001750:	40012300 	.word	0x40012300
 8001754:	08001bfd 	.word	0x08001bfd
 8001758:	08001cb7 	.word	0x08001cb7
 800175c:	08001cd3 	.word	0x08001cd3
 8001760:	40012000 	.word	0x40012000

08001764 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d101      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x1c>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e113      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x244>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	d925      	bls.n	8001818 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68d9      	ldr	r1, [r3, #12]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	3b1e      	subs	r3, #30
 80017e2:	2207      	movs	r2, #7
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43da      	mvns	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	400a      	ands	r2, r1
 80017f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68d9      	ldr	r1, [r3, #12]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	4603      	mov	r3, r0
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4403      	add	r3, r0
 800180a:	3b1e      	subs	r3, #30
 800180c:	409a      	lsls	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	e022      	b.n	800185e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6919      	ldr	r1, [r3, #16]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	2207      	movs	r2, #7
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	400a      	ands	r2, r1
 800183a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6919      	ldr	r1, [r3, #16]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	4603      	mov	r3, r0
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4403      	add	r3, r0
 8001854:	409a      	lsls	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b06      	cmp	r3, #6
 8001864:	d824      	bhi.n	80018b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	3b05      	subs	r3, #5
 8001878:	221f      	movs	r2, #31
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	400a      	ands	r2, r1
 8001886:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	3b05      	subs	r3, #5
 80018a2:	fa00 f203 	lsl.w	r2, r0, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	635a      	str	r2, [r3, #52]	; 0x34
 80018ae:	e04c      	b.n	800194a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	d824      	bhi.n	8001902 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	3b23      	subs	r3, #35	; 0x23
 80018ca:	221f      	movs	r2, #31
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43da      	mvns	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	400a      	ands	r2, r1
 80018d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3b23      	subs	r3, #35	; 0x23
 80018f4:	fa00 f203 	lsl.w	r2, r0, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001900:	e023      	b.n	800194a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3b41      	subs	r3, #65	; 0x41
 8001914:	221f      	movs	r2, #31
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	400a      	ands	r2, r1
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	3b41      	subs	r3, #65	; 0x41
 800193e:	fa00 f203 	lsl.w	r2, r0, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <HAL_ADC_ConfigChannel+0x250>)
 800194c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <HAL_ADC_ConfigChannel+0x254>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d10f      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1d8>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b12      	cmp	r3, #18
 800195e:	d10b      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <HAL_ADC_ConfigChannel+0x254>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d12b      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23a>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <HAL_ADC_ConfigChannel+0x258>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d003      	beq.n	8001994 <HAL_ADC_ConfigChannel+0x1f4>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b11      	cmp	r3, #17
 8001992:	d122      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <HAL_ADC_ConfigChannel+0x258>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d111      	bne.n	80019da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_ADC_ConfigChannel+0x25c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_ADC_ConfigChannel+0x260>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	0c9a      	lsrs	r2, r3, #18
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	40012300 	.word	0x40012300
 80019f4:	40012000 	.word	0x40012000
 80019f8:	10000012 	.word	0x10000012
 80019fc:	20000000 	.word	0x20000000
 8001a00:	431bde83 	.word	0x431bde83

08001a04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a0c:	4b79      	ldr	r3, [pc, #484]	; (8001bf4 <ADC_Init+0x1f0>)
 8001a0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	021a      	lsls	r2, r3, #8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6899      	ldr	r1, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <ADC_Init+0x1f4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d022      	beq.n	8001ae2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6899      	ldr	r1, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6899      	ldr	r1, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	e00f      	b.n	8001b02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001af0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0202 	bic.w	r2, r2, #2
 8001b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6899      	ldr	r1, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7e1b      	ldrb	r3, [r3, #24]
 8001b1c:	005a      	lsls	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6859      	ldr	r1, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	035a      	lsls	r2, r3, #13
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	e007      	b.n	8001b78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	051a      	lsls	r2, r3, #20
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6899      	ldr	r1, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bba:	025a      	lsls	r2, r3, #9
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6899      	ldr	r1, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	029a      	lsls	r2, r3, #10
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40012300 	.word	0x40012300
 8001bf8:	0f000001 	.word	0x0f000001

08001bfc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c08:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d13c      	bne.n	8001c90 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d12b      	bne.n	8001c88 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d127      	bne.n	8001c88 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d119      	bne.n	8001c88 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0220 	bic.w	r2, r2, #32
 8001c62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fd6b 	bl	8001764 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c8e:	e00e      	b.n	8001cae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7ff fd75 	bl	800178c <HAL_ADC_ErrorCallback>
}
 8001ca2:	e004      	b.n	8001cae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff fd57 	bl	8001778 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2240      	movs	r2, #64	; 0x40
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f043 0204 	orr.w	r2, r3, #4
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f7ff fd4a 	bl	800178c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <__NVIC_SetPriorityGrouping>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4907      	ldr	r1, [pc, #28]	; (8001d9c <__NVIC_EnableIRQ+0x38>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff29 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff3e 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff31 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa2 	bl	8001e5c <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff fab4 	bl	800149c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e099      	b.n	8002074 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f60:	e00f      	b.n	8001f82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f62:	f7ff fa9b 	bl	800149c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b05      	cmp	r3, #5
 8001f6e:	d908      	bls.n	8001f82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2203      	movs	r2, #3
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e078      	b.n	8002074 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e8      	bne.n	8001f62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	4b38      	ldr	r3, [pc, #224]	; (800207c <HAL_DMA_Init+0x158>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d107      	bne.n	8001fec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f023 0307 	bic.w	r3, r3, #7
 8002002:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	2b04      	cmp	r3, #4
 8002014:	d117      	bne.n	8002046 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00e      	beq.n	8002046 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fa6f 	bl	800250c <DMA_CheckFifoParam>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2240      	movs	r2, #64	; 0x40
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002042:	2301      	movs	r3, #1
 8002044:	e016      	b.n	8002074 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fa26 	bl	80024a0 <DMA_CalcBaseAndBitshift>
 8002054:	4603      	mov	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	223f      	movs	r2, #63	; 0x3f
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	f010803f 	.word	0xf010803f

08002080 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_DMA_Start_IT+0x26>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e040      	b.n	8002128 <HAL_DMA_Start_IT+0xa8>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d12f      	bne.n	800211a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2202      	movs	r2, #2
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f9b8 	bl	8002444 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	223f      	movs	r2, #63	; 0x3f
 80020da:	409a      	lsls	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0216 	orr.w	r2, r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0208 	orr.w	r2, r2, #8
 8002106:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e005      	b.n	8002126 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002122:	2302      	movs	r3, #2
 8002124:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002126:	7dfb      	ldrb	r3, [r7, #23]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800213c:	4b92      	ldr	r3, [pc, #584]	; (8002388 <HAL_DMA_IRQHandler+0x258>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a92      	ldr	r2, [pc, #584]	; (800238c <HAL_DMA_IRQHandler+0x25c>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0a9b      	lsrs	r3, r3, #10
 8002148:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	2208      	movs	r2, #8
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01a      	beq.n	800219c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0204 	bic.w	r2, r2, #4
 8002182:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	2208      	movs	r2, #8
 800218a:	409a      	lsls	r2, r3
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	2201      	movs	r2, #1
 80021a2:	409a      	lsls	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d012      	beq.n	80021d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	2201      	movs	r2, #1
 80021c0:	409a      	lsls	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	f043 0202 	orr.w	r2, r3, #2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	2204      	movs	r2, #4
 80021d8:	409a      	lsls	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d012      	beq.n	8002208 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00b      	beq.n	8002208 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	2204      	movs	r2, #4
 80021f6:	409a      	lsls	r2, r3
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	f043 0204 	orr.w	r2, r3, #4
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	2210      	movs	r2, #16
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d043      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d03c      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	2210      	movs	r2, #16
 800222c:	409a      	lsls	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d018      	beq.n	8002272 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d108      	bne.n	8002260 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d024      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
 800225e:	e01f      	b.n	80022a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01b      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
 8002270:	e016      	b.n	80022a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d107      	bne.n	8002290 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0208 	bic.w	r2, r2, #8
 800228e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	2220      	movs	r2, #32
 80022a6:	409a      	lsls	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 808e 	beq.w	80023ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8086 	beq.w	80023ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	2220      	movs	r2, #32
 80022c8:	409a      	lsls	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d136      	bne.n	8002348 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0216 	bic.w	r2, r2, #22
 80022e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <HAL_DMA_IRQHandler+0x1da>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0208 	bic.w	r2, r2, #8
 8002318:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	223f      	movs	r2, #63	; 0x3f
 8002320:	409a      	lsls	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233a:	2b00      	cmp	r3, #0
 800233c:	d07d      	beq.n	800243a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
        }
        return;
 8002346:	e078      	b.n	800243a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01c      	beq.n	8002390 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	2b00      	cmp	r3, #0
 800236a:	d030      	beq.n	80023ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
 8002374:	e02b      	b.n	80023ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d027      	beq.n	80023ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
 8002386:	e022      	b.n	80023ce <HAL_DMA_IRQHandler+0x29e>
 8002388:	20000000 	.word	0x20000000
 800238c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10f      	bne.n	80023be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0210 	bic.w	r2, r2, #16
 80023ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d032      	beq.n	800243c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d022      	beq.n	8002428 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2205      	movs	r2, #5
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3301      	adds	r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	429a      	cmp	r2, r3
 8002404:	d307      	bcc.n	8002416 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f2      	bne.n	80023fa <HAL_DMA_IRQHandler+0x2ca>
 8002414:	e000      	b.n	8002418 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002416:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	e000      	b.n	800243c <HAL_DMA_IRQHandler+0x30c>
        return;
 800243a:	bf00      	nop
    }
  }
}
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop

08002444 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002460:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d108      	bne.n	8002484 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002482:	e007      	b.n	8002494 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	60da      	str	r2, [r3, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	3b10      	subs	r3, #16
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <DMA_CalcBaseAndBitshift+0x64>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ba:	4a13      	ldr	r2, [pc, #76]	; (8002508 <DMA_CalcBaseAndBitshift+0x68>)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d909      	bls.n	80024e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	1d1a      	adds	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	659a      	str	r2, [r3, #88]	; 0x58
 80024e0:	e007      	b.n	80024f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	aaaaaaab 	.word	0xaaaaaaab
 8002508:	080059e0 	.word	0x080059e0

0800250c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d11f      	bne.n	8002566 <DMA_CheckFifoParam+0x5a>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d856      	bhi.n	80025da <DMA_CheckFifoParam+0xce>
 800252c:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <DMA_CheckFifoParam+0x28>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	08002545 	.word	0x08002545
 8002538:	08002557 	.word	0x08002557
 800253c:	08002545 	.word	0x08002545
 8002540:	080025db 	.word	0x080025db
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d046      	beq.n	80025de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002554:	e043      	b.n	80025de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800255e:	d140      	bne.n	80025e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002564:	e03d      	b.n	80025e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256e:	d121      	bne.n	80025b4 <DMA_CheckFifoParam+0xa8>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d837      	bhi.n	80025e6 <DMA_CheckFifoParam+0xda>
 8002576:	a201      	add	r2, pc, #4	; (adr r2, 800257c <DMA_CheckFifoParam+0x70>)
 8002578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257c:	0800258d 	.word	0x0800258d
 8002580:	08002593 	.word	0x08002593
 8002584:	0800258d 	.word	0x0800258d
 8002588:	080025a5 	.word	0x080025a5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      break;
 8002590:	e030      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d025      	beq.n	80025ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a2:	e022      	b.n	80025ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025ac:	d11f      	bne.n	80025ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025b2:	e01c      	b.n	80025ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d903      	bls.n	80025c2 <DMA_CheckFifoParam+0xb6>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d003      	beq.n	80025c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025c0:	e018      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      break;
 80025c6:	e015      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00e      	beq.n	80025f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e00b      	b.n	80025f2 <DMA_CheckFifoParam+0xe6>
      break;
 80025da:	bf00      	nop
 80025dc:	e00a      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e008      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e006      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e004      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <DMA_CheckFifoParam+0xe8>
      break;
 80025f2:	bf00      	nop
    }
  } 
  
  return status; 
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e159      	b.n	80028d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002620:	2201      	movs	r2, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	f040 8148 	bne.w	80028ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d005      	beq.n	8002656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	2b02      	cmp	r3, #2
 8002654:	d130      	bne.n	80026b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800268c:	2201      	movs	r2, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 0201 	and.w	r2, r3, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d017      	beq.n	80026f4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d123      	bne.n	8002748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	08da      	lsrs	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3208      	adds	r2, #8
 8002708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	220f      	movs	r2, #15
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	08da      	lsrs	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3208      	adds	r2, #8
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0203 	and.w	r2, r3, #3
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80a2 	beq.w	80028ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b57      	ldr	r3, [pc, #348]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	4a56      	ldr	r2, [pc, #344]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 8002794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002798:	6453      	str	r3, [r2, #68]	; 0x44
 800279a:	4b54      	ldr	r3, [pc, #336]	; (80028ec <HAL_GPIO_Init+0x2e8>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a6:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_GPIO_Init+0x2ec>)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	220f      	movs	r2, #15
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a49      	ldr	r2, [pc, #292]	; (80028f4 <HAL_GPIO_Init+0x2f0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d019      	beq.n	8002806 <HAL_GPIO_Init+0x202>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a48      	ldr	r2, [pc, #288]	; (80028f8 <HAL_GPIO_Init+0x2f4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_GPIO_Init+0x1fe>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a47      	ldr	r2, [pc, #284]	; (80028fc <HAL_GPIO_Init+0x2f8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00d      	beq.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a46      	ldr	r2, [pc, #280]	; (8002900 <HAL_GPIO_Init+0x2fc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d007      	beq.n	80027fa <HAL_GPIO_Init+0x1f6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a45      	ldr	r2, [pc, #276]	; (8002904 <HAL_GPIO_Init+0x300>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_GPIO_Init+0x1f2>
 80027f2:	2304      	movs	r3, #4
 80027f4:	e008      	b.n	8002808 <HAL_GPIO_Init+0x204>
 80027f6:	2307      	movs	r3, #7
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x204>
 80027fa:	2303      	movs	r3, #3
 80027fc:	e004      	b.n	8002808 <HAL_GPIO_Init+0x204>
 80027fe:	2302      	movs	r3, #2
 8002800:	e002      	b.n	8002808 <HAL_GPIO_Init+0x204>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_GPIO_Init+0x204>
 8002806:	2300      	movs	r3, #0
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	f002 0203 	and.w	r2, r2, #3
 800280e:	0092      	lsls	r2, r2, #2
 8002810:	4093      	lsls	r3, r2
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002818:	4935      	ldr	r1, [pc, #212]	; (80028f0 <HAL_GPIO_Init+0x2ec>)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3302      	adds	r3, #2
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002826:	4b38      	ldr	r3, [pc, #224]	; (8002908 <HAL_GPIO_Init+0x304>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800284a:	4a2f      	ldr	r2, [pc, #188]	; (8002908 <HAL_GPIO_Init+0x304>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002850:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <HAL_GPIO_Init+0x304>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002874:	4a24      	ldr	r2, [pc, #144]	; (8002908 <HAL_GPIO_Init+0x304>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <HAL_GPIO_Init+0x304>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289e:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_GPIO_Init+0x304>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <HAL_GPIO_Init+0x304>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c8:	4a0f      	ldr	r2, [pc, #60]	; (8002908 <HAL_GPIO_Init+0x304>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	f67f aea2 	bls.w	8002620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40013800 	.word	0x40013800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	40020400 	.word	0x40020400
 80028fc:	40020800 	.word	0x40020800
 8002900:	40020c00 	.word	0x40020c00
 8002904:	40021000 	.word	0x40021000
 8002908:	40013c00 	.word	0x40013c00

0800290c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002928:	e003      	b.n	8002932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	619a      	str	r2, [r3, #24]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e264      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d075      	beq.n	8002a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800295e:	4ba3      	ldr	r3, [pc, #652]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d00c      	beq.n	8002984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4ba0      	ldr	r3, [pc, #640]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002972:	2b08      	cmp	r3, #8
 8002974:	d112      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002976:	4b9d      	ldr	r3, [pc, #628]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002982:	d10b      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	4b99      	ldr	r3, [pc, #612]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05b      	beq.n	8002a48 <HAL_RCC_OscConfig+0x108>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d157      	bne.n	8002a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e23f      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d106      	bne.n	80029b4 <HAL_RCC_OscConfig+0x74>
 80029a6:	4b91      	ldr	r3, [pc, #580]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a90      	ldr	r2, [pc, #576]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x98>
 80029be:	4b8b      	ldr	r3, [pc, #556]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a8a      	ldr	r2, [pc, #552]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b88      	ldr	r3, [pc, #544]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a87      	ldr	r2, [pc, #540]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029d8:	4b84      	ldr	r3, [pc, #528]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a83      	ldr	r2, [pc, #524]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b81      	ldr	r3, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a80      	ldr	r2, [pc, #512]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe fd50 	bl	800149c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a00:	f7fe fd4c 	bl	800149c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e204      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b76      	ldr	r3, [pc, #472]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xc0>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe fd3c 	bl	800149c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe fd38 	bl	800149c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1f0      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	4b6c      	ldr	r3, [pc, #432]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0xe8>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d063      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b62      	ldr	r3, [pc, #392]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6e:	4b5f      	ldr	r3, [pc, #380]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e1c4      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b56      	ldr	r3, [pc, #344]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4952      	ldr	r1, [pc, #328]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	e03a      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	4b4f      	ldr	r3, [pc, #316]	; (8002bf0 <HAL_RCC_OscConfig+0x2b0>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fcf1 	bl	800149c <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002abe:	f7fe fced 	bl	800149c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1a5      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	4b46      	ldr	r3, [pc, #280]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b43      	ldr	r3, [pc, #268]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4940      	ldr	r1, [pc, #256]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e015      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af2:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_RCC_OscConfig+0x2b0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fcd0 	bl	800149c <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b00:	f7fe fccc 	bl	800149c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e184      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	4b36      	ldr	r3, [pc, #216]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d030      	beq.n	8002b8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_RCC_OscConfig+0x2b4>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe fcb0 	bl	800149c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b40:	f7fe fcac 	bl	800149c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e164      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x200>
 8002b5e:	e015      	b.n	8002b8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RCC_OscConfig+0x2b4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7fe fc99 	bl	800149c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7fe fc95 	bl	800149c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e14d      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80a0 	beq.w	8002cda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x2b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d121      	bne.n	8002c1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_RCC_OscConfig+0x2b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <HAL_RCC_OscConfig+0x2b8>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7fe fc5b 	bl	800149c <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	e011      	b.n	8002c0e <HAL_RCC_OscConfig+0x2ce>
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	42470000 	.word	0x42470000
 8002bf4:	42470e80 	.word	0x42470e80
 8002bf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfc:	f7fe fc4e 	bl	800149c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e106      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b85      	ldr	r3, [pc, #532]	; (8002e24 <HAL_RCC_OscConfig+0x4e4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d106      	bne.n	8002c30 <HAL_RCC_OscConfig+0x2f0>
 8002c22:	4b81      	ldr	r3, [pc, #516]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a80      	ldr	r2, [pc, #512]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2e:	e01c      	b.n	8002c6a <HAL_RCC_OscConfig+0x32a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x312>
 8002c38:	4b7b      	ldr	r3, [pc, #492]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a7a      	ldr	r2, [pc, #488]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	4b78      	ldr	r3, [pc, #480]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a77      	ldr	r2, [pc, #476]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	e00b      	b.n	8002c6a <HAL_RCC_OscConfig+0x32a>
 8002c52:	4b75      	ldr	r3, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a74      	ldr	r2, [pc, #464]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	4b72      	ldr	r3, [pc, #456]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a71      	ldr	r2, [pc, #452]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d015      	beq.n	8002c9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7fe fc13 	bl	800149c <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fe fc0f 	bl	800149c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0c5      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ee      	beq.n	8002c7a <HAL_RCC_OscConfig+0x33a>
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fbfd 	bl	800149c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fe fbf9 	bl	800149c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0af      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbc:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1ee      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4b56      	ldr	r3, [pc, #344]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a55      	ldr	r2, [pc, #340]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 809b 	beq.w	8002e1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d05c      	beq.n	8002daa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d141      	bne.n	8002d7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf8:	4b4c      	ldr	r3, [pc, #304]	; (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fbcd 	bl	800149c <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe fbc9 	bl	800149c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e081      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	019b      	lsls	r3, r3, #6
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	041b      	lsls	r3, r3, #16
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	061b      	lsls	r3, r3, #24
 8002d48:	4937      	ldr	r1, [pc, #220]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fba2 	bl	800149c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7fe fb9e 	bl	800149c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e056      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x41c>
 8002d7a:	e04e      	b.n	8002e1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fe fb8b 	bl	800149c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7fe fb87 	bl	800149c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e03f      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9c:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x44a>
 8002da8:	e037      	b.n	8002e1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e032      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d028      	beq.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d11a      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002de6:	4013      	ands	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d111      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d001      	beq.n	8002e1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40007000 	.word	0x40007000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470060 	.word	0x42470060

08002e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0cc      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d90c      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0b8      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e84:	4b59      	ldr	r3, [pc, #356]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a58      	ldr	r2, [pc, #352]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e9c:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a52      	ldr	r2, [pc, #328]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	494d      	ldr	r1, [pc, #308]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d044      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d119      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e07f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e067      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fabc 	bl	800149c <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7fe fab8 	bl	800149c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e04f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d20c      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e032      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4916      	ldr	r1, [pc, #88]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fb6:	f000 f821 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	490a      	ldr	r1, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	5ccb      	ldrb	r3, [r1, r3]
 8002fca:	fa22 f303 	lsr.w	r3, r2, r3
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fa1c 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023c00 	.word	0x40023c00
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	080059d0 	.word	0x080059d0
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	20000004 	.word	0x20000004

08002ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	b5b0      	push	{r4, r5, r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003002:	2100      	movs	r1, #0
 8003004:	6079      	str	r1, [r7, #4]
 8003006:	2100      	movs	r1, #0
 8003008:	60f9      	str	r1, [r7, #12]
 800300a:	2100      	movs	r1, #0
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800300e:	2100      	movs	r1, #0
 8003010:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003012:	4952      	ldr	r1, [pc, #328]	; (800315c <HAL_RCC_GetSysClockFreq+0x160>)
 8003014:	6889      	ldr	r1, [r1, #8]
 8003016:	f001 010c 	and.w	r1, r1, #12
 800301a:	2908      	cmp	r1, #8
 800301c:	d00d      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0x3e>
 800301e:	2908      	cmp	r1, #8
 8003020:	f200 8094 	bhi.w	800314c <HAL_RCC_GetSysClockFreq+0x150>
 8003024:	2900      	cmp	r1, #0
 8003026:	d002      	beq.n	800302e <HAL_RCC_GetSysClockFreq+0x32>
 8003028:	2904      	cmp	r1, #4
 800302a:	d003      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x38>
 800302c:	e08e      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800302e:	4b4c      	ldr	r3, [pc, #304]	; (8003160 <HAL_RCC_GetSysClockFreq+0x164>)
 8003030:	60bb      	str	r3, [r7, #8]
       break;
 8003032:	e08e      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003034:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <HAL_RCC_GetSysClockFreq+0x168>)
 8003036:	60bb      	str	r3, [r7, #8]
      break;
 8003038:	e08b      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303a:	4948      	ldr	r1, [pc, #288]	; (800315c <HAL_RCC_GetSysClockFreq+0x160>)
 800303c:	6849      	ldr	r1, [r1, #4]
 800303e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003042:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003044:	4945      	ldr	r1, [pc, #276]	; (800315c <HAL_RCC_GetSysClockFreq+0x160>)
 8003046:	6849      	ldr	r1, [r1, #4]
 8003048:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800304c:	2900      	cmp	r1, #0
 800304e:	d024      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003050:	4942      	ldr	r1, [pc, #264]	; (800315c <HAL_RCC_GetSysClockFreq+0x160>)
 8003052:	6849      	ldr	r1, [r1, #4]
 8003054:	0989      	lsrs	r1, r1, #6
 8003056:	4608      	mov	r0, r1
 8003058:	f04f 0100 	mov.w	r1, #0
 800305c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003060:	f04f 0500 	mov.w	r5, #0
 8003064:	ea00 0204 	and.w	r2, r0, r4
 8003068:	ea01 0305 	and.w	r3, r1, r5
 800306c:	493d      	ldr	r1, [pc, #244]	; (8003164 <HAL_RCC_GetSysClockFreq+0x168>)
 800306e:	fb01 f003 	mul.w	r0, r1, r3
 8003072:	2100      	movs	r1, #0
 8003074:	fb01 f102 	mul.w	r1, r1, r2
 8003078:	1844      	adds	r4, r0, r1
 800307a:	493a      	ldr	r1, [pc, #232]	; (8003164 <HAL_RCC_GetSysClockFreq+0x168>)
 800307c:	fba2 0101 	umull	r0, r1, r2, r1
 8003080:	1863      	adds	r3, r4, r1
 8003082:	4619      	mov	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	461a      	mov	r2, r3
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	f7fd f8a4 	bl	80001d8 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4613      	mov	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e04a      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309a:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_RCC_GetSysClockFreq+0x160>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	099b      	lsrs	r3, r3, #6
 80030a0:	461a      	mov	r2, r3
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	ea02 0400 	and.w	r4, r2, r0
 80030b2:	ea03 0501 	and.w	r5, r3, r1
 80030b6:	4620      	mov	r0, r4
 80030b8:	4629      	mov	r1, r5
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	014b      	lsls	r3, r1, #5
 80030c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030c8:	0142      	lsls	r2, r0, #5
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	1b00      	subs	r0, r0, r4
 80030d0:	eb61 0105 	sbc.w	r1, r1, r5
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	018b      	lsls	r3, r1, #6
 80030de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030e2:	0182      	lsls	r2, r0, #6
 80030e4:	1a12      	subs	r2, r2, r0
 80030e6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ea:	f04f 0000 	mov.w	r0, #0
 80030ee:	f04f 0100 	mov.w	r1, #0
 80030f2:	00d9      	lsls	r1, r3, #3
 80030f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030f8:	00d0      	lsls	r0, r2, #3
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	1912      	adds	r2, r2, r4
 8003100:	eb45 0303 	adc.w	r3, r5, r3
 8003104:	f04f 0000 	mov.w	r0, #0
 8003108:	f04f 0100 	mov.w	r1, #0
 800310c:	0299      	lsls	r1, r3, #10
 800310e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003112:	0290      	lsls	r0, r2, #10
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	461a      	mov	r2, r3
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	f7fd f858 	bl	80001d8 <__aeabi_uldivmod>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4613      	mov	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_RCC_GetSysClockFreq+0x160>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	3301      	adds	r3, #1
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	60bb      	str	r3, [r7, #8]
      break;
 800314a:	e002      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <HAL_RCC_GetSysClockFreq+0x164>)
 800314e:	60bb      	str	r3, [r7, #8]
      break;
 8003150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003152:	68bb      	ldr	r3, [r7, #8]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bdb0      	pop	{r4, r5, r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	00f42400 	.word	0x00f42400
 8003164:	017d7840 	.word	0x017d7840

08003168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e07b      	b.n	8003272 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800318a:	d009      	beq.n	80031a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
 8003192:	e005      	b.n	80031a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd fc8e 	bl	8000adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	ea42 0103 	orr.w	r1, r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0104 	and.w	r1, r3, #4
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	f003 0210 	and.w	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003260:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b088      	sub	sp, #32
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_SPI_Transmit+0x22>
 8003298:	2302      	movs	r3, #2
 800329a:	e126      	b.n	80034ea <HAL_SPI_Transmit+0x270>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032a4:	f7fe f8fa 	bl	800149c <HAL_GetTick>
 80032a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d002      	beq.n	80032c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
 80032bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032be:	e10b      	b.n	80034d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_SPI_Transmit+0x52>
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032d0:	e102      	b.n	80034d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2203      	movs	r2, #3
 80032d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	88fa      	ldrh	r2, [r7, #6]
 80032ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	88fa      	ldrh	r2, [r7, #6]
 80032f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003318:	d10f      	bne.n	800333a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003328:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003338:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d007      	beq.n	8003358 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003360:	d14b      	bne.n	80033fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_SPI_Transmit+0xf6>
 800336a:	8afb      	ldrh	r3, [r7, #22]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d13e      	bne.n	80033ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	1c9a      	adds	r2, r3, #2
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003394:	e02b      	b.n	80033ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d112      	bne.n	80033ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	881a      	ldrh	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80033c8:	e011      	b.n	80033ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ca:	f7fe f867 	bl	800149c <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d803      	bhi.n	80033e2 <HAL_SPI_Transmit+0x168>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d102      	bne.n	80033e8 <HAL_SPI_Transmit+0x16e>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033ec:	e074      	b.n	80034d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ce      	bne.n	8003396 <HAL_SPI_Transmit+0x11c>
 80033f8:	e04c      	b.n	8003494 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_SPI_Transmit+0x18e>
 8003402:	8afb      	ldrh	r3, [r7, #22]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d140      	bne.n	800348a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	7812      	ldrb	r2, [r2, #0]
 8003414:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800342e:	e02c      	b.n	800348a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d113      	bne.n	8003466 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	86da      	strh	r2, [r3, #54]	; 0x36
 8003464:	e011      	b.n	800348a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003466:	f7fe f819 	bl	800149c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d803      	bhi.n	800347e <HAL_SPI_Transmit+0x204>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d102      	bne.n	8003484 <HAL_SPI_Transmit+0x20a>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003488:	e026      	b.n	80034d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1cd      	bne.n	8003430 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	6839      	ldr	r1, [r7, #0]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fbcb 	bl	8003c34 <SPI_EndRxTxTransaction>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e000      	b.n	80034d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80034d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b088      	sub	sp, #32
 80034f6:	af02      	add	r7, sp, #8
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800350e:	d112      	bne.n	8003536 <HAL_SPI_Receive+0x44>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10e      	bne.n	8003536 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2204      	movs	r2, #4
 800351c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003520:	88fa      	ldrh	r2, [r7, #6]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f8f1 	bl	8003714 <HAL_SPI_TransmitReceive>
 8003532:	4603      	mov	r3, r0
 8003534:	e0ea      	b.n	800370c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_SPI_Receive+0x52>
 8003540:	2302      	movs	r3, #2
 8003542:	e0e3      	b.n	800370c <HAL_SPI_Receive+0x21a>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800354c:	f7fd ffa6 	bl	800149c <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d002      	beq.n	8003564 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800355e:	2302      	movs	r3, #2
 8003560:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003562:	e0ca      	b.n	80036fa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_SPI_Receive+0x7e>
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003574:	e0c1      	b.n	80036fa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2204      	movs	r2, #4
 800357a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035bc:	d10f      	bne.n	80035de <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	d007      	beq.n	80035fc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d162      	bne.n	80036ca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003604:	e02e      	b.n	8003664 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d115      	bne.n	8003640 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f103 020c 	add.w	r2, r3, #12
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800363e:	e011      	b.n	8003664 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003640:	f7fd ff2c 	bl	800149c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d803      	bhi.n	8003658 <HAL_SPI_Receive+0x166>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d102      	bne.n	800365e <HAL_SPI_Receive+0x16c>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003662:	e04a      	b.n	80036fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1cb      	bne.n	8003606 <HAL_SPI_Receive+0x114>
 800366e:	e031      	b.n	80036d4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d113      	bne.n	80036a6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	b292      	uxth	r2, r2
 800368a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	1c9a      	adds	r2, r3, #2
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036a4:	e011      	b.n	80036ca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a6:	f7fd fef9 	bl	800149c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d803      	bhi.n	80036be <HAL_SPI_Receive+0x1cc>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d102      	bne.n	80036c4 <HAL_SPI_Receive+0x1d2>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036c8:	e017      	b.n	80036fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1cd      	bne.n	8003670 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	6839      	ldr	r1, [r7, #0]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fa45 	bl	8003b68 <SPI_EndRxTransaction>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
 80036f6:	e000      	b.n	80036fa <HAL_SPI_Receive+0x208>
  }

error :
 80036f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800370a:	7dfb      	ldrb	r3, [r7, #23]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	; 0x30
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003722:	2301      	movs	r3, #1
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_SPI_TransmitReceive+0x26>
 8003736:	2302      	movs	r3, #2
 8003738:	e18a      	b.n	8003a50 <HAL_SPI_TransmitReceive+0x33c>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003742:	f7fd feab 	bl	800149c <HAL_GetTick>
 8003746:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800375c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003760:	2b01      	cmp	r3, #1
 8003762:	d00f      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x70>
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800376a:	d107      	bne.n	800377c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d103      	bne.n	800377c <HAL_SPI_TransmitReceive+0x68>
 8003774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003778:	2b04      	cmp	r3, #4
 800377a:	d003      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003782:	e15b      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x82>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x82>
 8003790:	887b      	ldrh	r3, [r7, #2]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800379c:	e14e      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d003      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2205      	movs	r2, #5
 80037ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	887a      	ldrh	r2, [r7, #2]
 80037c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	887a      	ldrh	r2, [r7, #2]
 80037c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	887a      	ldrh	r2, [r7, #2]
 80037d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	887a      	ldrh	r2, [r7, #2]
 80037da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d007      	beq.n	8003806 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380e:	d178      	bne.n	8003902 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_SPI_TransmitReceive+0x10a>
 8003818:	8b7b      	ldrh	r3, [r7, #26]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d166      	bne.n	80038ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003842:	e053      	b.n	80038ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d11b      	bne.n	800388a <HAL_SPI_TransmitReceive+0x176>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d016      	beq.n	800388a <HAL_SPI_TransmitReceive+0x176>
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d113      	bne.n	800388a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	881a      	ldrh	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	1c9a      	adds	r2, r3, #2
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d119      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x1b8>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d014      	beq.n	80038cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	b292      	uxth	r2, r2
 80038ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038c8:	2301      	movs	r3, #1
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038cc:	f7fd fde6 	bl	800149c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d8:	429a      	cmp	r2, r3
 80038da:	d807      	bhi.n	80038ec <HAL_SPI_TransmitReceive+0x1d8>
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e2:	d003      	beq.n	80038ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038ea:	e0a7      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1a6      	bne.n	8003844 <HAL_SPI_TransmitReceive+0x130>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1a1      	bne.n	8003844 <HAL_SPI_TransmitReceive+0x130>
 8003900:	e07c      	b.n	80039fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x1fc>
 800390a:	8b7b      	ldrh	r3, [r7, #26]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d16b      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003936:	e057      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d11c      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x26c>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d017      	beq.n	8003980 <HAL_SPI_TransmitReceive+0x26c>
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d114      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	330c      	adds	r3, #12
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d119      	bne.n	80039c2 <HAL_SPI_TransmitReceive+0x2ae>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d014      	beq.n	80039c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039be:	2301      	movs	r3, #1
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039c2:	f7fd fd6b 	bl	800149c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d803      	bhi.n	80039da <HAL_SPI_TransmitReceive+0x2c6>
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d102      	bne.n	80039e0 <HAL_SPI_TransmitReceive+0x2cc>
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d103      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039e6:	e029      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1a2      	bne.n	8003938 <HAL_SPI_TransmitReceive+0x224>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d19d      	bne.n	8003938 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f917 	bl	8003c34 <SPI_EndRxTxTransaction>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d006      	beq.n	8003a1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a18:	e010      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	e000      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3730      	adds	r7, #48	; 0x30
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a68:	f7fd fd18 	bl	800149c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	4413      	add	r3, r2
 8003a76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a78:	f7fd fd10 	bl	800149c <HAL_GetTick>
 8003a7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a7e:	4b39      	ldr	r3, [pc, #228]	; (8003b64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	015b      	lsls	r3, r3, #5
 8003a84:	0d1b      	lsrs	r3, r3, #20
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a8e:	e054      	b.n	8003b3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d050      	beq.n	8003b3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a98:	f7fd fd00 	bl	800149c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d902      	bls.n	8003aae <SPI_WaitFlagStateUntilTimeout+0x56>
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d13d      	bne.n	8003b2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003abc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ac6:	d111      	bne.n	8003aec <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad0:	d004      	beq.n	8003adc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ada:	d107      	bne.n	8003aec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af4:	d10f      	bne.n	8003b16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e017      	b.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4013      	ands	r3, r2
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d19b      	bne.n	8003a90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000000 	.word	0x20000000

08003b68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b7c:	d111      	bne.n	8003ba2 <SPI_EndRxTransaction+0x3a>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b86:	d004      	beq.n	8003b92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b90:	d107      	bne.n	8003ba2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003baa:	d12a      	bne.n	8003c02 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb4:	d012      	beq.n	8003bdc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7ff ff49 	bl	8003a58 <SPI_WaitFlagStateUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02d      	beq.n	8003c28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	f043 0220 	orr.w	r2, r3, #32
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e026      	b.n	8003c2a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	2101      	movs	r1, #1
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7ff ff36 	bl	8003a58 <SPI_WaitFlagStateUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01a      	beq.n	8003c28 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e013      	b.n	8003c2a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff ff23 	bl	8003a58 <SPI_WaitFlagStateUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e000      	b.n	8003c2a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c40:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <SPI_EndRxTxTransaction+0x7c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <SPI_EndRxTxTransaction+0x80>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0d5b      	lsrs	r3, r3, #21
 8003c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5e:	d112      	bne.n	8003c86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff fef4 	bl	8003a58 <SPI_WaitFlagStateUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e00f      	b.n	8003ca6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	2b80      	cmp	r3, #128	; 0x80
 8003c9e:	d0f2      	beq.n	8003c86 <SPI_EndRxTxTransaction+0x52>
 8003ca0:	e000      	b.n	8003ca4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ca2:	bf00      	nop
  }

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000000 	.word	0x20000000
 8003cb4:	165e9f81 	.word	0x165e9f81

08003cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e041      	b.n	8003d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd fac6 	bl	8001270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f000 fa74 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e041      	b.n	8003dec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fd f941 	bl	8001004 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2202      	movs	r2, #2
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3304      	adds	r3, #4
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f000 fa25 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d122      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d11b      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0202 	mvn.w	r2, #2
 8003e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f9b6 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e005      	b.n	8003e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f9a8 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f9b9 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d122      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0204 	mvn.w	r2, #4
 8003e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f98c 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003e90:	e005      	b.n	8003e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f97e 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f98f 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d122      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0208 	mvn.w	r2, #8
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f962 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f954 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f965 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0210 	mvn.w	r2, #16
 8003f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2208      	movs	r2, #8
 8003f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f938 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f92a 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f93b 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d10e      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d107      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0201 	mvn.w	r2, #1
 8003f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f904 	bl	8004180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d10e      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f90:	2b80      	cmp	r3, #128	; 0x80
 8003f92:	d107      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fba4 	bl	80046ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d107      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f900 	bl	80041d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d10e      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d107      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0220 	mvn.w	r2, #32
 8003ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fb6e 	bl	80046d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800401a:	2302      	movs	r3, #2
 800401c:	e0ac      	b.n	8004178 <HAL_TIM_PWM_ConfigChannel+0x174>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b0c      	cmp	r3, #12
 800402a:	f200 809f 	bhi.w	800416c <HAL_TIM_PWM_ConfigChannel+0x168>
 800402e:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	08004069 	.word	0x08004069
 8004038:	0800416d 	.word	0x0800416d
 800403c:	0800416d 	.word	0x0800416d
 8004040:	0800416d 	.word	0x0800416d
 8004044:	080040a9 	.word	0x080040a9
 8004048:	0800416d 	.word	0x0800416d
 800404c:	0800416d 	.word	0x0800416d
 8004050:	0800416d 	.word	0x0800416d
 8004054:	080040eb 	.word	0x080040eb
 8004058:	0800416d 	.word	0x0800416d
 800405c:	0800416d 	.word	0x0800416d
 8004060:	0800416d 	.word	0x0800416d
 8004064:	0800412b 	.word	0x0800412b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f938 	bl	80042e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0208 	orr.w	r2, r2, #8
 8004082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0204 	bic.w	r2, r2, #4
 8004092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6999      	ldr	r1, [r3, #24]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	619a      	str	r2, [r3, #24]
      break;
 80040a6:	e062      	b.n	800416e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f97e 	bl	80043b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6999      	ldr	r1, [r3, #24]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	021a      	lsls	r2, r3, #8
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	619a      	str	r2, [r3, #24]
      break;
 80040e8:	e041      	b.n	800416e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 f9c9 	bl	8004488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0208 	orr.w	r2, r2, #8
 8004104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0204 	bic.w	r2, r2, #4
 8004114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69d9      	ldr	r1, [r3, #28]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	61da      	str	r2, [r3, #28]
      break;
 8004128:	e021      	b.n	800416e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fa13 	bl	800455c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69d9      	ldr	r1, [r3, #28]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	021a      	lsls	r2, r3, #8
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	61da      	str	r2, [r3, #28]
      break;
 800416a:	e000      	b.n	800416e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800416c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a34      	ldr	r2, [pc, #208]	; (80042c8 <TIM_Base_SetConfig+0xe4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00f      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004202:	d00b      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a31      	ldr	r2, [pc, #196]	; (80042cc <TIM_Base_SetConfig+0xe8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a30      	ldr	r2, [pc, #192]	; (80042d0 <TIM_Base_SetConfig+0xec>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0x38>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a2f      	ldr	r2, [pc, #188]	; (80042d4 <TIM_Base_SetConfig+0xf0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d108      	bne.n	800422e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a25      	ldr	r2, [pc, #148]	; (80042c8 <TIM_Base_SetConfig+0xe4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01b      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423c:	d017      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a22      	ldr	r2, [pc, #136]	; (80042cc <TIM_Base_SetConfig+0xe8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <TIM_Base_SetConfig+0xec>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00f      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a20      	ldr	r2, [pc, #128]	; (80042d4 <TIM_Base_SetConfig+0xf0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00b      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <TIM_Base_SetConfig+0xf4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <TIM_Base_SetConfig+0xf8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_Base_SetConfig+0x8a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1d      	ldr	r2, [pc, #116]	; (80042e0 <TIM_Base_SetConfig+0xfc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d108      	bne.n	8004280 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a08      	ldr	r2, [pc, #32]	; (80042c8 <TIM_Base_SetConfig+0xe4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d103      	bne.n	80042b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	615a      	str	r2, [r3, #20]
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40014000 	.word	0x40014000
 80042dc:	40014400 	.word	0x40014400
 80042e0:	40014800 	.word	0x40014800

080042e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f023 0201 	bic.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 0302 	bic.w	r3, r3, #2
 800432c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <TIM_OC1_SetConfig+0xc8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d10c      	bne.n	800435a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0308 	bic.w	r3, r3, #8
 8004346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a13      	ldr	r2, [pc, #76]	; (80043ac <TIM_OC1_SetConfig+0xc8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d111      	bne.n	8004386 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	621a      	str	r2, [r3, #32]
}
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40010000 	.word	0x40010000

080043b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f023 0210 	bic.w	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0320 	bic.w	r3, r3, #32
 80043fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a1e      	ldr	r2, [pc, #120]	; (8004484 <TIM_OC2_SetConfig+0xd4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d10d      	bne.n	800442c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800442a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a15      	ldr	r2, [pc, #84]	; (8004484 <TIM_OC2_SetConfig+0xd4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d113      	bne.n	800445c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800443a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40010000 	.word	0x40010000

08004488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <TIM_OC3_SetConfig+0xd0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10d      	bne.n	8004502 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <TIM_OC3_SetConfig+0xd0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d113      	bne.n	8004532 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	621a      	str	r2, [r3, #32]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40010000 	.word	0x40010000

0800455c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	031b      	lsls	r3, r3, #12
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a10      	ldr	r2, [pc, #64]	; (80045f8 <TIM_OC4_SetConfig+0x9c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d109      	bne.n	80045d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	019b      	lsls	r3, r3, #6
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40010000 	.word	0x40010000

080045fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004610:	2302      	movs	r3, #2
 8004612:	e050      	b.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d018      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d013      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00e      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a16      	ldr	r2, [pc, #88]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d009      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d004      	beq.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d10c      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	4313      	orrs	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000800 	.word	0x40000800
 80046d0:	40000c00 	.word	0x40000c00
 80046d4:	40014000 	.word	0x40014000

080046d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <battery_monitor_init>:
uint32_t    battery_adc;
float       battery_voltage;


void battery_monitor_init()
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, &battery_adc, 1);
 8004704:	2201      	movs	r2, #1
 8004706:	4904      	ldr	r1, [pc, #16]	; (8004718 <battery_monitor_init+0x18>)
 8004708:	4804      	ldr	r0, [pc, #16]	; (800471c <battery_monitor_init+0x1c>)
 800470a:	f7fc ff3b 	bl	8001584 <HAL_ADC_Start_DMA>
    HAL_Delay(100);
 800470e:	2064      	movs	r0, #100	; 0x64
 8004710:	f7fc fed0 	bl	80014b4 <HAL_Delay>
}
 8004714:	bf00      	nop
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000488 	.word	0x20000488
 800471c:	200000ac 	.word	0x200000ac

08004720 <buzzer_time>:
{
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, RESET);
}

void buzzer_time(uint16_t ms)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, SET);
 800472a:	2201      	movs	r2, #1
 800472c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004730:	4808      	ldr	r0, [pc, #32]	; (8004754 <buzzer_time+0x34>)
 8004732:	f7fe f8eb 	bl	800290c <HAL_GPIO_WritePin>
    HAL_Delay(ms);
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fc febb 	bl	80014b4 <HAL_Delay>
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, RESET);
 800473e:	2200      	movs	r2, #0
 8004740:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004744:	4803      	ldr	r0, [pc, #12]	; (8004754 <buzzer_time+0x34>)
 8004746:	f7fe f8e1 	bl	800290c <HAL_GPIO_WritePin>
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40020000 	.word	0x40020000

08004758 <cs_high>:
float mag_typ = 0.15;


// cs state
void cs_high()
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PIN_PORT, CS_PIN_NUMBER, SET);	
 800475c:	2201      	movs	r2, #1
 800475e:	2110      	movs	r1, #16
 8004760:	4802      	ldr	r0, [pc, #8]	; (800476c <cs_high+0x14>)
 8004762:	f7fe f8d3 	bl	800290c <HAL_GPIO_WritePin>
}
 8004766:	bf00      	nop
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40020000 	.word	0x40020000

08004770 <cs_low>:

void cs_low()
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PIN_PORT, CS_PIN_NUMBER, RESET);
 8004774:	2200      	movs	r2, #0
 8004776:	2110      	movs	r1, #16
 8004778:	4802      	ldr	r0, [pc, #8]	; (8004784 <cs_low+0x14>)
 800477a:	f7fe f8c7 	bl	800290c <HAL_GPIO_WritePin>
}
 800477e:	bf00      	nop
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40020000 	.word	0x40020000

08004788 <select_user_bank>:

// user bank
void select_user_bank(userbank_e ub)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	71fb      	strb	r3, [r7, #7]
	cs_low();
 8004792:	f7ff ffed 	bl	8004770 <cs_low>
	tx_buffer[0] = WRITE | B0_REG_BANK_SEL;
 8004796:	4b09      	ldr	r3, [pc, #36]	; (80047bc <select_user_bank+0x34>)
 8004798:	227f      	movs	r2, #127	; 0x7f
 800479a:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = ub;
 800479c:	4a07      	ldr	r2, [pc, #28]	; (80047bc <select_user_bank+0x34>)
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	7053      	strb	r3, [r2, #1]
	HAL_SPI_Transmit(SPI_ICM20948, tx_buffer, 2, 10);
 80047a2:	230a      	movs	r3, #10
 80047a4:	2202      	movs	r2, #2
 80047a6:	4905      	ldr	r1, [pc, #20]	; (80047bc <select_user_bank+0x34>)
 80047a8:	4805      	ldr	r0, [pc, #20]	; (80047c0 <select_user_bank+0x38>)
 80047aa:	f7fe fd66 	bl	800327a <HAL_SPI_Transmit>
	cs_high();
 80047ae:	f7ff ffd3 	bl	8004758 <cs_high>
}
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000094 	.word	0x20000094
 80047c0:	200001d0 	.word	0x200001d0

080047c4 <read_icm20948>:

// spi
void read_icm20948(uint8_t regaddr, uint8_t len)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	460a      	mov	r2, r1
 80047ce:	71fb      	strb	r3, [r7, #7]
 80047d0:	4613      	mov	r3, r2
 80047d2:	71bb      	strb	r3, [r7, #6]
	cs_low();
 80047d4:	f7ff ffcc 	bl	8004770 <cs_low>
	tx_buffer[0] = READ | regaddr;
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	4b0a      	ldr	r3, [pc, #40]	; (800480c <read_icm20948+0x48>)
 80047e2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_ICM20948, tx_buffer, 1, 10);
 80047e4:	230a      	movs	r3, #10
 80047e6:	2201      	movs	r2, #1
 80047e8:	4908      	ldr	r1, [pc, #32]	; (800480c <read_icm20948+0x48>)
 80047ea:	4809      	ldr	r0, [pc, #36]	; (8004810 <read_icm20948+0x4c>)
 80047ec:	f7fe fd45 	bl	800327a <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_ICM20948, rx_buffer, len, 10);
 80047f0:	79bb      	ldrb	r3, [r7, #6]
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	230a      	movs	r3, #10
 80047f6:	4907      	ldr	r1, [pc, #28]	; (8004814 <read_icm20948+0x50>)
 80047f8:	4805      	ldr	r0, [pc, #20]	; (8004810 <read_icm20948+0x4c>)
 80047fa:	f7fe fe7a 	bl	80034f2 <HAL_SPI_Receive>
	cs_high();
 80047fe:	f7ff ffab 	bl	8004758 <cs_high>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000094 	.word	0x20000094
 8004810:	200001d0 	.word	0x200001d0
 8004814:	2000009c 	.word	0x2000009c

08004818 <write_icm20948>:

void write_icm20948(uint8_t regaddr, uint8_t data)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	460a      	mov	r2, r1
 8004822:	71fb      	strb	r3, [r7, #7]
 8004824:	4613      	mov	r3, r2
 8004826:	71bb      	strb	r3, [r7, #6]
	cs_low();
 8004828:	f7ff ffa2 	bl	8004770 <cs_low>
	tx_buffer[0] = WRITE | regaddr;
 800482c:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <write_icm20948+0x40>)
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = data;
 8004832:	4a09      	ldr	r2, [pc, #36]	; (8004858 <write_icm20948+0x40>)
 8004834:	79bb      	ldrb	r3, [r7, #6]
 8004836:	7053      	strb	r3, [r2, #1]
	HAL_SPI_Transmit(SPI_ICM20948, tx_buffer, 2, 10);
 8004838:	230a      	movs	r3, #10
 800483a:	2202      	movs	r2, #2
 800483c:	4906      	ldr	r1, [pc, #24]	; (8004858 <write_icm20948+0x40>)
 800483e:	4807      	ldr	r0, [pc, #28]	; (800485c <write_icm20948+0x44>)
 8004840:	f7fe fd1b 	bl	800327a <HAL_SPI_Transmit>
	cs_high();
 8004844:	f7ff ff88 	bl	8004758 <cs_high>

	// necessary
	HAL_Delay(1);
 8004848:	2001      	movs	r0, #1
 800484a:	f7fc fe33 	bl	80014b4 <HAL_Delay>
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000094 	.word	0x20000094
 800485c:	200001d0 	.word	0x200001d0

08004860 <read_ak09916>:

// auxiliary i2c
void read_ak09916(uint8_t regaddr, uint8_t len)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	460a      	mov	r2, r1
 800486a:	71fb      	strb	r3, [r7, #7]
 800486c:	4613      	mov	r3, r2
 800486e:	71bb      	strb	r3, [r7, #6]
	select_user_bank(userbank_3);
 8004870:	2030      	movs	r0, #48	; 0x30
 8004872:	f7ff ff89 	bl	8004788 <select_user_bank>

	write_icm20948(B3_I2C_SLV0_ADDR, READ | ADDRESS_AK09916);
 8004876:	218c      	movs	r1, #140	; 0x8c
 8004878:	2003      	movs	r0, #3
 800487a:	f7ff ffcd 	bl	8004818 <write_icm20948>
	write_icm20948(B3_I2C_SLV0_REG, regaddr); 
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	4619      	mov	r1, r3
 8004882:	2004      	movs	r0, #4
 8004884:	f7ff ffc8 	bl	8004818 <write_icm20948>
	write_icm20948(B3_I2C_SLV0_CTRL, I2C_SLV_EN | len);
 8004888:	79bb      	ldrb	r3, [r7, #6]
 800488a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800488e:	b2db      	uxtb	r3, r3
 8004890:	4619      	mov	r1, r3
 8004892:	2005      	movs	r0, #5
 8004894:	f7ff ffc0 	bl	8004818 <write_icm20948>

	select_user_bank(userbank_0);
 8004898:	2000      	movs	r0, #0
 800489a:	f7ff ff75 	bl	8004788 <select_user_bank>
	read_icm20948(B0_EXT_SLV_SENS_DATA_00, len);
 800489e:	79bb      	ldrb	r3, [r7, #6]
 80048a0:	4619      	mov	r1, r3
 80048a2:	203b      	movs	r0, #59	; 0x3b
 80048a4:	f7ff ff8e 	bl	80047c4 <read_icm20948>
}
 80048a8:	bf00      	nop
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <write_ak09916>:

void write_ak09916(uint8_t regaddr, uint8_t data)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	460a      	mov	r2, r1
 80048ba:	71fb      	strb	r3, [r7, #7]
 80048bc:	4613      	mov	r3, r2
 80048be:	71bb      	strb	r3, [r7, #6]
	select_user_bank(userbank_3);
 80048c0:	2030      	movs	r0, #48	; 0x30
 80048c2:	f7ff ff61 	bl	8004788 <select_user_bank>

	write_icm20948(B3_I2C_SLV0_ADDR, WRITE | ADDRESS_AK09916);
 80048c6:	210c      	movs	r1, #12
 80048c8:	2003      	movs	r0, #3
 80048ca:	f7ff ffa5 	bl	8004818 <write_icm20948>
	write_icm20948(B3_I2C_SLV0_REG, regaddr);
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	4619      	mov	r1, r3
 80048d2:	2004      	movs	r0, #4
 80048d4:	f7ff ffa0 	bl	8004818 <write_icm20948>
	write_icm20948(B3_I2C_SLV0_DO, data);
 80048d8:	79bb      	ldrb	r3, [r7, #6]
 80048da:	4619      	mov	r1, r3
 80048dc:	2006      	movs	r0, #6
 80048de:	f7ff ff9b 	bl	8004818 <write_icm20948>
	write_icm20948(B3_I2C_SLV0_CTRL, 0x81);
 80048e2:	2181      	movs	r1, #129	; 0x81
 80048e4:	2005      	movs	r0, #5
 80048e6:	f7ff ff97 	bl	8004818 <write_icm20948>

}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <whoami_icm20948>:

// check sensor id
void whoami_icm20948()
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
	select_user_bank(userbank_0);
 80048f8:	2000      	movs	r0, #0
 80048fa:	f7ff ff45 	bl	8004788 <select_user_bank>
	read_icm20948(B0_WHO_AM_I, 1);
 80048fe:	2101      	movs	r1, #1
 8004900:	2000      	movs	r0, #0
 8004902:	f7ff ff5f 	bl	80047c4 <read_icm20948>
	while(rx_buffer[0] != DEVICE_ID_ICM20948)
 8004906:	e006      	b.n	8004916 <whoami_icm20948+0x22>
		{
			printf("it isn't icm20948\n");
 8004908:	4806      	ldr	r0, [pc, #24]	; (8004924 <whoami_icm20948+0x30>)
 800490a:	f000 fbd3 	bl	80050b4 <puts>
			HAL_Delay(1000);
 800490e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004912:	f7fc fdcf 	bl	80014b4 <HAL_Delay>
	while(rx_buffer[0] != DEVICE_ID_ICM20948)
 8004916:	4b04      	ldr	r3, [pc, #16]	; (8004928 <whoami_icm20948+0x34>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2bea      	cmp	r3, #234	; 0xea
 800491c:	d1f4      	bne.n	8004908 <whoami_icm20948+0x14>
		}
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	bd80      	pop	{r7, pc}
 8004924:	0800597c 	.word	0x0800597c
 8004928:	2000009c 	.word	0x2000009c

0800492c <whoami_ak09916>:

void whoami_ak09916()
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
	read_ak09916(MAG_WIA2, 1);
 8004930:	2101      	movs	r1, #1
 8004932:	2001      	movs	r0, #1
 8004934:	f7ff ff94 	bl	8004860 <read_ak09916>
	while(rx_buffer[0] != DEVICE_ID_AK09916)
 8004938:	e006      	b.n	8004948 <whoami_ak09916+0x1c>
		{
			printf("it isn't ak09916\n");
 800493a:	4807      	ldr	r0, [pc, #28]	; (8004958 <whoami_ak09916+0x2c>)
 800493c:	f000 fbba 	bl	80050b4 <puts>
			HAL_Delay(1000);
 8004940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004944:	f7fc fdb6 	bl	80014b4 <HAL_Delay>
	while(rx_buffer[0] != DEVICE_ID_AK09916)
 8004948:	4b04      	ldr	r3, [pc, #16]	; (800495c <whoami_ak09916+0x30>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b09      	cmp	r3, #9
 800494e:	d1f4      	bne.n	800493a <whoami_ak09916+0xe>
		}
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	08005990 	.word	0x08005990
 800495c:	2000009c 	.word	0x2000009c

08004960 <set_gyro_full_scale>:

// set full scale and ODR
void set_gyro_full_scale(gyro_fs_e gyro_fs)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
	select_user_bank(userbank_2);
 800496a:	2020      	movs	r0, #32
 800496c:	f7ff ff0c 	bl	8004788 <select_user_bank>
	write_icm20948(B2_GYRO_CONFIG_1, gyro_fs | GYRO_FCHOICE);
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	4619      	mov	r1, r3
 800497a:	2001      	movs	r0, #1
 800497c:	f7ff ff4c 	bl	8004818 <write_icm20948>

	switch(gyro_fs)
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	2b06      	cmp	r3, #6
 8004984:	d820      	bhi.n	80049c8 <set_gyro_full_scale+0x68>
 8004986:	a201      	add	r2, pc, #4	; (adr r2, 800498c <set_gyro_full_scale+0x2c>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049a9 	.word	0x080049a9
 8004990:	080049c9 	.word	0x080049c9
 8004994:	080049b1 	.word	0x080049b1
 8004998:	080049c9 	.word	0x080049c9
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049c9 	.word	0x080049c9
 80049a4:	080049c1 	.word	0x080049c1
	{
		case gy_fs_250dps :
			gyro_typ = 131;
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <set_gyro_full_scale+0x7c>)
 80049aa:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <set_gyro_full_scale+0x80>)
 80049ac:	601a      	str	r2, [r3, #0]
			break;
 80049ae:	e010      	b.n	80049d2 <set_gyro_full_scale+0x72>
		
		case gy_fs_500dps :
			gyro_typ = 65.5;
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <set_gyro_full_scale+0x7c>)
 80049b2:	4a0c      	ldr	r2, [pc, #48]	; (80049e4 <set_gyro_full_scale+0x84>)
 80049b4:	601a      	str	r2, [r3, #0]
			break;
 80049b6:	e00c      	b.n	80049d2 <set_gyro_full_scale+0x72>

		case gy_fs_1000dps :
			gyro_typ = 32.8;
 80049b8:	4b08      	ldr	r3, [pc, #32]	; (80049dc <set_gyro_full_scale+0x7c>)
 80049ba:	4a0b      	ldr	r2, [pc, #44]	; (80049e8 <set_gyro_full_scale+0x88>)
 80049bc:	601a      	str	r2, [r3, #0]
			break;
 80049be:	e008      	b.n	80049d2 <set_gyro_full_scale+0x72>
		
		case gy_fs_2000dps :
			gyro_typ = 16.4;
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <set_gyro_full_scale+0x7c>)
 80049c2:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <set_gyro_full_scale+0x8c>)
 80049c4:	601a      	str	r2, [r3, #0]
			break;
 80049c6:	e004      	b.n	80049d2 <set_gyro_full_scale+0x72>

		default : 
			gyro_typ = 0;
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <set_gyro_full_scale+0x7c>)
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
	}
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	2000048c 	.word	0x2000048c
 80049e0:	43030000 	.word	0x43030000
 80049e4:	42830000 	.word	0x42830000
 80049e8:	42033333 	.word	0x42033333
 80049ec:	41833333 	.word	0x41833333

080049f0 <set_accel_full_scale>:

void set_accel_full_scale(accel_fs_e accel_fs)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	71fb      	strb	r3, [r7, #7]
	select_user_bank(userbank_2);
 80049fa:	2020      	movs	r0, #32
 80049fc:	f7ff fec4 	bl	8004788 <select_user_bank>
	write_icm20948(B2_ACCEL_CONFIG, accel_fs | ACCEL_FCHOICE);
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	4619      	mov	r1, r3
 8004a0a:	2014      	movs	r0, #20
 8004a0c:	f7ff ff04 	bl	8004818 <write_icm20948>

	switch(accel_fs)
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	2b06      	cmp	r3, #6
 8004a16:	d825      	bhi.n	8004a64 <set_accel_full_scale+0x74>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <set_accel_full_scale+0x30>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a3d 	.word	0x08004a3d
 8004a24:	08004a65 	.word	0x08004a65
 8004a28:	08004a47 	.word	0x08004a47
 8004a2c:	08004a65 	.word	0x08004a65
 8004a30:	08004a51 	.word	0x08004a51
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a5b 	.word	0x08004a5b
	{
		case ac_fs_2g :
			accel_typ = 16384;
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <set_accel_full_scale+0x88>)
 8004a3e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8004a42:	601a      	str	r2, [r3, #0]
			break;
 8004a44:	e013      	b.n	8004a6e <set_accel_full_scale+0x7e>
		
		case ac_fs_4g :
			accel_typ = 8192;
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <set_accel_full_scale+0x88>)
 8004a48:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8004a4c:	601a      	str	r2, [r3, #0]
			break;
 8004a4e:	e00e      	b.n	8004a6e <set_accel_full_scale+0x7e>

		case ac_fs_8g :
			accel_typ = 4096;
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <set_accel_full_scale+0x88>)
 8004a52:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8004a56:	601a      	str	r2, [r3, #0]
			break;
 8004a58:	e009      	b.n	8004a6e <set_accel_full_scale+0x7e>
		
		case ac_fs_16g :
			accel_typ = 2048;
 8004a5a:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <set_accel_full_scale+0x88>)
 8004a5c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8004a60:	601a      	str	r2, [r3, #0]
			break;
 8004a62:	e004      	b.n	8004a6e <set_accel_full_scale+0x7e>

		default : 
			accel_typ = 0;
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <set_accel_full_scale+0x88>)
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
	}
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000490 	.word	0x20000490

08004a7c <set_gyro_odr>:

void set_gyro_odr(odr_e odr)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	71fb      	strb	r3, [r7, #7]
	select_user_bank(userbank_2);
 8004a86:	2020      	movs	r0, #32
 8004a88:	f7ff fe7e 	bl	8004788 <select_user_bank>

	uint8_t gy_div = odr;
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	73fb      	strb	r3, [r7, #15]
	write_icm20948(B2_GYRO_SMPLRT_DIV, gy_div);
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	4619      	mov	r1, r3
 8004a94:	2000      	movs	r0, #0
 8004a96:	f7ff febf 	bl	8004818 <write_icm20948>
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <set_accel_odr>:

void set_accel_odr(odr_e odr)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	71fb      	strb	r3, [r7, #7]
	select_user_bank(userbank_2);
 8004aac:	2020      	movs	r0, #32
 8004aae:	f7ff fe6b 	bl	8004788 <select_user_bank>

	uint8_t ac_div = odr;
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	73fb      	strb	r3, [r7, #15]
	write_icm20948(B2_ACCEL_SMPLRT_DIV_2, ac_div);
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	2011      	movs	r0, #17
 8004abc:	f7ff feac 	bl	8004818 <write_icm20948>
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <icm20948_init>:

// initialize
void icm20948_init(gyro_fs_e gy_fs, odr_e gy_odr, accel_fs_e ac_fs, odr_e ac_odr)
{
 8004ac8:	b590      	push	{r4, r7, lr}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	71fb      	strb	r3, [r7, #7]
 8004ada:	4603      	mov	r3, r0
 8004adc:	71bb      	strb	r3, [r7, #6]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	717b      	strb	r3, [r7, #5]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	713b      	strb	r3, [r7, #4]
	// ICM20948 Reset
	select_user_bank(userbank_0);
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	f7ff fe4e 	bl	8004788 <select_user_bank>
	write_icm20948(B0_PWR_MGMT_1, DEVICE_RESET | 0x41);	// 0x41 is reset value
 8004aec:	21c1      	movs	r1, #193	; 0xc1
 8004aee:	2006      	movs	r0, #6
 8004af0:	f7ff fe92 	bl	8004818 <write_icm20948>

	// SPI mode only
	select_user_bank(userbank_0);
 8004af4:	2000      	movs	r0, #0
 8004af6:	f7ff fe47 	bl	8004788 <select_user_bank>
	write_icm20948(B0_USER_CTRL, I2C_IF_DIS);
 8004afa:	2110      	movs	r1, #16
 8004afc:	2003      	movs	r0, #3
 8004afe:	f7ff fe8b 	bl	8004818 <write_icm20948>

	// Wake the chip and Recommended clock selection(CLKSEL = 1)
	select_user_bank(userbank_0);
 8004b02:	2000      	movs	r0, #0
 8004b04:	f7ff fe40 	bl	8004788 <select_user_bank>
	write_icm20948(B0_PWR_MGMT_1, WAKE | CLKSEL);
 8004b08:	2101      	movs	r1, #1
 8004b0a:	2006      	movs	r0, #6
 8004b0c:	f7ff fe84 	bl	8004818 <write_icm20948>

	// ODR start time alignment
	select_user_bank(userbank_2);
 8004b10:	2020      	movs	r0, #32
 8004b12:	f7ff fe39 	bl	8004788 <select_user_bank>
	write_icm20948(B2_ODR_ALIGN_EN, ODR_START_TIME_ALIGNMENT_ENABLE);
 8004b16:	2101      	movs	r1, #1
 8004b18:	2009      	movs	r0, #9
 8004b1a:	f7ff fe7d 	bl	8004818 <write_icm20948>

	// set full scale range
	set_gyro_full_scale(gy_fs);
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff1d 	bl	8004960 <set_gyro_full_scale>
	set_accel_full_scale(ac_fs);
 8004b26:	797b      	ldrb	r3, [r7, #5]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff61 	bl	80049f0 <set_accel_full_scale>

	// set odr
	set_gyro_odr(gy_odr);
 8004b2e:	79bb      	ldrb	r3, [r7, #6]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff ffa3 	bl	8004a7c <set_gyro_odr>
	set_accel_odr(ac_odr);
 8004b36:	793b      	ldrb	r3, [r7, #4]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ffb2 	bl	8004aa2 <set_accel_odr>


	printf("icm20948 initialized\n");
 8004b3e:	4803      	ldr	r0, [pc, #12]	; (8004b4c <icm20948_init+0x84>)
 8004b40:	f000 fab8 	bl	80050b4 <puts>
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd90      	pop	{r4, r7, pc}
 8004b4c:	080059a4 	.word	0x080059a4

08004b50 <ak09916_init>:

// i2c : master(icm-20948) / slave(ak09916)
void ak09916_init(mag_opmode_e op_mode)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
	// I2C Master Reset
	select_user_bank(userbank_0);
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	f7ff fe14 	bl	8004788 <select_user_bank>
	write_icm20948(B0_USER_CTRL, I2C_MST_RST);
 8004b60:	2102      	movs	r1, #2
 8004b62:	2003      	movs	r0, #3
 8004b64:	f7ff fe58 	bl	8004818 <write_icm20948>

	// I2C Master Enable
	select_user_bank(userbank_0);
 8004b68:	2000      	movs	r0, #0
 8004b6a:	f7ff fe0d 	bl	8004788 <select_user_bank>
	write_icm20948(B0_USER_CTRL, I2C_MST_EN);
 8004b6e:	2120      	movs	r1, #32
 8004b70:	2003      	movs	r0, #3
 8004b72:	f7ff fe51 	bl	8004818 <write_icm20948>

	// I2C Master Clock Frequency
	select_user_bank(userbank_3);
 8004b76:	2030      	movs	r0, #48	; 0x30
 8004b78:	f7ff fe06 	bl	8004788 <select_user_bank>
	write_icm20948(B3_I2C_MST_CTRL, I2C_MST_CLK); // 345.6 kHz
 8004b7c:	2107      	movs	r1, #7
 8004b7e:	2001      	movs	r0, #1
 8004b80:	f7ff fe4a 	bl	8004818 <write_icm20948>

	// I2C Slave Reset
	write_ak09916(MAG_CNTL3, 0x01);
 8004b84:	2101      	movs	r1, #1
 8004b86:	2032      	movs	r0, #50	; 0x32
 8004b88:	f7ff fe92 	bl	80048b0 <write_ak09916>
	
	// I2C Slave Operation Mode
	write_ak09916(MAG_CNTL2, op_mode);
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	2031      	movs	r0, #49	; 0x31
 8004b92:	f7ff fe8d 	bl	80048b0 <write_ak09916>


	printf("ak09916 initialized\n");
 8004b96:	4803      	ldr	r0, [pc, #12]	; (8004ba4 <ak09916_init+0x54>)
 8004b98:	f000 fa8c 	bl	80050b4 <puts>
}
 8004b9c:	bf00      	nop
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	080059bc 	.word	0x080059bc

08004ba8 <read_gyro>:

// read gyro
void read_gyro(gyro_data_t* gyro_data, unit_e unit)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
	int16_t gyro_data_temp[3];

	select_user_bank(userbank_0);
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	f7ff fde7 	bl	8004788 <select_user_bank>
	read_icm20948(B0_GYRO_XOUT_H, 6);
 8004bba:	2106      	movs	r1, #6
 8004bbc:	2033      	movs	r0, #51	; 0x33
 8004bbe:	f7ff fe01 	bl	80047c4 <read_icm20948>

	gyro_data_temp[0] = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]);
 8004bc2:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <read_gyro+0x114>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	b21a      	sxth	r2, r3
 8004bca:	4b3c      	ldr	r3, [pc, #240]	; (8004cbc <read_gyro+0x114>)
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	b21b      	sxth	r3, r3
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	b21b      	sxth	r3, r3
 8004bd4:	813b      	strh	r3, [r7, #8]
	gyro_data_temp[1] = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]);
 8004bd6:	4b39      	ldr	r3, [pc, #228]	; (8004cbc <read_gyro+0x114>)
 8004bd8:	789b      	ldrb	r3, [r3, #2]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	b21a      	sxth	r2, r3
 8004bde:	4b37      	ldr	r3, [pc, #220]	; (8004cbc <read_gyro+0x114>)
 8004be0:	78db      	ldrb	r3, [r3, #3]
 8004be2:	b21b      	sxth	r3, r3
 8004be4:	4313      	orrs	r3, r2
 8004be6:	b21b      	sxth	r3, r3
 8004be8:	817b      	strh	r3, [r7, #10]
	gyro_data_temp[2] = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]);
 8004bea:	4b34      	ldr	r3, [pc, #208]	; (8004cbc <read_gyro+0x114>)
 8004bec:	791b      	ldrb	r3, [r3, #4]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	b21a      	sxth	r2, r3
 8004bf2:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <read_gyro+0x114>)
 8004bf4:	795b      	ldrb	r3, [r3, #5]
 8004bf6:	b21b      	sxth	r3, r3
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	b21b      	sxth	r3, r3
 8004bfc:	81bb      	strh	r3, [r7, #12]

	switch(unit)
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <read_gyro+0x62>
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d01c      	beq.n	8004c42 <read_gyro+0x9a>
 8004c08:	e046      	b.n	8004c98 <read_gyro+0xf0>
	{
		case unit_lsb :
			gyro_data->x = gyro_data_temp[0];
 8004c0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	edc3 7a00 	vstr	s15, [r3]
			gyro_data->y = gyro_data_temp[1];
 8004c1c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004c20:	ee07 3a90 	vmov	s15, r3
 8004c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	edc3 7a01 	vstr	s15, [r3, #4]
			gyro_data->z = gyro_data_temp[2];
 8004c2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 8004c40:	e037      	b.n	8004cb2 <read_gyro+0x10a>
		
		case unit_dps : 
			gyro_data->x = (float)(gyro_data_temp[0] / gyro_typ);
 8004c42:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <read_gyro+0x118>)
 8004c50:	ed93 7a00 	vldr	s14, [r3]
 8004c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	edc3 7a00 	vstr	s15, [r3]
			gyro_data->y = (float)(gyro_data_temp[1] / gyro_typ);
 8004c5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c6a:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <read_gyro+0x118>)
 8004c6c:	ed93 7a00 	vldr	s14, [r3]
 8004c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	edc3 7a01 	vstr	s15, [r3, #4]
			gyro_data->z = (float)(gyro_data_temp[2] / gyro_typ);
 8004c7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c86:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <read_gyro+0x118>)
 8004c88:	ed93 7a00 	vldr	s14, [r3]
 8004c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 8004c96:	e00c      	b.n	8004cb2 <read_gyro+0x10a>

		default : 
			gyro_data->x = 0;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
			gyro_data->y = 0;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	605a      	str	r2, [r3, #4]
			gyro_data->z = 0;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	609a      	str	r2, [r3, #8]
	}
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	2000009c 	.word	0x2000009c
 8004cc0:	2000048c 	.word	0x2000048c

08004cc4 <read_accel>:


void read_accel(accel_data_t* accel_data, unit_e unit)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
	int16_t accel_data_temp[3];

	select_user_bank(userbank_0);
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f7ff fd59 	bl	8004788 <select_user_bank>
	read_icm20948(B0_ACCEL_XOUT_H, 6);
 8004cd6:	2106      	movs	r1, #6
 8004cd8:	202d      	movs	r0, #45	; 0x2d
 8004cda:	f7ff fd73 	bl	80047c4 <read_icm20948>
	
	accel_data_temp[0] = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]);
 8004cde:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <read_accel+0x114>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	b21a      	sxth	r2, r3
 8004ce6:	4b3c      	ldr	r3, [pc, #240]	; (8004dd8 <read_accel+0x114>)
 8004ce8:	785b      	ldrb	r3, [r3, #1]
 8004cea:	b21b      	sxth	r3, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	813b      	strh	r3, [r7, #8]
	accel_data_temp[1] = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]);
 8004cf2:	4b39      	ldr	r3, [pc, #228]	; (8004dd8 <read_accel+0x114>)
 8004cf4:	789b      	ldrb	r3, [r3, #2]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	b21a      	sxth	r2, r3
 8004cfa:	4b37      	ldr	r3, [pc, #220]	; (8004dd8 <read_accel+0x114>)
 8004cfc:	78db      	ldrb	r3, [r3, #3]
 8004cfe:	b21b      	sxth	r3, r3
 8004d00:	4313      	orrs	r3, r2
 8004d02:	b21b      	sxth	r3, r3
 8004d04:	817b      	strh	r3, [r7, #10]
	accel_data_temp[2] = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]);
 8004d06:	4b34      	ldr	r3, [pc, #208]	; (8004dd8 <read_accel+0x114>)
 8004d08:	791b      	ldrb	r3, [r3, #4]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	b21a      	sxth	r2, r3
 8004d0e:	4b32      	ldr	r3, [pc, #200]	; (8004dd8 <read_accel+0x114>)
 8004d10:	795b      	ldrb	r3, [r3, #5]
 8004d12:	b21b      	sxth	r3, r3
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b21b      	sxth	r3, r3
 8004d18:	81bb      	strh	r3, [r7, #12]

	switch(unit)
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <read_accel+0x62>
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d01c      	beq.n	8004d5e <read_accel+0x9a>
 8004d24:	e046      	b.n	8004db4 <read_accel+0xf0>
	{
		case unit_lsb :
			accel_data->x = accel_data_temp[0];
 8004d26:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	edc3 7a00 	vstr	s15, [r3]
			accel_data->y = accel_data_temp[1];
 8004d38:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004d3c:	ee07 3a90 	vmov	s15, r3
 8004d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	edc3 7a01 	vstr	s15, [r3, #4]
			accel_data->z = accel_data_temp[2];
 8004d4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 8004d5c:	e037      	b.n	8004dce <read_accel+0x10a>
		
		case unit_g : 
			accel_data->x = (float)(accel_data_temp[0] / accel_typ);
 8004d5e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d6a:	4b1c      	ldr	r3, [pc, #112]	; (8004ddc <read_accel+0x118>)
 8004d6c:	ed93 7a00 	vldr	s14, [r3]
 8004d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	edc3 7a00 	vstr	s15, [r3]
			accel_data->y = (float)(accel_data_temp[1] / accel_typ);
 8004d7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <read_accel+0x118>)
 8004d88:	ed93 7a00 	vldr	s14, [r3]
 8004d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	edc3 7a01 	vstr	s15, [r3, #4]
			accel_data->z = (float)(accel_data_temp[2] / accel_typ);
 8004d96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004da2:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <read_accel+0x118>)
 8004da4:	ed93 7a00 	vldr	s14, [r3]
 8004da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 8004db2:	e00c      	b.n	8004dce <read_accel+0x10a>

		default :
			accel_data->x = 0;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
			accel_data->y = 0;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	605a      	str	r2, [r3, #4]
			accel_data->z = 0;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	609a      	str	r2, [r3, #8]
	}
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	2000009c 	.word	0x2000009c
 8004ddc:	20000490 	.word	0x20000490

08004de0 <read_mag>:


// read mag
void read_mag(mag_data_t* mag_data, unit_e unit)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
	int16_t mag_data_temp[3] = {0};
 8004dec:	f107 0308 	add.w	r3, r7, #8
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	809a      	strh	r2, [r3, #4]

	// Read status1(ST1) register
	read_ak09916(MAG_ST1,1);
 8004df6:	2101      	movs	r1, #1
 8004df8:	2010      	movs	r0, #16
 8004dfa:	f7ff fd31 	bl	8004860 <read_ak09916>

	// check data is ready
	if((rx_buffer[0] & 0x01) == 1)
 8004dfe:	4b49      	ldr	r3, [pc, #292]	; (8004f24 <read_mag+0x144>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 8086 	beq.w	8004f18 <read_mag+0x138>
	{ 
		// Read Measurement data register(HXL to HZH)
		read_ak09916(MAG_HXL, 6);
 8004e0c:	2106      	movs	r1, #6
 8004e0e:	2011      	movs	r0, #17
 8004e10:	f7ff fd26 	bl	8004860 <read_ak09916>
		mag_data_temp[0] = (int16_t)(rx_buffer[1] << 8 | rx_buffer[0]);
 8004e14:	4b43      	ldr	r3, [pc, #268]	; (8004f24 <read_mag+0x144>)
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	b21a      	sxth	r2, r3
 8004e1c:	4b41      	ldr	r3, [pc, #260]	; (8004f24 <read_mag+0x144>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b21b      	sxth	r3, r3
 8004e22:	4313      	orrs	r3, r2
 8004e24:	b21b      	sxth	r3, r3
 8004e26:	813b      	strh	r3, [r7, #8]
		mag_data_temp[1] = (int16_t)(rx_buffer[3] << 8 | rx_buffer[2]);
 8004e28:	4b3e      	ldr	r3, [pc, #248]	; (8004f24 <read_mag+0x144>)
 8004e2a:	78db      	ldrb	r3, [r3, #3]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	b21a      	sxth	r2, r3
 8004e30:	4b3c      	ldr	r3, [pc, #240]	; (8004f24 <read_mag+0x144>)
 8004e32:	789b      	ldrb	r3, [r3, #2]
 8004e34:	b21b      	sxth	r3, r3
 8004e36:	4313      	orrs	r3, r2
 8004e38:	b21b      	sxth	r3, r3
 8004e3a:	817b      	strh	r3, [r7, #10]
		mag_data_temp[2] = (int16_t)(rx_buffer[5] << 8 | rx_buffer[4]);
 8004e3c:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <read_mag+0x144>)
 8004e3e:	795b      	ldrb	r3, [r3, #5]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	b21a      	sxth	r2, r3
 8004e44:	4b37      	ldr	r3, [pc, #220]	; (8004f24 <read_mag+0x144>)
 8004e46:	791b      	ldrb	r3, [r3, #4]
 8004e48:	b21b      	sxth	r3, r3
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	b21b      	sxth	r3, r3
 8004e4e:	81bb      	strh	r3, [r7, #12]

		// Read status2(ST2) register
		read_ak09916(MAG_ST2, 1);
 8004e50:	2101      	movs	r1, #1
 8004e52:	2018      	movs	r0, #24
 8004e54:	f7ff fd04 	bl	8004860 <read_ak09916>
		if((rx_buffer[0] & 0x08) == 0x00) // not overflow
 8004e58:	4b32      	ldr	r3, [pc, #200]	; (8004f24 <read_mag+0x144>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d159      	bne.n	8004f18 <read_mag+0x138>
		{
			switch(unit)
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <read_mag+0x90>
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d01c      	beq.n	8004ea8 <read_mag+0xc8>
 8004e6e:	e046      	b.n	8004efe <read_mag+0x11e>
			{
				case unit_lsb :
					mag_data->x = mag_data_temp[0];
 8004e70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004e74:	ee07 3a90 	vmov	s15, r3
 8004e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	edc3 7a00 	vstr	s15, [r3]
					mag_data->y = mag_data_temp[1];
 8004e82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	edc3 7a01 	vstr	s15, [r3, #4]
					mag_data->z = mag_data_temp[2];
 8004e94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e98:	ee07 3a90 	vmov	s15, r3
 8004e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	edc3 7a02 	vstr	s15, [r3, #8]
					break;
 8004ea6:	e038      	b.n	8004f1a <read_mag+0x13a>
				
				case unit_uT : 
					mag_data->x = (float)(mag_data_temp[0] / mag_typ);
 8004ea8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004eac:	ee07 3a90 	vmov	s15, r3
 8004eb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <read_mag+0x148>)
 8004eb6:	ed93 7a00 	vldr	s14, [r3]
 8004eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	edc3 7a00 	vstr	s15, [r3]
					mag_data->y = (float)(mag_data_temp[1] / mag_typ);
 8004ec4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ec8:	ee07 3a90 	vmov	s15, r3
 8004ecc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ed0:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <read_mag+0x148>)
 8004ed2:	ed93 7a00 	vldr	s14, [r3]
 8004ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	edc3 7a01 	vstr	s15, [r3, #4]
					mag_data->z = (float)(mag_data_temp[2] / mag_typ);
 8004ee0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004eec:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <read_mag+0x148>)
 8004eee:	ed93 7a00 	vldr	s14, [r3]
 8004ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	edc3 7a02 	vstr	s15, [r3, #8]
					break;
 8004efc:	e00d      	b.n	8004f1a <read_mag+0x13a>

				default : 
					mag_data->x = 0;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
					mag_data->y = 0;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	605a      	str	r2, [r3, #4]
					mag_data->z = 0;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	609a      	str	r2, [r3, #8]

		}

	}

}
 8004f16:	e000      	b.n	8004f1a <read_mag+0x13a>
		}
 8004f18:	bf00      	nop
}
 8004f1a:	bf00      	nop
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	2000009c 	.word	0x2000009c
 8004f28:	2000000c 	.word	0x2000000c

08004f2c <led1_on>:
#include "led.h"


// LED1
void led1_on()
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8004f30:	2200      	movs	r2, #0
 8004f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f36:	4802      	ldr	r0, [pc, #8]	; (8004f40 <led1_on+0x14>)
 8004f38:	f7fd fce8 	bl	800290c <HAL_GPIO_WritePin>
}
 8004f3c:	bf00      	nop
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40020800 	.word	0x40020800

08004f44 <led2_on>:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
}

// LED2
void led2_on()
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8004f48:	2201      	movs	r2, #1
 8004f4a:	2102      	movs	r1, #2
 8004f4c:	4802      	ldr	r0, [pc, #8]	; (8004f58 <led2_on+0x14>)
 8004f4e:	f7fd fcdd 	bl	800290c <HAL_GPIO_WritePin>
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40020400 	.word	0x40020400

08004f5c <led3_on>:
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
}

// LED3
void led3_on()
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8004f60:	2201      	movs	r2, #1
 8004f62:	2104      	movs	r1, #4
 8004f64:	4802      	ldr	r0, [pc, #8]	; (8004f70 <led3_on+0x14>)
 8004f66:	f7fd fcd1 	bl	800290c <HAL_GPIO_WritePin>
}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40020400 	.word	0x40020400

08004f74 <__errno>:
 8004f74:	4b01      	ldr	r3, [pc, #4]	; (8004f7c <__errno+0x8>)
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000010 	.word	0x20000010

08004f80 <__libc_init_array>:
 8004f80:	b570      	push	{r4, r5, r6, lr}
 8004f82:	4d0d      	ldr	r5, [pc, #52]	; (8004fb8 <__libc_init_array+0x38>)
 8004f84:	4c0d      	ldr	r4, [pc, #52]	; (8004fbc <__libc_init_array+0x3c>)
 8004f86:	1b64      	subs	r4, r4, r5
 8004f88:	10a4      	asrs	r4, r4, #2
 8004f8a:	2600      	movs	r6, #0
 8004f8c:	42a6      	cmp	r6, r4
 8004f8e:	d109      	bne.n	8004fa4 <__libc_init_array+0x24>
 8004f90:	4d0b      	ldr	r5, [pc, #44]	; (8004fc0 <__libc_init_array+0x40>)
 8004f92:	4c0c      	ldr	r4, [pc, #48]	; (8004fc4 <__libc_init_array+0x44>)
 8004f94:	f000 fce6 	bl	8005964 <_init>
 8004f98:	1b64      	subs	r4, r4, r5
 8004f9a:	10a4      	asrs	r4, r4, #2
 8004f9c:	2600      	movs	r6, #0
 8004f9e:	42a6      	cmp	r6, r4
 8004fa0:	d105      	bne.n	8004fae <__libc_init_array+0x2e>
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa8:	4798      	blx	r3
 8004faa:	3601      	adds	r6, #1
 8004fac:	e7ee      	b.n	8004f8c <__libc_init_array+0xc>
 8004fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb2:	4798      	blx	r3
 8004fb4:	3601      	adds	r6, #1
 8004fb6:	e7f2      	b.n	8004f9e <__libc_init_array+0x1e>
 8004fb8:	08005a54 	.word	0x08005a54
 8004fbc:	08005a54 	.word	0x08005a54
 8004fc0:	08005a54 	.word	0x08005a54
 8004fc4:	08005a58 	.word	0x08005a58

08004fc8 <memset>:
 8004fc8:	4402      	add	r2, r0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d100      	bne.n	8004fd2 <memset+0xa>
 8004fd0:	4770      	bx	lr
 8004fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fd6:	e7f9      	b.n	8004fcc <memset+0x4>

08004fd8 <_puts_r>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	460e      	mov	r6, r1
 8004fdc:	4605      	mov	r5, r0
 8004fde:	b118      	cbz	r0, 8004fe8 <_puts_r+0x10>
 8004fe0:	6983      	ldr	r3, [r0, #24]
 8004fe2:	b90b      	cbnz	r3, 8004fe8 <_puts_r+0x10>
 8004fe4:	f000 fa48 	bl	8005478 <__sinit>
 8004fe8:	69ab      	ldr	r3, [r5, #24]
 8004fea:	68ac      	ldr	r4, [r5, #8]
 8004fec:	b913      	cbnz	r3, 8004ff4 <_puts_r+0x1c>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f000 fa42 	bl	8005478 <__sinit>
 8004ff4:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <_puts_r+0xd0>)
 8004ff6:	429c      	cmp	r4, r3
 8004ff8:	d120      	bne.n	800503c <_puts_r+0x64>
 8004ffa:	686c      	ldr	r4, [r5, #4]
 8004ffc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ffe:	07db      	lsls	r3, r3, #31
 8005000:	d405      	bmi.n	800500e <_puts_r+0x36>
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	0598      	lsls	r0, r3, #22
 8005006:	d402      	bmi.n	800500e <_puts_r+0x36>
 8005008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800500a:	f000 fad3 	bl	80055b4 <__retarget_lock_acquire_recursive>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	0719      	lsls	r1, r3, #28
 8005012:	d51d      	bpl.n	8005050 <_puts_r+0x78>
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	b1db      	cbz	r3, 8005050 <_puts_r+0x78>
 8005018:	3e01      	subs	r6, #1
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005020:	3b01      	subs	r3, #1
 8005022:	60a3      	str	r3, [r4, #8]
 8005024:	bb39      	cbnz	r1, 8005076 <_puts_r+0x9e>
 8005026:	2b00      	cmp	r3, #0
 8005028:	da38      	bge.n	800509c <_puts_r+0xc4>
 800502a:	4622      	mov	r2, r4
 800502c:	210a      	movs	r1, #10
 800502e:	4628      	mov	r0, r5
 8005030:	f000 f848 	bl	80050c4 <__swbuf_r>
 8005034:	3001      	adds	r0, #1
 8005036:	d011      	beq.n	800505c <_puts_r+0x84>
 8005038:	250a      	movs	r5, #10
 800503a:	e011      	b.n	8005060 <_puts_r+0x88>
 800503c:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <_puts_r+0xd4>)
 800503e:	429c      	cmp	r4, r3
 8005040:	d101      	bne.n	8005046 <_puts_r+0x6e>
 8005042:	68ac      	ldr	r4, [r5, #8]
 8005044:	e7da      	b.n	8004ffc <_puts_r+0x24>
 8005046:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <_puts_r+0xd8>)
 8005048:	429c      	cmp	r4, r3
 800504a:	bf08      	it	eq
 800504c:	68ec      	ldreq	r4, [r5, #12]
 800504e:	e7d5      	b.n	8004ffc <_puts_r+0x24>
 8005050:	4621      	mov	r1, r4
 8005052:	4628      	mov	r0, r5
 8005054:	f000 f888 	bl	8005168 <__swsetup_r>
 8005058:	2800      	cmp	r0, #0
 800505a:	d0dd      	beq.n	8005018 <_puts_r+0x40>
 800505c:	f04f 35ff 	mov.w	r5, #4294967295
 8005060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005062:	07da      	lsls	r2, r3, #31
 8005064:	d405      	bmi.n	8005072 <_puts_r+0x9a>
 8005066:	89a3      	ldrh	r3, [r4, #12]
 8005068:	059b      	lsls	r3, r3, #22
 800506a:	d402      	bmi.n	8005072 <_puts_r+0x9a>
 800506c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800506e:	f000 faa2 	bl	80055b6 <__retarget_lock_release_recursive>
 8005072:	4628      	mov	r0, r5
 8005074:	bd70      	pop	{r4, r5, r6, pc}
 8005076:	2b00      	cmp	r3, #0
 8005078:	da04      	bge.n	8005084 <_puts_r+0xac>
 800507a:	69a2      	ldr	r2, [r4, #24]
 800507c:	429a      	cmp	r2, r3
 800507e:	dc06      	bgt.n	800508e <_puts_r+0xb6>
 8005080:	290a      	cmp	r1, #10
 8005082:	d004      	beq.n	800508e <_puts_r+0xb6>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	6022      	str	r2, [r4, #0]
 800508a:	7019      	strb	r1, [r3, #0]
 800508c:	e7c5      	b.n	800501a <_puts_r+0x42>
 800508e:	4622      	mov	r2, r4
 8005090:	4628      	mov	r0, r5
 8005092:	f000 f817 	bl	80050c4 <__swbuf_r>
 8005096:	3001      	adds	r0, #1
 8005098:	d1bf      	bne.n	800501a <_puts_r+0x42>
 800509a:	e7df      	b.n	800505c <_puts_r+0x84>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	250a      	movs	r5, #10
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	6022      	str	r2, [r4, #0]
 80050a4:	701d      	strb	r5, [r3, #0]
 80050a6:	e7db      	b.n	8005060 <_puts_r+0x88>
 80050a8:	08005a0c 	.word	0x08005a0c
 80050ac:	08005a2c 	.word	0x08005a2c
 80050b0:	080059ec 	.word	0x080059ec

080050b4 <puts>:
 80050b4:	4b02      	ldr	r3, [pc, #8]	; (80050c0 <puts+0xc>)
 80050b6:	4601      	mov	r1, r0
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	f7ff bf8d 	b.w	8004fd8 <_puts_r>
 80050be:	bf00      	nop
 80050c0:	20000010 	.word	0x20000010

080050c4 <__swbuf_r>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	460e      	mov	r6, r1
 80050c8:	4614      	mov	r4, r2
 80050ca:	4605      	mov	r5, r0
 80050cc:	b118      	cbz	r0, 80050d6 <__swbuf_r+0x12>
 80050ce:	6983      	ldr	r3, [r0, #24]
 80050d0:	b90b      	cbnz	r3, 80050d6 <__swbuf_r+0x12>
 80050d2:	f000 f9d1 	bl	8005478 <__sinit>
 80050d6:	4b21      	ldr	r3, [pc, #132]	; (800515c <__swbuf_r+0x98>)
 80050d8:	429c      	cmp	r4, r3
 80050da:	d12b      	bne.n	8005134 <__swbuf_r+0x70>
 80050dc:	686c      	ldr	r4, [r5, #4]
 80050de:	69a3      	ldr	r3, [r4, #24]
 80050e0:	60a3      	str	r3, [r4, #8]
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	071a      	lsls	r2, r3, #28
 80050e6:	d52f      	bpl.n	8005148 <__swbuf_r+0x84>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	b36b      	cbz	r3, 8005148 <__swbuf_r+0x84>
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	6820      	ldr	r0, [r4, #0]
 80050f0:	1ac0      	subs	r0, r0, r3
 80050f2:	6963      	ldr	r3, [r4, #20]
 80050f4:	b2f6      	uxtb	r6, r6
 80050f6:	4283      	cmp	r3, r0
 80050f8:	4637      	mov	r7, r6
 80050fa:	dc04      	bgt.n	8005106 <__swbuf_r+0x42>
 80050fc:	4621      	mov	r1, r4
 80050fe:	4628      	mov	r0, r5
 8005100:	f000 f926 	bl	8005350 <_fflush_r>
 8005104:	bb30      	cbnz	r0, 8005154 <__swbuf_r+0x90>
 8005106:	68a3      	ldr	r3, [r4, #8]
 8005108:	3b01      	subs	r3, #1
 800510a:	60a3      	str	r3, [r4, #8]
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	6022      	str	r2, [r4, #0]
 8005112:	701e      	strb	r6, [r3, #0]
 8005114:	6963      	ldr	r3, [r4, #20]
 8005116:	3001      	adds	r0, #1
 8005118:	4283      	cmp	r3, r0
 800511a:	d004      	beq.n	8005126 <__swbuf_r+0x62>
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	07db      	lsls	r3, r3, #31
 8005120:	d506      	bpl.n	8005130 <__swbuf_r+0x6c>
 8005122:	2e0a      	cmp	r6, #10
 8005124:	d104      	bne.n	8005130 <__swbuf_r+0x6c>
 8005126:	4621      	mov	r1, r4
 8005128:	4628      	mov	r0, r5
 800512a:	f000 f911 	bl	8005350 <_fflush_r>
 800512e:	b988      	cbnz	r0, 8005154 <__swbuf_r+0x90>
 8005130:	4638      	mov	r0, r7
 8005132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <__swbuf_r+0x9c>)
 8005136:	429c      	cmp	r4, r3
 8005138:	d101      	bne.n	800513e <__swbuf_r+0x7a>
 800513a:	68ac      	ldr	r4, [r5, #8]
 800513c:	e7cf      	b.n	80050de <__swbuf_r+0x1a>
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <__swbuf_r+0xa0>)
 8005140:	429c      	cmp	r4, r3
 8005142:	bf08      	it	eq
 8005144:	68ec      	ldreq	r4, [r5, #12]
 8005146:	e7ca      	b.n	80050de <__swbuf_r+0x1a>
 8005148:	4621      	mov	r1, r4
 800514a:	4628      	mov	r0, r5
 800514c:	f000 f80c 	bl	8005168 <__swsetup_r>
 8005150:	2800      	cmp	r0, #0
 8005152:	d0cb      	beq.n	80050ec <__swbuf_r+0x28>
 8005154:	f04f 37ff 	mov.w	r7, #4294967295
 8005158:	e7ea      	b.n	8005130 <__swbuf_r+0x6c>
 800515a:	bf00      	nop
 800515c:	08005a0c 	.word	0x08005a0c
 8005160:	08005a2c 	.word	0x08005a2c
 8005164:	080059ec 	.word	0x080059ec

08005168 <__swsetup_r>:
 8005168:	4b32      	ldr	r3, [pc, #200]	; (8005234 <__swsetup_r+0xcc>)
 800516a:	b570      	push	{r4, r5, r6, lr}
 800516c:	681d      	ldr	r5, [r3, #0]
 800516e:	4606      	mov	r6, r0
 8005170:	460c      	mov	r4, r1
 8005172:	b125      	cbz	r5, 800517e <__swsetup_r+0x16>
 8005174:	69ab      	ldr	r3, [r5, #24]
 8005176:	b913      	cbnz	r3, 800517e <__swsetup_r+0x16>
 8005178:	4628      	mov	r0, r5
 800517a:	f000 f97d 	bl	8005478 <__sinit>
 800517e:	4b2e      	ldr	r3, [pc, #184]	; (8005238 <__swsetup_r+0xd0>)
 8005180:	429c      	cmp	r4, r3
 8005182:	d10f      	bne.n	80051a4 <__swsetup_r+0x3c>
 8005184:	686c      	ldr	r4, [r5, #4]
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800518c:	0719      	lsls	r1, r3, #28
 800518e:	d42c      	bmi.n	80051ea <__swsetup_r+0x82>
 8005190:	06dd      	lsls	r5, r3, #27
 8005192:	d411      	bmi.n	80051b8 <__swsetup_r+0x50>
 8005194:	2309      	movs	r3, #9
 8005196:	6033      	str	r3, [r6, #0]
 8005198:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800519c:	81a3      	strh	r3, [r4, #12]
 800519e:	f04f 30ff 	mov.w	r0, #4294967295
 80051a2:	e03e      	b.n	8005222 <__swsetup_r+0xba>
 80051a4:	4b25      	ldr	r3, [pc, #148]	; (800523c <__swsetup_r+0xd4>)
 80051a6:	429c      	cmp	r4, r3
 80051a8:	d101      	bne.n	80051ae <__swsetup_r+0x46>
 80051aa:	68ac      	ldr	r4, [r5, #8]
 80051ac:	e7eb      	b.n	8005186 <__swsetup_r+0x1e>
 80051ae:	4b24      	ldr	r3, [pc, #144]	; (8005240 <__swsetup_r+0xd8>)
 80051b0:	429c      	cmp	r4, r3
 80051b2:	bf08      	it	eq
 80051b4:	68ec      	ldreq	r4, [r5, #12]
 80051b6:	e7e6      	b.n	8005186 <__swsetup_r+0x1e>
 80051b8:	0758      	lsls	r0, r3, #29
 80051ba:	d512      	bpl.n	80051e2 <__swsetup_r+0x7a>
 80051bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051be:	b141      	cbz	r1, 80051d2 <__swsetup_r+0x6a>
 80051c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051c4:	4299      	cmp	r1, r3
 80051c6:	d002      	beq.n	80051ce <__swsetup_r+0x66>
 80051c8:	4630      	mov	r0, r6
 80051ca:	f000 fa59 	bl	8005680 <_free_r>
 80051ce:	2300      	movs	r3, #0
 80051d0:	6363      	str	r3, [r4, #52]	; 0x34
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051d8:	81a3      	strh	r3, [r4, #12]
 80051da:	2300      	movs	r3, #0
 80051dc:	6063      	str	r3, [r4, #4]
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	f043 0308 	orr.w	r3, r3, #8
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	6923      	ldr	r3, [r4, #16]
 80051ec:	b94b      	cbnz	r3, 8005202 <__swsetup_r+0x9a>
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051f8:	d003      	beq.n	8005202 <__swsetup_r+0x9a>
 80051fa:	4621      	mov	r1, r4
 80051fc:	4630      	mov	r0, r6
 80051fe:	f000 f9ff 	bl	8005600 <__smakebuf_r>
 8005202:	89a0      	ldrh	r0, [r4, #12]
 8005204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005208:	f010 0301 	ands.w	r3, r0, #1
 800520c:	d00a      	beq.n	8005224 <__swsetup_r+0xbc>
 800520e:	2300      	movs	r3, #0
 8005210:	60a3      	str	r3, [r4, #8]
 8005212:	6963      	ldr	r3, [r4, #20]
 8005214:	425b      	negs	r3, r3
 8005216:	61a3      	str	r3, [r4, #24]
 8005218:	6923      	ldr	r3, [r4, #16]
 800521a:	b943      	cbnz	r3, 800522e <__swsetup_r+0xc6>
 800521c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005220:	d1ba      	bne.n	8005198 <__swsetup_r+0x30>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	0781      	lsls	r1, r0, #30
 8005226:	bf58      	it	pl
 8005228:	6963      	ldrpl	r3, [r4, #20]
 800522a:	60a3      	str	r3, [r4, #8]
 800522c:	e7f4      	b.n	8005218 <__swsetup_r+0xb0>
 800522e:	2000      	movs	r0, #0
 8005230:	e7f7      	b.n	8005222 <__swsetup_r+0xba>
 8005232:	bf00      	nop
 8005234:	20000010 	.word	0x20000010
 8005238:	08005a0c 	.word	0x08005a0c
 800523c:	08005a2c 	.word	0x08005a2c
 8005240:	080059ec 	.word	0x080059ec

08005244 <__sflush_r>:
 8005244:	898a      	ldrh	r2, [r1, #12]
 8005246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524a:	4605      	mov	r5, r0
 800524c:	0710      	lsls	r0, r2, #28
 800524e:	460c      	mov	r4, r1
 8005250:	d458      	bmi.n	8005304 <__sflush_r+0xc0>
 8005252:	684b      	ldr	r3, [r1, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	dc05      	bgt.n	8005264 <__sflush_r+0x20>
 8005258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	dc02      	bgt.n	8005264 <__sflush_r+0x20>
 800525e:	2000      	movs	r0, #0
 8005260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005266:	2e00      	cmp	r6, #0
 8005268:	d0f9      	beq.n	800525e <__sflush_r+0x1a>
 800526a:	2300      	movs	r3, #0
 800526c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005270:	682f      	ldr	r7, [r5, #0]
 8005272:	602b      	str	r3, [r5, #0]
 8005274:	d032      	beq.n	80052dc <__sflush_r+0x98>
 8005276:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	075a      	lsls	r2, r3, #29
 800527c:	d505      	bpl.n	800528a <__sflush_r+0x46>
 800527e:	6863      	ldr	r3, [r4, #4]
 8005280:	1ac0      	subs	r0, r0, r3
 8005282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005284:	b10b      	cbz	r3, 800528a <__sflush_r+0x46>
 8005286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005288:	1ac0      	subs	r0, r0, r3
 800528a:	2300      	movs	r3, #0
 800528c:	4602      	mov	r2, r0
 800528e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005290:	6a21      	ldr	r1, [r4, #32]
 8005292:	4628      	mov	r0, r5
 8005294:	47b0      	blx	r6
 8005296:	1c43      	adds	r3, r0, #1
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	d106      	bne.n	80052aa <__sflush_r+0x66>
 800529c:	6829      	ldr	r1, [r5, #0]
 800529e:	291d      	cmp	r1, #29
 80052a0:	d82c      	bhi.n	80052fc <__sflush_r+0xb8>
 80052a2:	4a2a      	ldr	r2, [pc, #168]	; (800534c <__sflush_r+0x108>)
 80052a4:	40ca      	lsrs	r2, r1
 80052a6:	07d6      	lsls	r6, r2, #31
 80052a8:	d528      	bpl.n	80052fc <__sflush_r+0xb8>
 80052aa:	2200      	movs	r2, #0
 80052ac:	6062      	str	r2, [r4, #4]
 80052ae:	04d9      	lsls	r1, r3, #19
 80052b0:	6922      	ldr	r2, [r4, #16]
 80052b2:	6022      	str	r2, [r4, #0]
 80052b4:	d504      	bpl.n	80052c0 <__sflush_r+0x7c>
 80052b6:	1c42      	adds	r2, r0, #1
 80052b8:	d101      	bne.n	80052be <__sflush_r+0x7a>
 80052ba:	682b      	ldr	r3, [r5, #0]
 80052bc:	b903      	cbnz	r3, 80052c0 <__sflush_r+0x7c>
 80052be:	6560      	str	r0, [r4, #84]	; 0x54
 80052c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052c2:	602f      	str	r7, [r5, #0]
 80052c4:	2900      	cmp	r1, #0
 80052c6:	d0ca      	beq.n	800525e <__sflush_r+0x1a>
 80052c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052cc:	4299      	cmp	r1, r3
 80052ce:	d002      	beq.n	80052d6 <__sflush_r+0x92>
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 f9d5 	bl	8005680 <_free_r>
 80052d6:	2000      	movs	r0, #0
 80052d8:	6360      	str	r0, [r4, #52]	; 0x34
 80052da:	e7c1      	b.n	8005260 <__sflush_r+0x1c>
 80052dc:	6a21      	ldr	r1, [r4, #32]
 80052de:	2301      	movs	r3, #1
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b0      	blx	r6
 80052e4:	1c41      	adds	r1, r0, #1
 80052e6:	d1c7      	bne.n	8005278 <__sflush_r+0x34>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0c4      	beq.n	8005278 <__sflush_r+0x34>
 80052ee:	2b1d      	cmp	r3, #29
 80052f0:	d001      	beq.n	80052f6 <__sflush_r+0xb2>
 80052f2:	2b16      	cmp	r3, #22
 80052f4:	d101      	bne.n	80052fa <__sflush_r+0xb6>
 80052f6:	602f      	str	r7, [r5, #0]
 80052f8:	e7b1      	b.n	800525e <__sflush_r+0x1a>
 80052fa:	89a3      	ldrh	r3, [r4, #12]
 80052fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005300:	81a3      	strh	r3, [r4, #12]
 8005302:	e7ad      	b.n	8005260 <__sflush_r+0x1c>
 8005304:	690f      	ldr	r7, [r1, #16]
 8005306:	2f00      	cmp	r7, #0
 8005308:	d0a9      	beq.n	800525e <__sflush_r+0x1a>
 800530a:	0793      	lsls	r3, r2, #30
 800530c:	680e      	ldr	r6, [r1, #0]
 800530e:	bf08      	it	eq
 8005310:	694b      	ldreq	r3, [r1, #20]
 8005312:	600f      	str	r7, [r1, #0]
 8005314:	bf18      	it	ne
 8005316:	2300      	movne	r3, #0
 8005318:	eba6 0807 	sub.w	r8, r6, r7
 800531c:	608b      	str	r3, [r1, #8]
 800531e:	f1b8 0f00 	cmp.w	r8, #0
 8005322:	dd9c      	ble.n	800525e <__sflush_r+0x1a>
 8005324:	6a21      	ldr	r1, [r4, #32]
 8005326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005328:	4643      	mov	r3, r8
 800532a:	463a      	mov	r2, r7
 800532c:	4628      	mov	r0, r5
 800532e:	47b0      	blx	r6
 8005330:	2800      	cmp	r0, #0
 8005332:	dc06      	bgt.n	8005342 <__sflush_r+0xfe>
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	e78e      	b.n	8005260 <__sflush_r+0x1c>
 8005342:	4407      	add	r7, r0
 8005344:	eba8 0800 	sub.w	r8, r8, r0
 8005348:	e7e9      	b.n	800531e <__sflush_r+0xda>
 800534a:	bf00      	nop
 800534c:	20400001 	.word	0x20400001

08005350 <_fflush_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	690b      	ldr	r3, [r1, #16]
 8005354:	4605      	mov	r5, r0
 8005356:	460c      	mov	r4, r1
 8005358:	b913      	cbnz	r3, 8005360 <_fflush_r+0x10>
 800535a:	2500      	movs	r5, #0
 800535c:	4628      	mov	r0, r5
 800535e:	bd38      	pop	{r3, r4, r5, pc}
 8005360:	b118      	cbz	r0, 800536a <_fflush_r+0x1a>
 8005362:	6983      	ldr	r3, [r0, #24]
 8005364:	b90b      	cbnz	r3, 800536a <_fflush_r+0x1a>
 8005366:	f000 f887 	bl	8005478 <__sinit>
 800536a:	4b14      	ldr	r3, [pc, #80]	; (80053bc <_fflush_r+0x6c>)
 800536c:	429c      	cmp	r4, r3
 800536e:	d11b      	bne.n	80053a8 <_fflush_r+0x58>
 8005370:	686c      	ldr	r4, [r5, #4]
 8005372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0ef      	beq.n	800535a <_fflush_r+0xa>
 800537a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800537c:	07d0      	lsls	r0, r2, #31
 800537e:	d404      	bmi.n	800538a <_fflush_r+0x3a>
 8005380:	0599      	lsls	r1, r3, #22
 8005382:	d402      	bmi.n	800538a <_fflush_r+0x3a>
 8005384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005386:	f000 f915 	bl	80055b4 <__retarget_lock_acquire_recursive>
 800538a:	4628      	mov	r0, r5
 800538c:	4621      	mov	r1, r4
 800538e:	f7ff ff59 	bl	8005244 <__sflush_r>
 8005392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005394:	07da      	lsls	r2, r3, #31
 8005396:	4605      	mov	r5, r0
 8005398:	d4e0      	bmi.n	800535c <_fflush_r+0xc>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	059b      	lsls	r3, r3, #22
 800539e:	d4dd      	bmi.n	800535c <_fflush_r+0xc>
 80053a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053a2:	f000 f908 	bl	80055b6 <__retarget_lock_release_recursive>
 80053a6:	e7d9      	b.n	800535c <_fflush_r+0xc>
 80053a8:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <_fflush_r+0x70>)
 80053aa:	429c      	cmp	r4, r3
 80053ac:	d101      	bne.n	80053b2 <_fflush_r+0x62>
 80053ae:	68ac      	ldr	r4, [r5, #8]
 80053b0:	e7df      	b.n	8005372 <_fflush_r+0x22>
 80053b2:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <_fflush_r+0x74>)
 80053b4:	429c      	cmp	r4, r3
 80053b6:	bf08      	it	eq
 80053b8:	68ec      	ldreq	r4, [r5, #12]
 80053ba:	e7da      	b.n	8005372 <_fflush_r+0x22>
 80053bc:	08005a0c 	.word	0x08005a0c
 80053c0:	08005a2c 	.word	0x08005a2c
 80053c4:	080059ec 	.word	0x080059ec

080053c8 <std>:
 80053c8:	2300      	movs	r3, #0
 80053ca:	b510      	push	{r4, lr}
 80053cc:	4604      	mov	r4, r0
 80053ce:	e9c0 3300 	strd	r3, r3, [r0]
 80053d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053d6:	6083      	str	r3, [r0, #8]
 80053d8:	8181      	strh	r1, [r0, #12]
 80053da:	6643      	str	r3, [r0, #100]	; 0x64
 80053dc:	81c2      	strh	r2, [r0, #14]
 80053de:	6183      	str	r3, [r0, #24]
 80053e0:	4619      	mov	r1, r3
 80053e2:	2208      	movs	r2, #8
 80053e4:	305c      	adds	r0, #92	; 0x5c
 80053e6:	f7ff fdef 	bl	8004fc8 <memset>
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <std+0x38>)
 80053ec:	6263      	str	r3, [r4, #36]	; 0x24
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <std+0x3c>)
 80053f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <std+0x40>)
 80053f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <std+0x44>)
 80053f8:	6224      	str	r4, [r4, #32]
 80053fa:	6323      	str	r3, [r4, #48]	; 0x30
 80053fc:	bd10      	pop	{r4, pc}
 80053fe:	bf00      	nop
 8005400:	080057f5 	.word	0x080057f5
 8005404:	08005817 	.word	0x08005817
 8005408:	0800584f 	.word	0x0800584f
 800540c:	08005873 	.word	0x08005873

08005410 <_cleanup_r>:
 8005410:	4901      	ldr	r1, [pc, #4]	; (8005418 <_cleanup_r+0x8>)
 8005412:	f000 b8af 	b.w	8005574 <_fwalk_reent>
 8005416:	bf00      	nop
 8005418:	08005351 	.word	0x08005351

0800541c <__sfmoreglue>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	1e4a      	subs	r2, r1, #1
 8005420:	2568      	movs	r5, #104	; 0x68
 8005422:	4355      	muls	r5, r2
 8005424:	460e      	mov	r6, r1
 8005426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800542a:	f000 f979 	bl	8005720 <_malloc_r>
 800542e:	4604      	mov	r4, r0
 8005430:	b140      	cbz	r0, 8005444 <__sfmoreglue+0x28>
 8005432:	2100      	movs	r1, #0
 8005434:	e9c0 1600 	strd	r1, r6, [r0]
 8005438:	300c      	adds	r0, #12
 800543a:	60a0      	str	r0, [r4, #8]
 800543c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005440:	f7ff fdc2 	bl	8004fc8 <memset>
 8005444:	4620      	mov	r0, r4
 8005446:	bd70      	pop	{r4, r5, r6, pc}

08005448 <__sfp_lock_acquire>:
 8005448:	4801      	ldr	r0, [pc, #4]	; (8005450 <__sfp_lock_acquire+0x8>)
 800544a:	f000 b8b3 	b.w	80055b4 <__retarget_lock_acquire_recursive>
 800544e:	bf00      	nop
 8005450:	2000049c 	.word	0x2000049c

08005454 <__sfp_lock_release>:
 8005454:	4801      	ldr	r0, [pc, #4]	; (800545c <__sfp_lock_release+0x8>)
 8005456:	f000 b8ae 	b.w	80055b6 <__retarget_lock_release_recursive>
 800545a:	bf00      	nop
 800545c:	2000049c 	.word	0x2000049c

08005460 <__sinit_lock_acquire>:
 8005460:	4801      	ldr	r0, [pc, #4]	; (8005468 <__sinit_lock_acquire+0x8>)
 8005462:	f000 b8a7 	b.w	80055b4 <__retarget_lock_acquire_recursive>
 8005466:	bf00      	nop
 8005468:	20000497 	.word	0x20000497

0800546c <__sinit_lock_release>:
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__sinit_lock_release+0x8>)
 800546e:	f000 b8a2 	b.w	80055b6 <__retarget_lock_release_recursive>
 8005472:	bf00      	nop
 8005474:	20000497 	.word	0x20000497

08005478 <__sinit>:
 8005478:	b510      	push	{r4, lr}
 800547a:	4604      	mov	r4, r0
 800547c:	f7ff fff0 	bl	8005460 <__sinit_lock_acquire>
 8005480:	69a3      	ldr	r3, [r4, #24]
 8005482:	b11b      	cbz	r3, 800548c <__sinit+0x14>
 8005484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005488:	f7ff bff0 	b.w	800546c <__sinit_lock_release>
 800548c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005490:	6523      	str	r3, [r4, #80]	; 0x50
 8005492:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <__sinit+0x68>)
 8005494:	4a13      	ldr	r2, [pc, #76]	; (80054e4 <__sinit+0x6c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	62a2      	str	r2, [r4, #40]	; 0x28
 800549a:	42a3      	cmp	r3, r4
 800549c:	bf04      	itt	eq
 800549e:	2301      	moveq	r3, #1
 80054a0:	61a3      	streq	r3, [r4, #24]
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 f820 	bl	80054e8 <__sfp>
 80054a8:	6060      	str	r0, [r4, #4]
 80054aa:	4620      	mov	r0, r4
 80054ac:	f000 f81c 	bl	80054e8 <__sfp>
 80054b0:	60a0      	str	r0, [r4, #8]
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 f818 	bl	80054e8 <__sfp>
 80054b8:	2200      	movs	r2, #0
 80054ba:	60e0      	str	r0, [r4, #12]
 80054bc:	2104      	movs	r1, #4
 80054be:	6860      	ldr	r0, [r4, #4]
 80054c0:	f7ff ff82 	bl	80053c8 <std>
 80054c4:	68a0      	ldr	r0, [r4, #8]
 80054c6:	2201      	movs	r2, #1
 80054c8:	2109      	movs	r1, #9
 80054ca:	f7ff ff7d 	bl	80053c8 <std>
 80054ce:	68e0      	ldr	r0, [r4, #12]
 80054d0:	2202      	movs	r2, #2
 80054d2:	2112      	movs	r1, #18
 80054d4:	f7ff ff78 	bl	80053c8 <std>
 80054d8:	2301      	movs	r3, #1
 80054da:	61a3      	str	r3, [r4, #24]
 80054dc:	e7d2      	b.n	8005484 <__sinit+0xc>
 80054de:	bf00      	nop
 80054e0:	080059e8 	.word	0x080059e8
 80054e4:	08005411 	.word	0x08005411

080054e8 <__sfp>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	4607      	mov	r7, r0
 80054ec:	f7ff ffac 	bl	8005448 <__sfp_lock_acquire>
 80054f0:	4b1e      	ldr	r3, [pc, #120]	; (800556c <__sfp+0x84>)
 80054f2:	681e      	ldr	r6, [r3, #0]
 80054f4:	69b3      	ldr	r3, [r6, #24]
 80054f6:	b913      	cbnz	r3, 80054fe <__sfp+0x16>
 80054f8:	4630      	mov	r0, r6
 80054fa:	f7ff ffbd 	bl	8005478 <__sinit>
 80054fe:	3648      	adds	r6, #72	; 0x48
 8005500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005504:	3b01      	subs	r3, #1
 8005506:	d503      	bpl.n	8005510 <__sfp+0x28>
 8005508:	6833      	ldr	r3, [r6, #0]
 800550a:	b30b      	cbz	r3, 8005550 <__sfp+0x68>
 800550c:	6836      	ldr	r6, [r6, #0]
 800550e:	e7f7      	b.n	8005500 <__sfp+0x18>
 8005510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005514:	b9d5      	cbnz	r5, 800554c <__sfp+0x64>
 8005516:	4b16      	ldr	r3, [pc, #88]	; (8005570 <__sfp+0x88>)
 8005518:	60e3      	str	r3, [r4, #12]
 800551a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800551e:	6665      	str	r5, [r4, #100]	; 0x64
 8005520:	f000 f847 	bl	80055b2 <__retarget_lock_init_recursive>
 8005524:	f7ff ff96 	bl	8005454 <__sfp_lock_release>
 8005528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800552c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005530:	6025      	str	r5, [r4, #0]
 8005532:	61a5      	str	r5, [r4, #24]
 8005534:	2208      	movs	r2, #8
 8005536:	4629      	mov	r1, r5
 8005538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800553c:	f7ff fd44 	bl	8004fc8 <memset>
 8005540:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005544:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005548:	4620      	mov	r0, r4
 800554a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554c:	3468      	adds	r4, #104	; 0x68
 800554e:	e7d9      	b.n	8005504 <__sfp+0x1c>
 8005550:	2104      	movs	r1, #4
 8005552:	4638      	mov	r0, r7
 8005554:	f7ff ff62 	bl	800541c <__sfmoreglue>
 8005558:	4604      	mov	r4, r0
 800555a:	6030      	str	r0, [r6, #0]
 800555c:	2800      	cmp	r0, #0
 800555e:	d1d5      	bne.n	800550c <__sfp+0x24>
 8005560:	f7ff ff78 	bl	8005454 <__sfp_lock_release>
 8005564:	230c      	movs	r3, #12
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	e7ee      	b.n	8005548 <__sfp+0x60>
 800556a:	bf00      	nop
 800556c:	080059e8 	.word	0x080059e8
 8005570:	ffff0001 	.word	0xffff0001

08005574 <_fwalk_reent>:
 8005574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005578:	4606      	mov	r6, r0
 800557a:	4688      	mov	r8, r1
 800557c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005580:	2700      	movs	r7, #0
 8005582:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005586:	f1b9 0901 	subs.w	r9, r9, #1
 800558a:	d505      	bpl.n	8005598 <_fwalk_reent+0x24>
 800558c:	6824      	ldr	r4, [r4, #0]
 800558e:	2c00      	cmp	r4, #0
 8005590:	d1f7      	bne.n	8005582 <_fwalk_reent+0xe>
 8005592:	4638      	mov	r0, r7
 8005594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005598:	89ab      	ldrh	r3, [r5, #12]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d907      	bls.n	80055ae <_fwalk_reent+0x3a>
 800559e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055a2:	3301      	adds	r3, #1
 80055a4:	d003      	beq.n	80055ae <_fwalk_reent+0x3a>
 80055a6:	4629      	mov	r1, r5
 80055a8:	4630      	mov	r0, r6
 80055aa:	47c0      	blx	r8
 80055ac:	4307      	orrs	r7, r0
 80055ae:	3568      	adds	r5, #104	; 0x68
 80055b0:	e7e9      	b.n	8005586 <_fwalk_reent+0x12>

080055b2 <__retarget_lock_init_recursive>:
 80055b2:	4770      	bx	lr

080055b4 <__retarget_lock_acquire_recursive>:
 80055b4:	4770      	bx	lr

080055b6 <__retarget_lock_release_recursive>:
 80055b6:	4770      	bx	lr

080055b8 <__swhatbuf_r>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	460e      	mov	r6, r1
 80055bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c0:	2900      	cmp	r1, #0
 80055c2:	b096      	sub	sp, #88	; 0x58
 80055c4:	4614      	mov	r4, r2
 80055c6:	461d      	mov	r5, r3
 80055c8:	da07      	bge.n	80055da <__swhatbuf_r+0x22>
 80055ca:	2300      	movs	r3, #0
 80055cc:	602b      	str	r3, [r5, #0]
 80055ce:	89b3      	ldrh	r3, [r6, #12]
 80055d0:	061a      	lsls	r2, r3, #24
 80055d2:	d410      	bmi.n	80055f6 <__swhatbuf_r+0x3e>
 80055d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d8:	e00e      	b.n	80055f8 <__swhatbuf_r+0x40>
 80055da:	466a      	mov	r2, sp
 80055dc:	f000 f970 	bl	80058c0 <_fstat_r>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	dbf2      	blt.n	80055ca <__swhatbuf_r+0x12>
 80055e4:	9a01      	ldr	r2, [sp, #4]
 80055e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055ee:	425a      	negs	r2, r3
 80055f0:	415a      	adcs	r2, r3
 80055f2:	602a      	str	r2, [r5, #0]
 80055f4:	e7ee      	b.n	80055d4 <__swhatbuf_r+0x1c>
 80055f6:	2340      	movs	r3, #64	; 0x40
 80055f8:	2000      	movs	r0, #0
 80055fa:	6023      	str	r3, [r4, #0]
 80055fc:	b016      	add	sp, #88	; 0x58
 80055fe:	bd70      	pop	{r4, r5, r6, pc}

08005600 <__smakebuf_r>:
 8005600:	898b      	ldrh	r3, [r1, #12]
 8005602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005604:	079d      	lsls	r5, r3, #30
 8005606:	4606      	mov	r6, r0
 8005608:	460c      	mov	r4, r1
 800560a:	d507      	bpl.n	800561c <__smakebuf_r+0x1c>
 800560c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	6123      	str	r3, [r4, #16]
 8005614:	2301      	movs	r3, #1
 8005616:	6163      	str	r3, [r4, #20]
 8005618:	b002      	add	sp, #8
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	ab01      	add	r3, sp, #4
 800561e:	466a      	mov	r2, sp
 8005620:	f7ff ffca 	bl	80055b8 <__swhatbuf_r>
 8005624:	9900      	ldr	r1, [sp, #0]
 8005626:	4605      	mov	r5, r0
 8005628:	4630      	mov	r0, r6
 800562a:	f000 f879 	bl	8005720 <_malloc_r>
 800562e:	b948      	cbnz	r0, 8005644 <__smakebuf_r+0x44>
 8005630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005634:	059a      	lsls	r2, r3, #22
 8005636:	d4ef      	bmi.n	8005618 <__smakebuf_r+0x18>
 8005638:	f023 0303 	bic.w	r3, r3, #3
 800563c:	f043 0302 	orr.w	r3, r3, #2
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	e7e3      	b.n	800560c <__smakebuf_r+0xc>
 8005644:	4b0d      	ldr	r3, [pc, #52]	; (800567c <__smakebuf_r+0x7c>)
 8005646:	62b3      	str	r3, [r6, #40]	; 0x28
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	6020      	str	r0, [r4, #0]
 800564c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005650:	81a3      	strh	r3, [r4, #12]
 8005652:	9b00      	ldr	r3, [sp, #0]
 8005654:	6163      	str	r3, [r4, #20]
 8005656:	9b01      	ldr	r3, [sp, #4]
 8005658:	6120      	str	r0, [r4, #16]
 800565a:	b15b      	cbz	r3, 8005674 <__smakebuf_r+0x74>
 800565c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005660:	4630      	mov	r0, r6
 8005662:	f000 f93f 	bl	80058e4 <_isatty_r>
 8005666:	b128      	cbz	r0, 8005674 <__smakebuf_r+0x74>
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	81a3      	strh	r3, [r4, #12]
 8005674:	89a0      	ldrh	r0, [r4, #12]
 8005676:	4305      	orrs	r5, r0
 8005678:	81a5      	strh	r5, [r4, #12]
 800567a:	e7cd      	b.n	8005618 <__smakebuf_r+0x18>
 800567c:	08005411 	.word	0x08005411

08005680 <_free_r>:
 8005680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005682:	2900      	cmp	r1, #0
 8005684:	d048      	beq.n	8005718 <_free_r+0x98>
 8005686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568a:	9001      	str	r0, [sp, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f1a1 0404 	sub.w	r4, r1, #4
 8005692:	bfb8      	it	lt
 8005694:	18e4      	addlt	r4, r4, r3
 8005696:	f000 f947 	bl	8005928 <__malloc_lock>
 800569a:	4a20      	ldr	r2, [pc, #128]	; (800571c <_free_r+0x9c>)
 800569c:	9801      	ldr	r0, [sp, #4]
 800569e:	6813      	ldr	r3, [r2, #0]
 80056a0:	4615      	mov	r5, r2
 80056a2:	b933      	cbnz	r3, 80056b2 <_free_r+0x32>
 80056a4:	6063      	str	r3, [r4, #4]
 80056a6:	6014      	str	r4, [r2, #0]
 80056a8:	b003      	add	sp, #12
 80056aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056ae:	f000 b941 	b.w	8005934 <__malloc_unlock>
 80056b2:	42a3      	cmp	r3, r4
 80056b4:	d90b      	bls.n	80056ce <_free_r+0x4e>
 80056b6:	6821      	ldr	r1, [r4, #0]
 80056b8:	1862      	adds	r2, r4, r1
 80056ba:	4293      	cmp	r3, r2
 80056bc:	bf04      	itt	eq
 80056be:	681a      	ldreq	r2, [r3, #0]
 80056c0:	685b      	ldreq	r3, [r3, #4]
 80056c2:	6063      	str	r3, [r4, #4]
 80056c4:	bf04      	itt	eq
 80056c6:	1852      	addeq	r2, r2, r1
 80056c8:	6022      	streq	r2, [r4, #0]
 80056ca:	602c      	str	r4, [r5, #0]
 80056cc:	e7ec      	b.n	80056a8 <_free_r+0x28>
 80056ce:	461a      	mov	r2, r3
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	b10b      	cbz	r3, 80056d8 <_free_r+0x58>
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	d9fa      	bls.n	80056ce <_free_r+0x4e>
 80056d8:	6811      	ldr	r1, [r2, #0]
 80056da:	1855      	adds	r5, r2, r1
 80056dc:	42a5      	cmp	r5, r4
 80056de:	d10b      	bne.n	80056f8 <_free_r+0x78>
 80056e0:	6824      	ldr	r4, [r4, #0]
 80056e2:	4421      	add	r1, r4
 80056e4:	1854      	adds	r4, r2, r1
 80056e6:	42a3      	cmp	r3, r4
 80056e8:	6011      	str	r1, [r2, #0]
 80056ea:	d1dd      	bne.n	80056a8 <_free_r+0x28>
 80056ec:	681c      	ldr	r4, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	6053      	str	r3, [r2, #4]
 80056f2:	4421      	add	r1, r4
 80056f4:	6011      	str	r1, [r2, #0]
 80056f6:	e7d7      	b.n	80056a8 <_free_r+0x28>
 80056f8:	d902      	bls.n	8005700 <_free_r+0x80>
 80056fa:	230c      	movs	r3, #12
 80056fc:	6003      	str	r3, [r0, #0]
 80056fe:	e7d3      	b.n	80056a8 <_free_r+0x28>
 8005700:	6825      	ldr	r5, [r4, #0]
 8005702:	1961      	adds	r1, r4, r5
 8005704:	428b      	cmp	r3, r1
 8005706:	bf04      	itt	eq
 8005708:	6819      	ldreq	r1, [r3, #0]
 800570a:	685b      	ldreq	r3, [r3, #4]
 800570c:	6063      	str	r3, [r4, #4]
 800570e:	bf04      	itt	eq
 8005710:	1949      	addeq	r1, r1, r5
 8005712:	6021      	streq	r1, [r4, #0]
 8005714:	6054      	str	r4, [r2, #4]
 8005716:	e7c7      	b.n	80056a8 <_free_r+0x28>
 8005718:	b003      	add	sp, #12
 800571a:	bd30      	pop	{r4, r5, pc}
 800571c:	200000a4 	.word	0x200000a4

08005720 <_malloc_r>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	1ccd      	adds	r5, r1, #3
 8005724:	f025 0503 	bic.w	r5, r5, #3
 8005728:	3508      	adds	r5, #8
 800572a:	2d0c      	cmp	r5, #12
 800572c:	bf38      	it	cc
 800572e:	250c      	movcc	r5, #12
 8005730:	2d00      	cmp	r5, #0
 8005732:	4606      	mov	r6, r0
 8005734:	db01      	blt.n	800573a <_malloc_r+0x1a>
 8005736:	42a9      	cmp	r1, r5
 8005738:	d903      	bls.n	8005742 <_malloc_r+0x22>
 800573a:	230c      	movs	r3, #12
 800573c:	6033      	str	r3, [r6, #0]
 800573e:	2000      	movs	r0, #0
 8005740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005742:	f000 f8f1 	bl	8005928 <__malloc_lock>
 8005746:	4921      	ldr	r1, [pc, #132]	; (80057cc <_malloc_r+0xac>)
 8005748:	680a      	ldr	r2, [r1, #0]
 800574a:	4614      	mov	r4, r2
 800574c:	b99c      	cbnz	r4, 8005776 <_malloc_r+0x56>
 800574e:	4f20      	ldr	r7, [pc, #128]	; (80057d0 <_malloc_r+0xb0>)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	b923      	cbnz	r3, 800575e <_malloc_r+0x3e>
 8005754:	4621      	mov	r1, r4
 8005756:	4630      	mov	r0, r6
 8005758:	f000 f83c 	bl	80057d4 <_sbrk_r>
 800575c:	6038      	str	r0, [r7, #0]
 800575e:	4629      	mov	r1, r5
 8005760:	4630      	mov	r0, r6
 8005762:	f000 f837 	bl	80057d4 <_sbrk_r>
 8005766:	1c43      	adds	r3, r0, #1
 8005768:	d123      	bne.n	80057b2 <_malloc_r+0x92>
 800576a:	230c      	movs	r3, #12
 800576c:	6033      	str	r3, [r6, #0]
 800576e:	4630      	mov	r0, r6
 8005770:	f000 f8e0 	bl	8005934 <__malloc_unlock>
 8005774:	e7e3      	b.n	800573e <_malloc_r+0x1e>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	1b5b      	subs	r3, r3, r5
 800577a:	d417      	bmi.n	80057ac <_malloc_r+0x8c>
 800577c:	2b0b      	cmp	r3, #11
 800577e:	d903      	bls.n	8005788 <_malloc_r+0x68>
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	441c      	add	r4, r3
 8005784:	6025      	str	r5, [r4, #0]
 8005786:	e004      	b.n	8005792 <_malloc_r+0x72>
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	42a2      	cmp	r2, r4
 800578c:	bf0c      	ite	eq
 800578e:	600b      	streq	r3, [r1, #0]
 8005790:	6053      	strne	r3, [r2, #4]
 8005792:	4630      	mov	r0, r6
 8005794:	f000 f8ce 	bl	8005934 <__malloc_unlock>
 8005798:	f104 000b 	add.w	r0, r4, #11
 800579c:	1d23      	adds	r3, r4, #4
 800579e:	f020 0007 	bic.w	r0, r0, #7
 80057a2:	1ac2      	subs	r2, r0, r3
 80057a4:	d0cc      	beq.n	8005740 <_malloc_r+0x20>
 80057a6:	1a1b      	subs	r3, r3, r0
 80057a8:	50a3      	str	r3, [r4, r2]
 80057aa:	e7c9      	b.n	8005740 <_malloc_r+0x20>
 80057ac:	4622      	mov	r2, r4
 80057ae:	6864      	ldr	r4, [r4, #4]
 80057b0:	e7cc      	b.n	800574c <_malloc_r+0x2c>
 80057b2:	1cc4      	adds	r4, r0, #3
 80057b4:	f024 0403 	bic.w	r4, r4, #3
 80057b8:	42a0      	cmp	r0, r4
 80057ba:	d0e3      	beq.n	8005784 <_malloc_r+0x64>
 80057bc:	1a21      	subs	r1, r4, r0
 80057be:	4630      	mov	r0, r6
 80057c0:	f000 f808 	bl	80057d4 <_sbrk_r>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d1dd      	bne.n	8005784 <_malloc_r+0x64>
 80057c8:	e7cf      	b.n	800576a <_malloc_r+0x4a>
 80057ca:	bf00      	nop
 80057cc:	200000a4 	.word	0x200000a4
 80057d0:	200000a8 	.word	0x200000a8

080057d4 <_sbrk_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4d06      	ldr	r5, [pc, #24]	; (80057f0 <_sbrk_r+0x1c>)
 80057d8:	2300      	movs	r3, #0
 80057da:	4604      	mov	r4, r0
 80057dc:	4608      	mov	r0, r1
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	f7fb fada 	bl	8000d98 <_sbrk>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d102      	bne.n	80057ee <_sbrk_r+0x1a>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	b103      	cbz	r3, 80057ee <_sbrk_r+0x1a>
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	200004a0 	.word	0x200004a0

080057f4 <__sread>:
 80057f4:	b510      	push	{r4, lr}
 80057f6:	460c      	mov	r4, r1
 80057f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057fc:	f000 f8a0 	bl	8005940 <_read_r>
 8005800:	2800      	cmp	r0, #0
 8005802:	bfab      	itete	ge
 8005804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005806:	89a3      	ldrhlt	r3, [r4, #12]
 8005808:	181b      	addge	r3, r3, r0
 800580a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800580e:	bfac      	ite	ge
 8005810:	6563      	strge	r3, [r4, #84]	; 0x54
 8005812:	81a3      	strhlt	r3, [r4, #12]
 8005814:	bd10      	pop	{r4, pc}

08005816 <__swrite>:
 8005816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800581a:	461f      	mov	r7, r3
 800581c:	898b      	ldrh	r3, [r1, #12]
 800581e:	05db      	lsls	r3, r3, #23
 8005820:	4605      	mov	r5, r0
 8005822:	460c      	mov	r4, r1
 8005824:	4616      	mov	r6, r2
 8005826:	d505      	bpl.n	8005834 <__swrite+0x1e>
 8005828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800582c:	2302      	movs	r3, #2
 800582e:	2200      	movs	r2, #0
 8005830:	f000 f868 	bl	8005904 <_lseek_r>
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800583a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800583e:	81a3      	strh	r3, [r4, #12]
 8005840:	4632      	mov	r2, r6
 8005842:	463b      	mov	r3, r7
 8005844:	4628      	mov	r0, r5
 8005846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800584a:	f000 b817 	b.w	800587c <_write_r>

0800584e <__sseek>:
 800584e:	b510      	push	{r4, lr}
 8005850:	460c      	mov	r4, r1
 8005852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005856:	f000 f855 	bl	8005904 <_lseek_r>
 800585a:	1c43      	adds	r3, r0, #1
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	bf15      	itete	ne
 8005860:	6560      	strne	r0, [r4, #84]	; 0x54
 8005862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800586a:	81a3      	strheq	r3, [r4, #12]
 800586c:	bf18      	it	ne
 800586e:	81a3      	strhne	r3, [r4, #12]
 8005870:	bd10      	pop	{r4, pc}

08005872 <__sclose>:
 8005872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005876:	f000 b813 	b.w	80058a0 <_close_r>
	...

0800587c <_write_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d07      	ldr	r5, [pc, #28]	; (800589c <_write_r+0x20>)
 8005880:	4604      	mov	r4, r0
 8005882:	4608      	mov	r0, r1
 8005884:	4611      	mov	r1, r2
 8005886:	2200      	movs	r2, #0
 8005888:	602a      	str	r2, [r5, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	f7fa ffed 	bl	800086a <_write>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_write_r+0x1e>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_write_r+0x1e>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	200004a0 	.word	0x200004a0

080058a0 <_close_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4d06      	ldr	r5, [pc, #24]	; (80058bc <_close_r+0x1c>)
 80058a4:	2300      	movs	r3, #0
 80058a6:	4604      	mov	r4, r0
 80058a8:	4608      	mov	r0, r1
 80058aa:	602b      	str	r3, [r5, #0]
 80058ac:	f7fb fa3f 	bl	8000d2e <_close>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_close_r+0x1a>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_close_r+0x1a>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	200004a0 	.word	0x200004a0

080058c0 <_fstat_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4d07      	ldr	r5, [pc, #28]	; (80058e0 <_fstat_r+0x20>)
 80058c4:	2300      	movs	r3, #0
 80058c6:	4604      	mov	r4, r0
 80058c8:	4608      	mov	r0, r1
 80058ca:	4611      	mov	r1, r2
 80058cc:	602b      	str	r3, [r5, #0]
 80058ce:	f7fb fa3a 	bl	8000d46 <_fstat>
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	d102      	bne.n	80058dc <_fstat_r+0x1c>
 80058d6:	682b      	ldr	r3, [r5, #0]
 80058d8:	b103      	cbz	r3, 80058dc <_fstat_r+0x1c>
 80058da:	6023      	str	r3, [r4, #0]
 80058dc:	bd38      	pop	{r3, r4, r5, pc}
 80058de:	bf00      	nop
 80058e0:	200004a0 	.word	0x200004a0

080058e4 <_isatty_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4d06      	ldr	r5, [pc, #24]	; (8005900 <_isatty_r+0x1c>)
 80058e8:	2300      	movs	r3, #0
 80058ea:	4604      	mov	r4, r0
 80058ec:	4608      	mov	r0, r1
 80058ee:	602b      	str	r3, [r5, #0]
 80058f0:	f7fb fa39 	bl	8000d66 <_isatty>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d102      	bne.n	80058fe <_isatty_r+0x1a>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	b103      	cbz	r3, 80058fe <_isatty_r+0x1a>
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	200004a0 	.word	0x200004a0

08005904 <_lseek_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d07      	ldr	r5, [pc, #28]	; (8005924 <_lseek_r+0x20>)
 8005908:	4604      	mov	r4, r0
 800590a:	4608      	mov	r0, r1
 800590c:	4611      	mov	r1, r2
 800590e:	2200      	movs	r2, #0
 8005910:	602a      	str	r2, [r5, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f7fb fa32 	bl	8000d7c <_lseek>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_lseek_r+0x1e>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_lseek_r+0x1e>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	200004a0 	.word	0x200004a0

08005928 <__malloc_lock>:
 8005928:	4801      	ldr	r0, [pc, #4]	; (8005930 <__malloc_lock+0x8>)
 800592a:	f7ff be43 	b.w	80055b4 <__retarget_lock_acquire_recursive>
 800592e:	bf00      	nop
 8005930:	20000498 	.word	0x20000498

08005934 <__malloc_unlock>:
 8005934:	4801      	ldr	r0, [pc, #4]	; (800593c <__malloc_unlock+0x8>)
 8005936:	f7ff be3e 	b.w	80055b6 <__retarget_lock_release_recursive>
 800593a:	bf00      	nop
 800593c:	20000498 	.word	0x20000498

08005940 <_read_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	4d07      	ldr	r5, [pc, #28]	; (8005960 <_read_r+0x20>)
 8005944:	4604      	mov	r4, r0
 8005946:	4608      	mov	r0, r1
 8005948:	4611      	mov	r1, r2
 800594a:	2200      	movs	r2, #0
 800594c:	602a      	str	r2, [r5, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	f7fb f9d0 	bl	8000cf4 <_read>
 8005954:	1c43      	adds	r3, r0, #1
 8005956:	d102      	bne.n	800595e <_read_r+0x1e>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	b103      	cbz	r3, 800595e <_read_r+0x1e>
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	bd38      	pop	{r3, r4, r5, pc}
 8005960:	200004a0 	.word	0x200004a0

08005964 <_init>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	bf00      	nop
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr

08005970 <_fini>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr
