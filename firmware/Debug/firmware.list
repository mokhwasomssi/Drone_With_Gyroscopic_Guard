
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c58  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e74  08004e74  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e7c  08004e7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e7c  08004e7c  00014e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000070  08004ef4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08004ef4  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c77  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4c  00000000  00000000  00031d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00034968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00035878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019853  00000000  00000000  00036610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127bb  00000000  00000000  0004fe63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa54  00000000  00000000  0006261e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd072  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ac  00000000  00000000  000fd0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004dd8 	.word	0x08004dd8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08004dd8 	.word	0x08004dd8

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b96e 	b.w	8000b38 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468c      	mov	ip, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	f040 8083 	bne.w	800098a <__udivmoddi4+0x116>
 8000884:	428a      	cmp	r2, r1
 8000886:	4617      	mov	r7, r2
 8000888:	d947      	bls.n	800091a <__udivmoddi4+0xa6>
 800088a:	fab2 f282 	clz	r2, r2
 800088e:	b142      	cbz	r2, 80008a2 <__udivmoddi4+0x2e>
 8000890:	f1c2 0020 	rsb	r0, r2, #32
 8000894:	fa24 f000 	lsr.w	r0, r4, r0
 8000898:	4091      	lsls	r1, r2
 800089a:	4097      	lsls	r7, r2
 800089c:	ea40 0c01 	orr.w	ip, r0, r1
 80008a0:	4094      	lsls	r4, r2
 80008a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008a6:	0c23      	lsrs	r3, r4, #16
 80008a8:	fbbc f6f8 	udiv	r6, ip, r8
 80008ac:	fa1f fe87 	uxth.w	lr, r7
 80008b0:	fb08 c116 	mls	r1, r8, r6, ip
 80008b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b8:	fb06 f10e 	mul.w	r1, r6, lr
 80008bc:	4299      	cmp	r1, r3
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x60>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008c6:	f080 8119 	bcs.w	8000afc <__udivmoddi4+0x288>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 8116 	bls.w	8000afc <__udivmoddi4+0x288>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008dc:	fb08 3310 	mls	r3, r8, r0, r3
 80008e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d909      	bls.n	8000900 <__udivmoddi4+0x8c>
 80008ec:	193c      	adds	r4, r7, r4
 80008ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f2:	f080 8105 	bcs.w	8000b00 <__udivmoddi4+0x28c>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f240 8102 	bls.w	8000b00 <__udivmoddi4+0x28c>
 80008fc:	3802      	subs	r0, #2
 80008fe:	443c      	add	r4, r7
 8000900:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000904:	eba4 040e 	sub.w	r4, r4, lr
 8000908:	2600      	movs	r6, #0
 800090a:	b11d      	cbz	r5, 8000914 <__udivmoddi4+0xa0>
 800090c:	40d4      	lsrs	r4, r2
 800090e:	2300      	movs	r3, #0
 8000910:	e9c5 4300 	strd	r4, r3, [r5]
 8000914:	4631      	mov	r1, r6
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	b902      	cbnz	r2, 800091e <__udivmoddi4+0xaa>
 800091c:	deff      	udf	#255	; 0xff
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	2a00      	cmp	r2, #0
 8000924:	d150      	bne.n	80009c8 <__udivmoddi4+0x154>
 8000926:	1bcb      	subs	r3, r1, r7
 8000928:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092c:	fa1f f887 	uxth.w	r8, r7
 8000930:	2601      	movs	r6, #1
 8000932:	fbb3 fcfe 	udiv	ip, r3, lr
 8000936:	0c21      	lsrs	r1, r4, #16
 8000938:	fb0e 331c 	mls	r3, lr, ip, r3
 800093c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000940:	fb08 f30c 	mul.w	r3, r8, ip
 8000944:	428b      	cmp	r3, r1
 8000946:	d907      	bls.n	8000958 <__udivmoddi4+0xe4>
 8000948:	1879      	adds	r1, r7, r1
 800094a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0xe2>
 8000950:	428b      	cmp	r3, r1
 8000952:	f200 80e9 	bhi.w	8000b28 <__udivmoddi4+0x2b4>
 8000956:	4684      	mov	ip, r0
 8000958:	1ac9      	subs	r1, r1, r3
 800095a:	b2a3      	uxth	r3, r4
 800095c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000960:	fb0e 1110 	mls	r1, lr, r0, r1
 8000964:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000968:	fb08 f800 	mul.w	r8, r8, r0
 800096c:	45a0      	cmp	r8, r4
 800096e:	d907      	bls.n	8000980 <__udivmoddi4+0x10c>
 8000970:	193c      	adds	r4, r7, r4
 8000972:	f100 33ff 	add.w	r3, r0, #4294967295
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x10a>
 8000978:	45a0      	cmp	r8, r4
 800097a:	f200 80d9 	bhi.w	8000b30 <__udivmoddi4+0x2bc>
 800097e:	4618      	mov	r0, r3
 8000980:	eba4 0408 	sub.w	r4, r4, r8
 8000984:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000988:	e7bf      	b.n	800090a <__udivmoddi4+0x96>
 800098a:	428b      	cmp	r3, r1
 800098c:	d909      	bls.n	80009a2 <__udivmoddi4+0x12e>
 800098e:	2d00      	cmp	r5, #0
 8000990:	f000 80b1 	beq.w	8000af6 <__udivmoddi4+0x282>
 8000994:	2600      	movs	r6, #0
 8000996:	e9c5 0100 	strd	r0, r1, [r5]
 800099a:	4630      	mov	r0, r6
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	fab3 f683 	clz	r6, r3
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	d14a      	bne.n	8000a40 <__udivmoddi4+0x1cc>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d302      	bcc.n	80009b4 <__udivmoddi4+0x140>
 80009ae:	4282      	cmp	r2, r0
 80009b0:	f200 80b8 	bhi.w	8000b24 <__udivmoddi4+0x2b0>
 80009b4:	1a84      	subs	r4, r0, r2
 80009b6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ba:	2001      	movs	r0, #1
 80009bc:	468c      	mov	ip, r1
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d0a8      	beq.n	8000914 <__udivmoddi4+0xa0>
 80009c2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009c6:	e7a5      	b.n	8000914 <__udivmoddi4+0xa0>
 80009c8:	f1c2 0320 	rsb	r3, r2, #32
 80009cc:	fa20 f603 	lsr.w	r6, r0, r3
 80009d0:	4097      	lsls	r7, r2
 80009d2:	fa01 f002 	lsl.w	r0, r1, r2
 80009d6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009da:	40d9      	lsrs	r1, r3
 80009dc:	4330      	orrs	r0, r6
 80009de:	0c03      	lsrs	r3, r0, #16
 80009e0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009e4:	fa1f f887 	uxth.w	r8, r7
 80009e8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009f0:	fb06 f108 	mul.w	r1, r6, r8
 80009f4:	4299      	cmp	r1, r3
 80009f6:	fa04 f402 	lsl.w	r4, r4, r2
 80009fa:	d909      	bls.n	8000a10 <__udivmoddi4+0x19c>
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a02:	f080 808d 	bcs.w	8000b20 <__udivmoddi4+0x2ac>
 8000a06:	4299      	cmp	r1, r3
 8000a08:	f240 808a 	bls.w	8000b20 <__udivmoddi4+0x2ac>
 8000a0c:	3e02      	subs	r6, #2
 8000a0e:	443b      	add	r3, r7
 8000a10:	1a5b      	subs	r3, r3, r1
 8000a12:	b281      	uxth	r1, r0
 8000a14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a20:	fb00 f308 	mul.w	r3, r0, r8
 8000a24:	428b      	cmp	r3, r1
 8000a26:	d907      	bls.n	8000a38 <__udivmoddi4+0x1c4>
 8000a28:	1879      	adds	r1, r7, r1
 8000a2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a2e:	d273      	bcs.n	8000b18 <__udivmoddi4+0x2a4>
 8000a30:	428b      	cmp	r3, r1
 8000a32:	d971      	bls.n	8000b18 <__udivmoddi4+0x2a4>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4439      	add	r1, r7
 8000a38:	1acb      	subs	r3, r1, r3
 8000a3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a3e:	e778      	b.n	8000932 <__udivmoddi4+0xbe>
 8000a40:	f1c6 0c20 	rsb	ip, r6, #32
 8000a44:	fa03 f406 	lsl.w	r4, r3, r6
 8000a48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a4c:	431c      	orrs	r4, r3
 8000a4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a52:	fa01 f306 	lsl.w	r3, r1, r6
 8000a56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a5e:	431f      	orrs	r7, r3
 8000a60:	0c3b      	lsrs	r3, r7, #16
 8000a62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a66:	fa1f f884 	uxth.w	r8, r4
 8000a6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a72:	fb09 fa08 	mul.w	sl, r9, r8
 8000a76:	458a      	cmp	sl, r1
 8000a78:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a80:	d908      	bls.n	8000a94 <__udivmoddi4+0x220>
 8000a82:	1861      	adds	r1, r4, r1
 8000a84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a88:	d248      	bcs.n	8000b1c <__udivmoddi4+0x2a8>
 8000a8a:	458a      	cmp	sl, r1
 8000a8c:	d946      	bls.n	8000b1c <__udivmoddi4+0x2a8>
 8000a8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a92:	4421      	add	r1, r4
 8000a94:	eba1 010a 	sub.w	r1, r1, sl
 8000a98:	b2bf      	uxth	r7, r7
 8000a9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aa6:	fb00 f808 	mul.w	r8, r0, r8
 8000aaa:	45b8      	cmp	r8, r7
 8000aac:	d907      	bls.n	8000abe <__udivmoddi4+0x24a>
 8000aae:	19e7      	adds	r7, r4, r7
 8000ab0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ab4:	d22e      	bcs.n	8000b14 <__udivmoddi4+0x2a0>
 8000ab6:	45b8      	cmp	r8, r7
 8000ab8:	d92c      	bls.n	8000b14 <__udivmoddi4+0x2a0>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4427      	add	r7, r4
 8000abe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ac2:	eba7 0708 	sub.w	r7, r7, r8
 8000ac6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aca:	454f      	cmp	r7, r9
 8000acc:	46c6      	mov	lr, r8
 8000ace:	4649      	mov	r1, r9
 8000ad0:	d31a      	bcc.n	8000b08 <__udivmoddi4+0x294>
 8000ad2:	d017      	beq.n	8000b04 <__udivmoddi4+0x290>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x27a>
 8000ad6:	ebb3 020e 	subs.w	r2, r3, lr
 8000ada:	eb67 0701 	sbc.w	r7, r7, r1
 8000ade:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ae2:	40f2      	lsrs	r2, r6
 8000ae4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ae8:	40f7      	lsrs	r7, r6
 8000aea:	e9c5 2700 	strd	r2, r7, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	462e      	mov	r6, r5
 8000af8:	4628      	mov	r0, r5
 8000afa:	e70b      	b.n	8000914 <__udivmoddi4+0xa0>
 8000afc:	4606      	mov	r6, r0
 8000afe:	e6e9      	b.n	80008d4 <__udivmoddi4+0x60>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6fd      	b.n	8000900 <__udivmoddi4+0x8c>
 8000b04:	4543      	cmp	r3, r8
 8000b06:	d2e5      	bcs.n	8000ad4 <__udivmoddi4+0x260>
 8000b08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7df      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b14:	4608      	mov	r0, r1
 8000b16:	e7d2      	b.n	8000abe <__udivmoddi4+0x24a>
 8000b18:	4660      	mov	r0, ip
 8000b1a:	e78d      	b.n	8000a38 <__udivmoddi4+0x1c4>
 8000b1c:	4681      	mov	r9, r0
 8000b1e:	e7b9      	b.n	8000a94 <__udivmoddi4+0x220>
 8000b20:	4666      	mov	r6, ip
 8000b22:	e775      	b.n	8000a10 <__udivmoddi4+0x19c>
 8000b24:	4630      	mov	r0, r6
 8000b26:	e74a      	b.n	80009be <__udivmoddi4+0x14a>
 8000b28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b2c:	4439      	add	r1, r7
 8000b2e:	e713      	b.n	8000958 <__udivmoddi4+0xe4>
 8000b30:	3802      	subs	r0, #2
 8000b32:	443c      	add	r4, r7
 8000b34:	e724      	b.n	8000980 <__udivmoddi4+0x10c>
 8000b36:	bf00      	nop

08000b38 <__aeabi_idiv0>:
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <MX_ADC1_Init+0x9c>)
 8000b52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <MX_ADC1_Init+0xa0>)
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000b9e:	f000 ffcd 	bl	8001b3c <HAL_ADC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ba8:	f000 fa46 	bl	8001038 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bac:	2308      	movs	r3, #8
 8000bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_ADC1_Init+0x98>)
 8000bbe:	f001 f90f 	bl	8001de0 <HAL_ADC_ConfigChannel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bc8:	f000 fa36 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000098 	.word	0x20000098
 8000bd8:	40012000 	.word	0x40012000
 8000bdc:	0f000001 	.word	0x0f000001

08000be0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <HAL_ADC_MspInit+0xdc>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d157      	bne.n	8000cb2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <HAL_ADC_MspInit+0xe0>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a2d      	ldr	r2, [pc, #180]	; (8000cc0 <HAL_ADC_MspInit+0xe0>)
 8000c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <HAL_ADC_MspInit+0xe0>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <HAL_ADC_MspInit+0xe0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a26      	ldr	r2, [pc, #152]	; (8000cc0 <HAL_ADC_MspInit+0xe0>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <HAL_ADC_MspInit+0xe0>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481d      	ldr	r0, [pc, #116]	; (8000cc4 <HAL_ADC_MspInit+0xe4>)
 8000c4e:	f001 fff9 	bl	8002c44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c54:	4a1d      	ldr	r2, [pc, #116]	; (8000ccc <HAL_ADC_MspInit+0xec>)
 8000c56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c96:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000c98:	f001 fc64 	bl	8002564 <HAL_DMA_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000ca2:	f000 f9c9 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000caa:	639a      	str	r2, [r3, #56]	; 0x38
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_ADC_MspInit+0xe8>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40012000 	.word	0x40012000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020400 	.word	0x40020400
 8000cc8:	200000e0 	.word	0x200000e0
 8000ccc:	40026410 	.word	0x40026410

08000cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_DMA_Init+0x98>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <MX_DMA_Init+0x98>)
 8000ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_DMA_Init+0x98>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_DMA_Init+0x98>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <MX_DMA_Init+0x98>)
 8000cfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_DMA_Init+0x98>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	200c      	movs	r0, #12
 8000d14:	f001 fbef 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d18:	200c      	movs	r0, #12
 8000d1a:	f001 fc08 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	200e      	movs	r0, #14
 8000d24:	f001 fbe7 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d28:	200e      	movs	r0, #14
 8000d2a:	f001 fc00 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	200f      	movs	r0, #15
 8000d34:	f001 fbdf 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d38:	200f      	movs	r0, #15
 8000d3a:	f001 fbf8 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2010      	movs	r0, #16
 8000d44:	f001 fbd7 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d48:	2010      	movs	r0, #16
 8000d4a:	f001 fbf0 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	2038      	movs	r0, #56	; 0x38
 8000d54:	f001 fbcf 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d58:	2038      	movs	r0, #56	; 0x38
 8000d5a:	f001 fbe8 	bl	800252e <HAL_NVIC_EnableIRQ>

}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a3b      	ldr	r2, [pc, #236]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a2d      	ldr	r2, [pc, #180]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <MX_GPIO_Init+0x10c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df8:	4820      	ldr	r0, [pc, #128]	; (8000e7c <MX_GPIO_Init+0x110>)
 8000dfa:	f002 f8a7 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000e04:	481e      	ldr	r0, [pc, #120]	; (8000e80 <MX_GPIO_Init+0x114>)
 8000e06:	f002 f8a1 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|SPI2_CE_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f243 0106 	movw	r1, #12294	; 0x3006
 8000e10:	481c      	ldr	r0, [pc, #112]	; (8000e84 <MX_GPIO_Init+0x118>)
 8000e12:	f002 f89b 	bl	8002f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4813      	ldr	r0, [pc, #76]	; (8000e7c <MX_GPIO_Init+0x110>)
 8000e30:	f001 ff08 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|Buzzer_Pin;
 8000e34:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <MX_GPIO_Init+0x114>)
 8000e4e:	f001 fef9 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|SPI2_CE_Pin|SPI2_CS_Pin;
 8000e52:	f243 0306 	movw	r3, #12294	; 0x3006
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_GPIO_Init+0x118>)
 8000e6c:	f001 feea 	bl	8002c44 <HAL_GPIO_Init>

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	40020000 	.word	0x40020000
 8000e84:	40020400 	.word	0x40020400

08000e88 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e94:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d013      	beq.n	8000ec8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ea0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ea4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ea8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00b      	beq.n	8000ec8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000eb0:	e000      	b.n	8000eb4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000eb2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000eb4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f9      	beq.n	8000eb2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ebe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ec8:	687b      	ldr	r3, [r7, #4]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	e009      	b.n	8000efc <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	60ba      	str	r2, [r7, #8]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ffc9 	bl	8000e88 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dbf1      	blt.n	8000ee8 <_write+0x12>
	}
	return len;
 8000f04:	687b      	ldr	r3, [r7, #4]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f14:	f000 fd7c 	bl	8001a10 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f18:	f000 f826 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1c:	f7ff ff26 	bl	8000d6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f20:	f7ff fed6 	bl	8000cd0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f24:	f000 f88e 	bl	8001044 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000f28:	f000 faa2 	bl	8001470 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f2c:	f000 fb02 	bl	8001534 <MX_TIM5_Init>
  MX_TIM11_Init();
 8000f30:	f000 fb64 	bl	80015fc <MX_TIM11_Init>
  MX_ADC1_Init();
 8000f34:	f7ff fe02 	bl	8000b3c <MX_ADC1_Init>
  MX_SPI2_Init();
 8000f38:	f000 f8ba 	bl	80010b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  led1_on();
 8000f3c:	f003 fa30 	bl	80043a0 <led1_on>
  led2_on();
 8000f40:	f003 fa3a 	bl	80043b8 <led2_on>
  led3_on();
 8000f44:	f003 fa44 	bl	80043d0 <led3_on>

  buzzer_time(100);
 8000f48:	2064      	movs	r0, #100	; 0x64
 8000f4a:	f003 fa0d 	bl	8004368 <buzzer_time>

  battery_monitor_init();
 8000f4e:	f003 f9d9 	bl	8004304 <battery_monitor_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  battery_monitor_read();
 8000f52:	f003 f9e9 	bl	8004328 <battery_monitor_read>
	  printf("Data\n");
 8000f56:	4803      	ldr	r0, [pc, #12]	; (8000f64 <main+0x54>)
 8000f58:	f003 fae6 	bl	8004528 <puts>
	  HAL_Delay(100);
 8000f5c:	2064      	movs	r0, #100	; 0x64
 8000f5e:	f000 fdc9 	bl	8001af4 <HAL_Delay>
	  battery_monitor_read();
 8000f62:	e7f6      	b.n	8000f52 <main+0x42>
 8000f64:	08004df0 	.word	0x08004df0

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	; 0x50
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0320 	add.w	r3, r7, #32
 8000f72:	2230      	movs	r2, #48	; 0x30
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 fa60 	bl	800443c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <SystemClock_Config+0xc8>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	4a26      	ldr	r2, [pc, #152]	; (8001030 <SystemClock_Config+0xc8>)
 8000f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <SystemClock_Config+0xc8>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	4b21      	ldr	r3, [pc, #132]	; (8001034 <SystemClock_Config+0xcc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a20      	ldr	r2, [pc, #128]	; (8001034 <SystemClock_Config+0xcc>)
 8000fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <SystemClock_Config+0xcc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000fdc:	2364      	movs	r3, #100	; 0x64
 8000fde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 ffc7 	bl	8002f80 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff8:	f000 f81e 	bl	8001038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	2103      	movs	r1, #3
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fa29 	bl	8003470 <HAL_RCC_ClockConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001024:	f000 f808 	bl	8001038 <Error_Handler>
  }
}
 8001028:	bf00      	nop
 800102a:	3750      	adds	r7, #80	; 0x50
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_SPI1_Init+0x64>)
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <MX_SPI1_Init+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001054:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_SPI1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_SPI1_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001074:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_SPI1_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_SPI1_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001090:	220a      	movs	r2, #10
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001096:	f002 fb87 	bl	80037a8 <HAL_SPI_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010a0:	f7ff ffca 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000198 	.word	0x20000198
 80010ac:	40013000 	.word	0x40013000

080010b0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_SPI2_Init+0x64>)
 80010b6:	4a18      	ldr	r2, [pc, #96]	; (8001118 <MX_SPI2_Init+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_SPI2_Init+0x64>)
 80010bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_SPI2_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_SPI2_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_SPI2_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_SPI2_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_SPI2_Init+0x64>)
 80010dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_SPI2_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_SPI2_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_SPI2_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_SPI2_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_SPI2_Init+0x64>)
 80010fc:	220a      	movs	r2, #10
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_SPI2_Init+0x64>)
 8001102:	f002 fb51 	bl	80037a8 <HAL_SPI_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800110c:	f7ff ff94 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000140 	.word	0x20000140
 8001118:	40003800 	.word	0x40003800

0800111c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a32      	ldr	r2, [pc, #200]	; (8001204 <HAL_SPI_MspInit+0xe8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12c      	bne.n	8001198 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <HAL_SPI_MspInit+0xec>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a30      	ldr	r2, [pc, #192]	; (8001208 <HAL_SPI_MspInit+0xec>)
 8001148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_SPI_MspInit+0xec>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_SPI_MspInit+0xec>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a29      	ldr	r2, [pc, #164]	; (8001208 <HAL_SPI_MspInit+0xec>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b27      	ldr	r3, [pc, #156]	; (8001208 <HAL_SPI_MspInit+0xec>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001176:	23e0      	movs	r3, #224	; 0xe0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001186:	2305      	movs	r3, #5
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	481e      	ldr	r0, [pc, #120]	; (800120c <HAL_SPI_MspInit+0xf0>)
 8001192:	f001 fd57 	bl	8002c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001196:	e031      	b.n	80011fc <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_SPI_MspInit+0xf4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d12c      	bne.n	80011fc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_SPI_MspInit+0xec>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <HAL_SPI_MspInit+0xec>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_SPI_MspInit+0xec>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_SPI_MspInit+0xec>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_SPI_MspInit+0xec>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_SPI_MspInit+0xec>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80011da:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80011de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ec:	2305      	movs	r3, #5
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <HAL_SPI_MspInit+0xf8>)
 80011f8:	f001 fd24 	bl	8002c44 <HAL_GPIO_Init>
}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40013000 	.word	0x40013000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000
 8001210:	40003800 	.word	0x40003800
 8001214:	40020400 	.word	0x40020400

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_MspInit+0x4c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_MspInit+0x4c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x4c>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 fbfe 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <DMA1_Stream1_IRQHandler+0x10>)
 80012c2:	f001 fa55 	bl	8002770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200003a0 	.word	0x200003a0

080012d0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <DMA1_Stream3_IRQHandler+0x10>)
 80012d6:	f001 fa4b 	bl	8002770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000250 	.word	0x20000250

080012e4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <DMA1_Stream4_IRQHandler+0x10>)
 80012ea:	f001 fa41 	bl	8002770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000340 	.word	0x20000340

080012f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <DMA1_Stream5_IRQHandler+0x10>)
 80012fe:	f001 fa37 	bl	8002770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001f0 	.word	0x200001f0

0800130c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001312:	f002 fb70 	bl	80039f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200002f8 	.word	0x200002f8

08001320 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <DMA2_Stream0_IRQHandler+0x10>)
 8001326:	f001 fa23 	bl	8002770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200000e0 	.word	0x200000e0

08001334 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	e00a      	b.n	800135c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001346:	f3af 8000 	nop.w
 800134a:	4601      	mov	r1, r0
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	60ba      	str	r2, [r7, #8]
 8001352:	b2ca      	uxtb	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf0      	blt.n	8001346 <_read+0x12>
	}

return len;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_close>:
	}
	return len;
}

int _close(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	return -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001396:	605a      	str	r2, [r3, #4]
	return 0;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_isatty>:

int _isatty(int file)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	return 1;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
	return 0;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f002 ffee 	bl	80043e8 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20020000 	.word	0x20020000
 8001438:	00000400 	.word	0x00000400
 800143c:	2000008c 	.word	0x2000008c
 8001440:	20000468 	.word	0x20000468

08001444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <SystemInit+0x28>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a07      	ldr	r2, [pc, #28]	; (800146c <SystemInit+0x28>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <SystemInit+0x28>)
 800145a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800145e:	609a      	str	r2, [r3, #8]
#endif
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001476:	f107 0320 	add.w	r3, r7, #32
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <MX_TIM2_Init+0xc0>)
 8001494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001498:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_TIM2_Init+0xc0>)
 800149c:	2207      	movs	r2, #7
 800149e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <MX_TIM2_Init+0xc0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_TIM2_Init+0xc0>)
 80014a8:	2214      	movs	r2, #20
 80014aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <MX_TIM2_Init+0xc0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_TIM2_Init+0xc0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014b8:	481d      	ldr	r0, [pc, #116]	; (8001530 <MX_TIM2_Init+0xc0>)
 80014ba:	f002 fa4d 	bl	8003958 <HAL_TIM_PWM_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80014c4:	f7ff fdb8 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	4619      	mov	r1, r3
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <MX_TIM2_Init+0xc0>)
 80014d8:	f002 fe92 	bl	8004200 <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80014e2:	f7ff fda9 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e6:	2360      	movs	r3, #96	; 0x60
 80014e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <MX_TIM2_Init+0xc0>)
 80014fe:	f002 fb83 	bl	8003c08 <HAL_TIM_PWM_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001508:	f7ff fd96 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2208      	movs	r2, #8
 8001510:	4619      	mov	r1, r3
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <MX_TIM2_Init+0xc0>)
 8001514:	f002 fb78 	bl	8003c08 <HAL_TIM_PWM_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800151e:	f7ff fd8b 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <MX_TIM2_Init+0xc0>)
 8001524:	f000 f9ec 	bl	8001900 <HAL_TIM_MspPostInit>

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000400 	.word	0x20000400

08001534 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001556:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <MX_TIM5_Init+0xc0>)
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <MX_TIM5_Init+0xc4>)
 800155a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8-1;
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <MX_TIM5_Init+0xc0>)
 800155e:	2207      	movs	r2, #7
 8001560:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <MX_TIM5_Init+0xc0>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20;
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <MX_TIM5_Init+0xc0>)
 800156a:	2214      	movs	r2, #20
 800156c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_TIM5_Init+0xc0>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_TIM5_Init+0xc0>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800157a:	481e      	ldr	r0, [pc, #120]	; (80015f4 <MX_TIM5_Init+0xc0>)
 800157c:	f002 f9ec 	bl	8003958 <HAL_TIM_PWM_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001586:	f7ff fd57 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001592:	f107 0320 	add.w	r3, r7, #32
 8001596:	4619      	mov	r1, r3
 8001598:	4816      	ldr	r0, [pc, #88]	; (80015f4 <MX_TIM5_Init+0xc0>)
 800159a:	f002 fe31 	bl	8004200 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80015a4:	f7ff fd48 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a8:	2360      	movs	r3, #96	; 0x60
 80015aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2204      	movs	r2, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_TIM5_Init+0xc0>)
 80015c0:	f002 fb22 	bl	8003c08 <HAL_TIM_PWM_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80015ca:	f7ff fd35 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	220c      	movs	r2, #12
 80015d2:	4619      	mov	r1, r3
 80015d4:	4807      	ldr	r0, [pc, #28]	; (80015f4 <MX_TIM5_Init+0xc0>)
 80015d6:	f002 fb17 	bl	8003c08 <HAL_TIM_PWM_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80015e0:	f7ff fd2a 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <MX_TIM5_Init+0xc0>)
 80015e6:	f000 f98b 	bl	8001900 <HAL_TIM_MspPostInit>

}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	; 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200002b0 	.word	0x200002b0
 80015f8:	40000c00 	.word	0x40000c00

080015fc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_TIM11_Init+0x40>)
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <MX_TIM11_Init+0x44>)
 8001604:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <MX_TIM11_Init+0x40>)
 8001608:	2263      	movs	r2, #99	; 0x63
 800160a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_TIM11_Init+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 889-1;
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_TIM11_Init+0x40>)
 8001614:	f44f 725e 	mov.w	r2, #888	; 0x378
 8001618:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_TIM11_Init+0x40>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_TIM11_Init+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_TIM11_Init+0x40>)
 8001628:	f002 f947 	bl	80038ba <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001632:	f7ff fd01 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002f8 	.word	0x200002f8
 8001640:	40014800 	.word	0x40014800

08001644 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001654:	f040 8087 	bne.w	8001766 <HAL_TIM_PWM_MspInit+0x122>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b8a      	ldr	r3, [pc, #552]	; (8001888 <HAL_TIM_PWM_MspInit+0x244>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a89      	ldr	r2, [pc, #548]	; (8001888 <HAL_TIM_PWM_MspInit+0x244>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b87      	ldr	r3, [pc, #540]	; (8001888 <HAL_TIM_PWM_MspInit+0x244>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001674:	4b85      	ldr	r3, [pc, #532]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 8001676:	4a86      	ldr	r2, [pc, #536]	; (8001890 <HAL_TIM_PWM_MspInit+0x24c>)
 8001678:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 800167a:	4b84      	ldr	r3, [pc, #528]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 800167c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001680:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001682:	4b82      	ldr	r3, [pc, #520]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001688:	4b80      	ldr	r3, [pc, #512]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800168e:	4b7f      	ldr	r3, [pc, #508]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 8001690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001694:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001696:	4b7d      	ldr	r3, [pc, #500]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 8001698:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800169c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800169e:	4b7b      	ldr	r3, [pc, #492]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 80016a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016a4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80016a6:	4b79      	ldr	r3, [pc, #484]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80016ac:	4b77      	ldr	r3, [pc, #476]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016b2:	4b76      	ldr	r3, [pc, #472]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 80016b4:	2204      	movs	r2, #4
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80016b8:	4b74      	ldr	r3, [pc, #464]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80016be:	4b73      	ldr	r3, [pc, #460]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016c4:	4b71      	ldr	r3, [pc, #452]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80016ca:	4870      	ldr	r0, [pc, #448]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 80016cc:	f000 ff4a 	bl	8002564 <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_TIM_PWM_MspInit+0x96>
    {
      Error_Handler();
 80016d6:	f7ff fcaf 	bl	8001038 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a6b      	ldr	r2, [pc, #428]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 80016de:	625a      	str	r2, [r3, #36]	; 0x24
 80016e0:	4a6a      	ldr	r2, [pc, #424]	; (800188c <HAL_TIM_PWM_MspInit+0x248>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 80016e6:	4b6b      	ldr	r3, [pc, #428]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 80016e8:	4a6b      	ldr	r2, [pc, #428]	; (8001898 <HAL_TIM_PWM_MspInit+0x254>)
 80016ea:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 80016ec:	4b69      	ldr	r3, [pc, #420]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 80016ee:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016f2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016f4:	4b67      	ldr	r3, [pc, #412]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 80016f6:	2240      	movs	r2, #64	; 0x40
 80016f8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fa:	4b66      	ldr	r3, [pc, #408]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001700:	4b64      	ldr	r3, [pc, #400]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 8001702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001706:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001708:	4b62      	ldr	r3, [pc, #392]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 800170a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800170e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001710:	4b60      	ldr	r3, [pc, #384]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 8001712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001716:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8001718:	4b5e      	ldr	r3, [pc, #376]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 800171e:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001724:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 8001726:	2204      	movs	r2, #4
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800172a:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 800172c:	2200      	movs	r2, #0
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8001730:	4b58      	ldr	r3, [pc, #352]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 8001732:	2200      	movs	r2, #0
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001736:	4b57      	ldr	r3, [pc, #348]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 8001738:	2200      	movs	r2, #0
 800173a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 800173c:	4855      	ldr	r0, [pc, #340]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 800173e:	f000 ff11 	bl	8002564 <HAL_DMA_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_TIM_PWM_MspInit+0x108>
    {
      Error_Handler();
 8001748:	f7ff fc76 	bl	8001038 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a51      	ldr	r2, [pc, #324]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
 8001752:	4a50      	ldr	r2, [pc, #320]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 800175c:	621a      	str	r2, [r3, #32]
 800175e:	4a4d      	ldr	r2, [pc, #308]	; (8001894 <HAL_TIM_PWM_MspInit+0x250>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001764:	e08b      	b.n	800187e <HAL_TIM_PWM_MspInit+0x23a>
  else if(tim_pwmHandle->Instance==TIM5)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a4c      	ldr	r2, [pc, #304]	; (800189c <HAL_TIM_PWM_MspInit+0x258>)
 800176c:	4293      	cmp	r3, r2
 800176e:	f040 8086 	bne.w	800187e <HAL_TIM_PWM_MspInit+0x23a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b44      	ldr	r3, [pc, #272]	; (8001888 <HAL_TIM_PWM_MspInit+0x244>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a43      	ldr	r2, [pc, #268]	; (8001888 <HAL_TIM_PWM_MspInit+0x244>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <HAL_TIM_PWM_MspInit+0x244>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 800178e:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 8001790:	4a44      	ldr	r2, [pc, #272]	; (80018a4 <HAL_TIM_PWM_MspInit+0x260>)
 8001792:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8001794:	4b42      	ldr	r3, [pc, #264]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 8001796:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800179a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800179c:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 800179e:	2240      	movs	r2, #64	; 0x40
 80017a0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a2:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80017a8:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ae:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017b0:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017b8:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017be:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 80017c0:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80017c6:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017cc:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017ce:	2204      	movs	r2, #4
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80017d2:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80017d8:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80017e4:	482e      	ldr	r0, [pc, #184]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017e6:	f000 febd 	bl	8002564 <HAL_DMA_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_TIM_PWM_MspInit+0x1b0>
      Error_Handler();
 80017f0:	f7ff fc22 	bl	8001038 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a2a      	ldr	r2, [pc, #168]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
 80017fa:	4a29      	ldr	r2, [pc, #164]	; (80018a0 <HAL_TIM_PWM_MspInit+0x25c>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 8001802:	4a2a      	ldr	r2, [pc, #168]	; (80018ac <HAL_TIM_PWM_MspInit+0x268>)
 8001804:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8001806:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 8001808:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800180c:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 8001810:	2240      	movs	r2, #64	; 0x40
 8001812:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 800181c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001820:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 8001824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001828:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 800182c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001830:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 8001834:	2200      	movs	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 8001840:	2204      	movs	r2, #4
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 8001846:	2200      	movs	r2, #0
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 800184c:	2200      	movs	r2, #0
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 8001852:	2200      	movs	r2, #0
 8001854:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8001856:	4814      	ldr	r0, [pc, #80]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 8001858:	f000 fe84 	bl	8002564 <HAL_DMA_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_TIM_PWM_MspInit+0x222>
      Error_Handler();
 8001862:	f7ff fbe9 	bl	8001038 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
 800186c:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 8001876:	639a      	str	r2, [r3, #56]	; 0x38
 8001878:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <HAL_TIM_PWM_MspInit+0x264>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	200001f0 	.word	0x200001f0
 8001890:	40026088 	.word	0x40026088
 8001894:	200003a0 	.word	0x200003a0
 8001898:	40026028 	.word	0x40026028
 800189c:	40000c00 	.word	0x40000c00
 80018a0:	20000340 	.word	0x20000340
 80018a4:	40026070 	.word	0x40026070
 80018a8:	20000250 	.word	0x20000250
 80018ac:	40026058 	.word	0x40026058

080018b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_TIM_Base_MspInit+0x48>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d115      	bne.n	80018ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_TIM_Base_MspInit+0x4c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <HAL_TIM_Base_MspInit+0x4c>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_TIM_Base_MspInit+0x4c>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	201a      	movs	r0, #26
 80018e4:	f000 fe07 	bl	80024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80018e8:	201a      	movs	r0, #26
 80018ea:	f000 fe20 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40014800 	.word	0x40014800
 80018fc:	40023800 	.word	0x40023800

08001900 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001920:	d11e      	bne.n	8001960 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_TIM_MspPostInit+0xb0>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <HAL_TIM_MspPostInit+0xb0>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <HAL_TIM_MspPostInit+0xb0>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_4_Pin|MOTOR_1_Pin;
 800193e:	2305      	movs	r3, #5
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800194e:	2301      	movs	r3, #1
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	4816      	ldr	r0, [pc, #88]	; (80019b4 <HAL_TIM_MspPostInit+0xb4>)
 800195a:	f001 f973 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800195e:	e022      	b.n	80019a6 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_TIM_MspPostInit+0xb8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d11d      	bne.n	80019a6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_TIM_MspPostInit+0xb0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <HAL_TIM_MspPostInit+0xb0>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_TIM_MspPostInit+0xb0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_2_Pin;
 8001986:	230a      	movs	r3, #10
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001996:	2302      	movs	r3, #2
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <HAL_TIM_MspPostInit+0xb4>)
 80019a2:	f001 f94f 	bl	8002c44 <HAL_GPIO_Init>
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40000c00 	.word	0x40000c00

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019c2:	e003      	b.n	80019cc <LoopCopyDataInit>

080019c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ca:	3104      	adds	r1, #4

080019cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019cc:	480b      	ldr	r0, [pc, #44]	; (80019fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019d4:	d3f6      	bcc.n	80019c4 <CopyDataInit>
  ldr  r2, =_sbss
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019d8:	e002      	b.n	80019e0 <LoopFillZerobss>

080019da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019dc:	f842 3b04 	str.w	r3, [r2], #4

080019e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019e4:	d3f9      	bcc.n	80019da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019e6:	f7ff fd2d 	bl	8001444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f002 fd03 	bl	80043f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff fa8f 	bl	8000f10 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019f8:	08004e84 	.word	0x08004e84
  ldr  r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a00:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001a04:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001a08:	20000464 	.word	0x20000464

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <HAL_Init+0x40>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_Init+0x40>)
 8001a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_Init+0x40>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 fd51 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fbe8 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fd69 	bl	800254a <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 fd31 	bl	80024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x20>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_IncTick+0x24>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <HAL_IncTick+0x24>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000448 	.word	0x20000448

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000448 	.word	0x20000448

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff ffee 	bl	8001adc <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_Delay+0x44>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffde 	bl	8001adc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000008 	.word	0x20000008

08001b3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e033      	b.n	8001bba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff f840 	bl	8000be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b82:	f023 0302 	bic.w	r3, r3, #2
 8001b86:	f043 0202 	orr.w	r2, r3, #2
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fa58 	bl	8002044 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f023 0303 	bic.w	r3, r3, #3
 8001ba2:	f043 0201 	orr.w	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8001baa:	e001      	b.n	8001bb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_Start_DMA+0x1e>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e0ce      	b.n	8001d80 <HAL_ADC_Start_DMA+0x1bc>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d018      	beq.n	8001c2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c08:	4b5f      	ldr	r3, [pc, #380]	; (8001d88 <HAL_ADC_Start_DMA+0x1c4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a5f      	ldr	r2, [pc, #380]	; (8001d8c <HAL_ADC_Start_DMA+0x1c8>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0c9a      	lsrs	r2, r3, #18
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c1c:	e002      	b.n	8001c24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f9      	bne.n	8001c1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c38:	d107      	bne.n	8001c4a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c48:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	f040 8086 	bne.w	8001d66 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c98:	d106      	bne.n	8001ca8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f023 0206 	bic.w	r2, r3, #6
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
 8001ca6:	e002      	b.n	8001cae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb6:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <HAL_ADC_Start_DMA+0x1cc>)
 8001cb8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	4a35      	ldr	r2, [pc, #212]	; (8001d94 <HAL_ADC_Start_DMA+0x1d0>)
 8001cc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc6:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <HAL_ADC_Start_DMA+0x1d4>)
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cce:	4a33      	ldr	r2, [pc, #204]	; (8001d9c <HAL_ADC_Start_DMA+0x1d8>)
 8001cd0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cda:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001cea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cfa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	334c      	adds	r3, #76	; 0x4c
 8001d06:	4619      	mov	r1, r3
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f000 fcd8 	bl	80026c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10f      	bne.n	8001d3c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d129      	bne.n	8001d7e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	e020      	b.n	8001d7e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_ADC_Start_DMA+0x1dc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d11b      	bne.n	8001d7e <HAL_ADC_Start_DMA+0x1ba>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d114      	bne.n	8001d7e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	e00b      	b.n	8001d7e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f043 0210 	orr.w	r2, r3, #16
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	431bde83 	.word	0x431bde83
 8001d90:	40012300 	.word	0x40012300
 8001d94:	0800223d 	.word	0x0800223d
 8001d98:	080022f7 	.word	0x080022f7
 8001d9c:	08002313 	.word	0x08002313
 8001da0:	40012000 	.word	0x40012000

08001da4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1c>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e113      	b.n	8002024 <HAL_ADC_ConfigChannel+0x244>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b09      	cmp	r3, #9
 8001e0a:	d925      	bls.n	8001e58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68d9      	ldr	r1, [r3, #12]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b1e      	subs	r3, #30
 8001e22:	2207      	movs	r2, #7
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43da      	mvns	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	400a      	ands	r2, r1
 8001e30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68d9      	ldr	r1, [r3, #12]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	4603      	mov	r3, r0
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4403      	add	r3, r0
 8001e4a:	3b1e      	subs	r3, #30
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	e022      	b.n	8001e9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6919      	ldr	r1, [r3, #16]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	400a      	ands	r2, r1
 8001e7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6919      	ldr	r1, [r3, #16]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4403      	add	r3, r0
 8001e94:	409a      	lsls	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d824      	bhi.n	8001ef0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b05      	subs	r3, #5
 8001eb8:	221f      	movs	r2, #31
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b05      	subs	r3, #5
 8001ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
 8001eee:	e04c      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	d824      	bhi.n	8001f42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b23      	subs	r3, #35	; 0x23
 8001f0a:	221f      	movs	r2, #31
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43da      	mvns	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3b23      	subs	r3, #35	; 0x23
 8001f34:	fa00 f203 	lsl.w	r2, r0, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f40:	e023      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b41      	subs	r3, #65	; 0x41
 8001f54:	221f      	movs	r2, #31
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	400a      	ands	r2, r1
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b41      	subs	r3, #65	; 0x41
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f8a:	4b29      	ldr	r3, [pc, #164]	; (8002030 <HAL_ADC_ConfigChannel+0x250>)
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a28      	ldr	r2, [pc, #160]	; (8002034 <HAL_ADC_ConfigChannel+0x254>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d10f      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x1d8>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b12      	cmp	r3, #18
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_ADC_ConfigChannel+0x254>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d12b      	bne.n	800201a <HAL_ADC_ConfigChannel+0x23a>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_ADC_ConfigChannel+0x258>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <HAL_ADC_ConfigChannel+0x1f4>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b11      	cmp	r3, #17
 8001fd2:	d122      	bne.n	800201a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a11      	ldr	r2, [pc, #68]	; (8002038 <HAL_ADC_ConfigChannel+0x258>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d111      	bne.n	800201a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_ADC_ConfigChannel+0x25c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a11      	ldr	r2, [pc, #68]	; (8002040 <HAL_ADC_ConfigChannel+0x260>)
 8001ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8002000:	0c9a      	lsrs	r2, r3, #18
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800200c:	e002      	b.n	8002014 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3b01      	subs	r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f9      	bne.n	800200e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40012300 	.word	0x40012300
 8002034:	40012000 	.word	0x40012000
 8002038:	10000012 	.word	0x10000012
 800203c:	20000000 	.word	0x20000000
 8002040:	431bde83 	.word	0x431bde83

08002044 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204c:	4b79      	ldr	r3, [pc, #484]	; (8002234 <ADC_Init+0x1f0>)
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	431a      	orrs	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	021a      	lsls	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800209c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6899      	ldr	r1, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	4a58      	ldr	r2, [pc, #352]	; (8002238 <ADC_Init+0x1f4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d022      	beq.n	8002122 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800210c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	e00f      	b.n	8002142 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002140:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0202 	bic.w	r2, r2, #2
 8002150:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7e1b      	ldrb	r3, [r3, #24]
 800215c:	005a      	lsls	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01b      	beq.n	80021a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800218e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6859      	ldr	r1, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	3b01      	subs	r3, #1
 800219c:	035a      	lsls	r2, r3, #13
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	e007      	b.n	80021b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	051a      	lsls	r2, r3, #20
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6899      	ldr	r1, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021fa:	025a      	lsls	r2, r3, #9
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6899      	ldr	r1, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	029a      	lsls	r2, r3, #10
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	40012300 	.word	0x40012300
 8002238:	0f000001 	.word	0x0f000001

0800223c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002252:	2b00      	cmp	r3, #0
 8002254:	d13c      	bne.n	80022d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d12b      	bne.n	80022c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002274:	2b00      	cmp	r3, #0
 8002276:	d127      	bne.n	80022c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002290:	2b00      	cmp	r3, #0
 8002292:	d119      	bne.n	80022c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0220 	bic.w	r2, r2, #32
 80022a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d105      	bne.n	80022c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f7ff fd6b 	bl	8001da4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022ce:	e00e      	b.n	80022ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7ff fd75 	bl	8001dcc <HAL_ADC_ErrorCallback>
}
 80022e2:	e004      	b.n	80022ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff fd57 	bl	8001db8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f043 0204 	orr.w	r2, r3, #4
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7ff fd4a 	bl	8001dcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <__NVIC_SetPriorityGrouping>:
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_GetPriorityGrouping>:
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_EnableIRQ>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4907      	ldr	r1, [pc, #28]	; (80023dc <__NVIC_EnableIRQ+0x38>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <__NVIC_SetPriority>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db0a      	blt.n	800240a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	490c      	ldr	r1, [pc, #48]	; (800242c <__NVIC_SetPriority+0x4c>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	440b      	add	r3, r1
 8002404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002408:	e00a      	b.n	8002420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4908      	ldr	r1, [pc, #32]	; (8002430 <__NVIC_SetPriority+0x50>)
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	3b04      	subs	r3, #4
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	440b      	add	r3, r1
 800241e:	761a      	strb	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000e100 	.word	0xe000e100
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <NVIC_EncodePriority>:
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f1c3 0307 	rsb	r3, r3, #7
 800244e:	2b04      	cmp	r3, #4
 8002450:	bf28      	it	cs
 8002452:	2304      	movcs	r3, #4
 8002454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3304      	adds	r3, #4
 800245a:	2b06      	cmp	r3, #6
 800245c:	d902      	bls.n	8002464 <NVIC_EncodePriority+0x30>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3b03      	subs	r3, #3
 8002462:	e000      	b.n	8002466 <NVIC_EncodePriority+0x32>
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	401a      	ands	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800247c:	f04f 31ff 	mov.w	r1, #4294967295
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43d9      	mvns	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	4313      	orrs	r3, r2
}
 800248e:	4618      	mov	r0, r3
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <SysTick_Config>:
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f7ff ff8e 	bl	80023e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	; (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff29 	bl	8002340 <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff3e 	bl	8002388 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff8e 	bl	8002434 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5d 	bl	80023e0 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff31 	bl	80023a4 <__NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffa2 	bl	800249c <SysTick_Config>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff fab4 	bl	8001adc <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e099      	b.n	80026b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a0:	e00f      	b.n	80025c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a2:	f7ff fa9b 	bl	8001adc <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d908      	bls.n	80025c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2203      	movs	r2, #3
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e078      	b.n	80026b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e8      	bne.n	80025a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_DMA_Init+0x158>)
 80025dc:	4013      	ands	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2b04      	cmp	r3, #4
 800261a:	d107      	bne.n	800262c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4313      	orrs	r3, r2
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f023 0307 	bic.w	r3, r3, #7
 8002642:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2b04      	cmp	r3, #4
 8002654:	d117      	bne.n	8002686 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00e      	beq.n	8002686 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fa6f 	bl	8002b4c <DMA_CheckFifoParam>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2240      	movs	r2, #64	; 0x40
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002682:	2301      	movs	r3, #1
 8002684:	e016      	b.n	80026b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa26 	bl	8002ae0 <DMA_CalcBaseAndBitshift>
 8002694:	4603      	mov	r3, r0
 8002696:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	223f      	movs	r2, #63	; 0x3f
 800269e:	409a      	lsls	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	f010803f 	.word	0xf010803f

080026c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_DMA_Start_IT+0x26>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e040      	b.n	8002768 <HAL_DMA_Start_IT+0xa8>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d12f      	bne.n	800275a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2202      	movs	r2, #2
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f9b8 	bl	8002a84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	223f      	movs	r2, #63	; 0x3f
 800271a:	409a      	lsls	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0216 	orr.w	r2, r2, #22
 800272e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0208 	orr.w	r2, r2, #8
 8002746:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e005      	b.n	8002766 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002762:	2302      	movs	r3, #2
 8002764:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002766:	7dfb      	ldrb	r3, [r7, #23]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800277c:	4b92      	ldr	r3, [pc, #584]	; (80029c8 <HAL_DMA_IRQHandler+0x258>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a92      	ldr	r2, [pc, #584]	; (80029cc <HAL_DMA_IRQHandler+0x25c>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0a9b      	lsrs	r3, r3, #10
 8002788:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	2208      	movs	r2, #8
 800279c:	409a      	lsls	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01a      	beq.n	80027dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0204 	bic.w	r2, r2, #4
 80027c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	2208      	movs	r2, #8
 80027ca:	409a      	lsls	r2, r3
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	2201      	movs	r2, #1
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d012      	beq.n	8002812 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	2201      	movs	r2, #1
 8002800:	409a      	lsls	r2, r3
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f043 0202 	orr.w	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	2204      	movs	r2, #4
 8002818:	409a      	lsls	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d012      	beq.n	8002848 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00b      	beq.n	8002848 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	2204      	movs	r2, #4
 8002836:	409a      	lsls	r2, r3
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	f043 0204 	orr.w	r2, r3, #4
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	2210      	movs	r2, #16
 800284e:	409a      	lsls	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d043      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d03c      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2210      	movs	r2, #16
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d018      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d108      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d024      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
 800289e:	e01f      	b.n	80028e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01b      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
 80028b0:	e016      	b.n	80028e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0208 	bic.w	r2, r2, #8
 80028ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	2220      	movs	r2, #32
 80028e6:	409a      	lsls	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 808e 	beq.w	8002a0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 8086 	beq.w	8002a0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	2220      	movs	r2, #32
 8002908:	409a      	lsls	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b05      	cmp	r3, #5
 8002918:	d136      	bne.n	8002988 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0216 	bic.w	r2, r2, #22
 8002928:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002938:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d103      	bne.n	800294a <HAL_DMA_IRQHandler+0x1da>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0208 	bic.w	r2, r2, #8
 8002958:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295e:	223f      	movs	r2, #63	; 0x3f
 8002960:	409a      	lsls	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297a:	2b00      	cmp	r3, #0
 800297c:	d07d      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
        }
        return;
 8002986:	e078      	b.n	8002a7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01c      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d108      	bne.n	80029b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d030      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
 80029b4:	e02b      	b.n	8002a0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d027      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
 80029c6:	e022      	b.n	8002a0e <HAL_DMA_IRQHandler+0x29e>
 80029c8:	20000000 	.word	0x20000000
 80029cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0210 	bic.w	r2, r2, #16
 80029ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d032      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d022      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2205      	movs	r2, #5
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d307      	bcc.n	8002a56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f2      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x2ca>
 8002a54:	e000      	b.n	8002a58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a56:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
 8002a78:	e000      	b.n	8002a7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a7a:	bf00      	nop
    }
  }
}
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop

08002a84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d108      	bne.n	8002ac4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ac2:	e007      	b.n	8002ad4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	3b10      	subs	r3, #16
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <DMA_CalcBaseAndBitshift+0x64>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002afa:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <DMA_CalcBaseAndBitshift+0x68>)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d909      	bls.n	8002b22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	1d1a      	adds	r2, r3, #4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b20:	e007      	b.n	8002b32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b2a:	f023 0303 	bic.w	r3, r3, #3
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	aaaaaaab 	.word	0xaaaaaaab
 8002b48:	08004e08 	.word	0x08004e08

08002b4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11f      	bne.n	8002ba6 <DMA_CheckFifoParam+0x5a>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d856      	bhi.n	8002c1a <DMA_CheckFifoParam+0xce>
 8002b6c:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <DMA_CheckFifoParam+0x28>)
 8002b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002b85 	.word	0x08002b85
 8002b78:	08002b97 	.word	0x08002b97
 8002b7c:	08002b85 	.word	0x08002b85
 8002b80:	08002c1b 	.word	0x08002c1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d046      	beq.n	8002c1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b94:	e043      	b.n	8002c1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b9e:	d140      	bne.n	8002c22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba4:	e03d      	b.n	8002c22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bae:	d121      	bne.n	8002bf4 <DMA_CheckFifoParam+0xa8>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d837      	bhi.n	8002c26 <DMA_CheckFifoParam+0xda>
 8002bb6:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <DMA_CheckFifoParam+0x70>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002bcd 	.word	0x08002bcd
 8002bc0:	08002bd3 	.word	0x08002bd3
 8002bc4:	08002bcd 	.word	0x08002bcd
 8002bc8:	08002be5 	.word	0x08002be5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd0:	e030      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d025      	beq.n	8002c2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be2:	e022      	b.n	8002c2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bec:	d11f      	bne.n	8002c2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bf2:	e01c      	b.n	8002c2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d903      	bls.n	8002c02 <DMA_CheckFifoParam+0xb6>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d003      	beq.n	8002c08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c00:	e018      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
      break;
 8002c06:	e015      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      break;
 8002c18:	e00b      	b.n	8002c32 <DMA_CheckFifoParam+0xe6>
      break;
 8002c1a:	bf00      	nop
 8002c1c:	e00a      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;
 8002c1e:	bf00      	nop
 8002c20:	e008      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;
 8002c22:	bf00      	nop
 8002c24:	e006      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;
 8002c26:	bf00      	nop
 8002c28:	e004      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e002      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c2e:	bf00      	nop
 8002c30:	e000      	b.n	8002c34 <DMA_CheckFifoParam+0xe8>
      break;
 8002c32:	bf00      	nop
    }
  } 
  
  return status; 
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	e159      	b.n	8002f14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c60:	2201      	movs	r2, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	f040 8148 	bne.w	8002f0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d005      	beq.n	8002c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d130      	bne.n	8002cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ccc:	2201      	movs	r2, #1
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 0201 	and.w	r2, r3, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d017      	beq.n	8002d34 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d123      	bne.n	8002d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	08da      	lsrs	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3208      	adds	r2, #8
 8002d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	220f      	movs	r2, #15
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	08da      	lsrs	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3208      	adds	r2, #8
 8002d82:	69b9      	ldr	r1, [r7, #24]
 8002d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0203 	and.w	r2, r3, #3
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a2 	beq.w	8002f0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <HAL_GPIO_Init+0x2e8>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	4a56      	ldr	r2, [pc, #344]	; (8002f2c <HAL_GPIO_Init+0x2e8>)
 8002dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dda:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <HAL_GPIO_Init+0x2e8>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de6:	4a52      	ldr	r2, [pc, #328]	; (8002f30 <HAL_GPIO_Init+0x2ec>)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a49      	ldr	r2, [pc, #292]	; (8002f34 <HAL_GPIO_Init+0x2f0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d019      	beq.n	8002e46 <HAL_GPIO_Init+0x202>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a48      	ldr	r2, [pc, #288]	; (8002f38 <HAL_GPIO_Init+0x2f4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_GPIO_Init+0x1fe>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a47      	ldr	r2, [pc, #284]	; (8002f3c <HAL_GPIO_Init+0x2f8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00d      	beq.n	8002e3e <HAL_GPIO_Init+0x1fa>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a46      	ldr	r2, [pc, #280]	; (8002f40 <HAL_GPIO_Init+0x2fc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <HAL_GPIO_Init+0x1f6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a45      	ldr	r2, [pc, #276]	; (8002f44 <HAL_GPIO_Init+0x300>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_GPIO_Init+0x1f2>
 8002e32:	2304      	movs	r3, #4
 8002e34:	e008      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e36:	2307      	movs	r3, #7
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e004      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x204>
 8002e46:	2300      	movs	r3, #0
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f002 0203 	and.w	r2, r2, #3
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4093      	lsls	r3, r2
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e58:	4935      	ldr	r1, [pc, #212]	; (8002f30 <HAL_GPIO_Init+0x2ec>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e66:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e8a:	4a2f      	ldr	r2, [pc, #188]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eb4:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ede:	4a1a      	ldr	r2, [pc, #104]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f08:	4a0f      	ldr	r2, [pc, #60]	; (8002f48 <HAL_GPIO_Init+0x304>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	f67f aea2 	bls.w	8002c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020c00 	.word	0x40020c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40013c00 	.word	0x40013c00

08002f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f5c:	787b      	ldrb	r3, [r7, #1]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f68:	e003      	b.n	8002f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	041a      	lsls	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	619a      	str	r2, [r3, #24]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e264      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d075      	beq.n	800308a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f9e:	4ba3      	ldr	r3, [pc, #652]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002faa:	4ba0      	ldr	r3, [pc, #640]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d112      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb6:	4b9d      	ldr	r3, [pc, #628]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc2:	d10b      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	4b99      	ldr	r3, [pc, #612]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d05b      	beq.n	8003088 <HAL_RCC_OscConfig+0x108>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d157      	bne.n	8003088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e23f      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x74>
 8002fe6:	4b91      	ldr	r3, [pc, #580]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a90      	ldr	r2, [pc, #576]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e01d      	b.n	8003030 <HAL_RCC_OscConfig+0xb0>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0x98>
 8002ffe:	4b8b      	ldr	r3, [pc, #556]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a8a      	ldr	r2, [pc, #552]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4b88      	ldr	r3, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a87      	ldr	r2, [pc, #540]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e00b      	b.n	8003030 <HAL_RCC_OscConfig+0xb0>
 8003018:	4b84      	ldr	r3, [pc, #528]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a83      	ldr	r2, [pc, #524]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800301e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b81      	ldr	r3, [pc, #516]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a80      	ldr	r2, [pc, #512]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800302a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d013      	beq.n	8003060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fd50 	bl	8001adc <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003040:	f7fe fd4c 	bl	8001adc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e204      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b76      	ldr	r3, [pc, #472]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0xc0>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe fd3c 	bl	8001adc <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003068:	f7fe fd38 	bl	8001adc <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e1f0      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	4b6c      	ldr	r3, [pc, #432]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0xe8>
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d063      	beq.n	800315e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003096:	4b65      	ldr	r3, [pc, #404]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a2:	4b62      	ldr	r3, [pc, #392]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d11c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ae:	4b5f      	ldr	r3, [pc, #380]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d116      	bne.n	80030e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ba:	4b5c      	ldr	r3, [pc, #368]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_RCC_OscConfig+0x152>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e1c4      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d2:	4b56      	ldr	r3, [pc, #344]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4952      	ldr	r1, [pc, #328]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	e03a      	b.n	800315e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f0:	4b4f      	ldr	r3, [pc, #316]	; (8003230 <HAL_RCC_OscConfig+0x2b0>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fe fcf1 	bl	8001adc <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fe:	f7fe fced 	bl	8001adc <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e1a5      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	4b46      	ldr	r3, [pc, #280]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311c:	4b43      	ldr	r3, [pc, #268]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4940      	ldr	r1, [pc, #256]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
 8003130:	e015      	b.n	800315e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_RCC_OscConfig+0x2b0>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe fcd0 	bl	8001adc <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003140:	f7fe fccc 	bl	8001adc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e184      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d030      	beq.n	80031cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d016      	beq.n	80031a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003172:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCC_OscConfig+0x2b4>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fe fcb0 	bl	8001adc <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003180:	f7fe fcac 	bl	8001adc <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e164      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x200>
 800319e:	e015      	b.n	80031cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_OscConfig+0x2b4>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a6:	f7fe fc99 	bl	8001adc <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ae:	f7fe fc95 	bl	8001adc <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e14d      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a0 	beq.w	800331a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10f      	bne.n	800320a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003206:	2301      	movs	r3, #1
 8003208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_OscConfig+0x2b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d121      	bne.n	800325a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_RCC_OscConfig+0x2b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_RCC_OscConfig+0x2b8>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003222:	f7fe fc5b 	bl	8001adc <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	e011      	b.n	800324e <HAL_RCC_OscConfig+0x2ce>
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	42470000 	.word	0x42470000
 8003234:	42470e80 	.word	0x42470e80
 8003238:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323c:	f7fe fc4e 	bl	8001adc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e106      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324e:	4b85      	ldr	r3, [pc, #532]	; (8003464 <HAL_RCC_OscConfig+0x4e4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d106      	bne.n	8003270 <HAL_RCC_OscConfig+0x2f0>
 8003262:	4b81      	ldr	r3, [pc, #516]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a80      	ldr	r2, [pc, #512]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
 800326e:	e01c      	b.n	80032aa <HAL_RCC_OscConfig+0x32a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b05      	cmp	r3, #5
 8003276:	d10c      	bne.n	8003292 <HAL_RCC_OscConfig+0x312>
 8003278:	4b7b      	ldr	r3, [pc, #492]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	4a7a      	ldr	r2, [pc, #488]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6713      	str	r3, [r2, #112]	; 0x70
 8003284:	4b78      	ldr	r3, [pc, #480]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a77      	ldr	r2, [pc, #476]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	e00b      	b.n	80032aa <HAL_RCC_OscConfig+0x32a>
 8003292:	4b75      	ldr	r3, [pc, #468]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4a74      	ldr	r2, [pc, #464]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	6713      	str	r3, [r2, #112]	; 0x70
 800329e:	4b72      	ldr	r3, [pc, #456]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a71      	ldr	r2, [pc, #452]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80032a4:	f023 0304 	bic.w	r3, r3, #4
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d015      	beq.n	80032de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fe fc13 	bl	8001adc <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fe fc0f 	bl	8001adc <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e0c5      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	4b65      	ldr	r3, [pc, #404]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0ee      	beq.n	80032ba <HAL_RCC_OscConfig+0x33a>
 80032dc:	e014      	b.n	8003308 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7fe fbfd 	bl	8001adc <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fe fbf9 	bl	8001adc <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0af      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fc:	4b5a      	ldr	r3, [pc, #360]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ee      	bne.n	80032e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d105      	bne.n	800331a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330e:	4b56      	ldr	r3, [pc, #344]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a55      	ldr	r2, [pc, #340]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 809b 	beq.w	800345a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003324:	4b50      	ldr	r3, [pc, #320]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b08      	cmp	r3, #8
 800332e:	d05c      	beq.n	80033ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d141      	bne.n	80033bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003338:	4b4c      	ldr	r3, [pc, #304]	; (800346c <HAL_RCC_OscConfig+0x4ec>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fe fbcd 	bl	8001adc <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003346:	f7fe fbc9 	bl	8001adc <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e081      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003358:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	019b      	lsls	r3, r3, #6
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	061b      	lsls	r3, r3, #24
 8003388:	4937      	ldr	r1, [pc, #220]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_RCC_OscConfig+0x4ec>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe fba2 	bl	8001adc <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fb9e 	bl	8001adc <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e056      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ae:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x41c>
 80033ba:	e04e      	b.n	800345a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <HAL_RCC_OscConfig+0x4ec>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fe fb8b 	bl	8001adc <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fe fb87 	bl	8001adc <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e03f      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033dc:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0x44a>
 80033e8:	e037      	b.n	800345a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e032      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <HAL_RCC_OscConfig+0x4e8>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d028      	beq.n	8003456 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d121      	bne.n	8003456 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d11a      	bne.n	8003456 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003426:	4013      	ands	r3, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800342c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800342e:	4293      	cmp	r3, r2
 8003430:	d111      	bne.n	8003456 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	3b01      	subs	r3, #1
 8003440:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003442:	429a      	cmp	r2, r3
 8003444:	d107      	bne.n	8003456 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40007000 	.word	0x40007000
 8003468:	40023800 	.word	0x40023800
 800346c:	42470060 	.word	0x42470060

08003470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0cc      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003484:	4b68      	ldr	r3, [pc, #416]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d90c      	bls.n	80034ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b65      	ldr	r3, [pc, #404]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	4b63      	ldr	r3, [pc, #396]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0b8      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d020      	beq.n	80034fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c4:	4b59      	ldr	r3, [pc, #356]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a58      	ldr	r2, [pc, #352]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034dc:	4b53      	ldr	r3, [pc, #332]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4a52      	ldr	r2, [pc, #328]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e8:	4b50      	ldr	r3, [pc, #320]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	494d      	ldr	r1, [pc, #308]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d044      	beq.n	8003590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	4b47      	ldr	r3, [pc, #284]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d119      	bne.n	800354e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e07f      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d003      	beq.n	800352e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352a:	2b03      	cmp	r3, #3
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352e:	4b3f      	ldr	r3, [pc, #252]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e06f      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353e:	4b3b      	ldr	r3, [pc, #236]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e067      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354e:	4b37      	ldr	r3, [pc, #220]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f023 0203 	bic.w	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4934      	ldr	r1, [pc, #208]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	4313      	orrs	r3, r2
 800355e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003560:	f7fe fabc 	bl	8001adc <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003566:	e00a      	b.n	800357e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003568:	f7fe fab8 	bl	8001adc <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e04f      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	4b2b      	ldr	r3, [pc, #172]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 020c 	and.w	r2, r3, #12
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	429a      	cmp	r2, r3
 800358e:	d1eb      	bne.n	8003568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d20c      	bcs.n	80035b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b22      	ldr	r3, [pc, #136]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b20      	ldr	r3, [pc, #128]	; (8003628 <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e032      	b.n	800361e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4916      	ldr	r1, [pc, #88]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	490e      	ldr	r1, [pc, #56]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035f6:	f000 f821 	bl	800363c <HAL_RCC_GetSysClockFreq>
 80035fa:	4602      	mov	r2, r0
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	490a      	ldr	r1, [pc, #40]	; (8003630 <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	5ccb      	ldrb	r3, [r1, r3]
 800360a:	fa22 f303 	lsr.w	r3, r2, r3
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fa1c 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023c00 	.word	0x40023c00
 800362c:	40023800 	.word	0x40023800
 8003630:	08004df8 	.word	0x08004df8
 8003634:	20000000 	.word	0x20000000
 8003638:	20000004 	.word	0x20000004

0800363c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	b5b0      	push	{r4, r5, r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003642:	2100      	movs	r1, #0
 8003644:	6079      	str	r1, [r7, #4]
 8003646:	2100      	movs	r1, #0
 8003648:	60f9      	str	r1, [r7, #12]
 800364a:	2100      	movs	r1, #0
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800364e:	2100      	movs	r1, #0
 8003650:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003652:	4952      	ldr	r1, [pc, #328]	; (800379c <HAL_RCC_GetSysClockFreq+0x160>)
 8003654:	6889      	ldr	r1, [r1, #8]
 8003656:	f001 010c 	and.w	r1, r1, #12
 800365a:	2908      	cmp	r1, #8
 800365c:	d00d      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0x3e>
 800365e:	2908      	cmp	r1, #8
 8003660:	f200 8094 	bhi.w	800378c <HAL_RCC_GetSysClockFreq+0x150>
 8003664:	2900      	cmp	r1, #0
 8003666:	d002      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x32>
 8003668:	2904      	cmp	r1, #4
 800366a:	d003      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x38>
 800366c:	e08e      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800366e:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003670:	60bb      	str	r3, [r7, #8]
       break;
 8003672:	e08e      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003676:	60bb      	str	r3, [r7, #8]
      break;
 8003678:	e08b      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800367a:	4948      	ldr	r1, [pc, #288]	; (800379c <HAL_RCC_GetSysClockFreq+0x160>)
 800367c:	6849      	ldr	r1, [r1, #4]
 800367e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003682:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003684:	4945      	ldr	r1, [pc, #276]	; (800379c <HAL_RCC_GetSysClockFreq+0x160>)
 8003686:	6849      	ldr	r1, [r1, #4]
 8003688:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800368c:	2900      	cmp	r1, #0
 800368e:	d024      	beq.n	80036da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003690:	4942      	ldr	r1, [pc, #264]	; (800379c <HAL_RCC_GetSysClockFreq+0x160>)
 8003692:	6849      	ldr	r1, [r1, #4]
 8003694:	0989      	lsrs	r1, r1, #6
 8003696:	4608      	mov	r0, r1
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80036a0:	f04f 0500 	mov.w	r5, #0
 80036a4:	ea00 0204 	and.w	r2, r0, r4
 80036a8:	ea01 0305 	and.w	r3, r1, r5
 80036ac:	493d      	ldr	r1, [pc, #244]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80036ae:	fb01 f003 	mul.w	r0, r1, r3
 80036b2:	2100      	movs	r1, #0
 80036b4:	fb01 f102 	mul.w	r1, r1, r2
 80036b8:	1844      	adds	r4, r0, r1
 80036ba:	493a      	ldr	r1, [pc, #232]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80036bc:	fba2 0101 	umull	r0, r1, r2, r1
 80036c0:	1863      	adds	r3, r4, r1
 80036c2:	4619      	mov	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	f7fd f8ba 	bl	8000844 <__aeabi_uldivmod>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4613      	mov	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e04a      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036da:	4b30      	ldr	r3, [pc, #192]	; (800379c <HAL_RCC_GetSysClockFreq+0x160>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	461a      	mov	r2, r3
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	ea02 0400 	and.w	r4, r2, r0
 80036f2:	ea03 0501 	and.w	r5, r3, r1
 80036f6:	4620      	mov	r0, r4
 80036f8:	4629      	mov	r1, r5
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	014b      	lsls	r3, r1, #5
 8003704:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003708:	0142      	lsls	r2, r0, #5
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	1b00      	subs	r0, r0, r4
 8003710:	eb61 0105 	sbc.w	r1, r1, r5
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	018b      	lsls	r3, r1, #6
 800371e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003722:	0182      	lsls	r2, r0, #6
 8003724:	1a12      	subs	r2, r2, r0
 8003726:	eb63 0301 	sbc.w	r3, r3, r1
 800372a:	f04f 0000 	mov.w	r0, #0
 800372e:	f04f 0100 	mov.w	r1, #0
 8003732:	00d9      	lsls	r1, r3, #3
 8003734:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003738:	00d0      	lsls	r0, r2, #3
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	1912      	adds	r2, r2, r4
 8003740:	eb45 0303 	adc.w	r3, r5, r3
 8003744:	f04f 0000 	mov.w	r0, #0
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	0299      	lsls	r1, r3, #10
 800374e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003752:	0290      	lsls	r0, r2, #10
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4610      	mov	r0, r2
 800375a:	4619      	mov	r1, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	461a      	mov	r2, r3
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	f7fd f86e 	bl	8000844 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4613      	mov	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_RCC_GetSysClockFreq+0x160>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	3301      	adds	r3, #1
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	60bb      	str	r3, [r7, #8]
      break;
 800378a:	e002      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800378e:	60bb      	str	r3, [r7, #8]
      break;
 8003790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003792:	68bb      	ldr	r3, [r7, #8]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bdb0      	pop	{r4, r5, r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	00f42400 	.word	0x00f42400
 80037a4:	017d7840 	.word	0x017d7840

080037a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e07b      	b.n	80038b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d108      	bne.n	80037d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ca:	d009      	beq.n	80037e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	61da      	str	r2, [r3, #28]
 80037d2:	e005      	b.n	80037e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd fc8e 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003816:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003864:	ea42 0103 	orr.w	r1, r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	f003 0104 	and.w	r1, r3, #4
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	f003 0210 	and.w	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e041      	b.n	8003950 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d106      	bne.n	80038e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7fd ffe5 	bl	80018b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f000 fa75 	bl	8003de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e041      	b.n	80039ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fe60 	bl	8001644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f000 fa26 	bl	8003de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d122      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d11b      	bne.n	8003a52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0202 	mvn.w	r2, #2
 8003a22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f9b7 	bl	8003dac <HAL_TIM_IC_CaptureCallback>
 8003a3e:	e005      	b.n	8003a4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f9a9 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f9ba 	bl	8003dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d122      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d11b      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f06f 0204 	mvn.w	r2, #4
 8003a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f98d 	bl	8003dac <HAL_TIM_IC_CaptureCallback>
 8003a92:	e005      	b.n	8003aa0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f97f 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f990 	bl	8003dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d122      	bne.n	8003afa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d11b      	bne.n	8003afa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f06f 0208 	mvn.w	r2, #8
 8003aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f963 	bl	8003dac <HAL_TIM_IC_CaptureCallback>
 8003ae6:	e005      	b.n	8003af4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f955 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f966 	bl	8003dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d122      	bne.n	8003b4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d11b      	bne.n	8003b4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f06f 0210 	mvn.w	r2, #16
 8003b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2208      	movs	r2, #8
 8003b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f939 	bl	8003dac <HAL_TIM_IC_CaptureCallback>
 8003b3a:	e005      	b.n	8003b48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f92b 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f93c 	bl	8003dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10e      	bne.n	8003b7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d107      	bne.n	8003b7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f06f 0201 	mvn.w	r2, #1
 8003b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f905 	bl	8003d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	2b80      	cmp	r3, #128	; 0x80
 8003b86:	d10e      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b80      	cmp	r3, #128	; 0x80
 8003b94:	d107      	bne.n	8003ba6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fba5 	bl	80042f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d10e      	bne.n	8003bd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d107      	bne.n	8003bd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f901 	bl	8003dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d10e      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d107      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f06f 0220 	mvn.w	r2, #32
 8003bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fb6f 	bl	80042dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e0ac      	b.n	8003d7c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	f200 809f 	bhi.w	8003d70 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c32:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c6d 	.word	0x08003c6d
 8003c3c:	08003d71 	.word	0x08003d71
 8003c40:	08003d71 	.word	0x08003d71
 8003c44:	08003d71 	.word	0x08003d71
 8003c48:	08003cad 	.word	0x08003cad
 8003c4c:	08003d71 	.word	0x08003d71
 8003c50:	08003d71 	.word	0x08003d71
 8003c54:	08003d71 	.word	0x08003d71
 8003c58:	08003cef 	.word	0x08003cef
 8003c5c:	08003d71 	.word	0x08003d71
 8003c60:	08003d71 	.word	0x08003d71
 8003c64:	08003d71 	.word	0x08003d71
 8003c68:	08003d2f 	.word	0x08003d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f938 	bl	8003ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0208 	orr.w	r2, r2, #8
 8003c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0204 	bic.w	r2, r2, #4
 8003c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6999      	ldr	r1, [r3, #24]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	619a      	str	r2, [r3, #24]
      break;
 8003caa:	e062      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f97e 	bl	8003fb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6999      	ldr	r1, [r3, #24]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	021a      	lsls	r2, r3, #8
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	619a      	str	r2, [r3, #24]
      break;
 8003cec:	e041      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 f9c9 	bl	800408c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0208 	orr.w	r2, r2, #8
 8003d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0204 	bic.w	r2, r2, #4
 8003d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69d9      	ldr	r1, [r3, #28]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	61da      	str	r2, [r3, #28]
      break;
 8003d2c:	e021      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fa13 	bl	8004160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69d9      	ldr	r1, [r3, #28]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	021a      	lsls	r2, r3, #8
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	61da      	str	r2, [r3, #28]
      break;
 8003d6e:	e000      	b.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a34      	ldr	r2, [pc, #208]	; (8003ecc <TIM_Base_SetConfig+0xe4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00f      	beq.n	8003e20 <TIM_Base_SetConfig+0x38>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d00b      	beq.n	8003e20 <TIM_Base_SetConfig+0x38>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a31      	ldr	r2, [pc, #196]	; (8003ed0 <TIM_Base_SetConfig+0xe8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d007      	beq.n	8003e20 <TIM_Base_SetConfig+0x38>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a30      	ldr	r2, [pc, #192]	; (8003ed4 <TIM_Base_SetConfig+0xec>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d003      	beq.n	8003e20 <TIM_Base_SetConfig+0x38>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a2f      	ldr	r2, [pc, #188]	; (8003ed8 <TIM_Base_SetConfig+0xf0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d108      	bne.n	8003e32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <TIM_Base_SetConfig+0xe4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01b      	beq.n	8003e72 <TIM_Base_SetConfig+0x8a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e40:	d017      	beq.n	8003e72 <TIM_Base_SetConfig+0x8a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a22      	ldr	r2, [pc, #136]	; (8003ed0 <TIM_Base_SetConfig+0xe8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <TIM_Base_SetConfig+0x8a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a21      	ldr	r2, [pc, #132]	; (8003ed4 <TIM_Base_SetConfig+0xec>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00f      	beq.n	8003e72 <TIM_Base_SetConfig+0x8a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a20      	ldr	r2, [pc, #128]	; (8003ed8 <TIM_Base_SetConfig+0xf0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00b      	beq.n	8003e72 <TIM_Base_SetConfig+0x8a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <TIM_Base_SetConfig+0xf4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <TIM_Base_SetConfig+0x8a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <TIM_Base_SetConfig+0xf8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d003      	beq.n	8003e72 <TIM_Base_SetConfig+0x8a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <TIM_Base_SetConfig+0xfc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d108      	bne.n	8003e84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a08      	ldr	r2, [pc, #32]	; (8003ecc <TIM_Base_SetConfig+0xe4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d103      	bne.n	8003eb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	615a      	str	r2, [r3, #20]
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800
 8003ed8:	40000c00 	.word	0x40000c00
 8003edc:	40014000 	.word	0x40014000
 8003ee0:	40014400 	.word	0x40014400
 8003ee4:	40014800 	.word	0x40014800

08003ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f023 0201 	bic.w	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0303 	bic.w	r3, r3, #3
 8003f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f023 0302 	bic.w	r3, r3, #2
 8003f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a1c      	ldr	r2, [pc, #112]	; (8003fb0 <TIM_OC1_SetConfig+0xc8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d10c      	bne.n	8003f5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0308 	bic.w	r3, r3, #8
 8003f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f023 0304 	bic.w	r3, r3, #4
 8003f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <TIM_OC1_SetConfig+0xc8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d111      	bne.n	8003f8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	621a      	str	r2, [r3, #32]
}
 8003fa4:	bf00      	nop
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40010000 	.word	0x40010000

08003fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0210 	bic.w	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f023 0320 	bic.w	r3, r3, #32
 8003ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a1e      	ldr	r2, [pc, #120]	; (8004088 <TIM_OC2_SetConfig+0xd4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d10d      	bne.n	8004030 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800401a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800402e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <TIM_OC2_SetConfig+0xd4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d113      	bne.n	8004060 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004046:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000

0800408c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0303 	bic.w	r3, r3, #3
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a1d      	ldr	r2, [pc, #116]	; (800415c <TIM_OC3_SetConfig+0xd0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10d      	bne.n	8004106 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <TIM_OC3_SetConfig+0xd0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d113      	bne.n	8004136 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800411c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	621a      	str	r2, [r3, #32]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	40010000 	.word	0x40010000

08004160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	031b      	lsls	r3, r3, #12
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a10      	ldr	r2, [pc, #64]	; (80041fc <TIM_OC4_SetConfig+0x9c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d109      	bne.n	80041d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	019b      	lsls	r3, r3, #6
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	621a      	str	r2, [r3, #32]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000

08004200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004214:	2302      	movs	r3, #2
 8004216:	e050      	b.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d018      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004264:	d013      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a18      	ldr	r2, [pc, #96]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00e      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d10c      	bne.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	4313      	orrs	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40014000 	.word	0x40014000

080042dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <battery_monitor_init>:
uint32_t    battery_adc;
float       battery_voltage;


void battery_monitor_init()
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, &battery_adc, 1);
 8004308:	2201      	movs	r2, #1
 800430a:	4904      	ldr	r1, [pc, #16]	; (800431c <battery_monitor_init+0x18>)
 800430c:	4804      	ldr	r0, [pc, #16]	; (8004320 <battery_monitor_init+0x1c>)
 800430e:	f7fd fc59 	bl	8001bc4 <HAL_ADC_Start_DMA>
    HAL_Delay(100);
 8004312:	2064      	movs	r0, #100	; 0x64
 8004314:	f7fd fbee 	bl	8001af4 <HAL_Delay>
}
 8004318:	bf00      	nop
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000450 	.word	0x20000450
 8004320:	20000098 	.word	0x20000098
 8004324:	00000000 	.word	0x00000000

08004328 <battery_monitor_read>:

void battery_monitor_read()
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
    battery_voltage = (3.3/4095) * 5.7 * battery_adc;
 800432c:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <battery_monitor_read+0x38>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7fc f9bd 	bl	80006b0 <__aeabi_ui2d>
 8004336:	a308      	add	r3, pc, #32	; (adr r3, 8004358 <battery_monitor_read+0x30>)
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f7fb ff4c 	bl	80001d8 <__aeabi_dmul>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	f7fc fa2c 	bl	80007a4 <__aeabi_d2f>
 800434c:	4603      	mov	r3, r0
 800434e:	4a05      	ldr	r2, [pc, #20]	; (8004364 <battery_monitor_read+0x3c>)
 8004350:	6013      	str	r3, [r2, #0]
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	3188db1d 	.word	0x3188db1d
 800435c:	3f72d089 	.word	0x3f72d089
 8004360:	20000450 	.word	0x20000450
 8004364:	2000044c 	.word	0x2000044c

08004368 <buzzer_time>:
{
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, RESET);
}

void buzzer_time(uint16_t ms)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, SET);
 8004372:	2201      	movs	r2, #1
 8004374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004378:	4808      	ldr	r0, [pc, #32]	; (800439c <buzzer_time+0x34>)
 800437a:	f7fe fde7 	bl	8002f4c <HAL_GPIO_WritePin>
    HAL_Delay(ms);
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	4618      	mov	r0, r3
 8004382:	f7fd fbb7 	bl	8001af4 <HAL_Delay>
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, RESET);
 8004386:	2200      	movs	r2, #0
 8004388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800438c:	4803      	ldr	r0, [pc, #12]	; (800439c <buzzer_time+0x34>)
 800438e:	f7fe fddd 	bl	8002f4c <HAL_GPIO_WritePin>
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40020000 	.word	0x40020000

080043a0 <led1_on>:
#include "led.h"


// LED1
void led1_on()
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80043a4:	2200      	movs	r2, #0
 80043a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043aa:	4802      	ldr	r0, [pc, #8]	; (80043b4 <led1_on+0x14>)
 80043ac:	f7fe fdce 	bl	8002f4c <HAL_GPIO_WritePin>
}
 80043b0:	bf00      	nop
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40020800 	.word	0x40020800

080043b8 <led2_on>:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
}

// LED2
void led2_on()
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 80043bc:	2201      	movs	r2, #1
 80043be:	2102      	movs	r1, #2
 80043c0:	4802      	ldr	r0, [pc, #8]	; (80043cc <led2_on+0x14>)
 80043c2:	f7fe fdc3 	bl	8002f4c <HAL_GPIO_WritePin>
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40020400 	.word	0x40020400

080043d0 <led3_on>:
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
}

// LED3
void led3_on()
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 80043d4:	2201      	movs	r2, #1
 80043d6:	2104      	movs	r1, #4
 80043d8:	4802      	ldr	r0, [pc, #8]	; (80043e4 <led3_on+0x14>)
 80043da:	f7fe fdb7 	bl	8002f4c <HAL_GPIO_WritePin>
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40020400 	.word	0x40020400

080043e8 <__errno>:
 80043e8:	4b01      	ldr	r3, [pc, #4]	; (80043f0 <__errno+0x8>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	2000000c 	.word	0x2000000c

080043f4 <__libc_init_array>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	4d0d      	ldr	r5, [pc, #52]	; (800442c <__libc_init_array+0x38>)
 80043f8:	4c0d      	ldr	r4, [pc, #52]	; (8004430 <__libc_init_array+0x3c>)
 80043fa:	1b64      	subs	r4, r4, r5
 80043fc:	10a4      	asrs	r4, r4, #2
 80043fe:	2600      	movs	r6, #0
 8004400:	42a6      	cmp	r6, r4
 8004402:	d109      	bne.n	8004418 <__libc_init_array+0x24>
 8004404:	4d0b      	ldr	r5, [pc, #44]	; (8004434 <__libc_init_array+0x40>)
 8004406:	4c0c      	ldr	r4, [pc, #48]	; (8004438 <__libc_init_array+0x44>)
 8004408:	f000 fce6 	bl	8004dd8 <_init>
 800440c:	1b64      	subs	r4, r4, r5
 800440e:	10a4      	asrs	r4, r4, #2
 8004410:	2600      	movs	r6, #0
 8004412:	42a6      	cmp	r6, r4
 8004414:	d105      	bne.n	8004422 <__libc_init_array+0x2e>
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	f855 3b04 	ldr.w	r3, [r5], #4
 800441c:	4798      	blx	r3
 800441e:	3601      	adds	r6, #1
 8004420:	e7ee      	b.n	8004400 <__libc_init_array+0xc>
 8004422:	f855 3b04 	ldr.w	r3, [r5], #4
 8004426:	4798      	blx	r3
 8004428:	3601      	adds	r6, #1
 800442a:	e7f2      	b.n	8004412 <__libc_init_array+0x1e>
 800442c:	08004e7c 	.word	0x08004e7c
 8004430:	08004e7c 	.word	0x08004e7c
 8004434:	08004e7c 	.word	0x08004e7c
 8004438:	08004e80 	.word	0x08004e80

0800443c <memset>:
 800443c:	4402      	add	r2, r0
 800443e:	4603      	mov	r3, r0
 8004440:	4293      	cmp	r3, r2
 8004442:	d100      	bne.n	8004446 <memset+0xa>
 8004444:	4770      	bx	lr
 8004446:	f803 1b01 	strb.w	r1, [r3], #1
 800444a:	e7f9      	b.n	8004440 <memset+0x4>

0800444c <_puts_r>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	460e      	mov	r6, r1
 8004450:	4605      	mov	r5, r0
 8004452:	b118      	cbz	r0, 800445c <_puts_r+0x10>
 8004454:	6983      	ldr	r3, [r0, #24]
 8004456:	b90b      	cbnz	r3, 800445c <_puts_r+0x10>
 8004458:	f000 fa48 	bl	80048ec <__sinit>
 800445c:	69ab      	ldr	r3, [r5, #24]
 800445e:	68ac      	ldr	r4, [r5, #8]
 8004460:	b913      	cbnz	r3, 8004468 <_puts_r+0x1c>
 8004462:	4628      	mov	r0, r5
 8004464:	f000 fa42 	bl	80048ec <__sinit>
 8004468:	4b2c      	ldr	r3, [pc, #176]	; (800451c <_puts_r+0xd0>)
 800446a:	429c      	cmp	r4, r3
 800446c:	d120      	bne.n	80044b0 <_puts_r+0x64>
 800446e:	686c      	ldr	r4, [r5, #4]
 8004470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004472:	07db      	lsls	r3, r3, #31
 8004474:	d405      	bmi.n	8004482 <_puts_r+0x36>
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	0598      	lsls	r0, r3, #22
 800447a:	d402      	bmi.n	8004482 <_puts_r+0x36>
 800447c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800447e:	f000 fad3 	bl	8004a28 <__retarget_lock_acquire_recursive>
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	0719      	lsls	r1, r3, #28
 8004486:	d51d      	bpl.n	80044c4 <_puts_r+0x78>
 8004488:	6923      	ldr	r3, [r4, #16]
 800448a:	b1db      	cbz	r3, 80044c4 <_puts_r+0x78>
 800448c:	3e01      	subs	r6, #1
 800448e:	68a3      	ldr	r3, [r4, #8]
 8004490:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004494:	3b01      	subs	r3, #1
 8004496:	60a3      	str	r3, [r4, #8]
 8004498:	bb39      	cbnz	r1, 80044ea <_puts_r+0x9e>
 800449a:	2b00      	cmp	r3, #0
 800449c:	da38      	bge.n	8004510 <_puts_r+0xc4>
 800449e:	4622      	mov	r2, r4
 80044a0:	210a      	movs	r1, #10
 80044a2:	4628      	mov	r0, r5
 80044a4:	f000 f848 	bl	8004538 <__swbuf_r>
 80044a8:	3001      	adds	r0, #1
 80044aa:	d011      	beq.n	80044d0 <_puts_r+0x84>
 80044ac:	250a      	movs	r5, #10
 80044ae:	e011      	b.n	80044d4 <_puts_r+0x88>
 80044b0:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <_puts_r+0xd4>)
 80044b2:	429c      	cmp	r4, r3
 80044b4:	d101      	bne.n	80044ba <_puts_r+0x6e>
 80044b6:	68ac      	ldr	r4, [r5, #8]
 80044b8:	e7da      	b.n	8004470 <_puts_r+0x24>
 80044ba:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <_puts_r+0xd8>)
 80044bc:	429c      	cmp	r4, r3
 80044be:	bf08      	it	eq
 80044c0:	68ec      	ldreq	r4, [r5, #12]
 80044c2:	e7d5      	b.n	8004470 <_puts_r+0x24>
 80044c4:	4621      	mov	r1, r4
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 f888 	bl	80045dc <__swsetup_r>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d0dd      	beq.n	800448c <_puts_r+0x40>
 80044d0:	f04f 35ff 	mov.w	r5, #4294967295
 80044d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044d6:	07da      	lsls	r2, r3, #31
 80044d8:	d405      	bmi.n	80044e6 <_puts_r+0x9a>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	059b      	lsls	r3, r3, #22
 80044de:	d402      	bmi.n	80044e6 <_puts_r+0x9a>
 80044e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044e2:	f000 faa2 	bl	8004a2a <__retarget_lock_release_recursive>
 80044e6:	4628      	mov	r0, r5
 80044e8:	bd70      	pop	{r4, r5, r6, pc}
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	da04      	bge.n	80044f8 <_puts_r+0xac>
 80044ee:	69a2      	ldr	r2, [r4, #24]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	dc06      	bgt.n	8004502 <_puts_r+0xb6>
 80044f4:	290a      	cmp	r1, #10
 80044f6:	d004      	beq.n	8004502 <_puts_r+0xb6>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	6022      	str	r2, [r4, #0]
 80044fe:	7019      	strb	r1, [r3, #0]
 8004500:	e7c5      	b.n	800448e <_puts_r+0x42>
 8004502:	4622      	mov	r2, r4
 8004504:	4628      	mov	r0, r5
 8004506:	f000 f817 	bl	8004538 <__swbuf_r>
 800450a:	3001      	adds	r0, #1
 800450c:	d1bf      	bne.n	800448e <_puts_r+0x42>
 800450e:	e7df      	b.n	80044d0 <_puts_r+0x84>
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	250a      	movs	r5, #10
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	6022      	str	r2, [r4, #0]
 8004518:	701d      	strb	r5, [r3, #0]
 800451a:	e7db      	b.n	80044d4 <_puts_r+0x88>
 800451c:	08004e34 	.word	0x08004e34
 8004520:	08004e54 	.word	0x08004e54
 8004524:	08004e14 	.word	0x08004e14

08004528 <puts>:
 8004528:	4b02      	ldr	r3, [pc, #8]	; (8004534 <puts+0xc>)
 800452a:	4601      	mov	r1, r0
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	f7ff bf8d 	b.w	800444c <_puts_r>
 8004532:	bf00      	nop
 8004534:	2000000c 	.word	0x2000000c

08004538 <__swbuf_r>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	460e      	mov	r6, r1
 800453c:	4614      	mov	r4, r2
 800453e:	4605      	mov	r5, r0
 8004540:	b118      	cbz	r0, 800454a <__swbuf_r+0x12>
 8004542:	6983      	ldr	r3, [r0, #24]
 8004544:	b90b      	cbnz	r3, 800454a <__swbuf_r+0x12>
 8004546:	f000 f9d1 	bl	80048ec <__sinit>
 800454a:	4b21      	ldr	r3, [pc, #132]	; (80045d0 <__swbuf_r+0x98>)
 800454c:	429c      	cmp	r4, r3
 800454e:	d12b      	bne.n	80045a8 <__swbuf_r+0x70>
 8004550:	686c      	ldr	r4, [r5, #4]
 8004552:	69a3      	ldr	r3, [r4, #24]
 8004554:	60a3      	str	r3, [r4, #8]
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	071a      	lsls	r2, r3, #28
 800455a:	d52f      	bpl.n	80045bc <__swbuf_r+0x84>
 800455c:	6923      	ldr	r3, [r4, #16]
 800455e:	b36b      	cbz	r3, 80045bc <__swbuf_r+0x84>
 8004560:	6923      	ldr	r3, [r4, #16]
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	1ac0      	subs	r0, r0, r3
 8004566:	6963      	ldr	r3, [r4, #20]
 8004568:	b2f6      	uxtb	r6, r6
 800456a:	4283      	cmp	r3, r0
 800456c:	4637      	mov	r7, r6
 800456e:	dc04      	bgt.n	800457a <__swbuf_r+0x42>
 8004570:	4621      	mov	r1, r4
 8004572:	4628      	mov	r0, r5
 8004574:	f000 f926 	bl	80047c4 <_fflush_r>
 8004578:	bb30      	cbnz	r0, 80045c8 <__swbuf_r+0x90>
 800457a:	68a3      	ldr	r3, [r4, #8]
 800457c:	3b01      	subs	r3, #1
 800457e:	60a3      	str	r3, [r4, #8]
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	6022      	str	r2, [r4, #0]
 8004586:	701e      	strb	r6, [r3, #0]
 8004588:	6963      	ldr	r3, [r4, #20]
 800458a:	3001      	adds	r0, #1
 800458c:	4283      	cmp	r3, r0
 800458e:	d004      	beq.n	800459a <__swbuf_r+0x62>
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	07db      	lsls	r3, r3, #31
 8004594:	d506      	bpl.n	80045a4 <__swbuf_r+0x6c>
 8004596:	2e0a      	cmp	r6, #10
 8004598:	d104      	bne.n	80045a4 <__swbuf_r+0x6c>
 800459a:	4621      	mov	r1, r4
 800459c:	4628      	mov	r0, r5
 800459e:	f000 f911 	bl	80047c4 <_fflush_r>
 80045a2:	b988      	cbnz	r0, 80045c8 <__swbuf_r+0x90>
 80045a4:	4638      	mov	r0, r7
 80045a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <__swbuf_r+0x9c>)
 80045aa:	429c      	cmp	r4, r3
 80045ac:	d101      	bne.n	80045b2 <__swbuf_r+0x7a>
 80045ae:	68ac      	ldr	r4, [r5, #8]
 80045b0:	e7cf      	b.n	8004552 <__swbuf_r+0x1a>
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <__swbuf_r+0xa0>)
 80045b4:	429c      	cmp	r4, r3
 80045b6:	bf08      	it	eq
 80045b8:	68ec      	ldreq	r4, [r5, #12]
 80045ba:	e7ca      	b.n	8004552 <__swbuf_r+0x1a>
 80045bc:	4621      	mov	r1, r4
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 f80c 	bl	80045dc <__swsetup_r>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d0cb      	beq.n	8004560 <__swbuf_r+0x28>
 80045c8:	f04f 37ff 	mov.w	r7, #4294967295
 80045cc:	e7ea      	b.n	80045a4 <__swbuf_r+0x6c>
 80045ce:	bf00      	nop
 80045d0:	08004e34 	.word	0x08004e34
 80045d4:	08004e54 	.word	0x08004e54
 80045d8:	08004e14 	.word	0x08004e14

080045dc <__swsetup_r>:
 80045dc:	4b32      	ldr	r3, [pc, #200]	; (80046a8 <__swsetup_r+0xcc>)
 80045de:	b570      	push	{r4, r5, r6, lr}
 80045e0:	681d      	ldr	r5, [r3, #0]
 80045e2:	4606      	mov	r6, r0
 80045e4:	460c      	mov	r4, r1
 80045e6:	b125      	cbz	r5, 80045f2 <__swsetup_r+0x16>
 80045e8:	69ab      	ldr	r3, [r5, #24]
 80045ea:	b913      	cbnz	r3, 80045f2 <__swsetup_r+0x16>
 80045ec:	4628      	mov	r0, r5
 80045ee:	f000 f97d 	bl	80048ec <__sinit>
 80045f2:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <__swsetup_r+0xd0>)
 80045f4:	429c      	cmp	r4, r3
 80045f6:	d10f      	bne.n	8004618 <__swsetup_r+0x3c>
 80045f8:	686c      	ldr	r4, [r5, #4]
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004600:	0719      	lsls	r1, r3, #28
 8004602:	d42c      	bmi.n	800465e <__swsetup_r+0x82>
 8004604:	06dd      	lsls	r5, r3, #27
 8004606:	d411      	bmi.n	800462c <__swsetup_r+0x50>
 8004608:	2309      	movs	r3, #9
 800460a:	6033      	str	r3, [r6, #0]
 800460c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004610:	81a3      	strh	r3, [r4, #12]
 8004612:	f04f 30ff 	mov.w	r0, #4294967295
 8004616:	e03e      	b.n	8004696 <__swsetup_r+0xba>
 8004618:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <__swsetup_r+0xd4>)
 800461a:	429c      	cmp	r4, r3
 800461c:	d101      	bne.n	8004622 <__swsetup_r+0x46>
 800461e:	68ac      	ldr	r4, [r5, #8]
 8004620:	e7eb      	b.n	80045fa <__swsetup_r+0x1e>
 8004622:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <__swsetup_r+0xd8>)
 8004624:	429c      	cmp	r4, r3
 8004626:	bf08      	it	eq
 8004628:	68ec      	ldreq	r4, [r5, #12]
 800462a:	e7e6      	b.n	80045fa <__swsetup_r+0x1e>
 800462c:	0758      	lsls	r0, r3, #29
 800462e:	d512      	bpl.n	8004656 <__swsetup_r+0x7a>
 8004630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004632:	b141      	cbz	r1, 8004646 <__swsetup_r+0x6a>
 8004634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004638:	4299      	cmp	r1, r3
 800463a:	d002      	beq.n	8004642 <__swsetup_r+0x66>
 800463c:	4630      	mov	r0, r6
 800463e:	f000 fa59 	bl	8004af4 <_free_r>
 8004642:	2300      	movs	r3, #0
 8004644:	6363      	str	r3, [r4, #52]	; 0x34
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	2300      	movs	r3, #0
 8004650:	6063      	str	r3, [r4, #4]
 8004652:	6923      	ldr	r3, [r4, #16]
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	f043 0308 	orr.w	r3, r3, #8
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	6923      	ldr	r3, [r4, #16]
 8004660:	b94b      	cbnz	r3, 8004676 <__swsetup_r+0x9a>
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466c:	d003      	beq.n	8004676 <__swsetup_r+0x9a>
 800466e:	4621      	mov	r1, r4
 8004670:	4630      	mov	r0, r6
 8004672:	f000 f9ff 	bl	8004a74 <__smakebuf_r>
 8004676:	89a0      	ldrh	r0, [r4, #12]
 8004678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800467c:	f010 0301 	ands.w	r3, r0, #1
 8004680:	d00a      	beq.n	8004698 <__swsetup_r+0xbc>
 8004682:	2300      	movs	r3, #0
 8004684:	60a3      	str	r3, [r4, #8]
 8004686:	6963      	ldr	r3, [r4, #20]
 8004688:	425b      	negs	r3, r3
 800468a:	61a3      	str	r3, [r4, #24]
 800468c:	6923      	ldr	r3, [r4, #16]
 800468e:	b943      	cbnz	r3, 80046a2 <__swsetup_r+0xc6>
 8004690:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004694:	d1ba      	bne.n	800460c <__swsetup_r+0x30>
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	0781      	lsls	r1, r0, #30
 800469a:	bf58      	it	pl
 800469c:	6963      	ldrpl	r3, [r4, #20]
 800469e:	60a3      	str	r3, [r4, #8]
 80046a0:	e7f4      	b.n	800468c <__swsetup_r+0xb0>
 80046a2:	2000      	movs	r0, #0
 80046a4:	e7f7      	b.n	8004696 <__swsetup_r+0xba>
 80046a6:	bf00      	nop
 80046a8:	2000000c 	.word	0x2000000c
 80046ac:	08004e34 	.word	0x08004e34
 80046b0:	08004e54 	.word	0x08004e54
 80046b4:	08004e14 	.word	0x08004e14

080046b8 <__sflush_r>:
 80046b8:	898a      	ldrh	r2, [r1, #12]
 80046ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046be:	4605      	mov	r5, r0
 80046c0:	0710      	lsls	r0, r2, #28
 80046c2:	460c      	mov	r4, r1
 80046c4:	d458      	bmi.n	8004778 <__sflush_r+0xc0>
 80046c6:	684b      	ldr	r3, [r1, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	dc05      	bgt.n	80046d8 <__sflush_r+0x20>
 80046cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	dc02      	bgt.n	80046d8 <__sflush_r+0x20>
 80046d2:	2000      	movs	r0, #0
 80046d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046da:	2e00      	cmp	r6, #0
 80046dc:	d0f9      	beq.n	80046d2 <__sflush_r+0x1a>
 80046de:	2300      	movs	r3, #0
 80046e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046e4:	682f      	ldr	r7, [r5, #0]
 80046e6:	602b      	str	r3, [r5, #0]
 80046e8:	d032      	beq.n	8004750 <__sflush_r+0x98>
 80046ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	075a      	lsls	r2, r3, #29
 80046f0:	d505      	bpl.n	80046fe <__sflush_r+0x46>
 80046f2:	6863      	ldr	r3, [r4, #4]
 80046f4:	1ac0      	subs	r0, r0, r3
 80046f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046f8:	b10b      	cbz	r3, 80046fe <__sflush_r+0x46>
 80046fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046fc:	1ac0      	subs	r0, r0, r3
 80046fe:	2300      	movs	r3, #0
 8004700:	4602      	mov	r2, r0
 8004702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004704:	6a21      	ldr	r1, [r4, #32]
 8004706:	4628      	mov	r0, r5
 8004708:	47b0      	blx	r6
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	d106      	bne.n	800471e <__sflush_r+0x66>
 8004710:	6829      	ldr	r1, [r5, #0]
 8004712:	291d      	cmp	r1, #29
 8004714:	d82c      	bhi.n	8004770 <__sflush_r+0xb8>
 8004716:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <__sflush_r+0x108>)
 8004718:	40ca      	lsrs	r2, r1
 800471a:	07d6      	lsls	r6, r2, #31
 800471c:	d528      	bpl.n	8004770 <__sflush_r+0xb8>
 800471e:	2200      	movs	r2, #0
 8004720:	6062      	str	r2, [r4, #4]
 8004722:	04d9      	lsls	r1, r3, #19
 8004724:	6922      	ldr	r2, [r4, #16]
 8004726:	6022      	str	r2, [r4, #0]
 8004728:	d504      	bpl.n	8004734 <__sflush_r+0x7c>
 800472a:	1c42      	adds	r2, r0, #1
 800472c:	d101      	bne.n	8004732 <__sflush_r+0x7a>
 800472e:	682b      	ldr	r3, [r5, #0]
 8004730:	b903      	cbnz	r3, 8004734 <__sflush_r+0x7c>
 8004732:	6560      	str	r0, [r4, #84]	; 0x54
 8004734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004736:	602f      	str	r7, [r5, #0]
 8004738:	2900      	cmp	r1, #0
 800473a:	d0ca      	beq.n	80046d2 <__sflush_r+0x1a>
 800473c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004740:	4299      	cmp	r1, r3
 8004742:	d002      	beq.n	800474a <__sflush_r+0x92>
 8004744:	4628      	mov	r0, r5
 8004746:	f000 f9d5 	bl	8004af4 <_free_r>
 800474a:	2000      	movs	r0, #0
 800474c:	6360      	str	r0, [r4, #52]	; 0x34
 800474e:	e7c1      	b.n	80046d4 <__sflush_r+0x1c>
 8004750:	6a21      	ldr	r1, [r4, #32]
 8004752:	2301      	movs	r3, #1
 8004754:	4628      	mov	r0, r5
 8004756:	47b0      	blx	r6
 8004758:	1c41      	adds	r1, r0, #1
 800475a:	d1c7      	bne.n	80046ec <__sflush_r+0x34>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0c4      	beq.n	80046ec <__sflush_r+0x34>
 8004762:	2b1d      	cmp	r3, #29
 8004764:	d001      	beq.n	800476a <__sflush_r+0xb2>
 8004766:	2b16      	cmp	r3, #22
 8004768:	d101      	bne.n	800476e <__sflush_r+0xb6>
 800476a:	602f      	str	r7, [r5, #0]
 800476c:	e7b1      	b.n	80046d2 <__sflush_r+0x1a>
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004774:	81a3      	strh	r3, [r4, #12]
 8004776:	e7ad      	b.n	80046d4 <__sflush_r+0x1c>
 8004778:	690f      	ldr	r7, [r1, #16]
 800477a:	2f00      	cmp	r7, #0
 800477c:	d0a9      	beq.n	80046d2 <__sflush_r+0x1a>
 800477e:	0793      	lsls	r3, r2, #30
 8004780:	680e      	ldr	r6, [r1, #0]
 8004782:	bf08      	it	eq
 8004784:	694b      	ldreq	r3, [r1, #20]
 8004786:	600f      	str	r7, [r1, #0]
 8004788:	bf18      	it	ne
 800478a:	2300      	movne	r3, #0
 800478c:	eba6 0807 	sub.w	r8, r6, r7
 8004790:	608b      	str	r3, [r1, #8]
 8004792:	f1b8 0f00 	cmp.w	r8, #0
 8004796:	dd9c      	ble.n	80046d2 <__sflush_r+0x1a>
 8004798:	6a21      	ldr	r1, [r4, #32]
 800479a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800479c:	4643      	mov	r3, r8
 800479e:	463a      	mov	r2, r7
 80047a0:	4628      	mov	r0, r5
 80047a2:	47b0      	blx	r6
 80047a4:	2800      	cmp	r0, #0
 80047a6:	dc06      	bgt.n	80047b6 <__sflush_r+0xfe>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295
 80047b4:	e78e      	b.n	80046d4 <__sflush_r+0x1c>
 80047b6:	4407      	add	r7, r0
 80047b8:	eba8 0800 	sub.w	r8, r8, r0
 80047bc:	e7e9      	b.n	8004792 <__sflush_r+0xda>
 80047be:	bf00      	nop
 80047c0:	20400001 	.word	0x20400001

080047c4 <_fflush_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	690b      	ldr	r3, [r1, #16]
 80047c8:	4605      	mov	r5, r0
 80047ca:	460c      	mov	r4, r1
 80047cc:	b913      	cbnz	r3, 80047d4 <_fflush_r+0x10>
 80047ce:	2500      	movs	r5, #0
 80047d0:	4628      	mov	r0, r5
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	b118      	cbz	r0, 80047de <_fflush_r+0x1a>
 80047d6:	6983      	ldr	r3, [r0, #24]
 80047d8:	b90b      	cbnz	r3, 80047de <_fflush_r+0x1a>
 80047da:	f000 f887 	bl	80048ec <__sinit>
 80047de:	4b14      	ldr	r3, [pc, #80]	; (8004830 <_fflush_r+0x6c>)
 80047e0:	429c      	cmp	r4, r3
 80047e2:	d11b      	bne.n	800481c <_fflush_r+0x58>
 80047e4:	686c      	ldr	r4, [r5, #4]
 80047e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0ef      	beq.n	80047ce <_fflush_r+0xa>
 80047ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047f0:	07d0      	lsls	r0, r2, #31
 80047f2:	d404      	bmi.n	80047fe <_fflush_r+0x3a>
 80047f4:	0599      	lsls	r1, r3, #22
 80047f6:	d402      	bmi.n	80047fe <_fflush_r+0x3a>
 80047f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047fa:	f000 f915 	bl	8004a28 <__retarget_lock_acquire_recursive>
 80047fe:	4628      	mov	r0, r5
 8004800:	4621      	mov	r1, r4
 8004802:	f7ff ff59 	bl	80046b8 <__sflush_r>
 8004806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004808:	07da      	lsls	r2, r3, #31
 800480a:	4605      	mov	r5, r0
 800480c:	d4e0      	bmi.n	80047d0 <_fflush_r+0xc>
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	059b      	lsls	r3, r3, #22
 8004812:	d4dd      	bmi.n	80047d0 <_fflush_r+0xc>
 8004814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004816:	f000 f908 	bl	8004a2a <__retarget_lock_release_recursive>
 800481a:	e7d9      	b.n	80047d0 <_fflush_r+0xc>
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <_fflush_r+0x70>)
 800481e:	429c      	cmp	r4, r3
 8004820:	d101      	bne.n	8004826 <_fflush_r+0x62>
 8004822:	68ac      	ldr	r4, [r5, #8]
 8004824:	e7df      	b.n	80047e6 <_fflush_r+0x22>
 8004826:	4b04      	ldr	r3, [pc, #16]	; (8004838 <_fflush_r+0x74>)
 8004828:	429c      	cmp	r4, r3
 800482a:	bf08      	it	eq
 800482c:	68ec      	ldreq	r4, [r5, #12]
 800482e:	e7da      	b.n	80047e6 <_fflush_r+0x22>
 8004830:	08004e34 	.word	0x08004e34
 8004834:	08004e54 	.word	0x08004e54
 8004838:	08004e14 	.word	0x08004e14

0800483c <std>:
 800483c:	2300      	movs	r3, #0
 800483e:	b510      	push	{r4, lr}
 8004840:	4604      	mov	r4, r0
 8004842:	e9c0 3300 	strd	r3, r3, [r0]
 8004846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800484a:	6083      	str	r3, [r0, #8]
 800484c:	8181      	strh	r1, [r0, #12]
 800484e:	6643      	str	r3, [r0, #100]	; 0x64
 8004850:	81c2      	strh	r2, [r0, #14]
 8004852:	6183      	str	r3, [r0, #24]
 8004854:	4619      	mov	r1, r3
 8004856:	2208      	movs	r2, #8
 8004858:	305c      	adds	r0, #92	; 0x5c
 800485a:	f7ff fdef 	bl	800443c <memset>
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <std+0x38>)
 8004860:	6263      	str	r3, [r4, #36]	; 0x24
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <std+0x3c>)
 8004864:	62a3      	str	r3, [r4, #40]	; 0x28
 8004866:	4b05      	ldr	r3, [pc, #20]	; (800487c <std+0x40>)
 8004868:	62e3      	str	r3, [r4, #44]	; 0x2c
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <std+0x44>)
 800486c:	6224      	str	r4, [r4, #32]
 800486e:	6323      	str	r3, [r4, #48]	; 0x30
 8004870:	bd10      	pop	{r4, pc}
 8004872:	bf00      	nop
 8004874:	08004c69 	.word	0x08004c69
 8004878:	08004c8b 	.word	0x08004c8b
 800487c:	08004cc3 	.word	0x08004cc3
 8004880:	08004ce7 	.word	0x08004ce7

08004884 <_cleanup_r>:
 8004884:	4901      	ldr	r1, [pc, #4]	; (800488c <_cleanup_r+0x8>)
 8004886:	f000 b8af 	b.w	80049e8 <_fwalk_reent>
 800488a:	bf00      	nop
 800488c:	080047c5 	.word	0x080047c5

08004890 <__sfmoreglue>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	1e4a      	subs	r2, r1, #1
 8004894:	2568      	movs	r5, #104	; 0x68
 8004896:	4355      	muls	r5, r2
 8004898:	460e      	mov	r6, r1
 800489a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800489e:	f000 f979 	bl	8004b94 <_malloc_r>
 80048a2:	4604      	mov	r4, r0
 80048a4:	b140      	cbz	r0, 80048b8 <__sfmoreglue+0x28>
 80048a6:	2100      	movs	r1, #0
 80048a8:	e9c0 1600 	strd	r1, r6, [r0]
 80048ac:	300c      	adds	r0, #12
 80048ae:	60a0      	str	r0, [r4, #8]
 80048b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80048b4:	f7ff fdc2 	bl	800443c <memset>
 80048b8:	4620      	mov	r0, r4
 80048ba:	bd70      	pop	{r4, r5, r6, pc}

080048bc <__sfp_lock_acquire>:
 80048bc:	4801      	ldr	r0, [pc, #4]	; (80048c4 <__sfp_lock_acquire+0x8>)
 80048be:	f000 b8b3 	b.w	8004a28 <__retarget_lock_acquire_recursive>
 80048c2:	bf00      	nop
 80048c4:	2000045c 	.word	0x2000045c

080048c8 <__sfp_lock_release>:
 80048c8:	4801      	ldr	r0, [pc, #4]	; (80048d0 <__sfp_lock_release+0x8>)
 80048ca:	f000 b8ae 	b.w	8004a2a <__retarget_lock_release_recursive>
 80048ce:	bf00      	nop
 80048d0:	2000045c 	.word	0x2000045c

080048d4 <__sinit_lock_acquire>:
 80048d4:	4801      	ldr	r0, [pc, #4]	; (80048dc <__sinit_lock_acquire+0x8>)
 80048d6:	f000 b8a7 	b.w	8004a28 <__retarget_lock_acquire_recursive>
 80048da:	bf00      	nop
 80048dc:	20000457 	.word	0x20000457

080048e0 <__sinit_lock_release>:
 80048e0:	4801      	ldr	r0, [pc, #4]	; (80048e8 <__sinit_lock_release+0x8>)
 80048e2:	f000 b8a2 	b.w	8004a2a <__retarget_lock_release_recursive>
 80048e6:	bf00      	nop
 80048e8:	20000457 	.word	0x20000457

080048ec <__sinit>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	4604      	mov	r4, r0
 80048f0:	f7ff fff0 	bl	80048d4 <__sinit_lock_acquire>
 80048f4:	69a3      	ldr	r3, [r4, #24]
 80048f6:	b11b      	cbz	r3, 8004900 <__sinit+0x14>
 80048f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048fc:	f7ff bff0 	b.w	80048e0 <__sinit_lock_release>
 8004900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004904:	6523      	str	r3, [r4, #80]	; 0x50
 8004906:	4b13      	ldr	r3, [pc, #76]	; (8004954 <__sinit+0x68>)
 8004908:	4a13      	ldr	r2, [pc, #76]	; (8004958 <__sinit+0x6c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	62a2      	str	r2, [r4, #40]	; 0x28
 800490e:	42a3      	cmp	r3, r4
 8004910:	bf04      	itt	eq
 8004912:	2301      	moveq	r3, #1
 8004914:	61a3      	streq	r3, [r4, #24]
 8004916:	4620      	mov	r0, r4
 8004918:	f000 f820 	bl	800495c <__sfp>
 800491c:	6060      	str	r0, [r4, #4]
 800491e:	4620      	mov	r0, r4
 8004920:	f000 f81c 	bl	800495c <__sfp>
 8004924:	60a0      	str	r0, [r4, #8]
 8004926:	4620      	mov	r0, r4
 8004928:	f000 f818 	bl	800495c <__sfp>
 800492c:	2200      	movs	r2, #0
 800492e:	60e0      	str	r0, [r4, #12]
 8004930:	2104      	movs	r1, #4
 8004932:	6860      	ldr	r0, [r4, #4]
 8004934:	f7ff ff82 	bl	800483c <std>
 8004938:	68a0      	ldr	r0, [r4, #8]
 800493a:	2201      	movs	r2, #1
 800493c:	2109      	movs	r1, #9
 800493e:	f7ff ff7d 	bl	800483c <std>
 8004942:	68e0      	ldr	r0, [r4, #12]
 8004944:	2202      	movs	r2, #2
 8004946:	2112      	movs	r1, #18
 8004948:	f7ff ff78 	bl	800483c <std>
 800494c:	2301      	movs	r3, #1
 800494e:	61a3      	str	r3, [r4, #24]
 8004950:	e7d2      	b.n	80048f8 <__sinit+0xc>
 8004952:	bf00      	nop
 8004954:	08004e10 	.word	0x08004e10
 8004958:	08004885 	.word	0x08004885

0800495c <__sfp>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	4607      	mov	r7, r0
 8004960:	f7ff ffac 	bl	80048bc <__sfp_lock_acquire>
 8004964:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <__sfp+0x84>)
 8004966:	681e      	ldr	r6, [r3, #0]
 8004968:	69b3      	ldr	r3, [r6, #24]
 800496a:	b913      	cbnz	r3, 8004972 <__sfp+0x16>
 800496c:	4630      	mov	r0, r6
 800496e:	f7ff ffbd 	bl	80048ec <__sinit>
 8004972:	3648      	adds	r6, #72	; 0x48
 8004974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004978:	3b01      	subs	r3, #1
 800497a:	d503      	bpl.n	8004984 <__sfp+0x28>
 800497c:	6833      	ldr	r3, [r6, #0]
 800497e:	b30b      	cbz	r3, 80049c4 <__sfp+0x68>
 8004980:	6836      	ldr	r6, [r6, #0]
 8004982:	e7f7      	b.n	8004974 <__sfp+0x18>
 8004984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004988:	b9d5      	cbnz	r5, 80049c0 <__sfp+0x64>
 800498a:	4b16      	ldr	r3, [pc, #88]	; (80049e4 <__sfp+0x88>)
 800498c:	60e3      	str	r3, [r4, #12]
 800498e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004992:	6665      	str	r5, [r4, #100]	; 0x64
 8004994:	f000 f847 	bl	8004a26 <__retarget_lock_init_recursive>
 8004998:	f7ff ff96 	bl	80048c8 <__sfp_lock_release>
 800499c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80049a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80049a4:	6025      	str	r5, [r4, #0]
 80049a6:	61a5      	str	r5, [r4, #24]
 80049a8:	2208      	movs	r2, #8
 80049aa:	4629      	mov	r1, r5
 80049ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049b0:	f7ff fd44 	bl	800443c <memset>
 80049b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80049b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80049bc:	4620      	mov	r0, r4
 80049be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049c0:	3468      	adds	r4, #104	; 0x68
 80049c2:	e7d9      	b.n	8004978 <__sfp+0x1c>
 80049c4:	2104      	movs	r1, #4
 80049c6:	4638      	mov	r0, r7
 80049c8:	f7ff ff62 	bl	8004890 <__sfmoreglue>
 80049cc:	4604      	mov	r4, r0
 80049ce:	6030      	str	r0, [r6, #0]
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d1d5      	bne.n	8004980 <__sfp+0x24>
 80049d4:	f7ff ff78 	bl	80048c8 <__sfp_lock_release>
 80049d8:	230c      	movs	r3, #12
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	e7ee      	b.n	80049bc <__sfp+0x60>
 80049de:	bf00      	nop
 80049e0:	08004e10 	.word	0x08004e10
 80049e4:	ffff0001 	.word	0xffff0001

080049e8 <_fwalk_reent>:
 80049e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ec:	4606      	mov	r6, r0
 80049ee:	4688      	mov	r8, r1
 80049f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80049f4:	2700      	movs	r7, #0
 80049f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049fa:	f1b9 0901 	subs.w	r9, r9, #1
 80049fe:	d505      	bpl.n	8004a0c <_fwalk_reent+0x24>
 8004a00:	6824      	ldr	r4, [r4, #0]
 8004a02:	2c00      	cmp	r4, #0
 8004a04:	d1f7      	bne.n	80049f6 <_fwalk_reent+0xe>
 8004a06:	4638      	mov	r0, r7
 8004a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a0c:	89ab      	ldrh	r3, [r5, #12]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d907      	bls.n	8004a22 <_fwalk_reent+0x3a>
 8004a12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a16:	3301      	adds	r3, #1
 8004a18:	d003      	beq.n	8004a22 <_fwalk_reent+0x3a>
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	47c0      	blx	r8
 8004a20:	4307      	orrs	r7, r0
 8004a22:	3568      	adds	r5, #104	; 0x68
 8004a24:	e7e9      	b.n	80049fa <_fwalk_reent+0x12>

08004a26 <__retarget_lock_init_recursive>:
 8004a26:	4770      	bx	lr

08004a28 <__retarget_lock_acquire_recursive>:
 8004a28:	4770      	bx	lr

08004a2a <__retarget_lock_release_recursive>:
 8004a2a:	4770      	bx	lr

08004a2c <__swhatbuf_r>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	460e      	mov	r6, r1
 8004a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a34:	2900      	cmp	r1, #0
 8004a36:	b096      	sub	sp, #88	; 0x58
 8004a38:	4614      	mov	r4, r2
 8004a3a:	461d      	mov	r5, r3
 8004a3c:	da07      	bge.n	8004a4e <__swhatbuf_r+0x22>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	602b      	str	r3, [r5, #0]
 8004a42:	89b3      	ldrh	r3, [r6, #12]
 8004a44:	061a      	lsls	r2, r3, #24
 8004a46:	d410      	bmi.n	8004a6a <__swhatbuf_r+0x3e>
 8004a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a4c:	e00e      	b.n	8004a6c <__swhatbuf_r+0x40>
 8004a4e:	466a      	mov	r2, sp
 8004a50:	f000 f970 	bl	8004d34 <_fstat_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	dbf2      	blt.n	8004a3e <__swhatbuf_r+0x12>
 8004a58:	9a01      	ldr	r2, [sp, #4]
 8004a5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a62:	425a      	negs	r2, r3
 8004a64:	415a      	adcs	r2, r3
 8004a66:	602a      	str	r2, [r5, #0]
 8004a68:	e7ee      	b.n	8004a48 <__swhatbuf_r+0x1c>
 8004a6a:	2340      	movs	r3, #64	; 0x40
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	b016      	add	sp, #88	; 0x58
 8004a72:	bd70      	pop	{r4, r5, r6, pc}

08004a74 <__smakebuf_r>:
 8004a74:	898b      	ldrh	r3, [r1, #12]
 8004a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a78:	079d      	lsls	r5, r3, #30
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	d507      	bpl.n	8004a90 <__smakebuf_r+0x1c>
 8004a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	6123      	str	r3, [r4, #16]
 8004a88:	2301      	movs	r3, #1
 8004a8a:	6163      	str	r3, [r4, #20]
 8004a8c:	b002      	add	sp, #8
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	ab01      	add	r3, sp, #4
 8004a92:	466a      	mov	r2, sp
 8004a94:	f7ff ffca 	bl	8004a2c <__swhatbuf_r>
 8004a98:	9900      	ldr	r1, [sp, #0]
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f000 f879 	bl	8004b94 <_malloc_r>
 8004aa2:	b948      	cbnz	r0, 8004ab8 <__smakebuf_r+0x44>
 8004aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aa8:	059a      	lsls	r2, r3, #22
 8004aaa:	d4ef      	bmi.n	8004a8c <__smakebuf_r+0x18>
 8004aac:	f023 0303 	bic.w	r3, r3, #3
 8004ab0:	f043 0302 	orr.w	r3, r3, #2
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	e7e3      	b.n	8004a80 <__smakebuf_r+0xc>
 8004ab8:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <__smakebuf_r+0x7c>)
 8004aba:	62b3      	str	r3, [r6, #40]	; 0x28
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	6020      	str	r0, [r4, #0]
 8004ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac4:	81a3      	strh	r3, [r4, #12]
 8004ac6:	9b00      	ldr	r3, [sp, #0]
 8004ac8:	6163      	str	r3, [r4, #20]
 8004aca:	9b01      	ldr	r3, [sp, #4]
 8004acc:	6120      	str	r0, [r4, #16]
 8004ace:	b15b      	cbz	r3, 8004ae8 <__smakebuf_r+0x74>
 8004ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f000 f93f 	bl	8004d58 <_isatty_r>
 8004ada:	b128      	cbz	r0, 8004ae8 <__smakebuf_r+0x74>
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	f023 0303 	bic.w	r3, r3, #3
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	81a3      	strh	r3, [r4, #12]
 8004ae8:	89a0      	ldrh	r0, [r4, #12]
 8004aea:	4305      	orrs	r5, r0
 8004aec:	81a5      	strh	r5, [r4, #12]
 8004aee:	e7cd      	b.n	8004a8c <__smakebuf_r+0x18>
 8004af0:	08004885 	.word	0x08004885

08004af4 <_free_r>:
 8004af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004af6:	2900      	cmp	r1, #0
 8004af8:	d048      	beq.n	8004b8c <_free_r+0x98>
 8004afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004afe:	9001      	str	r0, [sp, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f1a1 0404 	sub.w	r4, r1, #4
 8004b06:	bfb8      	it	lt
 8004b08:	18e4      	addlt	r4, r4, r3
 8004b0a:	f000 f947 	bl	8004d9c <__malloc_lock>
 8004b0e:	4a20      	ldr	r2, [pc, #128]	; (8004b90 <_free_r+0x9c>)
 8004b10:	9801      	ldr	r0, [sp, #4]
 8004b12:	6813      	ldr	r3, [r2, #0]
 8004b14:	4615      	mov	r5, r2
 8004b16:	b933      	cbnz	r3, 8004b26 <_free_r+0x32>
 8004b18:	6063      	str	r3, [r4, #4]
 8004b1a:	6014      	str	r4, [r2, #0]
 8004b1c:	b003      	add	sp, #12
 8004b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b22:	f000 b941 	b.w	8004da8 <__malloc_unlock>
 8004b26:	42a3      	cmp	r3, r4
 8004b28:	d90b      	bls.n	8004b42 <_free_r+0x4e>
 8004b2a:	6821      	ldr	r1, [r4, #0]
 8004b2c:	1862      	adds	r2, r4, r1
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	bf04      	itt	eq
 8004b32:	681a      	ldreq	r2, [r3, #0]
 8004b34:	685b      	ldreq	r3, [r3, #4]
 8004b36:	6063      	str	r3, [r4, #4]
 8004b38:	bf04      	itt	eq
 8004b3a:	1852      	addeq	r2, r2, r1
 8004b3c:	6022      	streq	r2, [r4, #0]
 8004b3e:	602c      	str	r4, [r5, #0]
 8004b40:	e7ec      	b.n	8004b1c <_free_r+0x28>
 8004b42:	461a      	mov	r2, r3
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	b10b      	cbz	r3, 8004b4c <_free_r+0x58>
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	d9fa      	bls.n	8004b42 <_free_r+0x4e>
 8004b4c:	6811      	ldr	r1, [r2, #0]
 8004b4e:	1855      	adds	r5, r2, r1
 8004b50:	42a5      	cmp	r5, r4
 8004b52:	d10b      	bne.n	8004b6c <_free_r+0x78>
 8004b54:	6824      	ldr	r4, [r4, #0]
 8004b56:	4421      	add	r1, r4
 8004b58:	1854      	adds	r4, r2, r1
 8004b5a:	42a3      	cmp	r3, r4
 8004b5c:	6011      	str	r1, [r2, #0]
 8004b5e:	d1dd      	bne.n	8004b1c <_free_r+0x28>
 8004b60:	681c      	ldr	r4, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	6053      	str	r3, [r2, #4]
 8004b66:	4421      	add	r1, r4
 8004b68:	6011      	str	r1, [r2, #0]
 8004b6a:	e7d7      	b.n	8004b1c <_free_r+0x28>
 8004b6c:	d902      	bls.n	8004b74 <_free_r+0x80>
 8004b6e:	230c      	movs	r3, #12
 8004b70:	6003      	str	r3, [r0, #0]
 8004b72:	e7d3      	b.n	8004b1c <_free_r+0x28>
 8004b74:	6825      	ldr	r5, [r4, #0]
 8004b76:	1961      	adds	r1, r4, r5
 8004b78:	428b      	cmp	r3, r1
 8004b7a:	bf04      	itt	eq
 8004b7c:	6819      	ldreq	r1, [r3, #0]
 8004b7e:	685b      	ldreq	r3, [r3, #4]
 8004b80:	6063      	str	r3, [r4, #4]
 8004b82:	bf04      	itt	eq
 8004b84:	1949      	addeq	r1, r1, r5
 8004b86:	6021      	streq	r1, [r4, #0]
 8004b88:	6054      	str	r4, [r2, #4]
 8004b8a:	e7c7      	b.n	8004b1c <_free_r+0x28>
 8004b8c:	b003      	add	sp, #12
 8004b8e:	bd30      	pop	{r4, r5, pc}
 8004b90:	20000090 	.word	0x20000090

08004b94 <_malloc_r>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	1ccd      	adds	r5, r1, #3
 8004b98:	f025 0503 	bic.w	r5, r5, #3
 8004b9c:	3508      	adds	r5, #8
 8004b9e:	2d0c      	cmp	r5, #12
 8004ba0:	bf38      	it	cc
 8004ba2:	250c      	movcc	r5, #12
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	db01      	blt.n	8004bae <_malloc_r+0x1a>
 8004baa:	42a9      	cmp	r1, r5
 8004bac:	d903      	bls.n	8004bb6 <_malloc_r+0x22>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	6033      	str	r3, [r6, #0]
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb6:	f000 f8f1 	bl	8004d9c <__malloc_lock>
 8004bba:	4921      	ldr	r1, [pc, #132]	; (8004c40 <_malloc_r+0xac>)
 8004bbc:	680a      	ldr	r2, [r1, #0]
 8004bbe:	4614      	mov	r4, r2
 8004bc0:	b99c      	cbnz	r4, 8004bea <_malloc_r+0x56>
 8004bc2:	4f20      	ldr	r7, [pc, #128]	; (8004c44 <_malloc_r+0xb0>)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	b923      	cbnz	r3, 8004bd2 <_malloc_r+0x3e>
 8004bc8:	4621      	mov	r1, r4
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f000 f83c 	bl	8004c48 <_sbrk_r>
 8004bd0:	6038      	str	r0, [r7, #0]
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f000 f837 	bl	8004c48 <_sbrk_r>
 8004bda:	1c43      	adds	r3, r0, #1
 8004bdc:	d123      	bne.n	8004c26 <_malloc_r+0x92>
 8004bde:	230c      	movs	r3, #12
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	4630      	mov	r0, r6
 8004be4:	f000 f8e0 	bl	8004da8 <__malloc_unlock>
 8004be8:	e7e3      	b.n	8004bb2 <_malloc_r+0x1e>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	1b5b      	subs	r3, r3, r5
 8004bee:	d417      	bmi.n	8004c20 <_malloc_r+0x8c>
 8004bf0:	2b0b      	cmp	r3, #11
 8004bf2:	d903      	bls.n	8004bfc <_malloc_r+0x68>
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	441c      	add	r4, r3
 8004bf8:	6025      	str	r5, [r4, #0]
 8004bfa:	e004      	b.n	8004c06 <_malloc_r+0x72>
 8004bfc:	6863      	ldr	r3, [r4, #4]
 8004bfe:	42a2      	cmp	r2, r4
 8004c00:	bf0c      	ite	eq
 8004c02:	600b      	streq	r3, [r1, #0]
 8004c04:	6053      	strne	r3, [r2, #4]
 8004c06:	4630      	mov	r0, r6
 8004c08:	f000 f8ce 	bl	8004da8 <__malloc_unlock>
 8004c0c:	f104 000b 	add.w	r0, r4, #11
 8004c10:	1d23      	adds	r3, r4, #4
 8004c12:	f020 0007 	bic.w	r0, r0, #7
 8004c16:	1ac2      	subs	r2, r0, r3
 8004c18:	d0cc      	beq.n	8004bb4 <_malloc_r+0x20>
 8004c1a:	1a1b      	subs	r3, r3, r0
 8004c1c:	50a3      	str	r3, [r4, r2]
 8004c1e:	e7c9      	b.n	8004bb4 <_malloc_r+0x20>
 8004c20:	4622      	mov	r2, r4
 8004c22:	6864      	ldr	r4, [r4, #4]
 8004c24:	e7cc      	b.n	8004bc0 <_malloc_r+0x2c>
 8004c26:	1cc4      	adds	r4, r0, #3
 8004c28:	f024 0403 	bic.w	r4, r4, #3
 8004c2c:	42a0      	cmp	r0, r4
 8004c2e:	d0e3      	beq.n	8004bf8 <_malloc_r+0x64>
 8004c30:	1a21      	subs	r1, r4, r0
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 f808 	bl	8004c48 <_sbrk_r>
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d1dd      	bne.n	8004bf8 <_malloc_r+0x64>
 8004c3c:	e7cf      	b.n	8004bde <_malloc_r+0x4a>
 8004c3e:	bf00      	nop
 8004c40:	20000090 	.word	0x20000090
 8004c44:	20000094 	.word	0x20000094

08004c48 <_sbrk_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d06      	ldr	r5, [pc, #24]	; (8004c64 <_sbrk_r+0x1c>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	f7fc fbc0 	bl	80013d8 <_sbrk>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_sbrk_r+0x1a>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_sbrk_r+0x1a>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	20000460 	.word	0x20000460

08004c68 <__sread>:
 8004c68:	b510      	push	{r4, lr}
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c70:	f000 f8a0 	bl	8004db4 <_read_r>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	bfab      	itete	ge
 8004c78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004c7c:	181b      	addge	r3, r3, r0
 8004c7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c82:	bfac      	ite	ge
 8004c84:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c86:	81a3      	strhlt	r3, [r4, #12]
 8004c88:	bd10      	pop	{r4, pc}

08004c8a <__swrite>:
 8004c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8e:	461f      	mov	r7, r3
 8004c90:	898b      	ldrh	r3, [r1, #12]
 8004c92:	05db      	lsls	r3, r3, #23
 8004c94:	4605      	mov	r5, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	4616      	mov	r6, r2
 8004c9a:	d505      	bpl.n	8004ca8 <__swrite+0x1e>
 8004c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f000 f868 	bl	8004d78 <_lseek_r>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	4628      	mov	r0, r5
 8004cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbe:	f000 b817 	b.w	8004cf0 <_write_r>

08004cc2 <__sseek>:
 8004cc2:	b510      	push	{r4, lr}
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cca:	f000 f855 	bl	8004d78 <_lseek_r>
 8004cce:	1c43      	adds	r3, r0, #1
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	bf15      	itete	ne
 8004cd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cde:	81a3      	strheq	r3, [r4, #12]
 8004ce0:	bf18      	it	ne
 8004ce2:	81a3      	strhne	r3, [r4, #12]
 8004ce4:	bd10      	pop	{r4, pc}

08004ce6 <__sclose>:
 8004ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cea:	f000 b813 	b.w	8004d14 <_close_r>
	...

08004cf0 <_write_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4d07      	ldr	r5, [pc, #28]	; (8004d10 <_write_r+0x20>)
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	4608      	mov	r0, r1
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	602a      	str	r2, [r5, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f7fc f8e9 	bl	8000ed6 <_write>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_write_r+0x1e>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_write_r+0x1e>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	20000460 	.word	0x20000460

08004d14 <_close_r>:
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4d06      	ldr	r5, [pc, #24]	; (8004d30 <_close_r+0x1c>)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	602b      	str	r3, [r5, #0]
 8004d20:	f7fc fb25 	bl	800136e <_close>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d102      	bne.n	8004d2e <_close_r+0x1a>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	b103      	cbz	r3, 8004d2e <_close_r+0x1a>
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	20000460 	.word	0x20000460

08004d34 <_fstat_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	4d07      	ldr	r5, [pc, #28]	; (8004d54 <_fstat_r+0x20>)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	4611      	mov	r1, r2
 8004d40:	602b      	str	r3, [r5, #0]
 8004d42:	f7fc fb20 	bl	8001386 <_fstat>
 8004d46:	1c43      	adds	r3, r0, #1
 8004d48:	d102      	bne.n	8004d50 <_fstat_r+0x1c>
 8004d4a:	682b      	ldr	r3, [r5, #0]
 8004d4c:	b103      	cbz	r3, 8004d50 <_fstat_r+0x1c>
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	bd38      	pop	{r3, r4, r5, pc}
 8004d52:	bf00      	nop
 8004d54:	20000460 	.word	0x20000460

08004d58 <_isatty_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	4d06      	ldr	r5, [pc, #24]	; (8004d74 <_isatty_r+0x1c>)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	4604      	mov	r4, r0
 8004d60:	4608      	mov	r0, r1
 8004d62:	602b      	str	r3, [r5, #0]
 8004d64:	f7fc fb1f 	bl	80013a6 <_isatty>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d102      	bne.n	8004d72 <_isatty_r+0x1a>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	b103      	cbz	r3, 8004d72 <_isatty_r+0x1a>
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	20000460 	.word	0x20000460

08004d78 <_lseek_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4d07      	ldr	r5, [pc, #28]	; (8004d98 <_lseek_r+0x20>)
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	4608      	mov	r0, r1
 8004d80:	4611      	mov	r1, r2
 8004d82:	2200      	movs	r2, #0
 8004d84:	602a      	str	r2, [r5, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f7fc fb18 	bl	80013bc <_lseek>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d102      	bne.n	8004d96 <_lseek_r+0x1e>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	b103      	cbz	r3, 8004d96 <_lseek_r+0x1e>
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	bd38      	pop	{r3, r4, r5, pc}
 8004d98:	20000460 	.word	0x20000460

08004d9c <__malloc_lock>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	; (8004da4 <__malloc_lock+0x8>)
 8004d9e:	f7ff be43 	b.w	8004a28 <__retarget_lock_acquire_recursive>
 8004da2:	bf00      	nop
 8004da4:	20000458 	.word	0x20000458

08004da8 <__malloc_unlock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	; (8004db0 <__malloc_unlock+0x8>)
 8004daa:	f7ff be3e 	b.w	8004a2a <__retarget_lock_release_recursive>
 8004dae:	bf00      	nop
 8004db0:	20000458 	.word	0x20000458

08004db4 <_read_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4d07      	ldr	r5, [pc, #28]	; (8004dd4 <_read_r+0x20>)
 8004db8:	4604      	mov	r4, r0
 8004dba:	4608      	mov	r0, r1
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	602a      	str	r2, [r5, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f7fc fab6 	bl	8001334 <_read>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d102      	bne.n	8004dd2 <_read_r+0x1e>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	b103      	cbz	r3, 8004dd2 <_read_r+0x1e>
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	20000460 	.word	0x20000460

08004dd8 <_init>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	bf00      	nop
 8004ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dde:	bc08      	pop	{r3}
 8004de0:	469e      	mov	lr, r3
 8004de2:	4770      	bx	lr

08004de4 <_fini>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	bf00      	nop
 8004de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dea:	bc08      	pop	{r3}
 8004dec:	469e      	mov	lr, r3
 8004dee:	4770      	bx	lr
