
telemetry_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e28  08003e28  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e30  08003e30  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000090  08003ec8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003ec8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbca  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c9  00000000  00000000  0002dc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002fe58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  000308c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017427  00000000  00000000  00031240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7d3  00000000  00000000  00048667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895b0  00000000  00000000  00054e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000de3ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003048  00000000  00000000  000de440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d58 	.word	0x08003d58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08003d58 	.word	0x08003d58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b40      	ldr	r3, [pc, #256]	; (8000694 <MX_GPIO_Init+0x11c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a3f      	ldr	r2, [pc, #252]	; (8000694 <MX_GPIO_Init+0x11c>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <MX_GPIO_Init+0x11c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b39      	ldr	r3, [pc, #228]	; (8000694 <MX_GPIO_Init+0x11c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a38      	ldr	r2, [pc, #224]	; (8000694 <MX_GPIO_Init+0x11c>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b36      	ldr	r3, [pc, #216]	; (8000694 <MX_GPIO_Init+0x11c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b32      	ldr	r3, [pc, #200]	; (8000694 <MX_GPIO_Init+0x11c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a31      	ldr	r2, [pc, #196]	; (8000694 <MX_GPIO_Init+0x11c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <MX_GPIO_Init+0x11c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <MX_GPIO_Init+0x11c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a2a      	ldr	r2, [pc, #168]	; (8000694 <MX_GPIO_Init+0x11c>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_GPIO_Init+0x11c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000604:	4824      	ldr	r0, [pc, #144]	; (8000698 <MX_GPIO_Init+0x120>)
 8000606:	f000 fe15 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000610:	4822      	ldr	r0, [pc, #136]	; (800069c <MX_GPIO_Init+0x124>)
 8000612:	f000 fe0f 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061c:	481f      	ldr	r0, [pc, #124]	; (800069c <MX_GPIO_Init+0x124>)
 800061e:	f000 fe09 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	4817      	ldr	r0, [pc, #92]	; (8000698 <MX_GPIO_Init+0x120>)
 800063c:	f000 fc76 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|SPI2_CSN_Pin;
 8000640:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064e:	2302      	movs	r3, #2
 8000650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4810      	ldr	r0, [pc, #64]	; (800069c <MX_GPIO_Init+0x124>)
 800065a:	f000 fc67 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800065e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000664:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480a      	ldr	r0, [pc, #40]	; (80006a0 <MX_GPIO_Init+0x128>)
 8000676:	f000 fc59 	bl	8000f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2017      	movs	r0, #23
 8000680:	f000 fc1d 	bl	8000ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000684:	2017      	movs	r0, #23
 8000686:	f000 fc36 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40020800 	.word	0x40020800
 800069c:	40020400 	.word	0x40020400
 80006a0:	40020000 	.word	0x40020000

080006a4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 500);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006b8:	68b9      	ldr	r1, [r7, #8]
 80006ba:	4804      	ldr	r0, [pc, #16]	; (80006cc <_write+0x28>)
 80006bc:	f002 f843 	bl	8002746 <HAL_UART_Transmit>
	return len;
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000110 	.word	0x20000110

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 faa5 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f811 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f7ff ff4b 	bl	8000578 <MX_GPIO_Init>
  MX_SPI2_Init();
 80006e2:	f000 f891 	bl	8000808 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80006e6:	f000 fa01 	bl	8000aec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //nrf24l01p_rx_init(2500, _1Mbps, 8);

  uint8_t a = 102;
 80006ea:	2366      	movs	r3, #102	; 0x66
 80006ec:	71fb      	strb	r3, [r7, #7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("%d \n", a);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4619      	mov	r1, r3
 80006f2:	4802      	ldr	r0, [pc, #8]	; (80006fc <main+0x2c>)
 80006f4:	f002 fbda 	bl	8002eac <iprintf>
 80006f8:	e7f9      	b.n	80006ee <main+0x1e>
 80006fa:	bf00      	nop
 80006fc:	08003d70 	.word	0x08003d70

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fbc4 	bl	8002e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <SystemClock_Config+0xc8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a26      	ldr	r2, [pc, #152]	; (80007c8 <SystemClock_Config+0xc8>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <SystemClock_Config+0xc8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <SystemClock_Config+0xcc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a20      	ldr	r2, [pc, #128]	; (80007cc <SystemClock_Config+0xcc>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <SystemClock_Config+0xcc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000770:	230c      	movs	r3, #12
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000774:	2360      	movs	r3, #96	; 0x60
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fda1 	bl	80012cc <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000790:	f000 f834 	bl	80007fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2103      	movs	r1, #3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 f803 	bl	80017bc <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007bc:	f000 f81e 	bl	80007fc <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3750      	adds	r7, #80	; 0x50
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007e0:	d105      	bne.n	80007ee <HAL_GPIO_EXTI_Callback+0x1e>
	{
		nrf24l01p_rx_receive(telemetry_rx_buffer, 8); // read data when data ready flag is set
 80007e2:	2108      	movs	r1, #8
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <HAL_GPIO_EXTI_Callback+0x28>)
 80007e6:	f002 fa83 	bl	8002cf0 <nrf24l01p_rx_receive>
		led1_toggle();
 80007ea:	f002 fa75 	bl	8002cd8 <led1_toggle>
	}
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000000 	.word	0x20000000

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_SPI2_Init+0x64>)
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <MX_SPI2_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_SPI2_Init+0x64>)
 8000814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_SPI2_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_SPI2_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_SPI2_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_SPI2_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_SPI2_Init+0x64>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_SPI2_Init+0x64>)
 800083c:	2210      	movs	r2, #16
 800083e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_SPI2_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_SPI2_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_SPI2_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_SPI2_Init+0x64>)
 8000854:	220a      	movs	r2, #10
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_SPI2_Init+0x64>)
 800085a:	f001 f97f 	bl	8001b5c <HAL_SPI_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000864:	f7ff ffca 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000b8 	.word	0x200000b8
 8000870:	40003800 	.word	0x40003800

08000874 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <HAL_SPI_MspInit+0x84>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d12c      	bne.n	80008f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_SPI_MspInit+0x88>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80008ce:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80008d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e0:	2305      	movs	r3, #5
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <HAL_SPI_MspInit+0x8c>)
 80008ec:	f000 fb1e 	bl	8000f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40003800 	.word	0x40003800
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020400 	.word	0x40020400

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <HAL_MspInit+0x4c>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HAL_MspInit+0x4c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f992 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80009ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009b0:	f000 fc74 	bl	800129c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e00a      	b.n	80009e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ca:	f3af 8000 	nop.w
 80009ce:	4601      	mov	r1, r0
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60ba      	str	r2, [r7, #8]
 80009d6:	b2ca      	uxtb	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf0      	blt.n	80009ca <_read+0x12>
	}

return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	return -1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <_isatty>:

int _isatty(int file)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	return 1;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f002 f9dc 	bl	8002e48 <__errno>
 8000a90:	4603      	mov	r3, r0
 8000a92:	220c      	movs	r2, #12
 8000a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20020000 	.word	0x20020000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	200000ac 	.word	0x200000ac
 8000ac4:	20000168 	.word	0x20000168

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_USART2_UART_Init+0x50>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b24:	f001 fdc2 	bl	80026ac <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b2e:	f7ff fe65 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000110 	.word	0x20000110
 8000b3c:	40004400 	.word	0x40004400

08000b40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_UART_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12b      	bne.n	8000bba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000baa:	2307      	movs	r3, #7
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_UART_MspInit+0x8c>)
 8000bb6:	f000 f9b9 	bl	8000f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfa:	f7ff ff65 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f002 f929 	bl	8002e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fd65 	bl	80006d0 <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c14:	08003e38 	.word	0x08003e38
  ldr r2, =_sbss
 8000c18:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c1c:	20000168 	.word	0x20000168

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_Init+0x40>)
 8000c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_Init+0x40>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x40>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f92b 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 f808 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fe54 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f943 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 f90b 	bl	8000ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000020 	.word	0x20000020
 8000cc0:	20000028 	.word	0x20000028
 8000cc4:	20000024 	.word	0x20000024

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000028 	.word	0x20000028
 8000cec:	20000154 	.word	0x20000154

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000154 	.word	0x20000154

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff29 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff3e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff31 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa2 	bl	8000e64 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	e159      	b.n	80011fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	f040 8148 	bne.w	80011f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d005      	beq.n	8000f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d130      	bne.n	8000fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	091b      	lsrs	r3, r3, #4
 8000fca:	f003 0201 	and.w	r2, r3, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d017      	beq.n	800101c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d123      	bne.n	8001070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	69b9      	ldr	r1, [r7, #24]
 800106c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0203 	and.w	r2, r3, #3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80a2 	beq.w	80011f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b57      	ldr	r3, [pc, #348]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a56      	ldr	r2, [pc, #344]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b54      	ldr	r3, [pc, #336]	; (8001214 <HAL_GPIO_Init+0x2e8>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ce:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a49      	ldr	r2, [pc, #292]	; (800121c <HAL_GPIO_Init+0x2f0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x202>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a48      	ldr	r2, [pc, #288]	; (8001220 <HAL_GPIO_Init+0x2f4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x1fe>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a47      	ldr	r2, [pc, #284]	; (8001224 <HAL_GPIO_Init+0x2f8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x1fa>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a46      	ldr	r2, [pc, #280]	; (8001228 <HAL_GPIO_Init+0x2fc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x1f6>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a45      	ldr	r2, [pc, #276]	; (800122c <HAL_GPIO_Init+0x300>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x1f2>
 800111a:	2304      	movs	r3, #4
 800111c:	e008      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800111e:	2307      	movs	r3, #7
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x204>
 8001122:	2303      	movs	r3, #3
 8001124:	e004      	b.n	8001130 <HAL_GPIO_Init+0x204>
 8001126:	2302      	movs	r3, #2
 8001128:	e002      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_GPIO_Init+0x204>
 800112e:	2300      	movs	r3, #0
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	f002 0203 	and.w	r2, r2, #3
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4093      	lsls	r3, r2
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001140:	4935      	ldr	r1, [pc, #212]	; (8001218 <HAL_GPIO_Init+0x2ec>)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <HAL_GPIO_Init+0x304>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001172:	4a2f      	ldr	r2, [pc, #188]	; (8001230 <HAL_GPIO_Init+0x304>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_GPIO_Init+0x304>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119c:	4a24      	ldr	r2, [pc, #144]	; (8001230 <HAL_GPIO_Init+0x304>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_GPIO_Init+0x304>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3301      	adds	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	2b0f      	cmp	r3, #15
 8001200:	f67f aea2 	bls.w	8000f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40013800 	.word	0x40013800
 800121c:	40020000 	.word	0x40020000
 8001220:	40020400 	.word	0x40020400
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40021000 	.word	0x40021000
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001250:	e003      	b.n	800125a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	619a      	str	r2, [r3, #24]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001278:	887a      	ldrh	r2, [r7, #2]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4013      	ands	r3, r2
 800127e:	041a      	lsls	r2, r3, #16
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43d9      	mvns	r1, r3
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	400b      	ands	r3, r1
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fa88 	bl	80007d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e264      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d075      	beq.n	80013d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	4ba3      	ldr	r3, [pc, #652]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d00c      	beq.n	8001310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f6:	4ba0      	ldr	r3, [pc, #640]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d112      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001302:	4b9d      	ldr	r3, [pc, #628]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800130e:	d10b      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	4b99      	ldr	r3, [pc, #612]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d05b      	beq.n	80013d4 <HAL_RCC_OscConfig+0x108>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d157      	bne.n	80013d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e23f      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001330:	d106      	bne.n	8001340 <HAL_RCC_OscConfig+0x74>
 8001332:	4b91      	ldr	r3, [pc, #580]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a90      	ldr	r2, [pc, #576]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e01d      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x98>
 800134a:	4b8b      	ldr	r3, [pc, #556]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a8a      	ldr	r2, [pc, #552]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b88      	ldr	r3, [pc, #544]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a87      	ldr	r2, [pc, #540]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e00b      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001364:	4b84      	ldr	r3, [pc, #528]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a83      	ldr	r2, [pc, #524]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b81      	ldr	r3, [pc, #516]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a80      	ldr	r2, [pc, #512]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcb4 	bl	8000cf0 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fcb0 	bl	8000cf0 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e204      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0xc0>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fca0 	bl	8000cf0 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fc9c 	bl	8000cf0 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e1f0      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	4b6c      	ldr	r3, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0xe8>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d063      	beq.n	80014aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	4b65      	ldr	r3, [pc, #404]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00b      	beq.n	8001406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b62      	ldr	r3, [pc, #392]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d11c      	bne.n	8001434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fa:	4b5f      	ldr	r3, [pc, #380]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d116      	bne.n	8001434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	4b5c      	ldr	r3, [pc, #368]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x152>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e1c4      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b56      	ldr	r3, [pc, #344]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4952      	ldr	r1, [pc, #328]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	e03a      	b.n	80014aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d020      	beq.n	800147e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <HAL_RCC_OscConfig+0x2b0>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fc55 	bl	8000cf0 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fc51 	bl	8000cf0 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e1a5      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4b43      	ldr	r3, [pc, #268]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4940      	ldr	r1, [pc, #256]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	4313      	orrs	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
 800147c:	e015      	b.n	80014aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	4b3f      	ldr	r3, [pc, #252]	; (800157c <HAL_RCC_OscConfig+0x2b0>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fc34 	bl	8000cf0 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148c:	f7ff fc30 	bl	8000cf0 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e184      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d030      	beq.n	8001518 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d016      	beq.n	80014ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014be:	4b30      	ldr	r3, [pc, #192]	; (8001580 <HAL_RCC_OscConfig+0x2b4>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff fc14 	bl	8000cf0 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc10 	bl	8000cf0 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e164      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x200>
 80014ea:	e015      	b.n	8001518 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_OscConfig+0x2b4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fbfd 	bl	8000cf0 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fa:	f7ff fbf9 	bl	8000cf0 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e14d      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a0 	beq.w	8001666 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_OscConfig+0x2b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d121      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_RCC_OscConfig+0x2b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_RCC_OscConfig+0x2b8>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff fbbf 	bl	8000cf0 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	e011      	b.n	800159a <HAL_RCC_OscConfig+0x2ce>
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	42470000 	.word	0x42470000
 8001580:	42470e80 	.word	0x42470e80
 8001584:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001588:	f7ff fbb2 	bl	8000cf0 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e106      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	4b85      	ldr	r3, [pc, #532]	; (80017b0 <HAL_RCC_OscConfig+0x4e4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d106      	bne.n	80015bc <HAL_RCC_OscConfig+0x2f0>
 80015ae:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	4a80      	ldr	r2, [pc, #512]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ba:	e01c      	b.n	80015f6 <HAL_RCC_OscConfig+0x32a>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d10c      	bne.n	80015de <HAL_RCC_OscConfig+0x312>
 80015c4:	4b7b      	ldr	r3, [pc, #492]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a7a      	ldr	r2, [pc, #488]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a77      	ldr	r2, [pc, #476]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	e00b      	b.n	80015f6 <HAL_RCC_OscConfig+0x32a>
 80015de:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	4a74      	ldr	r2, [pc, #464]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ea:	4b72      	ldr	r3, [pc, #456]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a71      	ldr	r2, [pc, #452]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d015      	beq.n	800162a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fe:	f7ff fb77 	bl	8000cf0 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fb73 	bl	8000cf0 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e0c5      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0ee      	beq.n	8001606 <HAL_RCC_OscConfig+0x33a>
 8001628:	e014      	b.n	8001654 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fb61 	bl	8000cf0 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff fb5d 	bl	8000cf0 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e0af      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	4b5a      	ldr	r3, [pc, #360]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ee      	bne.n	8001632 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d105      	bne.n	8001666 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165a:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a55      	ldr	r2, [pc, #340]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 8001660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 809b 	beq.w	80017a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001670:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d05c      	beq.n	8001736 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d141      	bne.n	8001708 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fb31 	bl	8000cf0 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff fb2d 	bl	8000cf0 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e081      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a4:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69da      	ldr	r2, [r3, #28]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	019b      	lsls	r3, r3, #6
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	3b01      	subs	r3, #1
 80016ca:	041b      	lsls	r3, r3, #16
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	4937      	ldr	r1, [pc, #220]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb06 	bl	8000cf0 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fb02 	bl	8000cf0 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e056      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x41c>
 8001706:	e04e      	b.n	80017a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff faef 	bl	8000cf0 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff faeb 	bl	8000cf0 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e03f      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x44a>
 8001734:	e037      	b.n	80017a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e032      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d028      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d121      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d11a      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001772:	4013      	ands	r3, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001778:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177a:	4293      	cmp	r3, r2
 800177c:	d111      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	3b01      	subs	r3, #1
 800178c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40007000 	.word	0x40007000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470060 	.word	0x42470060

080017bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0cc      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d90c      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b63      	ldr	r3, [pc, #396]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0b8      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a52      	ldr	r2, [pc, #328]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	494d      	ldr	r1, [pc, #308]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d044      	beq.n	80018dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d119      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d003      	beq.n	800187a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001876:	2b03      	cmp	r3, #3
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e067      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 0203 	bic.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4934      	ldr	r1, [pc, #208]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ac:	f7ff fa20 	bl	8000cf0 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff fa1c 	bl	8000cf0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e04f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 020c 	and.w	r2, r3, #12
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1eb      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d20c      	bcs.n	8001904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e032      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4916      	ldr	r1, [pc, #88]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	490e      	ldr	r1, [pc, #56]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001942:	f000 f821 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001946:	4602      	mov	r2, r0
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	490a      	ldr	r1, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	5ccb      	ldrb	r3, [r1, r3]
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f980 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00
 8001978:	40023800 	.word	0x40023800
 800197c:	08003d78 	.word	0x08003d78
 8001980:	20000020 	.word	0x20000020
 8001984:	20000024 	.word	0x20000024

08001988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800198e:	2100      	movs	r1, #0
 8001990:	6079      	str	r1, [r7, #4]
 8001992:	2100      	movs	r1, #0
 8001994:	60f9      	str	r1, [r7, #12]
 8001996:	2100      	movs	r1, #0
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800199a:	2100      	movs	r1, #0
 800199c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199e:	4952      	ldr	r1, [pc, #328]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019a0:	6889      	ldr	r1, [r1, #8]
 80019a2:	f001 010c 	and.w	r1, r1, #12
 80019a6:	2908      	cmp	r1, #8
 80019a8:	d00d      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80019aa:	2908      	cmp	r1, #8
 80019ac:	f200 8094 	bhi.w	8001ad8 <HAL_RCC_GetSysClockFreq+0x150>
 80019b0:	2900      	cmp	r1, #0
 80019b2:	d002      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x32>
 80019b4:	2904      	cmp	r1, #4
 80019b6:	d003      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x38>
 80019b8:	e08e      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ba:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <HAL_RCC_GetSysClockFreq+0x164>)
 80019bc:	60bb      	str	r3, [r7, #8]
       break;
 80019be:	e08e      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c0:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x168>)
 80019c2:	60bb      	str	r3, [r7, #8]
      break;
 80019c4:	e08b      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c6:	4948      	ldr	r1, [pc, #288]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019c8:	6849      	ldr	r1, [r1, #4]
 80019ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80019ce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d0:	4945      	ldr	r1, [pc, #276]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019d2:	6849      	ldr	r1, [r1, #4]
 80019d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80019d8:	2900      	cmp	r1, #0
 80019da:	d024      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	4942      	ldr	r1, [pc, #264]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019de:	6849      	ldr	r1, [r1, #4]
 80019e0:	0989      	lsrs	r1, r1, #6
 80019e2:	4608      	mov	r0, r1
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80019ec:	f04f 0500 	mov.w	r5, #0
 80019f0:	ea00 0204 	and.w	r2, r0, r4
 80019f4:	ea01 0305 	and.w	r3, r1, r5
 80019f8:	493d      	ldr	r1, [pc, #244]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x168>)
 80019fa:	fb01 f003 	mul.w	r0, r1, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	fb01 f102 	mul.w	r1, r1, r2
 8001a04:	1844      	adds	r4, r0, r1
 8001a06:	493a      	ldr	r1, [pc, #232]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a08:	fba2 0101 	umull	r0, r1, r2, r1
 8001a0c:	1863      	adds	r3, r4, r1
 8001a0e:	4619      	mov	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	461a      	mov	r2, r3
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	f7fe fc32 	bl	8000280 <__aeabi_uldivmod>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4613      	mov	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e04a      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a36:	f04f 0100 	mov.w	r1, #0
 8001a3a:	ea02 0400 	and.w	r4, r2, r0
 8001a3e:	ea03 0501 	and.w	r5, r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	014b      	lsls	r3, r1, #5
 8001a50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a54:	0142      	lsls	r2, r0, #5
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	1b00      	subs	r0, r0, r4
 8001a5c:	eb61 0105 	sbc.w	r1, r1, r5
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	018b      	lsls	r3, r1, #6
 8001a6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a6e:	0182      	lsls	r2, r0, #6
 8001a70:	1a12      	subs	r2, r2, r0
 8001a72:	eb63 0301 	sbc.w	r3, r3, r1
 8001a76:	f04f 0000 	mov.w	r0, #0
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	00d9      	lsls	r1, r3, #3
 8001a80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a84:	00d0      	lsls	r0, r2, #3
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	1912      	adds	r2, r2, r4
 8001a8c:	eb45 0303 	adc.w	r3, r5, r3
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	0299      	lsls	r1, r3, #10
 8001a9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a9e:	0290      	lsls	r0, r2, #10
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	f7fe fbe6 	bl	8000280 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	60bb      	str	r3, [r7, #8]
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_RCC_GetSysClockFreq+0x164>)
 8001ada:	60bb      	str	r3, [r7, #8]
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	68bb      	ldr	r3, [r7, #8]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	017d7840 	.word	0x017d7840

08001af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000020 	.word	0x20000020

08001b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	0a9b      	lsrs	r3, r3, #10
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4903      	ldr	r1, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	08003d88 	.word	0x08003d88

08001b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b38:	f7ff ffdc 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0b5b      	lsrs	r3, r3, #13
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08003d88 	.word	0x08003d88

08001b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e07b      	b.n	8001c66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d108      	bne.n	8001b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b7e:	d009      	beq.n	8001b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
 8001b86:	e005      	b.n	8001b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fe60 	bl	8000874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	ea42 0103 	orr.w	r1, r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	f003 0104 	and.w	r1, r3, #4
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f003 0210 	and.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b088      	sub	sp, #32
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_SPI_Transmit+0x22>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e126      	b.n	8001ede <HAL_SPI_Transmit+0x270>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c98:	f7ff f82a 	bl	8000cf0 <HAL_GetTick>
 8001c9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d002      	beq.n	8001cb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cb2:	e10b      	b.n	8001ecc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <HAL_SPI_Transmit+0x52>
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cc4:	e102      	b.n	8001ecc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2203      	movs	r2, #3
 8001cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	88fa      	ldrh	r2, [r7, #6]
 8001cde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	88fa      	ldrh	r2, [r7, #6]
 8001ce4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d0c:	d10f      	bne.n	8001d2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d007      	beq.n	8001d4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d54:	d14b      	bne.n	8001dee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_SPI_Transmit+0xf6>
 8001d5e:	8afb      	ldrh	r3, [r7, #22]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d13e      	bne.n	8001de2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	881a      	ldrh	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	1c9a      	adds	r2, r3, #2
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d88:	e02b      	b.n	8001de2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d112      	bne.n	8001dbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	881a      	ldrh	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	1c9a      	adds	r2, r3, #2
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	86da      	strh	r2, [r3, #54]	; 0x36
 8001dbc:	e011      	b.n	8001de2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dbe:	f7fe ff97 	bl	8000cf0 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d803      	bhi.n	8001dd6 <HAL_SPI_Transmit+0x168>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d102      	bne.n	8001ddc <HAL_SPI_Transmit+0x16e>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001de0:	e074      	b.n	8001ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ce      	bne.n	8001d8a <HAL_SPI_Transmit+0x11c>
 8001dec:	e04c      	b.n	8001e88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_SPI_Transmit+0x18e>
 8001df6:	8afb      	ldrh	r3, [r7, #22]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d140      	bne.n	8001e7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	330c      	adds	r3, #12
 8001e06:	7812      	ldrb	r2, [r2, #0]
 8001e08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e22:	e02c      	b.n	8001e7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d113      	bne.n	8001e5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	330c      	adds	r3, #12
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e58:	e011      	b.n	8001e7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e5a:	f7fe ff49 	bl	8000cf0 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d803      	bhi.n	8001e72 <HAL_SPI_Transmit+0x204>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d102      	bne.n	8001e78 <HAL_SPI_Transmit+0x20a>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e7c:	e026      	b.n	8001ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1cd      	bne.n	8001e24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fbcb 	bl	8002628 <SPI_EndRxTxTransaction>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10a      	bne.n	8001ebc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	77fb      	strb	r3, [r7, #31]
 8001ec8:	e000      	b.n	8001ecc <HAL_SPI_Transmit+0x25e>
  }

error:
 8001eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b088      	sub	sp, #32
 8001eea:	af02      	add	r7, sp, #8
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f02:	d112      	bne.n	8001f2a <HAL_SPI_Receive+0x44>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10e      	bne.n	8001f2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f14:	88fa      	ldrh	r2, [r7, #6]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 f8f1 	bl	8002108 <HAL_SPI_TransmitReceive>
 8001f26:	4603      	mov	r3, r0
 8001f28:	e0ea      	b.n	8002100 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_SPI_Receive+0x52>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e0e3      	b.n	8002100 <HAL_SPI_Receive+0x21a>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f40:	f7fe fed6 	bl	8000cf0 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d002      	beq.n	8001f58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
 8001f54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f56:	e0ca      	b.n	80020ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_Receive+0x7e>
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f68:	e0c1      	b.n	80020ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	88fa      	ldrh	r2, [r7, #6]
 8001f88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb0:	d10f      	bne.n	8001fd2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d007      	beq.n	8001ff0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d162      	bne.n	80020be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ff8:	e02e      	b.n	8002058 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d115      	bne.n	8002034 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f103 020c 	add.w	r2, r3, #12
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002032:	e011      	b.n	8002058 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002034:	f7fe fe5c 	bl	8000cf0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d803      	bhi.n	800204c <HAL_SPI_Receive+0x166>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204a:	d102      	bne.n	8002052 <HAL_SPI_Receive+0x16c>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002056:	e04a      	b.n	80020ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1cb      	bne.n	8001ffa <HAL_SPI_Receive+0x114>
 8002062:	e031      	b.n	80020c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d113      	bne.n	800209a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207c:	b292      	uxth	r2, r2
 800207e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	1c9a      	adds	r2, r3, #2
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002098:	e011      	b.n	80020be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800209a:	f7fe fe29 	bl	8000cf0 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d803      	bhi.n	80020b2 <HAL_SPI_Receive+0x1cc>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d102      	bne.n	80020b8 <HAL_SPI_Receive+0x1d2>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80020bc:	e017      	b.n	80020ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1cd      	bne.n	8002064 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	6839      	ldr	r1, [r7, #0]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fa45 	bl	800255c <SPI_EndRxTransaction>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
 80020ea:	e000      	b.n	80020ee <HAL_SPI_Receive+0x208>
  }

error :
 80020ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002116:	2301      	movs	r3, #1
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_SPI_TransmitReceive+0x26>
 800212a:	2302      	movs	r3, #2
 800212c:	e18a      	b.n	8002444 <HAL_SPI_TransmitReceive+0x33c>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002136:	f7fe fddb 	bl	8000cf0 <HAL_GetTick>
 800213a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002154:	2b01      	cmp	r3, #1
 8002156:	d00f      	beq.n	8002178 <HAL_SPI_TransmitReceive+0x70>
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215e:	d107      	bne.n	8002170 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d103      	bne.n	8002170 <HAL_SPI_TransmitReceive+0x68>
 8002168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800216c:	2b04      	cmp	r3, #4
 800216e:	d003      	beq.n	8002178 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002170:	2302      	movs	r3, #2
 8002172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002176:	e15b      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_SPI_TransmitReceive+0x82>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_SPI_TransmitReceive+0x82>
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002190:	e14e      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b04      	cmp	r3, #4
 800219c:	d003      	beq.n	80021a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2205      	movs	r2, #5
 80021a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	887a      	ldrh	r2, [r7, #2]
 80021b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	887a      	ldrh	r2, [r7, #2]
 80021ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d007      	beq.n	80021fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002202:	d178      	bne.n	80022f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_SPI_TransmitReceive+0x10a>
 800220c:	8b7b      	ldrh	r3, [r7, #26]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d166      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	1c9a      	adds	r2, r3, #2
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002236:	e053      	b.n	80022e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d11b      	bne.n	800227e <HAL_SPI_TransmitReceive+0x176>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d016      	beq.n	800227e <HAL_SPI_TransmitReceive+0x176>
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d113      	bne.n	800227e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	881a      	ldrh	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	1c9a      	adds	r2, r3, #2
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002270:	b29b      	uxth	r3, r3
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d119      	bne.n	80022c0 <HAL_SPI_TransmitReceive+0x1b8>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d014      	beq.n	80022c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	b292      	uxth	r2, r2
 80022a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	1c9a      	adds	r2, r3, #2
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022bc:	2301      	movs	r3, #1
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022c0:	f7fe fd16 	bl	8000cf0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d807      	bhi.n	80022e0 <HAL_SPI_TransmitReceive+0x1d8>
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d6:	d003      	beq.n	80022e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80022de:	e0a7      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1a6      	bne.n	8002238 <HAL_SPI_TransmitReceive+0x130>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1a1      	bne.n	8002238 <HAL_SPI_TransmitReceive+0x130>
 80022f4:	e07c      	b.n	80023f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_SPI_TransmitReceive+0x1fc>
 80022fe:	8b7b      	ldrh	r3, [r7, #26]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d16b      	bne.n	80023dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	330c      	adds	r3, #12
 800230e:	7812      	ldrb	r2, [r2, #0]
 8002310:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800232a:	e057      	b.n	80023dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d11c      	bne.n	8002374 <HAL_SPI_TransmitReceive+0x26c>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d017      	beq.n	8002374 <HAL_SPI_TransmitReceive+0x26c>
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002346:	2b01      	cmp	r3, #1
 8002348:	d114      	bne.n	8002374 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	330c      	adds	r3, #12
 8002354:	7812      	ldrb	r2, [r2, #0]
 8002356:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d119      	bne.n	80023b6 <HAL_SPI_TransmitReceive+0x2ae>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d014      	beq.n	80023b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023b2:	2301      	movs	r3, #1
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023b6:	f7fe fc9b 	bl	8000cf0 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d803      	bhi.n	80023ce <HAL_SPI_TransmitReceive+0x2c6>
 80023c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d102      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x2cc>
 80023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023da:	e029      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1a2      	bne.n	800232c <HAL_SPI_TransmitReceive+0x224>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d19d      	bne.n	800232c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f917 	bl	8002628 <SPI_EndRxTxTransaction>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800240c:	e010      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	e000      	b.n	8002430 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800242e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002440:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002444:	4618      	mov	r0, r3
 8002446:	3730      	adds	r7, #48	; 0x30
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800245c:	f7fe fc48 	bl	8000cf0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	4413      	add	r3, r2
 800246a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800246c:	f7fe fc40 	bl	8000cf0 <HAL_GetTick>
 8002470:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	0d1b      	lsrs	r3, r3, #20
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002482:	e054      	b.n	800252e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248a:	d050      	beq.n	800252e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800248c:	f7fe fc30 	bl	8000cf0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	429a      	cmp	r2, r3
 800249a:	d902      	bls.n	80024a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d13d      	bne.n	800251e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ba:	d111      	bne.n	80024e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c4:	d004      	beq.n	80024d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ce:	d107      	bne.n	80024e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e8:	d10f      	bne.n	800250a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002508:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e017      	b.n	800254e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3b01      	subs	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4013      	ands	r3, r2
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	429a      	cmp	r2, r3
 800254a:	d19b      	bne.n	8002484 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000020 	.word	0x20000020

0800255c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002570:	d111      	bne.n	8002596 <SPI_EndRxTransaction+0x3a>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800257a:	d004      	beq.n	8002586 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002584:	d107      	bne.n	8002596 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002594:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800259e:	d12a      	bne.n	80025f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a8:	d012      	beq.n	80025d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7ff ff49 	bl	800244c <SPI_WaitFlagStateUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d02d      	beq.n	800261c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e026      	b.n	800261e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	2101      	movs	r1, #1
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff ff36 	bl	800244c <SPI_WaitFlagStateUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01a      	beq.n	800261c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e013      	b.n	800261e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	2101      	movs	r1, #1
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff ff23 	bl	800244c <SPI_WaitFlagStateUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	f043 0220 	orr.w	r2, r3, #32
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e000      	b.n	800261e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <SPI_EndRxTxTransaction+0x7c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <SPI_EndRxTxTransaction+0x80>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0d5b      	lsrs	r3, r3, #21
 8002640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002652:	d112      	bne.n	800267a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff fef4 	bl	800244c <SPI_WaitFlagStateUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f043 0220 	orr.w	r2, r3, #32
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e00f      	b.n	800269a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3b01      	subs	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d0f2      	beq.n	800267a <SPI_EndRxTxTransaction+0x52>
 8002694:	e000      	b.n	8002698 <SPI_EndRxTxTransaction+0x70>
        break;
 8002696:	bf00      	nop
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000020 	.word	0x20000020
 80026a8:	165e9f81 	.word	0x165e9f81

080026ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e03f      	b.n	800273e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe fa34 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	; 0x24
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f929 	bl	8002948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b08a      	sub	sp, #40	; 0x28
 800274a:	af02      	add	r7, sp, #8
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	4613      	mov	r3, r2
 8002754:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	d17c      	bne.n	8002860 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_UART_Transmit+0x2c>
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e075      	b.n	8002862 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_UART_Transmit+0x3e>
 8002780:	2302      	movs	r3, #2
 8002782:	e06e      	b.n	8002862 <HAL_UART_Transmit+0x11c>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2221      	movs	r2, #33	; 0x21
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800279a:	f7fe faa9 	bl	8000cf0 <HAL_GetTick>
 800279e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	88fa      	ldrh	r2, [r7, #6]
 80027aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b4:	d108      	bne.n	80027c8 <HAL_UART_Transmit+0x82>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d104      	bne.n	80027c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	e003      	b.n	80027d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027d8:	e02a      	b.n	8002830 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2200      	movs	r2, #0
 80027e2:	2180      	movs	r1, #128	; 0x80
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f840 	bl	800286a <UART_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e036      	b.n	8002862 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10b      	bne.n	8002812 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002808:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	3302      	adds	r3, #2
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	e007      	b.n	8002822 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	3301      	adds	r3, #1
 8002820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1cf      	bne.n	80027da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	2140      	movs	r1, #64	; 0x40
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f810 	bl	800286a <UART_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e006      	b.n	8002862 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	e000      	b.n	8002862 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002860:	2302      	movs	r3, #2
  }
}
 8002862:	4618      	mov	r0, r3
 8002864:	3720      	adds	r7, #32
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b090      	sub	sp, #64	; 0x40
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	4613      	mov	r3, r2
 8002878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287a:	e050      	b.n	800291e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002882:	d04c      	beq.n	800291e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x30>
 800288a:	f7fe fa31 	bl	8000cf0 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002896:	429a      	cmp	r2, r3
 8002898:	d241      	bcs.n	800291e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	330c      	adds	r3, #12
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	e853 3f00 	ldrex	r3, [r3]
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	330c      	adds	r3, #12
 80028b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028ba:	637a      	str	r2, [r7, #52]	; 0x34
 80028bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c2:	e841 2300 	strex	r3, r2, [r1]
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1e5      	bne.n	800289a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3314      	adds	r3, #20
 80028d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	e853 3f00 	ldrex	r3, [r3]
 80028dc:	613b      	str	r3, [r7, #16]
   return(result);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3314      	adds	r3, #20
 80028ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028ee:	623a      	str	r2, [r7, #32]
 80028f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f2:	69f9      	ldr	r1, [r7, #28]
 80028f4:	6a3a      	ldr	r2, [r7, #32]
 80028f6:	e841 2300 	strex	r3, r2, [r1]
 80028fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1e5      	bne.n	80028ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e00f      	b.n	800293e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4013      	ands	r3, r2
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	429a      	cmp	r2, r3
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	429a      	cmp	r2, r3
 800293a:	d09f      	beq.n	800287c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3740      	adds	r7, #64	; 0x40
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800294c:	b09f      	sub	sp, #124	; 0x7c
 800294e:	af00      	add	r7, sp, #0
 8002950:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800295c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295e:	68d9      	ldr	r1, [r3, #12]
 8002960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	ea40 0301 	orr.w	r3, r0, r1
 8002968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800296a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	431a      	orrs	r2, r3
 8002974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	431a      	orrs	r2, r3
 800297a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4313      	orrs	r3, r2
 8002980:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800298c:	f021 010c 	bic.w	r1, r1, #12
 8002990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002996:	430b      	orrs	r3, r1
 8002998:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800299a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a6:	6999      	ldr	r1, [r3, #24]
 80029a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	ea40 0301 	orr.w	r3, r0, r1
 80029b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4bc5      	ldr	r3, [pc, #788]	; (8002ccc <UART_SetConfig+0x384>)
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d004      	beq.n	80029c6 <UART_SetConfig+0x7e>
 80029bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4bc3      	ldr	r3, [pc, #780]	; (8002cd0 <UART_SetConfig+0x388>)
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d103      	bne.n	80029ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029c6:	f7ff f8b5 	bl	8001b34 <HAL_RCC_GetPCLK2Freq>
 80029ca:	6778      	str	r0, [r7, #116]	; 0x74
 80029cc:	e002      	b.n	80029d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ce:	f7ff f89d 	bl	8001b0c <HAL_RCC_GetPCLK1Freq>
 80029d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029dc:	f040 80b6 	bne.w	8002b4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e2:	461c      	mov	r4, r3
 80029e4:	f04f 0500 	mov.w	r5, #0
 80029e8:	4622      	mov	r2, r4
 80029ea:	462b      	mov	r3, r5
 80029ec:	1891      	adds	r1, r2, r2
 80029ee:	6439      	str	r1, [r7, #64]	; 0x40
 80029f0:	415b      	adcs	r3, r3
 80029f2:	647b      	str	r3, [r7, #68]	; 0x44
 80029f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029f8:	1912      	adds	r2, r2, r4
 80029fa:	eb45 0303 	adc.w	r3, r5, r3
 80029fe:	f04f 0000 	mov.w	r0, #0
 8002a02:	f04f 0100 	mov.w	r1, #0
 8002a06:	00d9      	lsls	r1, r3, #3
 8002a08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a0c:	00d0      	lsls	r0, r2, #3
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	1911      	adds	r1, r2, r4
 8002a14:	6639      	str	r1, [r7, #96]	; 0x60
 8002a16:	416b      	adcs	r3, r5
 8002a18:	667b      	str	r3, [r7, #100]	; 0x64
 8002a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	1891      	adds	r1, r2, r2
 8002a26:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a28:	415b      	adcs	r3, r3
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a34:	f7fd fc24 	bl	8000280 <__aeabi_uldivmod>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4ba5      	ldr	r3, [pc, #660]	; (8002cd4 <UART_SetConfig+0x38c>)
 8002a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	011e      	lsls	r6, r3, #4
 8002a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a48:	461c      	mov	r4, r3
 8002a4a:	f04f 0500 	mov.w	r5, #0
 8002a4e:	4622      	mov	r2, r4
 8002a50:	462b      	mov	r3, r5
 8002a52:	1891      	adds	r1, r2, r2
 8002a54:	6339      	str	r1, [r7, #48]	; 0x30
 8002a56:	415b      	adcs	r3, r3
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
 8002a5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a5e:	1912      	adds	r2, r2, r4
 8002a60:	eb45 0303 	adc.w	r3, r5, r3
 8002a64:	f04f 0000 	mov.w	r0, #0
 8002a68:	f04f 0100 	mov.w	r1, #0
 8002a6c:	00d9      	lsls	r1, r3, #3
 8002a6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a72:	00d0      	lsls	r0, r2, #3
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	1911      	adds	r1, r2, r4
 8002a7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a7c:	416b      	adcs	r3, r5
 8002a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	1891      	adds	r1, r2, r2
 8002a8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a8e:	415b      	adcs	r3, r3
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a9a:	f7fd fbf1 	bl	8000280 <__aeabi_uldivmod>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4b8c      	ldr	r3, [pc, #560]	; (8002cd4 <UART_SetConfig+0x38c>)
 8002aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	2164      	movs	r1, #100	; 0x64
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	3332      	adds	r3, #50	; 0x32
 8002ab6:	4a87      	ldr	r2, [pc, #540]	; (8002cd4 <UART_SetConfig+0x38c>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ac4:	441e      	add	r6, r3
 8002ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	1894      	adds	r4, r2, r2
 8002ad4:	623c      	str	r4, [r7, #32]
 8002ad6:	415b      	adcs	r3, r3
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ade:	1812      	adds	r2, r2, r0
 8002ae0:	eb41 0303 	adc.w	r3, r1, r3
 8002ae4:	f04f 0400 	mov.w	r4, #0
 8002ae8:	f04f 0500 	mov.w	r5, #0
 8002aec:	00dd      	lsls	r5, r3, #3
 8002aee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002af2:	00d4      	lsls	r4, r2, #3
 8002af4:	4622      	mov	r2, r4
 8002af6:	462b      	mov	r3, r5
 8002af8:	1814      	adds	r4, r2, r0
 8002afa:	653c      	str	r4, [r7, #80]	; 0x50
 8002afc:	414b      	adcs	r3, r1
 8002afe:	657b      	str	r3, [r7, #84]	; 0x54
 8002b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	1891      	adds	r1, r2, r2
 8002b0c:	61b9      	str	r1, [r7, #24]
 8002b0e:	415b      	adcs	r3, r3
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002b1a:	f7fd fbb1 	bl	8000280 <__aeabi_uldivmod>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <UART_SetConfig+0x38c>)
 8002b24:	fba3 1302 	umull	r1, r3, r3, r2
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	2164      	movs	r1, #100	; 0x64
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	3332      	adds	r3, #50	; 0x32
 8002b36:	4a67      	ldr	r2, [pc, #412]	; (8002cd4 <UART_SetConfig+0x38c>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	f003 0207 	and.w	r2, r3, #7
 8002b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4432      	add	r2, r6
 8002b48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b4a:	e0b9      	b.n	8002cc0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4e:	461c      	mov	r4, r3
 8002b50:	f04f 0500 	mov.w	r5, #0
 8002b54:	4622      	mov	r2, r4
 8002b56:	462b      	mov	r3, r5
 8002b58:	1891      	adds	r1, r2, r2
 8002b5a:	6139      	str	r1, [r7, #16]
 8002b5c:	415b      	adcs	r3, r3
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b64:	1912      	adds	r2, r2, r4
 8002b66:	eb45 0303 	adc.w	r3, r5, r3
 8002b6a:	f04f 0000 	mov.w	r0, #0
 8002b6e:	f04f 0100 	mov.w	r1, #0
 8002b72:	00d9      	lsls	r1, r3, #3
 8002b74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b78:	00d0      	lsls	r0, r2, #3
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	eb12 0804 	adds.w	r8, r2, r4
 8002b82:	eb43 0905 	adc.w	r9, r3, r5
 8002b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	008b      	lsls	r3, r1, #2
 8002b9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b9e:	0082      	lsls	r2, r0, #2
 8002ba0:	4640      	mov	r0, r8
 8002ba2:	4649      	mov	r1, r9
 8002ba4:	f7fd fb6c 	bl	8000280 <__aeabi_uldivmod>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4b49      	ldr	r3, [pc, #292]	; (8002cd4 <UART_SetConfig+0x38c>)
 8002bae:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	011e      	lsls	r6, r3, #4
 8002bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f04f 0100 	mov.w	r1, #0
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	1894      	adds	r4, r2, r2
 8002bc4:	60bc      	str	r4, [r7, #8]
 8002bc6:	415b      	adcs	r3, r3
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bce:	1812      	adds	r2, r2, r0
 8002bd0:	eb41 0303 	adc.w	r3, r1, r3
 8002bd4:	f04f 0400 	mov.w	r4, #0
 8002bd8:	f04f 0500 	mov.w	r5, #0
 8002bdc:	00dd      	lsls	r5, r3, #3
 8002bde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002be2:	00d4      	lsls	r4, r2, #3
 8002be4:	4622      	mov	r2, r4
 8002be6:	462b      	mov	r3, r5
 8002be8:	1814      	adds	r4, r2, r0
 8002bea:	64bc      	str	r4, [r7, #72]	; 0x48
 8002bec:	414b      	adcs	r3, r1
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f04f 0100 	mov.w	r1, #0
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	008b      	lsls	r3, r1, #2
 8002c04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c08:	0082      	lsls	r2, r0, #2
 8002c0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002c0e:	f7fd fb37 	bl	8000280 <__aeabi_uldivmod>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <UART_SetConfig+0x38c>)
 8002c18:	fba3 1302 	umull	r1, r3, r3, r2
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	2164      	movs	r1, #100	; 0x64
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	3332      	adds	r3, #50	; 0x32
 8002c2a:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <UART_SetConfig+0x38c>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c36:	441e      	add	r6, r3
 8002c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	1894      	adds	r4, r2, r2
 8002c46:	603c      	str	r4, [r7, #0]
 8002c48:	415b      	adcs	r3, r3
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c50:	1812      	adds	r2, r2, r0
 8002c52:	eb41 0303 	adc.w	r3, r1, r3
 8002c56:	f04f 0400 	mov.w	r4, #0
 8002c5a:	f04f 0500 	mov.w	r5, #0
 8002c5e:	00dd      	lsls	r5, r3, #3
 8002c60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c64:	00d4      	lsls	r4, r2, #3
 8002c66:	4622      	mov	r2, r4
 8002c68:	462b      	mov	r3, r5
 8002c6a:	eb12 0a00 	adds.w	sl, r2, r0
 8002c6e:	eb43 0b01 	adc.w	fp, r3, r1
 8002c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f04f 0100 	mov.w	r1, #0
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	008b      	lsls	r3, r1, #2
 8002c86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c8a:	0082      	lsls	r2, r0, #2
 8002c8c:	4650      	mov	r0, sl
 8002c8e:	4659      	mov	r1, fp
 8002c90:	f7fd faf6 	bl	8000280 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <UART_SetConfig+0x38c>)
 8002c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2164      	movs	r1, #100	; 0x64
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	3332      	adds	r3, #50	; 0x32
 8002cac:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <UART_SetConfig+0x38c>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	f003 020f 	and.w	r2, r3, #15
 8002cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4432      	add	r2, r6
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	377c      	adds	r7, #124	; 0x7c
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cca:	bf00      	nop
 8002ccc:	40011000 	.word	0x40011000
 8002cd0:	40011400 	.word	0x40011400
 8002cd4:	51eb851f 	.word	0x51eb851f

08002cd8 <led1_toggle>:
{
    HAL_GPIO_WritePin(LED1_PIN_PORT, LED1_PIN_NUMBER, SET);
}

void led1_toggle()
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_PIN_PORT, LED1_PIN_NUMBER);
 8002cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <led1_toggle+0x14>)
 8002ce2:	f7fe fac0 	bl	8001266 <HAL_GPIO_TogglePin>
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40020800 	.word	0x40020800

08002cf0 <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload, payload_length length)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
    nrf24l01p_read_rx_fifo(rx_payload, length);
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f807 	bl	8002d14 <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 8002d06:	f000 f845 	bl	8002d94 <nrf24l01p_clear_rx_dr>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload, payload_length length)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8002d20:	2361      	movs	r3, #97	; 0x61
 8002d22:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8002d24:	f000 f856 	bl	8002dd4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002d28:	f107 020e 	add.w	r2, r7, #14
 8002d2c:	f107 010f 	add.w	r1, r7, #15
 8002d30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2301      	movs	r3, #1
 8002d38:	4808      	ldr	r0, [pc, #32]	; (8002d5c <nrf24l01p_read_rx_fifo+0x48>)
 8002d3a:	f7ff f9e5 	bl	8002108 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, length, 2000);
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4804      	ldr	r0, [pc, #16]	; (8002d5c <nrf24l01p_read_rx_fifo+0x48>)
 8002d4a:	f7ff f8cc 	bl	8001ee6 <HAL_SPI_Receive>
    cs_high();
 8002d4e:	f000 f835 	bl	8002dbc <cs_high>

    return status;
 8002d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	200000b8 	.word	0x200000b8

08002d60 <nrf24l01p_get_status>:
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
    cs_high();
}

uint8_t nrf24l01p_get_status()
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8002d66:	23ff      	movs	r3, #255	; 0xff
 8002d68:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002d6a:	f000 f833 	bl	8002dd4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002d6e:	1dba      	adds	r2, r7, #6
 8002d70:	1df9      	adds	r1, r7, #7
 8002d72:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2301      	movs	r3, #1
 8002d7a:	4805      	ldr	r0, [pc, #20]	; (8002d90 <nrf24l01p_get_status+0x30>)
 8002d7c:	f7ff f9c4 	bl	8002108 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8002d80:	f000 f81c 	bl	8002dbc <cs_high>

    return status;
 8002d84:	79bb      	ldrb	r3, [r7, #6]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200000b8 	.word	0x200000b8

08002d94 <nrf24l01p_clear_rx_dr>:
{
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
}

void nrf24l01p_clear_rx_dr()
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8002d9a:	f7ff ffe1 	bl	8002d60 <nrf24l01p_get_status>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da8:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	4619      	mov	r1, r3
 8002dae:	2007      	movs	r0, #7
 8002db0:	f000 f81c 	bl	8002dec <write_register>
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <cs_high>:
}


/* Static Functions */
static void cs_high()
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dc6:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <cs_high+0x14>)
 8002dc8:	f7fe fa34 	bl	8001234 <HAL_GPIO_WritePin>
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40020400 	.word	0x40020400

08002dd4 <cs_low>:

static void cs_low()
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dde:	4802      	ldr	r0, [pc, #8]	; (8002de8 <cs_low+0x14>)
 8002de0:	f7fe fa28 	bl	8001234 <HAL_GPIO_WritePin>
}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40020400 	.word	0x40020400

08002dec <write_register>:

    return read_val;
}

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	4603      	mov	r3, r0
 8002df4:	460a      	mov	r2, r1
 8002df6:	71fb      	strb	r3, [r7, #7]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f043 0320 	orr.w	r3, r3, #32
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8002e06:	79bb      	ldrb	r3, [r7, #6]
 8002e08:	737b      	strb	r3, [r7, #13]

    cs_low();
 8002e0a:	f7ff ffe3 	bl	8002dd4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002e0e:	f107 020e 	add.w	r2, r7, #14
 8002e12:	f107 010f 	add.w	r1, r7, #15
 8002e16:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	4809      	ldr	r0, [pc, #36]	; (8002e44 <write_register+0x58>)
 8002e20:	f7ff f972 	bl	8002108 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8002e24:	f107 010d 	add.w	r1, r7, #13
 8002e28:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4805      	ldr	r0, [pc, #20]	; (8002e44 <write_register+0x58>)
 8002e30:	f7fe ff1d 	bl	8001c6e <HAL_SPI_Transmit>
    cs_high();
 8002e34:	f7ff ffc2 	bl	8002dbc <cs_high>

    return write_val;
 8002e38:	7b7b      	ldrb	r3, [r7, #13]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200000b8 	.word	0x200000b8

08002e48 <__errno>:
 8002e48:	4b01      	ldr	r3, [pc, #4]	; (8002e50 <__errno+0x8>)
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	2000002c 	.word	0x2000002c

08002e54 <__libc_init_array>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	4d0d      	ldr	r5, [pc, #52]	; (8002e8c <__libc_init_array+0x38>)
 8002e58:	4c0d      	ldr	r4, [pc, #52]	; (8002e90 <__libc_init_array+0x3c>)
 8002e5a:	1b64      	subs	r4, r4, r5
 8002e5c:	10a4      	asrs	r4, r4, #2
 8002e5e:	2600      	movs	r6, #0
 8002e60:	42a6      	cmp	r6, r4
 8002e62:	d109      	bne.n	8002e78 <__libc_init_array+0x24>
 8002e64:	4d0b      	ldr	r5, [pc, #44]	; (8002e94 <__libc_init_array+0x40>)
 8002e66:	4c0c      	ldr	r4, [pc, #48]	; (8002e98 <__libc_init_array+0x44>)
 8002e68:	f000 ff76 	bl	8003d58 <_init>
 8002e6c:	1b64      	subs	r4, r4, r5
 8002e6e:	10a4      	asrs	r4, r4, #2
 8002e70:	2600      	movs	r6, #0
 8002e72:	42a6      	cmp	r6, r4
 8002e74:	d105      	bne.n	8002e82 <__libc_init_array+0x2e>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7c:	4798      	blx	r3
 8002e7e:	3601      	adds	r6, #1
 8002e80:	e7ee      	b.n	8002e60 <__libc_init_array+0xc>
 8002e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e86:	4798      	blx	r3
 8002e88:	3601      	adds	r6, #1
 8002e8a:	e7f2      	b.n	8002e72 <__libc_init_array+0x1e>
 8002e8c:	08003e30 	.word	0x08003e30
 8002e90:	08003e30 	.word	0x08003e30
 8002e94:	08003e30 	.word	0x08003e30
 8002e98:	08003e34 	.word	0x08003e34

08002e9c <memset>:
 8002e9c:	4402      	add	r2, r0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d100      	bne.n	8002ea6 <memset+0xa>
 8002ea4:	4770      	bx	lr
 8002ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eaa:	e7f9      	b.n	8002ea0 <memset+0x4>

08002eac <iprintf>:
 8002eac:	b40f      	push	{r0, r1, r2, r3}
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <iprintf+0x2c>)
 8002eb0:	b513      	push	{r0, r1, r4, lr}
 8002eb2:	681c      	ldr	r4, [r3, #0]
 8002eb4:	b124      	cbz	r4, 8002ec0 <iprintf+0x14>
 8002eb6:	69a3      	ldr	r3, [r4, #24]
 8002eb8:	b913      	cbnz	r3, 8002ec0 <iprintf+0x14>
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f000 f866 	bl	8002f8c <__sinit>
 8002ec0:	ab05      	add	r3, sp, #20
 8002ec2:	9a04      	ldr	r2, [sp, #16]
 8002ec4:	68a1      	ldr	r1, [r4, #8]
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 f983 	bl	80031d4 <_vfiprintf_r>
 8002ece:	b002      	add	sp, #8
 8002ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ed4:	b004      	add	sp, #16
 8002ed6:	4770      	bx	lr
 8002ed8:	2000002c 	.word	0x2000002c

08002edc <std>:
 8002edc:	2300      	movs	r3, #0
 8002ede:	b510      	push	{r4, lr}
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eea:	6083      	str	r3, [r0, #8]
 8002eec:	8181      	strh	r1, [r0, #12]
 8002eee:	6643      	str	r3, [r0, #100]	; 0x64
 8002ef0:	81c2      	strh	r2, [r0, #14]
 8002ef2:	6183      	str	r3, [r0, #24]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	305c      	adds	r0, #92	; 0x5c
 8002efa:	f7ff ffcf 	bl	8002e9c <memset>
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <std+0x38>)
 8002f00:	6263      	str	r3, [r4, #36]	; 0x24
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <std+0x3c>)
 8002f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <std+0x40>)
 8002f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <std+0x44>)
 8002f0c:	6224      	str	r4, [r4, #32]
 8002f0e:	6323      	str	r3, [r4, #48]	; 0x30
 8002f10:	bd10      	pop	{r4, pc}
 8002f12:	bf00      	nop
 8002f14:	0800377d 	.word	0x0800377d
 8002f18:	0800379f 	.word	0x0800379f
 8002f1c:	080037d7 	.word	0x080037d7
 8002f20:	080037fb 	.word	0x080037fb

08002f24 <_cleanup_r>:
 8002f24:	4901      	ldr	r1, [pc, #4]	; (8002f2c <_cleanup_r+0x8>)
 8002f26:	f000 b8af 	b.w	8003088 <_fwalk_reent>
 8002f2a:	bf00      	nop
 8002f2c:	08003ad5 	.word	0x08003ad5

08002f30 <__sfmoreglue>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	1e4a      	subs	r2, r1, #1
 8002f34:	2568      	movs	r5, #104	; 0x68
 8002f36:	4355      	muls	r5, r2
 8002f38:	460e      	mov	r6, r1
 8002f3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f3e:	f000 f8c5 	bl	80030cc <_malloc_r>
 8002f42:	4604      	mov	r4, r0
 8002f44:	b140      	cbz	r0, 8002f58 <__sfmoreglue+0x28>
 8002f46:	2100      	movs	r1, #0
 8002f48:	e9c0 1600 	strd	r1, r6, [r0]
 8002f4c:	300c      	adds	r0, #12
 8002f4e:	60a0      	str	r0, [r4, #8]
 8002f50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f54:	f7ff ffa2 	bl	8002e9c <memset>
 8002f58:	4620      	mov	r0, r4
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}

08002f5c <__sfp_lock_acquire>:
 8002f5c:	4801      	ldr	r0, [pc, #4]	; (8002f64 <__sfp_lock_acquire+0x8>)
 8002f5e:	f000 b8b3 	b.w	80030c8 <__retarget_lock_acquire_recursive>
 8002f62:	bf00      	nop
 8002f64:	20000160 	.word	0x20000160

08002f68 <__sfp_lock_release>:
 8002f68:	4801      	ldr	r0, [pc, #4]	; (8002f70 <__sfp_lock_release+0x8>)
 8002f6a:	f000 b8ae 	b.w	80030ca <__retarget_lock_release_recursive>
 8002f6e:	bf00      	nop
 8002f70:	20000160 	.word	0x20000160

08002f74 <__sinit_lock_acquire>:
 8002f74:	4801      	ldr	r0, [pc, #4]	; (8002f7c <__sinit_lock_acquire+0x8>)
 8002f76:	f000 b8a7 	b.w	80030c8 <__retarget_lock_acquire_recursive>
 8002f7a:	bf00      	nop
 8002f7c:	2000015b 	.word	0x2000015b

08002f80 <__sinit_lock_release>:
 8002f80:	4801      	ldr	r0, [pc, #4]	; (8002f88 <__sinit_lock_release+0x8>)
 8002f82:	f000 b8a2 	b.w	80030ca <__retarget_lock_release_recursive>
 8002f86:	bf00      	nop
 8002f88:	2000015b 	.word	0x2000015b

08002f8c <__sinit>:
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	4604      	mov	r4, r0
 8002f90:	f7ff fff0 	bl	8002f74 <__sinit_lock_acquire>
 8002f94:	69a3      	ldr	r3, [r4, #24]
 8002f96:	b11b      	cbz	r3, 8002fa0 <__sinit+0x14>
 8002f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f9c:	f7ff bff0 	b.w	8002f80 <__sinit_lock_release>
 8002fa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002fa4:	6523      	str	r3, [r4, #80]	; 0x50
 8002fa6:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <__sinit+0x68>)
 8002fa8:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <__sinit+0x6c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	62a2      	str	r2, [r4, #40]	; 0x28
 8002fae:	42a3      	cmp	r3, r4
 8002fb0:	bf04      	itt	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	61a3      	streq	r3, [r4, #24]
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f000 f820 	bl	8002ffc <__sfp>
 8002fbc:	6060      	str	r0, [r4, #4]
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f000 f81c 	bl	8002ffc <__sfp>
 8002fc4:	60a0      	str	r0, [r4, #8]
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f000 f818 	bl	8002ffc <__sfp>
 8002fcc:	2200      	movs	r2, #0
 8002fce:	60e0      	str	r0, [r4, #12]
 8002fd0:	2104      	movs	r1, #4
 8002fd2:	6860      	ldr	r0, [r4, #4]
 8002fd4:	f7ff ff82 	bl	8002edc <std>
 8002fd8:	68a0      	ldr	r0, [r4, #8]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	2109      	movs	r1, #9
 8002fde:	f7ff ff7d 	bl	8002edc <std>
 8002fe2:	68e0      	ldr	r0, [r4, #12]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	2112      	movs	r1, #18
 8002fe8:	f7ff ff78 	bl	8002edc <std>
 8002fec:	2301      	movs	r3, #1
 8002fee:	61a3      	str	r3, [r4, #24]
 8002ff0:	e7d2      	b.n	8002f98 <__sinit+0xc>
 8002ff2:	bf00      	nop
 8002ff4:	08003d90 	.word	0x08003d90
 8002ff8:	08002f25 	.word	0x08002f25

08002ffc <__sfp>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	4607      	mov	r7, r0
 8003000:	f7ff ffac 	bl	8002f5c <__sfp_lock_acquire>
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <__sfp+0x84>)
 8003006:	681e      	ldr	r6, [r3, #0]
 8003008:	69b3      	ldr	r3, [r6, #24]
 800300a:	b913      	cbnz	r3, 8003012 <__sfp+0x16>
 800300c:	4630      	mov	r0, r6
 800300e:	f7ff ffbd 	bl	8002f8c <__sinit>
 8003012:	3648      	adds	r6, #72	; 0x48
 8003014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003018:	3b01      	subs	r3, #1
 800301a:	d503      	bpl.n	8003024 <__sfp+0x28>
 800301c:	6833      	ldr	r3, [r6, #0]
 800301e:	b30b      	cbz	r3, 8003064 <__sfp+0x68>
 8003020:	6836      	ldr	r6, [r6, #0]
 8003022:	e7f7      	b.n	8003014 <__sfp+0x18>
 8003024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003028:	b9d5      	cbnz	r5, 8003060 <__sfp+0x64>
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <__sfp+0x88>)
 800302c:	60e3      	str	r3, [r4, #12]
 800302e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003032:	6665      	str	r5, [r4, #100]	; 0x64
 8003034:	f000 f847 	bl	80030c6 <__retarget_lock_init_recursive>
 8003038:	f7ff ff96 	bl	8002f68 <__sfp_lock_release>
 800303c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003044:	6025      	str	r5, [r4, #0]
 8003046:	61a5      	str	r5, [r4, #24]
 8003048:	2208      	movs	r2, #8
 800304a:	4629      	mov	r1, r5
 800304c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003050:	f7ff ff24 	bl	8002e9c <memset>
 8003054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800305c:	4620      	mov	r0, r4
 800305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003060:	3468      	adds	r4, #104	; 0x68
 8003062:	e7d9      	b.n	8003018 <__sfp+0x1c>
 8003064:	2104      	movs	r1, #4
 8003066:	4638      	mov	r0, r7
 8003068:	f7ff ff62 	bl	8002f30 <__sfmoreglue>
 800306c:	4604      	mov	r4, r0
 800306e:	6030      	str	r0, [r6, #0]
 8003070:	2800      	cmp	r0, #0
 8003072:	d1d5      	bne.n	8003020 <__sfp+0x24>
 8003074:	f7ff ff78 	bl	8002f68 <__sfp_lock_release>
 8003078:	230c      	movs	r3, #12
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	e7ee      	b.n	800305c <__sfp+0x60>
 800307e:	bf00      	nop
 8003080:	08003d90 	.word	0x08003d90
 8003084:	ffff0001 	.word	0xffff0001

08003088 <_fwalk_reent>:
 8003088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800308c:	4606      	mov	r6, r0
 800308e:	4688      	mov	r8, r1
 8003090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003094:	2700      	movs	r7, #0
 8003096:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800309a:	f1b9 0901 	subs.w	r9, r9, #1
 800309e:	d505      	bpl.n	80030ac <_fwalk_reent+0x24>
 80030a0:	6824      	ldr	r4, [r4, #0]
 80030a2:	2c00      	cmp	r4, #0
 80030a4:	d1f7      	bne.n	8003096 <_fwalk_reent+0xe>
 80030a6:	4638      	mov	r0, r7
 80030a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ac:	89ab      	ldrh	r3, [r5, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d907      	bls.n	80030c2 <_fwalk_reent+0x3a>
 80030b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030b6:	3301      	adds	r3, #1
 80030b8:	d003      	beq.n	80030c2 <_fwalk_reent+0x3a>
 80030ba:	4629      	mov	r1, r5
 80030bc:	4630      	mov	r0, r6
 80030be:	47c0      	blx	r8
 80030c0:	4307      	orrs	r7, r0
 80030c2:	3568      	adds	r5, #104	; 0x68
 80030c4:	e7e9      	b.n	800309a <_fwalk_reent+0x12>

080030c6 <__retarget_lock_init_recursive>:
 80030c6:	4770      	bx	lr

080030c8 <__retarget_lock_acquire_recursive>:
 80030c8:	4770      	bx	lr

080030ca <__retarget_lock_release_recursive>:
 80030ca:	4770      	bx	lr

080030cc <_malloc_r>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	1ccd      	adds	r5, r1, #3
 80030d0:	f025 0503 	bic.w	r5, r5, #3
 80030d4:	3508      	adds	r5, #8
 80030d6:	2d0c      	cmp	r5, #12
 80030d8:	bf38      	it	cc
 80030da:	250c      	movcc	r5, #12
 80030dc:	2d00      	cmp	r5, #0
 80030de:	4606      	mov	r6, r0
 80030e0:	db01      	blt.n	80030e6 <_malloc_r+0x1a>
 80030e2:	42a9      	cmp	r1, r5
 80030e4:	d903      	bls.n	80030ee <_malloc_r+0x22>
 80030e6:	230c      	movs	r3, #12
 80030e8:	6033      	str	r3, [r6, #0]
 80030ea:	2000      	movs	r0, #0
 80030ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ee:	f000 fda3 	bl	8003c38 <__malloc_lock>
 80030f2:	4921      	ldr	r1, [pc, #132]	; (8003178 <_malloc_r+0xac>)
 80030f4:	680a      	ldr	r2, [r1, #0]
 80030f6:	4614      	mov	r4, r2
 80030f8:	b99c      	cbnz	r4, 8003122 <_malloc_r+0x56>
 80030fa:	4f20      	ldr	r7, [pc, #128]	; (800317c <_malloc_r+0xb0>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b923      	cbnz	r3, 800310a <_malloc_r+0x3e>
 8003100:	4621      	mov	r1, r4
 8003102:	4630      	mov	r0, r6
 8003104:	f000 fb2a 	bl	800375c <_sbrk_r>
 8003108:	6038      	str	r0, [r7, #0]
 800310a:	4629      	mov	r1, r5
 800310c:	4630      	mov	r0, r6
 800310e:	f000 fb25 	bl	800375c <_sbrk_r>
 8003112:	1c43      	adds	r3, r0, #1
 8003114:	d123      	bne.n	800315e <_malloc_r+0x92>
 8003116:	230c      	movs	r3, #12
 8003118:	6033      	str	r3, [r6, #0]
 800311a:	4630      	mov	r0, r6
 800311c:	f000 fd92 	bl	8003c44 <__malloc_unlock>
 8003120:	e7e3      	b.n	80030ea <_malloc_r+0x1e>
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	1b5b      	subs	r3, r3, r5
 8003126:	d417      	bmi.n	8003158 <_malloc_r+0x8c>
 8003128:	2b0b      	cmp	r3, #11
 800312a:	d903      	bls.n	8003134 <_malloc_r+0x68>
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	441c      	add	r4, r3
 8003130:	6025      	str	r5, [r4, #0]
 8003132:	e004      	b.n	800313e <_malloc_r+0x72>
 8003134:	6863      	ldr	r3, [r4, #4]
 8003136:	42a2      	cmp	r2, r4
 8003138:	bf0c      	ite	eq
 800313a:	600b      	streq	r3, [r1, #0]
 800313c:	6053      	strne	r3, [r2, #4]
 800313e:	4630      	mov	r0, r6
 8003140:	f000 fd80 	bl	8003c44 <__malloc_unlock>
 8003144:	f104 000b 	add.w	r0, r4, #11
 8003148:	1d23      	adds	r3, r4, #4
 800314a:	f020 0007 	bic.w	r0, r0, #7
 800314e:	1ac2      	subs	r2, r0, r3
 8003150:	d0cc      	beq.n	80030ec <_malloc_r+0x20>
 8003152:	1a1b      	subs	r3, r3, r0
 8003154:	50a3      	str	r3, [r4, r2]
 8003156:	e7c9      	b.n	80030ec <_malloc_r+0x20>
 8003158:	4622      	mov	r2, r4
 800315a:	6864      	ldr	r4, [r4, #4]
 800315c:	e7cc      	b.n	80030f8 <_malloc_r+0x2c>
 800315e:	1cc4      	adds	r4, r0, #3
 8003160:	f024 0403 	bic.w	r4, r4, #3
 8003164:	42a0      	cmp	r0, r4
 8003166:	d0e3      	beq.n	8003130 <_malloc_r+0x64>
 8003168:	1a21      	subs	r1, r4, r0
 800316a:	4630      	mov	r0, r6
 800316c:	f000 faf6 	bl	800375c <_sbrk_r>
 8003170:	3001      	adds	r0, #1
 8003172:	d1dd      	bne.n	8003130 <_malloc_r+0x64>
 8003174:	e7cf      	b.n	8003116 <_malloc_r+0x4a>
 8003176:	bf00      	nop
 8003178:	200000b0 	.word	0x200000b0
 800317c:	200000b4 	.word	0x200000b4

08003180 <__sfputc_r>:
 8003180:	6893      	ldr	r3, [r2, #8]
 8003182:	3b01      	subs	r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	b410      	push	{r4}
 8003188:	6093      	str	r3, [r2, #8]
 800318a:	da08      	bge.n	800319e <__sfputc_r+0x1e>
 800318c:	6994      	ldr	r4, [r2, #24]
 800318e:	42a3      	cmp	r3, r4
 8003190:	db01      	blt.n	8003196 <__sfputc_r+0x16>
 8003192:	290a      	cmp	r1, #10
 8003194:	d103      	bne.n	800319e <__sfputc_r+0x1e>
 8003196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800319a:	f000 bb33 	b.w	8003804 <__swbuf_r>
 800319e:	6813      	ldr	r3, [r2, #0]
 80031a0:	1c58      	adds	r0, r3, #1
 80031a2:	6010      	str	r0, [r2, #0]
 80031a4:	7019      	strb	r1, [r3, #0]
 80031a6:	4608      	mov	r0, r1
 80031a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <__sfputs_r>:
 80031ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b0:	4606      	mov	r6, r0
 80031b2:	460f      	mov	r7, r1
 80031b4:	4614      	mov	r4, r2
 80031b6:	18d5      	adds	r5, r2, r3
 80031b8:	42ac      	cmp	r4, r5
 80031ba:	d101      	bne.n	80031c0 <__sfputs_r+0x12>
 80031bc:	2000      	movs	r0, #0
 80031be:	e007      	b.n	80031d0 <__sfputs_r+0x22>
 80031c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031c4:	463a      	mov	r2, r7
 80031c6:	4630      	mov	r0, r6
 80031c8:	f7ff ffda 	bl	8003180 <__sfputc_r>
 80031cc:	1c43      	adds	r3, r0, #1
 80031ce:	d1f3      	bne.n	80031b8 <__sfputs_r+0xa>
 80031d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031d4 <_vfiprintf_r>:
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	460d      	mov	r5, r1
 80031da:	b09d      	sub	sp, #116	; 0x74
 80031dc:	4614      	mov	r4, r2
 80031de:	4698      	mov	r8, r3
 80031e0:	4606      	mov	r6, r0
 80031e2:	b118      	cbz	r0, 80031ec <_vfiprintf_r+0x18>
 80031e4:	6983      	ldr	r3, [r0, #24]
 80031e6:	b90b      	cbnz	r3, 80031ec <_vfiprintf_r+0x18>
 80031e8:	f7ff fed0 	bl	8002f8c <__sinit>
 80031ec:	4b89      	ldr	r3, [pc, #548]	; (8003414 <_vfiprintf_r+0x240>)
 80031ee:	429d      	cmp	r5, r3
 80031f0:	d11b      	bne.n	800322a <_vfiprintf_r+0x56>
 80031f2:	6875      	ldr	r5, [r6, #4]
 80031f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031f6:	07d9      	lsls	r1, r3, #31
 80031f8:	d405      	bmi.n	8003206 <_vfiprintf_r+0x32>
 80031fa:	89ab      	ldrh	r3, [r5, #12]
 80031fc:	059a      	lsls	r2, r3, #22
 80031fe:	d402      	bmi.n	8003206 <_vfiprintf_r+0x32>
 8003200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003202:	f7ff ff61 	bl	80030c8 <__retarget_lock_acquire_recursive>
 8003206:	89ab      	ldrh	r3, [r5, #12]
 8003208:	071b      	lsls	r3, r3, #28
 800320a:	d501      	bpl.n	8003210 <_vfiprintf_r+0x3c>
 800320c:	692b      	ldr	r3, [r5, #16]
 800320e:	b9eb      	cbnz	r3, 800324c <_vfiprintf_r+0x78>
 8003210:	4629      	mov	r1, r5
 8003212:	4630      	mov	r0, r6
 8003214:	f000 fb5a 	bl	80038cc <__swsetup_r>
 8003218:	b1c0      	cbz	r0, 800324c <_vfiprintf_r+0x78>
 800321a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800321c:	07dc      	lsls	r4, r3, #31
 800321e:	d50e      	bpl.n	800323e <_vfiprintf_r+0x6a>
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	b01d      	add	sp, #116	; 0x74
 8003226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800322a:	4b7b      	ldr	r3, [pc, #492]	; (8003418 <_vfiprintf_r+0x244>)
 800322c:	429d      	cmp	r5, r3
 800322e:	d101      	bne.n	8003234 <_vfiprintf_r+0x60>
 8003230:	68b5      	ldr	r5, [r6, #8]
 8003232:	e7df      	b.n	80031f4 <_vfiprintf_r+0x20>
 8003234:	4b79      	ldr	r3, [pc, #484]	; (800341c <_vfiprintf_r+0x248>)
 8003236:	429d      	cmp	r5, r3
 8003238:	bf08      	it	eq
 800323a:	68f5      	ldreq	r5, [r6, #12]
 800323c:	e7da      	b.n	80031f4 <_vfiprintf_r+0x20>
 800323e:	89ab      	ldrh	r3, [r5, #12]
 8003240:	0598      	lsls	r0, r3, #22
 8003242:	d4ed      	bmi.n	8003220 <_vfiprintf_r+0x4c>
 8003244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003246:	f7ff ff40 	bl	80030ca <__retarget_lock_release_recursive>
 800324a:	e7e9      	b.n	8003220 <_vfiprintf_r+0x4c>
 800324c:	2300      	movs	r3, #0
 800324e:	9309      	str	r3, [sp, #36]	; 0x24
 8003250:	2320      	movs	r3, #32
 8003252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003256:	f8cd 800c 	str.w	r8, [sp, #12]
 800325a:	2330      	movs	r3, #48	; 0x30
 800325c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003420 <_vfiprintf_r+0x24c>
 8003260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003264:	f04f 0901 	mov.w	r9, #1
 8003268:	4623      	mov	r3, r4
 800326a:	469a      	mov	sl, r3
 800326c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003270:	b10a      	cbz	r2, 8003276 <_vfiprintf_r+0xa2>
 8003272:	2a25      	cmp	r2, #37	; 0x25
 8003274:	d1f9      	bne.n	800326a <_vfiprintf_r+0x96>
 8003276:	ebba 0b04 	subs.w	fp, sl, r4
 800327a:	d00b      	beq.n	8003294 <_vfiprintf_r+0xc0>
 800327c:	465b      	mov	r3, fp
 800327e:	4622      	mov	r2, r4
 8003280:	4629      	mov	r1, r5
 8003282:	4630      	mov	r0, r6
 8003284:	f7ff ff93 	bl	80031ae <__sfputs_r>
 8003288:	3001      	adds	r0, #1
 800328a:	f000 80aa 	beq.w	80033e2 <_vfiprintf_r+0x20e>
 800328e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003290:	445a      	add	r2, fp
 8003292:	9209      	str	r2, [sp, #36]	; 0x24
 8003294:	f89a 3000 	ldrb.w	r3, [sl]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80a2 	beq.w	80033e2 <_vfiprintf_r+0x20e>
 800329e:	2300      	movs	r3, #0
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295
 80032a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032a8:	f10a 0a01 	add.w	sl, sl, #1
 80032ac:	9304      	str	r3, [sp, #16]
 80032ae:	9307      	str	r3, [sp, #28]
 80032b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032b4:	931a      	str	r3, [sp, #104]	; 0x68
 80032b6:	4654      	mov	r4, sl
 80032b8:	2205      	movs	r2, #5
 80032ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032be:	4858      	ldr	r0, [pc, #352]	; (8003420 <_vfiprintf_r+0x24c>)
 80032c0:	f7fc ff8e 	bl	80001e0 <memchr>
 80032c4:	9a04      	ldr	r2, [sp, #16]
 80032c6:	b9d8      	cbnz	r0, 8003300 <_vfiprintf_r+0x12c>
 80032c8:	06d1      	lsls	r1, r2, #27
 80032ca:	bf44      	itt	mi
 80032cc:	2320      	movmi	r3, #32
 80032ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032d2:	0713      	lsls	r3, r2, #28
 80032d4:	bf44      	itt	mi
 80032d6:	232b      	movmi	r3, #43	; 0x2b
 80032d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032dc:	f89a 3000 	ldrb.w	r3, [sl]
 80032e0:	2b2a      	cmp	r3, #42	; 0x2a
 80032e2:	d015      	beq.n	8003310 <_vfiprintf_r+0x13c>
 80032e4:	9a07      	ldr	r2, [sp, #28]
 80032e6:	4654      	mov	r4, sl
 80032e8:	2000      	movs	r0, #0
 80032ea:	f04f 0c0a 	mov.w	ip, #10
 80032ee:	4621      	mov	r1, r4
 80032f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032f4:	3b30      	subs	r3, #48	; 0x30
 80032f6:	2b09      	cmp	r3, #9
 80032f8:	d94e      	bls.n	8003398 <_vfiprintf_r+0x1c4>
 80032fa:	b1b0      	cbz	r0, 800332a <_vfiprintf_r+0x156>
 80032fc:	9207      	str	r2, [sp, #28]
 80032fe:	e014      	b.n	800332a <_vfiprintf_r+0x156>
 8003300:	eba0 0308 	sub.w	r3, r0, r8
 8003304:	fa09 f303 	lsl.w	r3, r9, r3
 8003308:	4313      	orrs	r3, r2
 800330a:	9304      	str	r3, [sp, #16]
 800330c:	46a2      	mov	sl, r4
 800330e:	e7d2      	b.n	80032b6 <_vfiprintf_r+0xe2>
 8003310:	9b03      	ldr	r3, [sp, #12]
 8003312:	1d19      	adds	r1, r3, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	9103      	str	r1, [sp, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	bfbb      	ittet	lt
 800331c:	425b      	neglt	r3, r3
 800331e:	f042 0202 	orrlt.w	r2, r2, #2
 8003322:	9307      	strge	r3, [sp, #28]
 8003324:	9307      	strlt	r3, [sp, #28]
 8003326:	bfb8      	it	lt
 8003328:	9204      	strlt	r2, [sp, #16]
 800332a:	7823      	ldrb	r3, [r4, #0]
 800332c:	2b2e      	cmp	r3, #46	; 0x2e
 800332e:	d10c      	bne.n	800334a <_vfiprintf_r+0x176>
 8003330:	7863      	ldrb	r3, [r4, #1]
 8003332:	2b2a      	cmp	r3, #42	; 0x2a
 8003334:	d135      	bne.n	80033a2 <_vfiprintf_r+0x1ce>
 8003336:	9b03      	ldr	r3, [sp, #12]
 8003338:	1d1a      	adds	r2, r3, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	9203      	str	r2, [sp, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	bfb8      	it	lt
 8003342:	f04f 33ff 	movlt.w	r3, #4294967295
 8003346:	3402      	adds	r4, #2
 8003348:	9305      	str	r3, [sp, #20]
 800334a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003430 <_vfiprintf_r+0x25c>
 800334e:	7821      	ldrb	r1, [r4, #0]
 8003350:	2203      	movs	r2, #3
 8003352:	4650      	mov	r0, sl
 8003354:	f7fc ff44 	bl	80001e0 <memchr>
 8003358:	b140      	cbz	r0, 800336c <_vfiprintf_r+0x198>
 800335a:	2340      	movs	r3, #64	; 0x40
 800335c:	eba0 000a 	sub.w	r0, r0, sl
 8003360:	fa03 f000 	lsl.w	r0, r3, r0
 8003364:	9b04      	ldr	r3, [sp, #16]
 8003366:	4303      	orrs	r3, r0
 8003368:	3401      	adds	r4, #1
 800336a:	9304      	str	r3, [sp, #16]
 800336c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003370:	482c      	ldr	r0, [pc, #176]	; (8003424 <_vfiprintf_r+0x250>)
 8003372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003376:	2206      	movs	r2, #6
 8003378:	f7fc ff32 	bl	80001e0 <memchr>
 800337c:	2800      	cmp	r0, #0
 800337e:	d03f      	beq.n	8003400 <_vfiprintf_r+0x22c>
 8003380:	4b29      	ldr	r3, [pc, #164]	; (8003428 <_vfiprintf_r+0x254>)
 8003382:	bb1b      	cbnz	r3, 80033cc <_vfiprintf_r+0x1f8>
 8003384:	9b03      	ldr	r3, [sp, #12]
 8003386:	3307      	adds	r3, #7
 8003388:	f023 0307 	bic.w	r3, r3, #7
 800338c:	3308      	adds	r3, #8
 800338e:	9303      	str	r3, [sp, #12]
 8003390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003392:	443b      	add	r3, r7
 8003394:	9309      	str	r3, [sp, #36]	; 0x24
 8003396:	e767      	b.n	8003268 <_vfiprintf_r+0x94>
 8003398:	fb0c 3202 	mla	r2, ip, r2, r3
 800339c:	460c      	mov	r4, r1
 800339e:	2001      	movs	r0, #1
 80033a0:	e7a5      	b.n	80032ee <_vfiprintf_r+0x11a>
 80033a2:	2300      	movs	r3, #0
 80033a4:	3401      	adds	r4, #1
 80033a6:	9305      	str	r3, [sp, #20]
 80033a8:	4619      	mov	r1, r3
 80033aa:	f04f 0c0a 	mov.w	ip, #10
 80033ae:	4620      	mov	r0, r4
 80033b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033b4:	3a30      	subs	r2, #48	; 0x30
 80033b6:	2a09      	cmp	r2, #9
 80033b8:	d903      	bls.n	80033c2 <_vfiprintf_r+0x1ee>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0c5      	beq.n	800334a <_vfiprintf_r+0x176>
 80033be:	9105      	str	r1, [sp, #20]
 80033c0:	e7c3      	b.n	800334a <_vfiprintf_r+0x176>
 80033c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80033c6:	4604      	mov	r4, r0
 80033c8:	2301      	movs	r3, #1
 80033ca:	e7f0      	b.n	80033ae <_vfiprintf_r+0x1da>
 80033cc:	ab03      	add	r3, sp, #12
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	462a      	mov	r2, r5
 80033d2:	4b16      	ldr	r3, [pc, #88]	; (800342c <_vfiprintf_r+0x258>)
 80033d4:	a904      	add	r1, sp, #16
 80033d6:	4630      	mov	r0, r6
 80033d8:	f3af 8000 	nop.w
 80033dc:	4607      	mov	r7, r0
 80033de:	1c78      	adds	r0, r7, #1
 80033e0:	d1d6      	bne.n	8003390 <_vfiprintf_r+0x1bc>
 80033e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033e4:	07d9      	lsls	r1, r3, #31
 80033e6:	d405      	bmi.n	80033f4 <_vfiprintf_r+0x220>
 80033e8:	89ab      	ldrh	r3, [r5, #12]
 80033ea:	059a      	lsls	r2, r3, #22
 80033ec:	d402      	bmi.n	80033f4 <_vfiprintf_r+0x220>
 80033ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033f0:	f7ff fe6b 	bl	80030ca <__retarget_lock_release_recursive>
 80033f4:	89ab      	ldrh	r3, [r5, #12]
 80033f6:	065b      	lsls	r3, r3, #25
 80033f8:	f53f af12 	bmi.w	8003220 <_vfiprintf_r+0x4c>
 80033fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033fe:	e711      	b.n	8003224 <_vfiprintf_r+0x50>
 8003400:	ab03      	add	r3, sp, #12
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	462a      	mov	r2, r5
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <_vfiprintf_r+0x258>)
 8003408:	a904      	add	r1, sp, #16
 800340a:	4630      	mov	r0, r6
 800340c:	f000 f880 	bl	8003510 <_printf_i>
 8003410:	e7e4      	b.n	80033dc <_vfiprintf_r+0x208>
 8003412:	bf00      	nop
 8003414:	08003db4 	.word	0x08003db4
 8003418:	08003dd4 	.word	0x08003dd4
 800341c:	08003d94 	.word	0x08003d94
 8003420:	08003df4 	.word	0x08003df4
 8003424:	08003dfe 	.word	0x08003dfe
 8003428:	00000000 	.word	0x00000000
 800342c:	080031af 	.word	0x080031af
 8003430:	08003dfa 	.word	0x08003dfa

08003434 <_printf_common>:
 8003434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003438:	4616      	mov	r6, r2
 800343a:	4699      	mov	r9, r3
 800343c:	688a      	ldr	r2, [r1, #8]
 800343e:	690b      	ldr	r3, [r1, #16]
 8003440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003444:	4293      	cmp	r3, r2
 8003446:	bfb8      	it	lt
 8003448:	4613      	movlt	r3, r2
 800344a:	6033      	str	r3, [r6, #0]
 800344c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003450:	4607      	mov	r7, r0
 8003452:	460c      	mov	r4, r1
 8003454:	b10a      	cbz	r2, 800345a <_printf_common+0x26>
 8003456:	3301      	adds	r3, #1
 8003458:	6033      	str	r3, [r6, #0]
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	0699      	lsls	r1, r3, #26
 800345e:	bf42      	ittt	mi
 8003460:	6833      	ldrmi	r3, [r6, #0]
 8003462:	3302      	addmi	r3, #2
 8003464:	6033      	strmi	r3, [r6, #0]
 8003466:	6825      	ldr	r5, [r4, #0]
 8003468:	f015 0506 	ands.w	r5, r5, #6
 800346c:	d106      	bne.n	800347c <_printf_common+0x48>
 800346e:	f104 0a19 	add.w	sl, r4, #25
 8003472:	68e3      	ldr	r3, [r4, #12]
 8003474:	6832      	ldr	r2, [r6, #0]
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	42ab      	cmp	r3, r5
 800347a:	dc26      	bgt.n	80034ca <_printf_common+0x96>
 800347c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003480:	1e13      	subs	r3, r2, #0
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	bf18      	it	ne
 8003486:	2301      	movne	r3, #1
 8003488:	0692      	lsls	r2, r2, #26
 800348a:	d42b      	bmi.n	80034e4 <_printf_common+0xb0>
 800348c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003490:	4649      	mov	r1, r9
 8003492:	4638      	mov	r0, r7
 8003494:	47c0      	blx	r8
 8003496:	3001      	adds	r0, #1
 8003498:	d01e      	beq.n	80034d8 <_printf_common+0xa4>
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	68e5      	ldr	r5, [r4, #12]
 800349e:	6832      	ldr	r2, [r6, #0]
 80034a0:	f003 0306 	and.w	r3, r3, #6
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	bf08      	it	eq
 80034a8:	1aad      	subeq	r5, r5, r2
 80034aa:	68a3      	ldr	r3, [r4, #8]
 80034ac:	6922      	ldr	r2, [r4, #16]
 80034ae:	bf0c      	ite	eq
 80034b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034b4:	2500      	movne	r5, #0
 80034b6:	4293      	cmp	r3, r2
 80034b8:	bfc4      	itt	gt
 80034ba:	1a9b      	subgt	r3, r3, r2
 80034bc:	18ed      	addgt	r5, r5, r3
 80034be:	2600      	movs	r6, #0
 80034c0:	341a      	adds	r4, #26
 80034c2:	42b5      	cmp	r5, r6
 80034c4:	d11a      	bne.n	80034fc <_printf_common+0xc8>
 80034c6:	2000      	movs	r0, #0
 80034c8:	e008      	b.n	80034dc <_printf_common+0xa8>
 80034ca:	2301      	movs	r3, #1
 80034cc:	4652      	mov	r2, sl
 80034ce:	4649      	mov	r1, r9
 80034d0:	4638      	mov	r0, r7
 80034d2:	47c0      	blx	r8
 80034d4:	3001      	adds	r0, #1
 80034d6:	d103      	bne.n	80034e0 <_printf_common+0xac>
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295
 80034dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e0:	3501      	adds	r5, #1
 80034e2:	e7c6      	b.n	8003472 <_printf_common+0x3e>
 80034e4:	18e1      	adds	r1, r4, r3
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	2030      	movs	r0, #48	; 0x30
 80034ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034ee:	4422      	add	r2, r4
 80034f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034f8:	3302      	adds	r3, #2
 80034fa:	e7c7      	b.n	800348c <_printf_common+0x58>
 80034fc:	2301      	movs	r3, #1
 80034fe:	4622      	mov	r2, r4
 8003500:	4649      	mov	r1, r9
 8003502:	4638      	mov	r0, r7
 8003504:	47c0      	blx	r8
 8003506:	3001      	adds	r0, #1
 8003508:	d0e6      	beq.n	80034d8 <_printf_common+0xa4>
 800350a:	3601      	adds	r6, #1
 800350c:	e7d9      	b.n	80034c2 <_printf_common+0x8e>
	...

08003510 <_printf_i>:
 8003510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003514:	460c      	mov	r4, r1
 8003516:	4691      	mov	r9, r2
 8003518:	7e27      	ldrb	r7, [r4, #24]
 800351a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800351c:	2f78      	cmp	r7, #120	; 0x78
 800351e:	4680      	mov	r8, r0
 8003520:	469a      	mov	sl, r3
 8003522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003526:	d807      	bhi.n	8003538 <_printf_i+0x28>
 8003528:	2f62      	cmp	r7, #98	; 0x62
 800352a:	d80a      	bhi.n	8003542 <_printf_i+0x32>
 800352c:	2f00      	cmp	r7, #0
 800352e:	f000 80d8 	beq.w	80036e2 <_printf_i+0x1d2>
 8003532:	2f58      	cmp	r7, #88	; 0x58
 8003534:	f000 80a3 	beq.w	800367e <_printf_i+0x16e>
 8003538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800353c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003540:	e03a      	b.n	80035b8 <_printf_i+0xa8>
 8003542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003546:	2b15      	cmp	r3, #21
 8003548:	d8f6      	bhi.n	8003538 <_printf_i+0x28>
 800354a:	a001      	add	r0, pc, #4	; (adr r0, 8003550 <_printf_i+0x40>)
 800354c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003550:	080035a9 	.word	0x080035a9
 8003554:	080035bd 	.word	0x080035bd
 8003558:	08003539 	.word	0x08003539
 800355c:	08003539 	.word	0x08003539
 8003560:	08003539 	.word	0x08003539
 8003564:	08003539 	.word	0x08003539
 8003568:	080035bd 	.word	0x080035bd
 800356c:	08003539 	.word	0x08003539
 8003570:	08003539 	.word	0x08003539
 8003574:	08003539 	.word	0x08003539
 8003578:	08003539 	.word	0x08003539
 800357c:	080036c9 	.word	0x080036c9
 8003580:	080035ed 	.word	0x080035ed
 8003584:	080036ab 	.word	0x080036ab
 8003588:	08003539 	.word	0x08003539
 800358c:	08003539 	.word	0x08003539
 8003590:	080036eb 	.word	0x080036eb
 8003594:	08003539 	.word	0x08003539
 8003598:	080035ed 	.word	0x080035ed
 800359c:	08003539 	.word	0x08003539
 80035a0:	08003539 	.word	0x08003539
 80035a4:	080036b3 	.word	0x080036b3
 80035a8:	680b      	ldr	r3, [r1, #0]
 80035aa:	1d1a      	adds	r2, r3, #4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	600a      	str	r2, [r1, #0]
 80035b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0a3      	b.n	8003704 <_printf_i+0x1f4>
 80035bc:	6825      	ldr	r5, [r4, #0]
 80035be:	6808      	ldr	r0, [r1, #0]
 80035c0:	062e      	lsls	r6, r5, #24
 80035c2:	f100 0304 	add.w	r3, r0, #4
 80035c6:	d50a      	bpl.n	80035de <_printf_i+0xce>
 80035c8:	6805      	ldr	r5, [r0, #0]
 80035ca:	600b      	str	r3, [r1, #0]
 80035cc:	2d00      	cmp	r5, #0
 80035ce:	da03      	bge.n	80035d8 <_printf_i+0xc8>
 80035d0:	232d      	movs	r3, #45	; 0x2d
 80035d2:	426d      	negs	r5, r5
 80035d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d8:	485e      	ldr	r0, [pc, #376]	; (8003754 <_printf_i+0x244>)
 80035da:	230a      	movs	r3, #10
 80035dc:	e019      	b.n	8003612 <_printf_i+0x102>
 80035de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035e2:	6805      	ldr	r5, [r0, #0]
 80035e4:	600b      	str	r3, [r1, #0]
 80035e6:	bf18      	it	ne
 80035e8:	b22d      	sxthne	r5, r5
 80035ea:	e7ef      	b.n	80035cc <_printf_i+0xbc>
 80035ec:	680b      	ldr	r3, [r1, #0]
 80035ee:	6825      	ldr	r5, [r4, #0]
 80035f0:	1d18      	adds	r0, r3, #4
 80035f2:	6008      	str	r0, [r1, #0]
 80035f4:	0628      	lsls	r0, r5, #24
 80035f6:	d501      	bpl.n	80035fc <_printf_i+0xec>
 80035f8:	681d      	ldr	r5, [r3, #0]
 80035fa:	e002      	b.n	8003602 <_printf_i+0xf2>
 80035fc:	0669      	lsls	r1, r5, #25
 80035fe:	d5fb      	bpl.n	80035f8 <_printf_i+0xe8>
 8003600:	881d      	ldrh	r5, [r3, #0]
 8003602:	4854      	ldr	r0, [pc, #336]	; (8003754 <_printf_i+0x244>)
 8003604:	2f6f      	cmp	r7, #111	; 0x6f
 8003606:	bf0c      	ite	eq
 8003608:	2308      	moveq	r3, #8
 800360a:	230a      	movne	r3, #10
 800360c:	2100      	movs	r1, #0
 800360e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003612:	6866      	ldr	r6, [r4, #4]
 8003614:	60a6      	str	r6, [r4, #8]
 8003616:	2e00      	cmp	r6, #0
 8003618:	bfa2      	ittt	ge
 800361a:	6821      	ldrge	r1, [r4, #0]
 800361c:	f021 0104 	bicge.w	r1, r1, #4
 8003620:	6021      	strge	r1, [r4, #0]
 8003622:	b90d      	cbnz	r5, 8003628 <_printf_i+0x118>
 8003624:	2e00      	cmp	r6, #0
 8003626:	d04d      	beq.n	80036c4 <_printf_i+0x1b4>
 8003628:	4616      	mov	r6, r2
 800362a:	fbb5 f1f3 	udiv	r1, r5, r3
 800362e:	fb03 5711 	mls	r7, r3, r1, r5
 8003632:	5dc7      	ldrb	r7, [r0, r7]
 8003634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003638:	462f      	mov	r7, r5
 800363a:	42bb      	cmp	r3, r7
 800363c:	460d      	mov	r5, r1
 800363e:	d9f4      	bls.n	800362a <_printf_i+0x11a>
 8003640:	2b08      	cmp	r3, #8
 8003642:	d10b      	bne.n	800365c <_printf_i+0x14c>
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	07df      	lsls	r7, r3, #31
 8003648:	d508      	bpl.n	800365c <_printf_i+0x14c>
 800364a:	6923      	ldr	r3, [r4, #16]
 800364c:	6861      	ldr	r1, [r4, #4]
 800364e:	4299      	cmp	r1, r3
 8003650:	bfde      	ittt	le
 8003652:	2330      	movle	r3, #48	; 0x30
 8003654:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003658:	f106 36ff 	addle.w	r6, r6, #4294967295
 800365c:	1b92      	subs	r2, r2, r6
 800365e:	6122      	str	r2, [r4, #16]
 8003660:	f8cd a000 	str.w	sl, [sp]
 8003664:	464b      	mov	r3, r9
 8003666:	aa03      	add	r2, sp, #12
 8003668:	4621      	mov	r1, r4
 800366a:	4640      	mov	r0, r8
 800366c:	f7ff fee2 	bl	8003434 <_printf_common>
 8003670:	3001      	adds	r0, #1
 8003672:	d14c      	bne.n	800370e <_printf_i+0x1fe>
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	b004      	add	sp, #16
 800367a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800367e:	4835      	ldr	r0, [pc, #212]	; (8003754 <_printf_i+0x244>)
 8003680:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	680e      	ldr	r6, [r1, #0]
 8003688:	061f      	lsls	r7, r3, #24
 800368a:	f856 5b04 	ldr.w	r5, [r6], #4
 800368e:	600e      	str	r6, [r1, #0]
 8003690:	d514      	bpl.n	80036bc <_printf_i+0x1ac>
 8003692:	07d9      	lsls	r1, r3, #31
 8003694:	bf44      	itt	mi
 8003696:	f043 0320 	orrmi.w	r3, r3, #32
 800369a:	6023      	strmi	r3, [r4, #0]
 800369c:	b91d      	cbnz	r5, 80036a6 <_printf_i+0x196>
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	f023 0320 	bic.w	r3, r3, #32
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	2310      	movs	r3, #16
 80036a8:	e7b0      	b.n	800360c <_printf_i+0xfc>
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	f043 0320 	orr.w	r3, r3, #32
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	2378      	movs	r3, #120	; 0x78
 80036b4:	4828      	ldr	r0, [pc, #160]	; (8003758 <_printf_i+0x248>)
 80036b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036ba:	e7e3      	b.n	8003684 <_printf_i+0x174>
 80036bc:	065e      	lsls	r6, r3, #25
 80036be:	bf48      	it	mi
 80036c0:	b2ad      	uxthmi	r5, r5
 80036c2:	e7e6      	b.n	8003692 <_printf_i+0x182>
 80036c4:	4616      	mov	r6, r2
 80036c6:	e7bb      	b.n	8003640 <_printf_i+0x130>
 80036c8:	680b      	ldr	r3, [r1, #0]
 80036ca:	6826      	ldr	r6, [r4, #0]
 80036cc:	6960      	ldr	r0, [r4, #20]
 80036ce:	1d1d      	adds	r5, r3, #4
 80036d0:	600d      	str	r5, [r1, #0]
 80036d2:	0635      	lsls	r5, r6, #24
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	d501      	bpl.n	80036dc <_printf_i+0x1cc>
 80036d8:	6018      	str	r0, [r3, #0]
 80036da:	e002      	b.n	80036e2 <_printf_i+0x1d2>
 80036dc:	0671      	lsls	r1, r6, #25
 80036de:	d5fb      	bpl.n	80036d8 <_printf_i+0x1c8>
 80036e0:	8018      	strh	r0, [r3, #0]
 80036e2:	2300      	movs	r3, #0
 80036e4:	6123      	str	r3, [r4, #16]
 80036e6:	4616      	mov	r6, r2
 80036e8:	e7ba      	b.n	8003660 <_printf_i+0x150>
 80036ea:	680b      	ldr	r3, [r1, #0]
 80036ec:	1d1a      	adds	r2, r3, #4
 80036ee:	600a      	str	r2, [r1, #0]
 80036f0:	681e      	ldr	r6, [r3, #0]
 80036f2:	6862      	ldr	r2, [r4, #4]
 80036f4:	2100      	movs	r1, #0
 80036f6:	4630      	mov	r0, r6
 80036f8:	f7fc fd72 	bl	80001e0 <memchr>
 80036fc:	b108      	cbz	r0, 8003702 <_printf_i+0x1f2>
 80036fe:	1b80      	subs	r0, r0, r6
 8003700:	6060      	str	r0, [r4, #4]
 8003702:	6863      	ldr	r3, [r4, #4]
 8003704:	6123      	str	r3, [r4, #16]
 8003706:	2300      	movs	r3, #0
 8003708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800370c:	e7a8      	b.n	8003660 <_printf_i+0x150>
 800370e:	6923      	ldr	r3, [r4, #16]
 8003710:	4632      	mov	r2, r6
 8003712:	4649      	mov	r1, r9
 8003714:	4640      	mov	r0, r8
 8003716:	47d0      	blx	sl
 8003718:	3001      	adds	r0, #1
 800371a:	d0ab      	beq.n	8003674 <_printf_i+0x164>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	079b      	lsls	r3, r3, #30
 8003720:	d413      	bmi.n	800374a <_printf_i+0x23a>
 8003722:	68e0      	ldr	r0, [r4, #12]
 8003724:	9b03      	ldr	r3, [sp, #12]
 8003726:	4298      	cmp	r0, r3
 8003728:	bfb8      	it	lt
 800372a:	4618      	movlt	r0, r3
 800372c:	e7a4      	b.n	8003678 <_printf_i+0x168>
 800372e:	2301      	movs	r3, #1
 8003730:	4632      	mov	r2, r6
 8003732:	4649      	mov	r1, r9
 8003734:	4640      	mov	r0, r8
 8003736:	47d0      	blx	sl
 8003738:	3001      	adds	r0, #1
 800373a:	d09b      	beq.n	8003674 <_printf_i+0x164>
 800373c:	3501      	adds	r5, #1
 800373e:	68e3      	ldr	r3, [r4, #12]
 8003740:	9903      	ldr	r1, [sp, #12]
 8003742:	1a5b      	subs	r3, r3, r1
 8003744:	42ab      	cmp	r3, r5
 8003746:	dcf2      	bgt.n	800372e <_printf_i+0x21e>
 8003748:	e7eb      	b.n	8003722 <_printf_i+0x212>
 800374a:	2500      	movs	r5, #0
 800374c:	f104 0619 	add.w	r6, r4, #25
 8003750:	e7f5      	b.n	800373e <_printf_i+0x22e>
 8003752:	bf00      	nop
 8003754:	08003e05 	.word	0x08003e05
 8003758:	08003e16 	.word	0x08003e16

0800375c <_sbrk_r>:
 800375c:	b538      	push	{r3, r4, r5, lr}
 800375e:	4d06      	ldr	r5, [pc, #24]	; (8003778 <_sbrk_r+0x1c>)
 8003760:	2300      	movs	r3, #0
 8003762:	4604      	mov	r4, r0
 8003764:	4608      	mov	r0, r1
 8003766:	602b      	str	r3, [r5, #0]
 8003768:	f7fd f978 	bl	8000a5c <_sbrk>
 800376c:	1c43      	adds	r3, r0, #1
 800376e:	d102      	bne.n	8003776 <_sbrk_r+0x1a>
 8003770:	682b      	ldr	r3, [r5, #0]
 8003772:	b103      	cbz	r3, 8003776 <_sbrk_r+0x1a>
 8003774:	6023      	str	r3, [r4, #0]
 8003776:	bd38      	pop	{r3, r4, r5, pc}
 8003778:	20000164 	.word	0x20000164

0800377c <__sread>:
 800377c:	b510      	push	{r4, lr}
 800377e:	460c      	mov	r4, r1
 8003780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003784:	f000 fab4 	bl	8003cf0 <_read_r>
 8003788:	2800      	cmp	r0, #0
 800378a:	bfab      	itete	ge
 800378c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800378e:	89a3      	ldrhlt	r3, [r4, #12]
 8003790:	181b      	addge	r3, r3, r0
 8003792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003796:	bfac      	ite	ge
 8003798:	6563      	strge	r3, [r4, #84]	; 0x54
 800379a:	81a3      	strhlt	r3, [r4, #12]
 800379c:	bd10      	pop	{r4, pc}

0800379e <__swrite>:
 800379e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a2:	461f      	mov	r7, r3
 80037a4:	898b      	ldrh	r3, [r1, #12]
 80037a6:	05db      	lsls	r3, r3, #23
 80037a8:	4605      	mov	r5, r0
 80037aa:	460c      	mov	r4, r1
 80037ac:	4616      	mov	r6, r2
 80037ae:	d505      	bpl.n	80037bc <__swrite+0x1e>
 80037b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b4:	2302      	movs	r3, #2
 80037b6:	2200      	movs	r2, #0
 80037b8:	f000 f9c8 	bl	8003b4c <_lseek_r>
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c6:	81a3      	strh	r3, [r4, #12]
 80037c8:	4632      	mov	r2, r6
 80037ca:	463b      	mov	r3, r7
 80037cc:	4628      	mov	r0, r5
 80037ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037d2:	f000 b869 	b.w	80038a8 <_write_r>

080037d6 <__sseek>:
 80037d6:	b510      	push	{r4, lr}
 80037d8:	460c      	mov	r4, r1
 80037da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037de:	f000 f9b5 	bl	8003b4c <_lseek_r>
 80037e2:	1c43      	adds	r3, r0, #1
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	bf15      	itete	ne
 80037e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80037ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037f2:	81a3      	strheq	r3, [r4, #12]
 80037f4:	bf18      	it	ne
 80037f6:	81a3      	strhne	r3, [r4, #12]
 80037f8:	bd10      	pop	{r4, pc}

080037fa <__sclose>:
 80037fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037fe:	f000 b8d3 	b.w	80039a8 <_close_r>
	...

08003804 <__swbuf_r>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	460e      	mov	r6, r1
 8003808:	4614      	mov	r4, r2
 800380a:	4605      	mov	r5, r0
 800380c:	b118      	cbz	r0, 8003816 <__swbuf_r+0x12>
 800380e:	6983      	ldr	r3, [r0, #24]
 8003810:	b90b      	cbnz	r3, 8003816 <__swbuf_r+0x12>
 8003812:	f7ff fbbb 	bl	8002f8c <__sinit>
 8003816:	4b21      	ldr	r3, [pc, #132]	; (800389c <__swbuf_r+0x98>)
 8003818:	429c      	cmp	r4, r3
 800381a:	d12b      	bne.n	8003874 <__swbuf_r+0x70>
 800381c:	686c      	ldr	r4, [r5, #4]
 800381e:	69a3      	ldr	r3, [r4, #24]
 8003820:	60a3      	str	r3, [r4, #8]
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	071a      	lsls	r2, r3, #28
 8003826:	d52f      	bpl.n	8003888 <__swbuf_r+0x84>
 8003828:	6923      	ldr	r3, [r4, #16]
 800382a:	b36b      	cbz	r3, 8003888 <__swbuf_r+0x84>
 800382c:	6923      	ldr	r3, [r4, #16]
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	1ac0      	subs	r0, r0, r3
 8003832:	6963      	ldr	r3, [r4, #20]
 8003834:	b2f6      	uxtb	r6, r6
 8003836:	4283      	cmp	r3, r0
 8003838:	4637      	mov	r7, r6
 800383a:	dc04      	bgt.n	8003846 <__swbuf_r+0x42>
 800383c:	4621      	mov	r1, r4
 800383e:	4628      	mov	r0, r5
 8003840:	f000 f948 	bl	8003ad4 <_fflush_r>
 8003844:	bb30      	cbnz	r0, 8003894 <__swbuf_r+0x90>
 8003846:	68a3      	ldr	r3, [r4, #8]
 8003848:	3b01      	subs	r3, #1
 800384a:	60a3      	str	r3, [r4, #8]
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	6022      	str	r2, [r4, #0]
 8003852:	701e      	strb	r6, [r3, #0]
 8003854:	6963      	ldr	r3, [r4, #20]
 8003856:	3001      	adds	r0, #1
 8003858:	4283      	cmp	r3, r0
 800385a:	d004      	beq.n	8003866 <__swbuf_r+0x62>
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	07db      	lsls	r3, r3, #31
 8003860:	d506      	bpl.n	8003870 <__swbuf_r+0x6c>
 8003862:	2e0a      	cmp	r6, #10
 8003864:	d104      	bne.n	8003870 <__swbuf_r+0x6c>
 8003866:	4621      	mov	r1, r4
 8003868:	4628      	mov	r0, r5
 800386a:	f000 f933 	bl	8003ad4 <_fflush_r>
 800386e:	b988      	cbnz	r0, 8003894 <__swbuf_r+0x90>
 8003870:	4638      	mov	r0, r7
 8003872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <__swbuf_r+0x9c>)
 8003876:	429c      	cmp	r4, r3
 8003878:	d101      	bne.n	800387e <__swbuf_r+0x7a>
 800387a:	68ac      	ldr	r4, [r5, #8]
 800387c:	e7cf      	b.n	800381e <__swbuf_r+0x1a>
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <__swbuf_r+0xa0>)
 8003880:	429c      	cmp	r4, r3
 8003882:	bf08      	it	eq
 8003884:	68ec      	ldreq	r4, [r5, #12]
 8003886:	e7ca      	b.n	800381e <__swbuf_r+0x1a>
 8003888:	4621      	mov	r1, r4
 800388a:	4628      	mov	r0, r5
 800388c:	f000 f81e 	bl	80038cc <__swsetup_r>
 8003890:	2800      	cmp	r0, #0
 8003892:	d0cb      	beq.n	800382c <__swbuf_r+0x28>
 8003894:	f04f 37ff 	mov.w	r7, #4294967295
 8003898:	e7ea      	b.n	8003870 <__swbuf_r+0x6c>
 800389a:	bf00      	nop
 800389c:	08003db4 	.word	0x08003db4
 80038a0:	08003dd4 	.word	0x08003dd4
 80038a4:	08003d94 	.word	0x08003d94

080038a8 <_write_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4d07      	ldr	r5, [pc, #28]	; (80038c8 <_write_r+0x20>)
 80038ac:	4604      	mov	r4, r0
 80038ae:	4608      	mov	r0, r1
 80038b0:	4611      	mov	r1, r2
 80038b2:	2200      	movs	r2, #0
 80038b4:	602a      	str	r2, [r5, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	f7fc fef4 	bl	80006a4 <_write>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d102      	bne.n	80038c6 <_write_r+0x1e>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	b103      	cbz	r3, 80038c6 <_write_r+0x1e>
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	20000164 	.word	0x20000164

080038cc <__swsetup_r>:
 80038cc:	4b32      	ldr	r3, [pc, #200]	; (8003998 <__swsetup_r+0xcc>)
 80038ce:	b570      	push	{r4, r5, r6, lr}
 80038d0:	681d      	ldr	r5, [r3, #0]
 80038d2:	4606      	mov	r6, r0
 80038d4:	460c      	mov	r4, r1
 80038d6:	b125      	cbz	r5, 80038e2 <__swsetup_r+0x16>
 80038d8:	69ab      	ldr	r3, [r5, #24]
 80038da:	b913      	cbnz	r3, 80038e2 <__swsetup_r+0x16>
 80038dc:	4628      	mov	r0, r5
 80038de:	f7ff fb55 	bl	8002f8c <__sinit>
 80038e2:	4b2e      	ldr	r3, [pc, #184]	; (800399c <__swsetup_r+0xd0>)
 80038e4:	429c      	cmp	r4, r3
 80038e6:	d10f      	bne.n	8003908 <__swsetup_r+0x3c>
 80038e8:	686c      	ldr	r4, [r5, #4]
 80038ea:	89a3      	ldrh	r3, [r4, #12]
 80038ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038f0:	0719      	lsls	r1, r3, #28
 80038f2:	d42c      	bmi.n	800394e <__swsetup_r+0x82>
 80038f4:	06dd      	lsls	r5, r3, #27
 80038f6:	d411      	bmi.n	800391c <__swsetup_r+0x50>
 80038f8:	2309      	movs	r3, #9
 80038fa:	6033      	str	r3, [r6, #0]
 80038fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003900:	81a3      	strh	r3, [r4, #12]
 8003902:	f04f 30ff 	mov.w	r0, #4294967295
 8003906:	e03e      	b.n	8003986 <__swsetup_r+0xba>
 8003908:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <__swsetup_r+0xd4>)
 800390a:	429c      	cmp	r4, r3
 800390c:	d101      	bne.n	8003912 <__swsetup_r+0x46>
 800390e:	68ac      	ldr	r4, [r5, #8]
 8003910:	e7eb      	b.n	80038ea <__swsetup_r+0x1e>
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <__swsetup_r+0xd8>)
 8003914:	429c      	cmp	r4, r3
 8003916:	bf08      	it	eq
 8003918:	68ec      	ldreq	r4, [r5, #12]
 800391a:	e7e6      	b.n	80038ea <__swsetup_r+0x1e>
 800391c:	0758      	lsls	r0, r3, #29
 800391e:	d512      	bpl.n	8003946 <__swsetup_r+0x7a>
 8003920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003922:	b141      	cbz	r1, 8003936 <__swsetup_r+0x6a>
 8003924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003928:	4299      	cmp	r1, r3
 800392a:	d002      	beq.n	8003932 <__swsetup_r+0x66>
 800392c:	4630      	mov	r0, r6
 800392e:	f000 f98f 	bl	8003c50 <_free_r>
 8003932:	2300      	movs	r3, #0
 8003934:	6363      	str	r3, [r4, #52]	; 0x34
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800393c:	81a3      	strh	r3, [r4, #12]
 800393e:	2300      	movs	r3, #0
 8003940:	6063      	str	r3, [r4, #4]
 8003942:	6923      	ldr	r3, [r4, #16]
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	f043 0308 	orr.w	r3, r3, #8
 800394c:	81a3      	strh	r3, [r4, #12]
 800394e:	6923      	ldr	r3, [r4, #16]
 8003950:	b94b      	cbnz	r3, 8003966 <__swsetup_r+0x9a>
 8003952:	89a3      	ldrh	r3, [r4, #12]
 8003954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800395c:	d003      	beq.n	8003966 <__swsetup_r+0x9a>
 800395e:	4621      	mov	r1, r4
 8003960:	4630      	mov	r0, r6
 8003962:	f000 f929 	bl	8003bb8 <__smakebuf_r>
 8003966:	89a0      	ldrh	r0, [r4, #12]
 8003968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800396c:	f010 0301 	ands.w	r3, r0, #1
 8003970:	d00a      	beq.n	8003988 <__swsetup_r+0xbc>
 8003972:	2300      	movs	r3, #0
 8003974:	60a3      	str	r3, [r4, #8]
 8003976:	6963      	ldr	r3, [r4, #20]
 8003978:	425b      	negs	r3, r3
 800397a:	61a3      	str	r3, [r4, #24]
 800397c:	6923      	ldr	r3, [r4, #16]
 800397e:	b943      	cbnz	r3, 8003992 <__swsetup_r+0xc6>
 8003980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003984:	d1ba      	bne.n	80038fc <__swsetup_r+0x30>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	0781      	lsls	r1, r0, #30
 800398a:	bf58      	it	pl
 800398c:	6963      	ldrpl	r3, [r4, #20]
 800398e:	60a3      	str	r3, [r4, #8]
 8003990:	e7f4      	b.n	800397c <__swsetup_r+0xb0>
 8003992:	2000      	movs	r0, #0
 8003994:	e7f7      	b.n	8003986 <__swsetup_r+0xba>
 8003996:	bf00      	nop
 8003998:	2000002c 	.word	0x2000002c
 800399c:	08003db4 	.word	0x08003db4
 80039a0:	08003dd4 	.word	0x08003dd4
 80039a4:	08003d94 	.word	0x08003d94

080039a8 <_close_r>:
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	4d06      	ldr	r5, [pc, #24]	; (80039c4 <_close_r+0x1c>)
 80039ac:	2300      	movs	r3, #0
 80039ae:	4604      	mov	r4, r0
 80039b0:	4608      	mov	r0, r1
 80039b2:	602b      	str	r3, [r5, #0]
 80039b4:	f7fd f81d 	bl	80009f2 <_close>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d102      	bne.n	80039c2 <_close_r+0x1a>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	b103      	cbz	r3, 80039c2 <_close_r+0x1a>
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
 80039c4:	20000164 	.word	0x20000164

080039c8 <__sflush_r>:
 80039c8:	898a      	ldrh	r2, [r1, #12]
 80039ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ce:	4605      	mov	r5, r0
 80039d0:	0710      	lsls	r0, r2, #28
 80039d2:	460c      	mov	r4, r1
 80039d4:	d458      	bmi.n	8003a88 <__sflush_r+0xc0>
 80039d6:	684b      	ldr	r3, [r1, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	dc05      	bgt.n	80039e8 <__sflush_r+0x20>
 80039dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	dc02      	bgt.n	80039e8 <__sflush_r+0x20>
 80039e2:	2000      	movs	r0, #0
 80039e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039ea:	2e00      	cmp	r6, #0
 80039ec:	d0f9      	beq.n	80039e2 <__sflush_r+0x1a>
 80039ee:	2300      	movs	r3, #0
 80039f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039f4:	682f      	ldr	r7, [r5, #0]
 80039f6:	602b      	str	r3, [r5, #0]
 80039f8:	d032      	beq.n	8003a60 <__sflush_r+0x98>
 80039fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	075a      	lsls	r2, r3, #29
 8003a00:	d505      	bpl.n	8003a0e <__sflush_r+0x46>
 8003a02:	6863      	ldr	r3, [r4, #4]
 8003a04:	1ac0      	subs	r0, r0, r3
 8003a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a08:	b10b      	cbz	r3, 8003a0e <__sflush_r+0x46>
 8003a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a0c:	1ac0      	subs	r0, r0, r3
 8003a0e:	2300      	movs	r3, #0
 8003a10:	4602      	mov	r2, r0
 8003a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a14:	6a21      	ldr	r1, [r4, #32]
 8003a16:	4628      	mov	r0, r5
 8003a18:	47b0      	blx	r6
 8003a1a:	1c43      	adds	r3, r0, #1
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	d106      	bne.n	8003a2e <__sflush_r+0x66>
 8003a20:	6829      	ldr	r1, [r5, #0]
 8003a22:	291d      	cmp	r1, #29
 8003a24:	d82c      	bhi.n	8003a80 <__sflush_r+0xb8>
 8003a26:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <__sflush_r+0x108>)
 8003a28:	40ca      	lsrs	r2, r1
 8003a2a:	07d6      	lsls	r6, r2, #31
 8003a2c:	d528      	bpl.n	8003a80 <__sflush_r+0xb8>
 8003a2e:	2200      	movs	r2, #0
 8003a30:	6062      	str	r2, [r4, #4]
 8003a32:	04d9      	lsls	r1, r3, #19
 8003a34:	6922      	ldr	r2, [r4, #16]
 8003a36:	6022      	str	r2, [r4, #0]
 8003a38:	d504      	bpl.n	8003a44 <__sflush_r+0x7c>
 8003a3a:	1c42      	adds	r2, r0, #1
 8003a3c:	d101      	bne.n	8003a42 <__sflush_r+0x7a>
 8003a3e:	682b      	ldr	r3, [r5, #0]
 8003a40:	b903      	cbnz	r3, 8003a44 <__sflush_r+0x7c>
 8003a42:	6560      	str	r0, [r4, #84]	; 0x54
 8003a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a46:	602f      	str	r7, [r5, #0]
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d0ca      	beq.n	80039e2 <__sflush_r+0x1a>
 8003a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a50:	4299      	cmp	r1, r3
 8003a52:	d002      	beq.n	8003a5a <__sflush_r+0x92>
 8003a54:	4628      	mov	r0, r5
 8003a56:	f000 f8fb 	bl	8003c50 <_free_r>
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	6360      	str	r0, [r4, #52]	; 0x34
 8003a5e:	e7c1      	b.n	80039e4 <__sflush_r+0x1c>
 8003a60:	6a21      	ldr	r1, [r4, #32]
 8003a62:	2301      	movs	r3, #1
 8003a64:	4628      	mov	r0, r5
 8003a66:	47b0      	blx	r6
 8003a68:	1c41      	adds	r1, r0, #1
 8003a6a:	d1c7      	bne.n	80039fc <__sflush_r+0x34>
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0c4      	beq.n	80039fc <__sflush_r+0x34>
 8003a72:	2b1d      	cmp	r3, #29
 8003a74:	d001      	beq.n	8003a7a <__sflush_r+0xb2>
 8003a76:	2b16      	cmp	r3, #22
 8003a78:	d101      	bne.n	8003a7e <__sflush_r+0xb6>
 8003a7a:	602f      	str	r7, [r5, #0]
 8003a7c:	e7b1      	b.n	80039e2 <__sflush_r+0x1a>
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a84:	81a3      	strh	r3, [r4, #12]
 8003a86:	e7ad      	b.n	80039e4 <__sflush_r+0x1c>
 8003a88:	690f      	ldr	r7, [r1, #16]
 8003a8a:	2f00      	cmp	r7, #0
 8003a8c:	d0a9      	beq.n	80039e2 <__sflush_r+0x1a>
 8003a8e:	0793      	lsls	r3, r2, #30
 8003a90:	680e      	ldr	r6, [r1, #0]
 8003a92:	bf08      	it	eq
 8003a94:	694b      	ldreq	r3, [r1, #20]
 8003a96:	600f      	str	r7, [r1, #0]
 8003a98:	bf18      	it	ne
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	eba6 0807 	sub.w	r8, r6, r7
 8003aa0:	608b      	str	r3, [r1, #8]
 8003aa2:	f1b8 0f00 	cmp.w	r8, #0
 8003aa6:	dd9c      	ble.n	80039e2 <__sflush_r+0x1a>
 8003aa8:	6a21      	ldr	r1, [r4, #32]
 8003aaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003aac:	4643      	mov	r3, r8
 8003aae:	463a      	mov	r2, r7
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	47b0      	blx	r6
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	dc06      	bgt.n	8003ac6 <__sflush_r+0xfe>
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003abe:	81a3      	strh	r3, [r4, #12]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	e78e      	b.n	80039e4 <__sflush_r+0x1c>
 8003ac6:	4407      	add	r7, r0
 8003ac8:	eba8 0800 	sub.w	r8, r8, r0
 8003acc:	e7e9      	b.n	8003aa2 <__sflush_r+0xda>
 8003ace:	bf00      	nop
 8003ad0:	20400001 	.word	0x20400001

08003ad4 <_fflush_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	690b      	ldr	r3, [r1, #16]
 8003ad8:	4605      	mov	r5, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	b913      	cbnz	r3, 8003ae4 <_fflush_r+0x10>
 8003ade:	2500      	movs	r5, #0
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	b118      	cbz	r0, 8003aee <_fflush_r+0x1a>
 8003ae6:	6983      	ldr	r3, [r0, #24]
 8003ae8:	b90b      	cbnz	r3, 8003aee <_fflush_r+0x1a>
 8003aea:	f7ff fa4f 	bl	8002f8c <__sinit>
 8003aee:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <_fflush_r+0x6c>)
 8003af0:	429c      	cmp	r4, r3
 8003af2:	d11b      	bne.n	8003b2c <_fflush_r+0x58>
 8003af4:	686c      	ldr	r4, [r5, #4]
 8003af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ef      	beq.n	8003ade <_fflush_r+0xa>
 8003afe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b00:	07d0      	lsls	r0, r2, #31
 8003b02:	d404      	bmi.n	8003b0e <_fflush_r+0x3a>
 8003b04:	0599      	lsls	r1, r3, #22
 8003b06:	d402      	bmi.n	8003b0e <_fflush_r+0x3a>
 8003b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b0a:	f7ff fadd 	bl	80030c8 <__retarget_lock_acquire_recursive>
 8003b0e:	4628      	mov	r0, r5
 8003b10:	4621      	mov	r1, r4
 8003b12:	f7ff ff59 	bl	80039c8 <__sflush_r>
 8003b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b18:	07da      	lsls	r2, r3, #31
 8003b1a:	4605      	mov	r5, r0
 8003b1c:	d4e0      	bmi.n	8003ae0 <_fflush_r+0xc>
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	059b      	lsls	r3, r3, #22
 8003b22:	d4dd      	bmi.n	8003ae0 <_fflush_r+0xc>
 8003b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b26:	f7ff fad0 	bl	80030ca <__retarget_lock_release_recursive>
 8003b2a:	e7d9      	b.n	8003ae0 <_fflush_r+0xc>
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <_fflush_r+0x70>)
 8003b2e:	429c      	cmp	r4, r3
 8003b30:	d101      	bne.n	8003b36 <_fflush_r+0x62>
 8003b32:	68ac      	ldr	r4, [r5, #8]
 8003b34:	e7df      	b.n	8003af6 <_fflush_r+0x22>
 8003b36:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <_fflush_r+0x74>)
 8003b38:	429c      	cmp	r4, r3
 8003b3a:	bf08      	it	eq
 8003b3c:	68ec      	ldreq	r4, [r5, #12]
 8003b3e:	e7da      	b.n	8003af6 <_fflush_r+0x22>
 8003b40:	08003db4 	.word	0x08003db4
 8003b44:	08003dd4 	.word	0x08003dd4
 8003b48:	08003d94 	.word	0x08003d94

08003b4c <_lseek_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4d07      	ldr	r5, [pc, #28]	; (8003b6c <_lseek_r+0x20>)
 8003b50:	4604      	mov	r4, r0
 8003b52:	4608      	mov	r0, r1
 8003b54:	4611      	mov	r1, r2
 8003b56:	2200      	movs	r2, #0
 8003b58:	602a      	str	r2, [r5, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f7fc ff70 	bl	8000a40 <_lseek>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d102      	bne.n	8003b6a <_lseek_r+0x1e>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	b103      	cbz	r3, 8003b6a <_lseek_r+0x1e>
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	20000164 	.word	0x20000164

08003b70 <__swhatbuf_r>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	460e      	mov	r6, r1
 8003b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b78:	2900      	cmp	r1, #0
 8003b7a:	b096      	sub	sp, #88	; 0x58
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	461d      	mov	r5, r3
 8003b80:	da07      	bge.n	8003b92 <__swhatbuf_r+0x22>
 8003b82:	2300      	movs	r3, #0
 8003b84:	602b      	str	r3, [r5, #0]
 8003b86:	89b3      	ldrh	r3, [r6, #12]
 8003b88:	061a      	lsls	r2, r3, #24
 8003b8a:	d410      	bmi.n	8003bae <__swhatbuf_r+0x3e>
 8003b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b90:	e00e      	b.n	8003bb0 <__swhatbuf_r+0x40>
 8003b92:	466a      	mov	r2, sp
 8003b94:	f000 f8be 	bl	8003d14 <_fstat_r>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	dbf2      	blt.n	8003b82 <__swhatbuf_r+0x12>
 8003b9c:	9a01      	ldr	r2, [sp, #4]
 8003b9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ba2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ba6:	425a      	negs	r2, r3
 8003ba8:	415a      	adcs	r2, r3
 8003baa:	602a      	str	r2, [r5, #0]
 8003bac:	e7ee      	b.n	8003b8c <__swhatbuf_r+0x1c>
 8003bae:	2340      	movs	r3, #64	; 0x40
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	6023      	str	r3, [r4, #0]
 8003bb4:	b016      	add	sp, #88	; 0x58
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}

08003bb8 <__smakebuf_r>:
 8003bb8:	898b      	ldrh	r3, [r1, #12]
 8003bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bbc:	079d      	lsls	r5, r3, #30
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	d507      	bpl.n	8003bd4 <__smakebuf_r+0x1c>
 8003bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	6123      	str	r3, [r4, #16]
 8003bcc:	2301      	movs	r3, #1
 8003bce:	6163      	str	r3, [r4, #20]
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	ab01      	add	r3, sp, #4
 8003bd6:	466a      	mov	r2, sp
 8003bd8:	f7ff ffca 	bl	8003b70 <__swhatbuf_r>
 8003bdc:	9900      	ldr	r1, [sp, #0]
 8003bde:	4605      	mov	r5, r0
 8003be0:	4630      	mov	r0, r6
 8003be2:	f7ff fa73 	bl	80030cc <_malloc_r>
 8003be6:	b948      	cbnz	r0, 8003bfc <__smakebuf_r+0x44>
 8003be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bec:	059a      	lsls	r2, r3, #22
 8003bee:	d4ef      	bmi.n	8003bd0 <__smakebuf_r+0x18>
 8003bf0:	f023 0303 	bic.w	r3, r3, #3
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	81a3      	strh	r3, [r4, #12]
 8003bfa:	e7e3      	b.n	8003bc4 <__smakebuf_r+0xc>
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <__smakebuf_r+0x7c>)
 8003bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	6020      	str	r0, [r4, #0]
 8003c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c08:	81a3      	strh	r3, [r4, #12]
 8003c0a:	9b00      	ldr	r3, [sp, #0]
 8003c0c:	6163      	str	r3, [r4, #20]
 8003c0e:	9b01      	ldr	r3, [sp, #4]
 8003c10:	6120      	str	r0, [r4, #16]
 8003c12:	b15b      	cbz	r3, 8003c2c <__smakebuf_r+0x74>
 8003c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f000 f88d 	bl	8003d38 <_isatty_r>
 8003c1e:	b128      	cbz	r0, 8003c2c <__smakebuf_r+0x74>
 8003c20:	89a3      	ldrh	r3, [r4, #12]
 8003c22:	f023 0303 	bic.w	r3, r3, #3
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	81a3      	strh	r3, [r4, #12]
 8003c2c:	89a0      	ldrh	r0, [r4, #12]
 8003c2e:	4305      	orrs	r5, r0
 8003c30:	81a5      	strh	r5, [r4, #12]
 8003c32:	e7cd      	b.n	8003bd0 <__smakebuf_r+0x18>
 8003c34:	08002f25 	.word	0x08002f25

08003c38 <__malloc_lock>:
 8003c38:	4801      	ldr	r0, [pc, #4]	; (8003c40 <__malloc_lock+0x8>)
 8003c3a:	f7ff ba45 	b.w	80030c8 <__retarget_lock_acquire_recursive>
 8003c3e:	bf00      	nop
 8003c40:	2000015c 	.word	0x2000015c

08003c44 <__malloc_unlock>:
 8003c44:	4801      	ldr	r0, [pc, #4]	; (8003c4c <__malloc_unlock+0x8>)
 8003c46:	f7ff ba40 	b.w	80030ca <__retarget_lock_release_recursive>
 8003c4a:	bf00      	nop
 8003c4c:	2000015c 	.word	0x2000015c

08003c50 <_free_r>:
 8003c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c52:	2900      	cmp	r1, #0
 8003c54:	d048      	beq.n	8003ce8 <_free_r+0x98>
 8003c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c5a:	9001      	str	r0, [sp, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f1a1 0404 	sub.w	r4, r1, #4
 8003c62:	bfb8      	it	lt
 8003c64:	18e4      	addlt	r4, r4, r3
 8003c66:	f7ff ffe7 	bl	8003c38 <__malloc_lock>
 8003c6a:	4a20      	ldr	r2, [pc, #128]	; (8003cec <_free_r+0x9c>)
 8003c6c:	9801      	ldr	r0, [sp, #4]
 8003c6e:	6813      	ldr	r3, [r2, #0]
 8003c70:	4615      	mov	r5, r2
 8003c72:	b933      	cbnz	r3, 8003c82 <_free_r+0x32>
 8003c74:	6063      	str	r3, [r4, #4]
 8003c76:	6014      	str	r4, [r2, #0]
 8003c78:	b003      	add	sp, #12
 8003c7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c7e:	f7ff bfe1 	b.w	8003c44 <__malloc_unlock>
 8003c82:	42a3      	cmp	r3, r4
 8003c84:	d90b      	bls.n	8003c9e <_free_r+0x4e>
 8003c86:	6821      	ldr	r1, [r4, #0]
 8003c88:	1862      	adds	r2, r4, r1
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	bf04      	itt	eq
 8003c8e:	681a      	ldreq	r2, [r3, #0]
 8003c90:	685b      	ldreq	r3, [r3, #4]
 8003c92:	6063      	str	r3, [r4, #4]
 8003c94:	bf04      	itt	eq
 8003c96:	1852      	addeq	r2, r2, r1
 8003c98:	6022      	streq	r2, [r4, #0]
 8003c9a:	602c      	str	r4, [r5, #0]
 8003c9c:	e7ec      	b.n	8003c78 <_free_r+0x28>
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	b10b      	cbz	r3, 8003ca8 <_free_r+0x58>
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	d9fa      	bls.n	8003c9e <_free_r+0x4e>
 8003ca8:	6811      	ldr	r1, [r2, #0]
 8003caa:	1855      	adds	r5, r2, r1
 8003cac:	42a5      	cmp	r5, r4
 8003cae:	d10b      	bne.n	8003cc8 <_free_r+0x78>
 8003cb0:	6824      	ldr	r4, [r4, #0]
 8003cb2:	4421      	add	r1, r4
 8003cb4:	1854      	adds	r4, r2, r1
 8003cb6:	42a3      	cmp	r3, r4
 8003cb8:	6011      	str	r1, [r2, #0]
 8003cba:	d1dd      	bne.n	8003c78 <_free_r+0x28>
 8003cbc:	681c      	ldr	r4, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	6053      	str	r3, [r2, #4]
 8003cc2:	4421      	add	r1, r4
 8003cc4:	6011      	str	r1, [r2, #0]
 8003cc6:	e7d7      	b.n	8003c78 <_free_r+0x28>
 8003cc8:	d902      	bls.n	8003cd0 <_free_r+0x80>
 8003cca:	230c      	movs	r3, #12
 8003ccc:	6003      	str	r3, [r0, #0]
 8003cce:	e7d3      	b.n	8003c78 <_free_r+0x28>
 8003cd0:	6825      	ldr	r5, [r4, #0]
 8003cd2:	1961      	adds	r1, r4, r5
 8003cd4:	428b      	cmp	r3, r1
 8003cd6:	bf04      	itt	eq
 8003cd8:	6819      	ldreq	r1, [r3, #0]
 8003cda:	685b      	ldreq	r3, [r3, #4]
 8003cdc:	6063      	str	r3, [r4, #4]
 8003cde:	bf04      	itt	eq
 8003ce0:	1949      	addeq	r1, r1, r5
 8003ce2:	6021      	streq	r1, [r4, #0]
 8003ce4:	6054      	str	r4, [r2, #4]
 8003ce6:	e7c7      	b.n	8003c78 <_free_r+0x28>
 8003ce8:	b003      	add	sp, #12
 8003cea:	bd30      	pop	{r4, r5, pc}
 8003cec:	200000b0 	.word	0x200000b0

08003cf0 <_read_r>:
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	4d07      	ldr	r5, [pc, #28]	; (8003d10 <_read_r+0x20>)
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	4608      	mov	r0, r1
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	602a      	str	r2, [r5, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f7fc fe5a 	bl	80009b8 <_read>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d102      	bne.n	8003d0e <_read_r+0x1e>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	b103      	cbz	r3, 8003d0e <_read_r+0x1e>
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
 8003d10:	20000164 	.word	0x20000164

08003d14 <_fstat_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	4d07      	ldr	r5, [pc, #28]	; (8003d34 <_fstat_r+0x20>)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	602b      	str	r3, [r5, #0]
 8003d22:	f7fc fe72 	bl	8000a0a <_fstat>
 8003d26:	1c43      	adds	r3, r0, #1
 8003d28:	d102      	bne.n	8003d30 <_fstat_r+0x1c>
 8003d2a:	682b      	ldr	r3, [r5, #0]
 8003d2c:	b103      	cbz	r3, 8003d30 <_fstat_r+0x1c>
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	bd38      	pop	{r3, r4, r5, pc}
 8003d32:	bf00      	nop
 8003d34:	20000164 	.word	0x20000164

08003d38 <_isatty_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4d06      	ldr	r5, [pc, #24]	; (8003d54 <_isatty_r+0x1c>)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	4604      	mov	r4, r0
 8003d40:	4608      	mov	r0, r1
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	f7fc fe71 	bl	8000a2a <_isatty>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d102      	bne.n	8003d52 <_isatty_r+0x1a>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	b103      	cbz	r3, 8003d52 <_isatty_r+0x1a>
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	bd38      	pop	{r3, r4, r5, pc}
 8003d54:	20000164 	.word	0x20000164

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
