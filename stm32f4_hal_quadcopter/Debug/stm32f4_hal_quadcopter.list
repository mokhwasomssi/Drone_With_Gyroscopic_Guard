
stm32f4_hal_quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e54  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006ff0  08006ff0  00016ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a0  080070a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070a8  080070a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070a8  080070a8  000170a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080070b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  20000078  08007124  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08007124  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104fb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025d2  00000000  00000000  0003059f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00032b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  00033a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000174f4  00000000  00000000  00034870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7b5  00000000  00000000  0004bd64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f11f  00000000  00000000  00058519  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7638  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000421c  00000000  00000000  000e76b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006fd4 	.word	0x08006fd4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08006fd4 	.word	0x08006fd4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_uldivmod>:
 8000ab0:	b953      	cbnz	r3, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab2:	b94a      	cbnz	r2, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	bf08      	it	eq
 8000ab8:	2800      	cmpeq	r0, #0
 8000aba:	bf1c      	itt	ne
 8000abc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac4:	f000 b972 	b.w	8000dac <__aeabi_idiv0>
 8000ac8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000acc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad0:	f000 f806 	bl	8000ae0 <__udivmoddi4>
 8000ad4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000adc:	b004      	add	sp, #16
 8000ade:	4770      	bx	lr

08000ae0 <__udivmoddi4>:
 8000ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae4:	9e08      	ldr	r6, [sp, #32]
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	4688      	mov	r8, r1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d14b      	bne.n	8000b86 <__udivmoddi4+0xa6>
 8000aee:	428a      	cmp	r2, r1
 8000af0:	4615      	mov	r5, r2
 8000af2:	d967      	bls.n	8000bc4 <__udivmoddi4+0xe4>
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	b14a      	cbz	r2, 8000b0e <__udivmoddi4+0x2e>
 8000afa:	f1c2 0720 	rsb	r7, r2, #32
 8000afe:	fa01 f302 	lsl.w	r3, r1, r2
 8000b02:	fa20 f707 	lsr.w	r7, r0, r7
 8000b06:	4095      	lsls	r5, r2
 8000b08:	ea47 0803 	orr.w	r8, r7, r3
 8000b0c:	4094      	lsls	r4, r2
 8000b0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b12:	0c23      	lsrs	r3, r4, #16
 8000b14:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b18:	fa1f fc85 	uxth.w	ip, r5
 8000b1c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b24:	fb07 f10c 	mul.w	r1, r7, ip
 8000b28:	4299      	cmp	r1, r3
 8000b2a:	d909      	bls.n	8000b40 <__udivmoddi4+0x60>
 8000b2c:	18eb      	adds	r3, r5, r3
 8000b2e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b32:	f080 811b 	bcs.w	8000d6c <__udivmoddi4+0x28c>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 8118 	bls.w	8000d6c <__udivmoddi4+0x28c>
 8000b3c:	3f02      	subs	r7, #2
 8000b3e:	442b      	add	r3, r5
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b54:	45a4      	cmp	ip, r4
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x8c>
 8000b58:	192c      	adds	r4, r5, r4
 8000b5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x290>
 8000b62:	45a4      	cmp	ip, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x290>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	442c      	add	r4, r5
 8000b6c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b70:	eba4 040c 	sub.w	r4, r4, ip
 8000b74:	2700      	movs	r7, #0
 8000b76:	b11e      	cbz	r6, 8000b80 <__udivmoddi4+0xa0>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000b80:	4639      	mov	r1, r7
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xbe>
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	f000 80eb 	beq.w	8000d66 <__udivmoddi4+0x286>
 8000b90:	2700      	movs	r7, #0
 8000b92:	e9c6 0100 	strd	r0, r1, [r6]
 8000b96:	4638      	mov	r0, r7
 8000b98:	4639      	mov	r1, r7
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f783 	clz	r7, r3
 8000ba2:	2f00      	cmp	r7, #0
 8000ba4:	d147      	bne.n	8000c36 <__udivmoddi4+0x156>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd0>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80fa 	bhi.w	8000da4 <__udivmoddi4+0x2c4>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	4698      	mov	r8, r3
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa0>
 8000bbe:	e9c6 4800 	strd	r4, r8, [r6]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa0>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xe8>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 808f 	bne.w	8000cf0 <__udivmoddi4+0x210>
 8000bd2:	1b49      	subs	r1, r1, r5
 8000bd4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd8:	fa1f f885 	uxth.w	r8, r5
 8000bdc:	2701      	movs	r7, #1
 8000bde:	fbb1 fcfe 	udiv	ip, r1, lr
 8000be2:	0c23      	lsrs	r3, r4, #16
 8000be4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bec:	fb08 f10c 	mul.w	r1, r8, ip
 8000bf0:	4299      	cmp	r1, r3
 8000bf2:	d907      	bls.n	8000c04 <__udivmoddi4+0x124>
 8000bf4:	18eb      	adds	r3, r5, r3
 8000bf6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x122>
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	f200 80cd 	bhi.w	8000d9c <__udivmoddi4+0x2bc>
 8000c02:	4684      	mov	ip, r0
 8000c04:	1a59      	subs	r1, r3, r1
 8000c06:	b2a3      	uxth	r3, r4
 8000c08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c14:	fb08 f800 	mul.w	r8, r8, r0
 8000c18:	45a0      	cmp	r8, r4
 8000c1a:	d907      	bls.n	8000c2c <__udivmoddi4+0x14c>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x14a>
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	f200 80b6 	bhi.w	8000d96 <__udivmoddi4+0x2b6>
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	eba4 0408 	sub.w	r4, r4, r8
 8000c30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c34:	e79f      	b.n	8000b76 <__udivmoddi4+0x96>
 8000c36:	f1c7 0c20 	rsb	ip, r7, #32
 8000c3a:	40bb      	lsls	r3, r7
 8000c3c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c40:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c44:	fa01 f407 	lsl.w	r4, r1, r7
 8000c48:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c4c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c50:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c54:	4325      	orrs	r5, r4
 8000c56:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c5a:	0c2c      	lsrs	r4, r5, #16
 8000c5c:	fb08 3319 	mls	r3, r8, r9, r3
 8000c60:	fa1f fa8e 	uxth.w	sl, lr
 8000c64:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c68:	fb09 f40a 	mul.w	r4, r9, sl
 8000c6c:	429c      	cmp	r4, r3
 8000c6e:	fa02 f207 	lsl.w	r2, r2, r7
 8000c72:	fa00 f107 	lsl.w	r1, r0, r7
 8000c76:	d90b      	bls.n	8000c90 <__udivmoddi4+0x1b0>
 8000c78:	eb1e 0303 	adds.w	r3, lr, r3
 8000c7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c80:	f080 8087 	bcs.w	8000d92 <__udivmoddi4+0x2b2>
 8000c84:	429c      	cmp	r4, r3
 8000c86:	f240 8084 	bls.w	8000d92 <__udivmoddi4+0x2b2>
 8000c8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8e:	4473      	add	r3, lr
 8000c90:	1b1b      	subs	r3, r3, r4
 8000c92:	b2ad      	uxth	r5, r5
 8000c94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c98:	fb08 3310 	mls	r3, r8, r0, r3
 8000c9c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ca0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca4:	45a2      	cmp	sl, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x1da>
 8000ca8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb0:	d26b      	bcs.n	8000d8a <__udivmoddi4+0x2aa>
 8000cb2:	45a2      	cmp	sl, r4
 8000cb4:	d969      	bls.n	8000d8a <__udivmoddi4+0x2aa>
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	4474      	add	r4, lr
 8000cba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000cc2:	eba4 040a 	sub.w	r4, r4, sl
 8000cc6:	454c      	cmp	r4, r9
 8000cc8:	46c2      	mov	sl, r8
 8000cca:	464b      	mov	r3, r9
 8000ccc:	d354      	bcc.n	8000d78 <__udivmoddi4+0x298>
 8000cce:	d051      	beq.n	8000d74 <__udivmoddi4+0x294>
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d069      	beq.n	8000da8 <__udivmoddi4+0x2c8>
 8000cd4:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd8:	eb64 0403 	sbc.w	r4, r4, r3
 8000cdc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ce0:	40fd      	lsrs	r5, r7
 8000ce2:	40fc      	lsrs	r4, r7
 8000ce4:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce8:	e9c6 5400 	strd	r5, r4, [r6]
 8000cec:	2700      	movs	r7, #0
 8000cee:	e747      	b.n	8000b80 <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf8:	4095      	lsls	r5, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	fa21 f303 	lsr.w	r3, r1, r3
 8000d02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d06:	4338      	orrs	r0, r7
 8000d08:	0c01      	lsrs	r1, r0, #16
 8000d0a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0e:	fa1f f885 	uxth.w	r8, r5
 8000d12:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1a:	fb07 f308 	mul.w	r3, r7, r8
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	fa04 f402 	lsl.w	r4, r4, r2
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x256>
 8000d26:	1869      	adds	r1, r5, r1
 8000d28:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d2c:	d22f      	bcs.n	8000d8e <__udivmoddi4+0x2ae>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d92d      	bls.n	8000d8e <__udivmoddi4+0x2ae>
 8000d32:	3f02      	subs	r7, #2
 8000d34:	4429      	add	r1, r5
 8000d36:	1acb      	subs	r3, r1, r3
 8000d38:	b281      	uxth	r1, r0
 8000d3a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d46:	fb00 f308 	mul.w	r3, r0, r8
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d907      	bls.n	8000d5e <__udivmoddi4+0x27e>
 8000d4e:	1869      	adds	r1, r5, r1
 8000d50:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d54:	d217      	bcs.n	8000d86 <__udivmoddi4+0x2a6>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d915      	bls.n	8000d86 <__udivmoddi4+0x2a6>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	4429      	add	r1, r5
 8000d5e:	1ac9      	subs	r1, r1, r3
 8000d60:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d64:	e73b      	b.n	8000bde <__udivmoddi4+0xfe>
 8000d66:	4637      	mov	r7, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e709      	b.n	8000b80 <__udivmoddi4+0xa0>
 8000d6c:	4607      	mov	r7, r0
 8000d6e:	e6e7      	b.n	8000b40 <__udivmoddi4+0x60>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x8c>
 8000d74:	4541      	cmp	r1, r8
 8000d76:	d2ab      	bcs.n	8000cd0 <__udivmoddi4+0x1f0>
 8000d78:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d7c:	eb69 020e 	sbc.w	r2, r9, lr
 8000d80:	3801      	subs	r0, #1
 8000d82:	4613      	mov	r3, r2
 8000d84:	e7a4      	b.n	8000cd0 <__udivmoddi4+0x1f0>
 8000d86:	4660      	mov	r0, ip
 8000d88:	e7e9      	b.n	8000d5e <__udivmoddi4+0x27e>
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	e795      	b.n	8000cba <__udivmoddi4+0x1da>
 8000d8e:	4667      	mov	r7, ip
 8000d90:	e7d1      	b.n	8000d36 <__udivmoddi4+0x256>
 8000d92:	4681      	mov	r9, r0
 8000d94:	e77c      	b.n	8000c90 <__udivmoddi4+0x1b0>
 8000d96:	3802      	subs	r0, #2
 8000d98:	442c      	add	r4, r5
 8000d9a:	e747      	b.n	8000c2c <__udivmoddi4+0x14c>
 8000d9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da0:	442b      	add	r3, r5
 8000da2:	e72f      	b.n	8000c04 <__udivmoddi4+0x124>
 8000da4:	4638      	mov	r0, r7
 8000da6:	e708      	b.n	8000bba <__udivmoddi4+0xda>
 8000da8:	4637      	mov	r7, r6
 8000daa:	e6e9      	b.n	8000b80 <__udivmoddi4+0xa0>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_DMA_Init+0x6c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <MX_DMA_Init+0x6c>)
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_DMA_Init+0x6c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	200c      	movs	r0, #12
 8000dd8:	f001 fcbd 	bl	8002756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ddc:	200c      	movs	r0, #12
 8000dde:	f001 fcd6 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	200e      	movs	r0, #14
 8000de8:	f001 fcb5 	bl	8002756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000dec:	200e      	movs	r0, #14
 8000dee:	f001 fcce 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	200f      	movs	r0, #15
 8000df8:	f001 fcad 	bl	8002756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000dfc:	200f      	movs	r0, #15
 8000dfe:	f001 fcc6 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2010      	movs	r0, #16
 8000e08:	f001 fca5 	bl	8002756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e0c:	2010      	movs	r0, #16
 8000e0e:	f001 fcbe 	bl	800278e <HAL_NVIC_EnableIRQ>

}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800

08000e20 <ibus_init>:
uint8_t ibus_buffer[32] = {0};
//uint16_t channel[IBUS_USER_CHANNELS] = {0};


void ibus_init()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	//uint8_t ibus_buffer[32] = {0};
	HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);
 8000e24:	2220      	movs	r2, #32
 8000e26:	4903      	ldr	r1, [pc, #12]	; (8000e34 <ibus_init+0x14>)
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <ibus_init+0x18>)
 8000e2a:	f004 f84c 	bl	8004ec6 <HAL_UART_Receive_IT>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000094 	.word	0x20000094
 8000e38:	20000438 	.word	0x20000438

08000e3c <ibus_read_channel>:


void ibus_read_channel(channel *channel)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08e      	sub	sp, #56	; 0x38
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	//uint8_t ibus_buffer[32] = {0};
	//HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);

	uint16_t channel_buffer[IBUS_MAX_CHANNLES] = {0};
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
 8000e54:	615a      	str	r2, [r3, #20]
 8000e56:	619a      	str	r2, [r3, #24]
	uint16_t checksum_cal, checksum_ibus;

	// is it ibus?
	if(ibus_buffer[0] == IBUS_LENGTH && ibus_buffer[1] == IBUS_COMMAND40)
 8000e58:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <ibus_read_channel+0xfc>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b20      	cmp	r3, #32
 8000e5e:	d161      	bne.n	8000f24 <ibus_read_channel+0xe8>
 8000e60:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <ibus_read_channel+0xfc>)
 8000e62:	785b      	ldrb	r3, [r3, #1]
 8000e64:	2b40      	cmp	r3, #64	; 0x40
 8000e66:	d15d      	bne.n	8000f24 <ibus_read_channel+0xe8>
	{
		checksum_cal = 0xffff - ibus_buffer[0] - ibus_buffer[1];
 8000e68:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <ibus_read_channel+0xfc>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <ibus_read_channel+0xfc>)
 8000e74:	785b      	ldrb	r3, [r3, #1]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	86fb      	strh	r3, [r7, #54]	; 0x36

		// data parsing
		for(int i = 0; i < IBUS_MAX_CHANNLES; i++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8000e80:	e02a      	b.n	8000ed8 <ibus_read_channel+0x9c>
		{
			// little endian
			channel_buffer[i] = (uint16_t)(ibus_buffer[i * 2 + 3] << 8 | ibus_buffer[i * 2 + 2]);
 8000e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	3303      	adds	r3, #3
 8000e88:	4a2b      	ldr	r2, [pc, #172]	; (8000f38 <ibus_read_channel+0xfc>)
 8000e8a:	5cd3      	ldrb	r3, [r2, r3]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e92:	3301      	adds	r3, #1
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4928      	ldr	r1, [pc, #160]	; (8000f38 <ibus_read_channel+0xfc>)
 8000e98:	5ccb      	ldrb	r3, [r1, r3]
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000eaa:	440b      	add	r3, r1
 8000eac:	f823 2c2c 	strh.w	r2, [r3, #-44]
			
			// checksum from user calculation
			checksum_cal = checksum_cal - ibus_buffer[i * 2 + 3] - ibus_buffer[i * 2 + 2];
 8000eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	3303      	adds	r3, #3
 8000eb6:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <ibus_read_channel+0xfc>)
 8000eb8:	5cd3      	ldrb	r3, [r2, r3]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	491b      	ldr	r1, [pc, #108]	; (8000f38 <ibus_read_channel+0xfc>)
 8000eca:	5ccb      	ldrb	r3, [r1, r3]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	86fb      	strh	r3, [r7, #54]	; 0x36
		for(int i = 0; i < IBUS_MAX_CHANNLES; i++)
 8000ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eda:	2b0d      	cmp	r3, #13
 8000edc:	ddd1      	ble.n	8000e82 <ibus_read_channel+0x46>
		}

		// checksum from received data
		checksum_ibus = ibus_buffer[31] << 8 | ibus_buffer[30];
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <ibus_read_channel+0xfc>)
 8000ee0:	7fdb      	ldrb	r3, [r3, #31]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <ibus_read_channel+0xfc>)
 8000ee8:	7f9b      	ldrb	r3, [r3, #30]
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	857b      	strh	r3, [r7, #42]	; 0x2a

		// compare checksum 
		if(checksum_cal == checksum_ibus) 
 8000ef2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000ef4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d114      	bne.n	8000f24 <ibus_read_channel+0xe8>
		{
			// return validated channel data
			for(int ch_index = 0; ch_index < IBUS_USER_CHANNELS; ch_index++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000efe:	e00e      	b.n	8000f1e <ibus_read_channel+0xe2>
			{
				channel[ch_index] = channel_buffer[ch_index];
 8000f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	441a      	add	r2, r3
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000f10:	440b      	add	r3, r1
 8000f12:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000f16:	8013      	strh	r3, [r2, #0]
			for(int ch_index = 0; ch_index < IBUS_USER_CHANNELS; ch_index++)
 8000f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	dded      	ble.n	8000f00 <ibus_read_channel+0xc4>
			}
		}
	}

	HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);
 8000f24:	2220      	movs	r2, #32
 8000f26:	4904      	ldr	r1, [pc, #16]	; (8000f38 <ibus_read_channel+0xfc>)
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ibus_read_channel+0x100>)
 8000f2a:	f003 ffcc 	bl	8004ec6 <HAL_UART_Receive_IT>
}
 8000f2e:	bf00      	nop
 8000f30:	3738      	adds	r7, #56	; 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000094 	.word	0x20000094
 8000f3c:	20000438 	.word	0x20000438

08000f40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a29      	ldr	r2, [pc, #164]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b23      	ldr	r3, [pc, #140]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a22      	ldr	r2, [pc, #136]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_GPIO_Init+0xc4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb0:	4815      	ldr	r0, [pc, #84]	; (8001008 <MX_GPIO_Init+0xc8>)
 8000fb2:	f002 f893 	bl	80030dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_ICM20948_CS_GPIO_Port, SPI_ICM20948_CS_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2110      	movs	r1, #16
 8000fba:	4814      	ldr	r0, [pc, #80]	; (800100c <MX_GPIO_Init+0xcc>)
 8000fbc:	f002 f88e 	bl	80030dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8000fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <MX_GPIO_Init+0xc8>)
 8000fda:	f001 fefd 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_ICM20948_CS_Pin;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_GPIO_Init+0xcc>)
 8000ff6:	f001 feef 	bl	8002dd8 <HAL_GPIO_Init>

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800
 8001008:	40020800 	.word	0x40020800
 800100c:	40020000 	.word	0x40020000

08001010 <cs_high>:
uint8_t rx_buffer[6] = {0};


// cs state
void cs_high()
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PIN_PORT, CS_PIN_NUMBER, SET);	
 8001014:	2201      	movs	r2, #1
 8001016:	2110      	movs	r1, #16
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <cs_high+0x14>)
 800101a:	f002 f85f 	bl	80030dc <HAL_GPIO_WritePin>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020000 	.word	0x40020000

08001028 <cs_low>:

void cs_low()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PIN_PORT, CS_PIN_NUMBER, RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2110      	movs	r1, #16
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <cs_low+0x14>)
 8001032:	f002 f853 	bl	80030dc <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40020000 	.word	0x40020000

08001040 <select_user_bank>:

// user bank
void select_user_bank(userbank_e ub)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	icm20948_write(B0_REG_BANK_SEL, ub);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4619      	mov	r1, r3
 800104e:	207f      	movs	r0, #127	; 0x7f
 8001050:	f000 f82e 	bl	80010b0 <icm20948_write>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <icm20948_read>:

// spi
void icm20948_read(uint8_t regaddr, uint8_t len)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
	cs_low();
 800106c:	f7ff ffdc 	bl	8001028 <cs_low>
	tx_buffer[0] = READ | regaddr;
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <icm20948_read+0x48>)
 800107a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(SPI_ICM20948, tx_buffer, 1, 10);
 800107c:	230a      	movs	r3, #10
 800107e:	2201      	movs	r2, #1
 8001080:	4908      	ldr	r1, [pc, #32]	; (80010a4 <icm20948_read+0x48>)
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <icm20948_read+0x4c>)
 8001084:	f002 fce4 	bl	8003a50 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_ICM20948, rx_buffer, len, 10);
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	b29a      	uxth	r2, r3
 800108c:	230a      	movs	r3, #10
 800108e:	4907      	ldr	r1, [pc, #28]	; (80010ac <icm20948_read+0x50>)
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <icm20948_read+0x4c>)
 8001092:	f002 fe11 	bl	8003cb8 <HAL_SPI_Receive>
	cs_high();
 8001096:	f7ff ffbb 	bl	8001010 <cs_high>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000b4 	.word	0x200000b4
 80010a8:	20000160 	.word	0x20000160
 80010ac:	200000bc 	.word	0x200000bc

080010b0 <icm20948_write>:

void icm20948_write(uint8_t regaddr, uint8_t data)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	4613      	mov	r3, r2
 80010be:	71bb      	strb	r3, [r7, #6]
	cs_low();
 80010c0:	f7ff ffb2 	bl	8001028 <cs_low>
	tx_buffer[0] = WRITE | regaddr;
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <icm20948_write+0x40>)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = data;
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <icm20948_write+0x40>)
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	7053      	strb	r3, [r2, #1]
	HAL_SPI_Transmit(SPI_ICM20948, tx_buffer, 2, 10);
 80010d0:	230a      	movs	r3, #10
 80010d2:	2202      	movs	r2, #2
 80010d4:	4906      	ldr	r1, [pc, #24]	; (80010f0 <icm20948_write+0x40>)
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <icm20948_write+0x44>)
 80010d8:	f002 fcba 	bl	8003a50 <HAL_SPI_Transmit>
	cs_high();
 80010dc:	f7ff ff98 	bl	8001010 <cs_high>

	// necessary
	HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f001 fa3b 	bl	800255c <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000b4 	.word	0x200000b4
 80010f4:	20000160 	.word	0x20000160

080010f8 <ak09916_read>:

// auxiliary i2c
void ak09916_read(uint8_t regaddr, uint8_t len)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	select_user_bank(userbank_3);
 8001108:	2030      	movs	r0, #48	; 0x30
 800110a:	f7ff ff99 	bl	8001040 <select_user_bank>

	icm20948_write(B3_I2C_SLV0_ADDR, READ | ADDRESS_AK09916);
 800110e:	218c      	movs	r1, #140	; 0x8c
 8001110:	2003      	movs	r0, #3
 8001112:	f7ff ffcd 	bl	80010b0 <icm20948_write>
	icm20948_write(B3_I2C_SLV0_REG, regaddr); 
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4619      	mov	r1, r3
 800111a:	2004      	movs	r0, #4
 800111c:	f7ff ffc8 	bl	80010b0 <icm20948_write>
	icm20948_write(B3_I2C_SLV0_CTRL, I2C_SLV_EN | len);
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4619      	mov	r1, r3
 800112a:	2005      	movs	r0, #5
 800112c:	f7ff ffc0 	bl	80010b0 <icm20948_write>

	select_user_bank(userbank_0);
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff ff85 	bl	8001040 <select_user_bank>
	icm20948_read(B0_EXT_SLV_SENS_DATA_00, len);
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	4619      	mov	r1, r3
 800113a:	203b      	movs	r0, #59	; 0x3b
 800113c:	f7ff ff8e 	bl	800105c <icm20948_read>

	HAL_Delay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f001 fa0b 	bl	800255c <HAL_Delay>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <ak09916_wrtie>:

void ak09916_wrtie(uint8_t regaddr, uint8_t data)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	460a      	mov	r2, r1
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	4613      	mov	r3, r2
 800115c:	71bb      	strb	r3, [r7, #6]
	select_user_bank(userbank_3);
 800115e:	2030      	movs	r0, #48	; 0x30
 8001160:	f7ff ff6e 	bl	8001040 <select_user_bank>

	icm20948_write(B3_I2C_SLV0_ADDR, WRITE | ADDRESS_AK09916);
 8001164:	210c      	movs	r1, #12
 8001166:	2003      	movs	r0, #3
 8001168:	f7ff ffa2 	bl	80010b0 <icm20948_write>
	icm20948_write(B3_I2C_SLV0_REG, regaddr);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4619      	mov	r1, r3
 8001170:	2004      	movs	r0, #4
 8001172:	f7ff ff9d 	bl	80010b0 <icm20948_write>
	icm20948_write(B3_I2C_SLV0_DO, data);
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	4619      	mov	r1, r3
 800117a:	2006      	movs	r0, #6
 800117c:	f7ff ff98 	bl	80010b0 <icm20948_write>
	icm20948_write(B3_I2C_SLV0_CTRL, 0x81);
 8001180:	2181      	movs	r1, #129	; 0x81
 8001182:	2005      	movs	r0, #5
 8001184:	f7ff ff94 	bl	80010b0 <icm20948_write>

	HAL_Delay(1);
 8001188:	2001      	movs	r0, #1
 800118a:	f001 f9e7 	bl	800255c <HAL_Delay>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <whoami_icm20948>:

// check sensor id
uint8_t whoami_icm20948()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	select_user_bank(userbank_0);
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff ff4f 	bl	8001040 <select_user_bank>
	icm20948_read(B0_WHO_AM_I, 1);
 80011a2:	2101      	movs	r1, #1
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff ff59 	bl	800105c <icm20948_read>

	return rx_buffer[0];
 80011aa:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <whoami_icm20948+0x1c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000bc 	.word	0x200000bc

080011b8 <whoami_ak09916>:

uint8_t whoami_ak09916()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	ak09916_read(MAG_WIA2, 1);
 80011bc:	2101      	movs	r1, #1
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff ff9a 	bl	80010f8 <ak09916_read>

	return rx_buffer[0];	// 0x09
 80011c4:	4b01      	ldr	r3, [pc, #4]	; (80011cc <whoami_ak09916+0x14>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200000bc 	.word	0x200000bc

080011d0 <icm20948_init>:

// initialize
void icm20948_init()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	// ICM20948 Reset
	select_user_bank(userbank_0);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff ff33 	bl	8001040 <select_user_bank>
	icm20948_write(B0_PWR_MGMT_1, DEVICE_RESET | 0x41);
 80011da:	21c1      	movs	r1, #193	; 0xc1
 80011dc:	2006      	movs	r0, #6
 80011de:	f7ff ff67 	bl	80010b0 <icm20948_write>

	// SPI mode only
	select_user_bank(userbank_0);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff ff2c 	bl	8001040 <select_user_bank>
	icm20948_write(B0_USER_CTRL, I2C_IF_DIS);
 80011e8:	2110      	movs	r1, #16
 80011ea:	2003      	movs	r0, #3
 80011ec:	f7ff ff60 	bl	80010b0 <icm20948_write>

	// Wake the chip and Recommended clock selection(CLKSEL = 1)
	select_user_bank(userbank_0);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff ff25 	bl	8001040 <select_user_bank>
	icm20948_write(B0_PWR_MGMT_1, WAKE | CLKSEL);
 80011f6:	2101      	movs	r1, #1
 80011f8:	2006      	movs	r0, #6
 80011fa:	f7ff ff59 	bl	80010b0 <icm20948_write>

	// Set Gyroscope ODR and Scale
	select_user_bank(userbank_2);
 80011fe:	2020      	movs	r0, #32
 8001200:	f7ff ff1e 	bl	8001040 <select_user_bank>
	icm20948_write(B2_GYRO_SMPLRT_DIV, Gyro_ODR_1100Hz);				// Gyro ODR = 1.1kHz
 8001204:	2100      	movs	r1, #0
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff ff52 	bl	80010b0 <icm20948_write>
	icm20948_write(B2_GYRO_CONFIG_1, GYRO_FS_SEL_250dps | GYRO_FCHOICE);	// Gyro scale ±250dps and Enable DLPF
 800120c:	2101      	movs	r1, #1
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff ff4e 	bl	80010b0 <icm20948_write>

	// Set Accelerometer ODR and Scale
	icm20948_write(B2_ACCEL_SMPLRT_DIV_2, Accel_ODR_1100Hz);			// Accel ODR = 1.1kHz
 8001214:	2100      	movs	r1, #0
 8001216:	2011      	movs	r0, #17
 8001218:	f7ff ff4a 	bl	80010b0 <icm20948_write>
	icm20948_write(B2_ACCEL_CONFIG, ACCEL_FS_SEL_2g | ACCEL_FCHOICE);	// Accel scale ±2g and Enable DLPF
 800121c:	2101      	movs	r1, #1
 800121e:	2014      	movs	r0, #20
 8001220:	f7ff ff46 	bl	80010b0 <icm20948_write>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <ak09916_init>:

void ak09916_init()
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	// I2C Master Reset
	select_user_bank(userbank_0);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ff07 	bl	8001040 <select_user_bank>
	icm20948_write(B0_USER_CTRL, I2C_MST_RST);
 8001232:	2102      	movs	r1, #2
 8001234:	2003      	movs	r0, #3
 8001236:	f7ff ff3b 	bl	80010b0 <icm20948_write>

	// I2C Master Enable
	select_user_bank(userbank_0);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff00 	bl	8001040 <select_user_bank>
	icm20948_write(B0_USER_CTRL, I2C_MST_EN);
 8001240:	2120      	movs	r1, #32
 8001242:	2003      	movs	r0, #3
 8001244:	f7ff ff34 	bl	80010b0 <icm20948_write>

	// I2C Master Clock Frequency
	select_user_bank(userbank_3);
 8001248:	2030      	movs	r0, #48	; 0x30
 800124a:	f7ff fef9 	bl	8001040 <select_user_bank>
	icm20948_write(B3_I2C_MST_CTRL, I2C_MST_CLK); // 345.6 kHz
 800124e:	2107      	movs	r1, #7
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff ff2d 	bl	80010b0 <icm20948_write>

	// I2C Slave Reset
	ak09916_wrtie(MAG_CNTL3, 0x01);
 8001256:	2101      	movs	r1, #1
 8001258:	2032      	movs	r0, #50	; 0x32
 800125a:	f7ff ff78 	bl	800114e <ak09916_wrtie>
	
	// I2C Slave Operation Mode
	ak09916_wrtie(MAG_CNTL2, Continuous_measurement_mode_4);
 800125e:	2108      	movs	r1, #8
 8001260:	2031      	movs	r0, #49	; 0x31
 8001262:	f7ff ff74 	bl	800114e <ak09916_wrtie>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <read_gyro_lsb>:



// read gyro
void read_gyro_lsb(icm20948_t* icm20948)	// 22us
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	icm20948_read(B0_GYRO_XOUT_H, 6);
 8001274:	2106      	movs	r1, #6
 8001276:	2033      	movs	r0, #51	; 0x33
 8001278:	f7ff fef0 	bl	800105c <icm20948_read>

	icm20948->gyro_lsb_x = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]);
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <read_gyro_lsb+0x5c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b21a      	sxth	r2, r3
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <read_gyro_lsb+0x5c>)
 8001286:	785b      	ldrb	r3, [r3, #1]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b21a      	sxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	801a      	strh	r2, [r3, #0]
	icm20948->gyro_lsb_y = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]);
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <read_gyro_lsb+0x5c>)
 8001294:	789b      	ldrb	r3, [r3, #2]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <read_gyro_lsb+0x5c>)
 800129c:	78db      	ldrb	r3, [r3, #3]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	805a      	strh	r2, [r3, #2]
	icm20948->gyro_lsb_z = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]);
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <read_gyro_lsb+0x5c>)
 80012aa:	791b      	ldrb	r3, [r3, #4]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <read_gyro_lsb+0x5c>)
 80012b2:	795b      	ldrb	r3, [r3, #5]
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	809a      	strh	r2, [r3, #4]
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000bc 	.word	0x200000bc
 80012cc:	00000000 	.word	0x00000000

080012d0 <read_gyro_dps>:

void read_gyro_dps(icm20948_t* icm20948)	
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	// get lsb data
	read_gyro_lsb(icm20948);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ffc7 	bl	800126c <read_gyro_lsb>

	// divide by 131(lsb/dps)
	icm20948->gyro_dps_x = icm20948->gyro_lsb_x / 131.0;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f8c9 	bl	800047c <__aeabi_i2d>
 80012ea:	a317      	add	r3, pc, #92	; (adr r3, 8001348 <read_gyro_dps+0x78>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff fa58 	bl	80007a4 <__aeabi_ddiv>
 80012f4:	4603      	mov	r3, r0
 80012f6:	460c      	mov	r4, r1
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	e9c2 3402 	strd	r3, r4, [r2, #8]
	icm20948->gyro_dps_y = icm20948->gyro_lsb_y / 131.0;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f8b9 	bl	800047c <__aeabi_i2d>
 800130a:	a30f      	add	r3, pc, #60	; (adr r3, 8001348 <read_gyro_dps+0x78>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff fa48 	bl	80007a4 <__aeabi_ddiv>
 8001314:	4603      	mov	r3, r0
 8001316:	460c      	mov	r4, r1
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	icm20948->gyro_dps_z = icm20948->gyro_lsb_z / 131.0;  
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8a9 	bl	800047c <__aeabi_i2d>
 800132a:	a307      	add	r3, pc, #28	; (adr r3, 8001348 <read_gyro_dps+0x78>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff fa38 	bl	80007a4 <__aeabi_ddiv>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	bf00      	nop
 8001348:	00000000 	.word	0x00000000
 800134c:	40606000 	.word	0x40606000

08001350 <read_accel_lsb>:


// read aceel
void read_accel_lsb(icm20948_t* icm20948)	// 22us
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	icm20948_read(B0_ACCEL_XOUT_H, 6);
 8001358:	2106      	movs	r1, #6
 800135a:	202d      	movs	r0, #45	; 0x2d
 800135c:	f7ff fe7e 	bl	800105c <icm20948_read>

	icm20948->accel_lsb_x = (int16_t)(rx_buffer[0] << 8 | rx_buffer[1]);
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <read_accel_lsb+0x5c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21a      	sxth	r2, r3
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <read_accel_lsb+0x5c>)
 800136a:	785b      	ldrb	r3, [r3, #1]
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b21a      	sxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	841a      	strh	r2, [r3, #32]
	icm20948->accel_lsb_y = (int16_t)(rx_buffer[2] << 8 | rx_buffer[3]);
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <read_accel_lsb+0x5c>)
 8001378:	789b      	ldrb	r3, [r3, #2]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <read_accel_lsb+0x5c>)
 8001380:	78db      	ldrb	r3, [r3, #3]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21a      	sxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	845a      	strh	r2, [r3, #34]	; 0x22
	icm20948->accel_lsb_z = (int16_t)(rx_buffer[4] << 8 | rx_buffer[5]);
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <read_accel_lsb+0x5c>)
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21a      	sxth	r2, r3
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <read_accel_lsb+0x5c>)
 8001396:	795b      	ldrb	r3, [r3, #5]
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b21a      	sxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000bc 	.word	0x200000bc

080013b0 <read_accel_g>:

void read_accel_g(icm20948_t* icm20948)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	read_accel_lsb(icm20948);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ffc9 	bl	8001350 <read_accel_lsb>

	icm20948->accel_g_x = icm20948->accel_lsb_x / 16384.0;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f859 	bl	800047c <__aeabi_i2d>
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <read_accel_g+0x88>)
 80013d0:	f7ff f9e8 	bl	80007a4 <__aeabi_ddiv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	icm20948->accel_g_y = icm20948->accel_lsb_y / 16384.0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f849 	bl	800047c <__aeabi_i2d>
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <read_accel_g+0x88>)
 80013f0:	f7ff f9d8 	bl	80007a4 <__aeabi_ddiv>
 80013f4:	4603      	mov	r3, r0
 80013f6:	460c      	mov	r4, r1
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	icm20948->accel_g_z = (icm20948->accel_lsb_z / 16384.0) + 1;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f839 	bl	800047c <__aeabi_i2d>
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <read_accel_g+0x88>)
 8001410:	f7ff f9c8 	bl	80007a4 <__aeabi_ddiv>
 8001414:	4603      	mov	r3, r0
 8001416:	460c      	mov	r4, r1
 8001418:	4618      	mov	r0, r3
 800141a:	4621      	mov	r1, r4
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <read_accel_g+0x8c>)
 8001422:	f7fe fedf 	bl	80001e4 <__adddf3>
 8001426:	4603      	mov	r3, r0
 8001428:	460c      	mov	r4, r1
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	40d00000 	.word	0x40d00000
 800143c:	3ff00000 	.word	0x3ff00000

08001440 <calibrate_icm20948>:
}


// calibrate gyro and accel
void calibrate_icm20948(icm20948_t* icm20948, uint16_t samples)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b090      	sub	sp, #64	; 0x40
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
	int32_t gyro_bias[3] = {0, 0, 0};
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
 8001450:	2300      	movs	r3, #0
 8001452:	637b      	str	r3, [r7, #52]	; 0x34
 8001454:	2300      	movs	r3, #0
 8001456:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t gyro_offset[6] = {0, 0, 0, 0, 0, 0};
 8001458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	809a      	strh	r2, [r3, #4]

	int32_t accel_bias_reg[3] = {0, 0, 0};
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t accel_bias[3] = {0, 0, 0};
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
	uint8_t accel_offset[6] = {0, 0, 0, 0, 0, 0};
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	809a      	strh	r2, [r3, #4]

	// for read function
	select_user_bank(userbank_0);
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fddb 	bl	8001040 <select_user_bank>

	// average
	for(int i = 0; i < samples; i++)
 800148a:	2300      	movs	r3, #0
 800148c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800148e:	e02c      	b.n	80014ea <calibrate_icm20948+0xaa>
	{
		read_accel_lsb(icm20948);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff5d 	bl	8001350 <read_accel_lsb>
		read_gyro_lsb(icm20948);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fee8 	bl	800126c <read_gyro_lsb>

		gyro_bias[0] += icm20948->gyro_lsb_x;
 800149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014a4:	4413      	add	r3, r2
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
		gyro_bias[1] += icm20948->gyro_lsb_y;
 80014a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80014b0:	4413      	add	r3, r2
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_bias[2] += icm20948->gyro_lsb_z;
 80014b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	63bb      	str	r3, [r7, #56]	; 0x38

		accel_bias[0] += icm20948->accel_lsb_x;
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 80014c8:	4413      	add	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
		accel_bias[1] += icm20948->accel_lsb_y;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 80014d4:	4413      	add	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]
		accel_bias[2] += icm20948->accel_lsb_z;
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 80014e0:	4413      	add	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < samples; i++)
 80014e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e6:	3301      	adds	r3, #1
 80014e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dbce      	blt.n	8001490 <calibrate_icm20948+0x50>
	}

	gyro_bias[0] /= (int32_t) samples;
 80014f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014f4:	887b      	ldrh	r3, [r7, #2]
 80014f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
	gyro_bias[1] /= (int32_t) samples;	
 80014fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	fb92 f3f3 	sdiv	r3, r2, r3
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
	gyro_bias[2] /= (int32_t) samples;
 8001506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001508:	887b      	ldrh	r3, [r7, #2]
 800150a:	fb92 f3f3 	sdiv	r3, r2, r3
 800150e:	63bb      	str	r3, [r7, #56]	; 0x38

	accel_bias[0] /= (int32_t) samples;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	fb92 f3f3 	sdiv	r3, r2, r3
 8001518:	613b      	str	r3, [r7, #16]
	accel_bias[1] /= (int32_t) samples;	
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
	accel_bias[2] /= (int32_t) samples;
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	fb92 f3f3 	sdiv	r3, r2, r3
 800152c:	61bb      	str	r3, [r7, #24]

	// gyro offset register
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 800152e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001530:	425b      	negs	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	da00      	bge.n	8001538 <calibrate_icm20948+0xf8>
 8001536:	3303      	adds	r3, #3
 8001538:	109b      	asrs	r3, r3, #2
 800153a:	121b      	asrs	r3, r3, #8
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8001542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001544:	425b      	negs	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	da00      	bge.n	800154c <calibrate_icm20948+0x10c>
 800154a:	3303      	adds	r3, #3
 800154c:	109b      	asrs	r3, r3, #2
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001556:	425b      	negs	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	da00      	bge.n	800155e <calibrate_icm20948+0x11e>
 800155c:	3303      	adds	r3, #3
 800155e:	109b      	asrs	r3, r3, #2
 8001560:	121b      	asrs	r3, r3, #8
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156a:	425b      	negs	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	da00      	bge.n	8001572 <calibrate_icm20948+0x132>
 8001570:	3303      	adds	r3, #3
 8001572:	109b      	asrs	r3, r3, #2
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 800157a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800157c:	425b      	negs	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	da00      	bge.n	8001584 <calibrate_icm20948+0x144>
 8001582:	3303      	adds	r3, #3
 8001584:	109b      	asrs	r3, r3, #2
 8001586:	121b      	asrs	r3, r3, #8
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 800158e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001590:	425b      	negs	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	da00      	bge.n	8001598 <calibrate_icm20948+0x158>
 8001596:	3303      	adds	r3, #3
 8001598:	109b      	asrs	r3, r3, #2
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// write
	select_user_bank(userbank_2);
 80015a0:	2020      	movs	r0, #32
 80015a2:	f7ff fd4d 	bl	8001040 <select_user_bank>
	icm20948_write(B2_XG_OFFS_USRH, gyro_offset[0]);
 80015a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015aa:	4619      	mov	r1, r3
 80015ac:	2003      	movs	r0, #3
 80015ae:	f7ff fd7f 	bl	80010b0 <icm20948_write>
	icm20948_write(B2_XG_OFFS_USRL, gyro_offset[1]);
 80015b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80015b6:	4619      	mov	r1, r3
 80015b8:	2004      	movs	r0, #4
 80015ba:	f7ff fd79 	bl	80010b0 <icm20948_write>
	icm20948_write(B2_YG_OFFS_USRH, gyro_offset[2]);
 80015be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015c2:	4619      	mov	r1, r3
 80015c4:	2005      	movs	r0, #5
 80015c6:	f7ff fd73 	bl	80010b0 <icm20948_write>
	icm20948_write(B2_YG_OFFS_USRL, gyro_offset[3]);
 80015ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80015ce:	4619      	mov	r1, r3
 80015d0:	2006      	movs	r0, #6
 80015d2:	f7ff fd6d 	bl	80010b0 <icm20948_write>
	icm20948_write(B2_ZG_OFFS_USRH, gyro_offset[4]);
 80015d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015da:	4619      	mov	r1, r3
 80015dc:	2007      	movs	r0, #7
 80015de:	f7ff fd67 	bl	80010b0 <icm20948_write>
	icm20948_write(B2_ZG_OFFS_USRL, gyro_offset[5]);
 80015e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80015e6:	4619      	mov	r1, r3
 80015e8:	2008      	movs	r0, #8
 80015ea:	f7ff fd61 	bl	80010b0 <icm20948_write>

	// read factory accel trim values
	select_user_bank(userbank_1);
 80015ee:	2010      	movs	r0, #16
 80015f0:	f7ff fd26 	bl	8001040 <select_user_bank>
	icm20948_read(B1_XA_OFFS_H, 2);
 80015f4:	2102      	movs	r1, #2
 80015f6:	2014      	movs	r0, #20
 80015f8:	f7ff fd30 	bl	800105c <icm20948_read>
	accel_bias_reg[0] = (int32_t)((int16_t)rx_buffer[0] << 8 | rx_buffer[1]);
 80015fc:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <calibrate_icm20948+0x2b8>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <calibrate_icm20948+0x2b8>)
 8001604:	7852      	ldrb	r2, [r2, #1]
 8001606:	4313      	orrs	r3, r2
 8001608:	61fb      	str	r3, [r7, #28]

	icm20948_read(B1_YA_OFFS_H, 2);
 800160a:	2102      	movs	r1, #2
 800160c:	2017      	movs	r0, #23
 800160e:	f7ff fd25 	bl	800105c <icm20948_read>
	accel_bias_reg[1] = (int32_t)((int16_t)rx_buffer[0] << 8 | rx_buffer[1]);
 8001612:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <calibrate_icm20948+0x2b8>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	4a37      	ldr	r2, [pc, #220]	; (80016f8 <calibrate_icm20948+0x2b8>)
 800161a:	7852      	ldrb	r2, [r2, #1]
 800161c:	4313      	orrs	r3, r2
 800161e:	623b      	str	r3, [r7, #32]

	icm20948_read(B1_ZA_OFFS_H, 2);
 8001620:	2102      	movs	r1, #2
 8001622:	201a      	movs	r0, #26
 8001624:	f7ff fd1a 	bl	800105c <icm20948_read>
	accel_bias_reg[2] = (int32_t)((int16_t)rx_buffer[0] << 8 | rx_buffer[1]);
 8001628:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <calibrate_icm20948+0x2b8>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <calibrate_icm20948+0x2b8>)
 8001630:	7852      	ldrb	r2, [r2, #1]
 8001632:	4313      	orrs	r3, r2
 8001634:	627b      	str	r3, [r7, #36]	; 0x24

	// accel offset register
	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	da00      	bge.n	8001640 <calibrate_icm20948+0x200>
 800163e:	3307      	adds	r3, #7
 8001640:	10db      	asrs	r3, r3, #3
 8001642:	425b      	negs	r3, r3
 8001644:	4413      	add	r3, r2
 8001646:	61fb      	str	r3, [r7, #28]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001648:	6a3a      	ldr	r2, [r7, #32]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b00      	cmp	r3, #0
 800164e:	da00      	bge.n	8001652 <calibrate_icm20948+0x212>
 8001650:	3307      	adds	r3, #7
 8001652:	10db      	asrs	r3, r3, #3
 8001654:	425b      	negs	r3, r3
 8001656:	4413      	add	r3, r2
 8001658:	623b      	str	r3, [r7, #32]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 800165a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b00      	cmp	r3, #0
 8001660:	da00      	bge.n	8001664 <calibrate_icm20948+0x224>
 8001662:	3307      	adds	r3, #7
 8001664:	10db      	asrs	r3, r3, #3
 8001666:	425b      	negs	r3, r3
 8001668:	4413      	add	r3, r2
 800166a:	627b      	str	r3, [r7, #36]	; 0x24

	// ignore bit 0 (& 0xFE)
	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	121b      	asrs	r3, r3, #8
 8001670:	b2db      	uxtb	r3, r3
 8001672:	723b      	strb	r3, [r7, #8]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	727b      	strb	r3, [r7, #9]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	121b      	asrs	r3, r3, #8
 8001684:	b2db      	uxtb	r3, r3
 8001686:	72bb      	strb	r3, [r7, #10]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	b2db      	uxtb	r3, r3
 8001692:	72fb      	strb	r3, [r7, #11]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	121b      	asrs	r3, r3, #8
 8001698:	b2db      	uxtb	r3, r3
 800169a:	733b      	strb	r3, [r7, #12]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	737b      	strb	r3, [r7, #13]

	// write
	select_user_bank(userbank_1);
 80016a8:	2010      	movs	r0, #16
 80016aa:	f7ff fcc9 	bl	8001040 <select_user_bank>
	icm20948_write(B1_XA_OFFS_H, accel_offset[0]);
 80016ae:	7a3b      	ldrb	r3, [r7, #8]
 80016b0:	4619      	mov	r1, r3
 80016b2:	2014      	movs	r0, #20
 80016b4:	f7ff fcfc 	bl	80010b0 <icm20948_write>
	icm20948_write(B1_XA_OFFS_L, accel_offset[1]);
 80016b8:	7a7b      	ldrb	r3, [r7, #9]
 80016ba:	4619      	mov	r1, r3
 80016bc:	2015      	movs	r0, #21
 80016be:	f7ff fcf7 	bl	80010b0 <icm20948_write>
	icm20948_write(B1_YA_OFFS_H, accel_offset[2]);
 80016c2:	7abb      	ldrb	r3, [r7, #10]
 80016c4:	4619      	mov	r1, r3
 80016c6:	2017      	movs	r0, #23
 80016c8:	f7ff fcf2 	bl	80010b0 <icm20948_write>
	icm20948_write(B1_YA_OFFS_L, accel_offset[3]);
 80016cc:	7afb      	ldrb	r3, [r7, #11]
 80016ce:	4619      	mov	r1, r3
 80016d0:	2018      	movs	r0, #24
 80016d2:	f7ff fced 	bl	80010b0 <icm20948_write>
	icm20948_write(B1_ZA_OFFS_H, accel_offset[4]);
 80016d6:	7b3b      	ldrb	r3, [r7, #12]
 80016d8:	4619      	mov	r1, r3
 80016da:	201a      	movs	r0, #26
 80016dc:	f7ff fce8 	bl	80010b0 <icm20948_write>
	icm20948_write(B1_ZA_OFFS_L, accel_offset[5]);
 80016e0:	7b7b      	ldrb	r3, [r7, #13]
 80016e2:	4619      	mov	r1, r3
 80016e4:	201b      	movs	r0, #27
 80016e6:	f7ff fce3 	bl	80010b0 <icm20948_write>

	// for read function
	select_user_bank(userbank_0);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fca8 	bl	8001040 <select_user_bank>
}
 80016f0:	bf00      	nop
 80016f2:	3740      	adds	r7, #64	; 0x40
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200000bc 	.word	0x200000bc
 80016fc:	00000000 	.word	0x00000000

08001700 <complementary_filter>:



void complementary_filter(icm20948_t *icm20948, angle_t *angle)
{
 8001700:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
	read_gyro_dps(icm20948);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fddf 	bl	80012d0 <read_gyro_dps>
	read_accel_g(icm20948);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fe4c 	bl	80013b0 <read_accel_g>

	// angle from gyro
	// dt : 1ms
	angle->gyro_angle_x += icm20948->gyro_dps_x * (0.001);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001724:	a38e      	add	r3, pc, #568	; (adr r3, 8001960 <complementary_filter+0x260>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe ff11 	bl	8000550 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe fd55 	bl	80001e4 <__adddf3>
 800173a:	4603      	mov	r3, r0
 800173c:	460c      	mov	r4, r1
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	e9c2 3400 	strd	r3, r4, [r2]
	angle->gyro_angle_y += icm20948->gyro_dps_y * (0.001);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001750:	a383      	add	r3, pc, #524	; (adr r3, 8001960 <complementary_filter+0x260>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7fe fefb 	bl	8000550 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe fd3f 	bl	80001e4 <__adddf3>
 8001766:	4603      	mov	r3, r0
 8001768:	460c      	mov	r4, r1
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	angle->gyro_angle_z += icm20948->gyro_dps_z * (0.001);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800177c:	a378      	add	r3, pc, #480	; (adr r3, 8001960 <complementary_filter+0x260>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7fe fee5 	bl	8000550 <__aeabi_dmul>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7fe fd29 	bl	80001e4 <__adddf3>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	e9c2 3404 	strd	r3, r4, [r2, #16]

	// angle from accel
	angle->accel_angle_x = atan(icm20948->accel_g_y / sqrt( pow(icm20948->accel_g_x, 2) + pow(icm20948->accel_g_z, 2) ) ) * 57.3;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80017a8:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8001958 <complementary_filter+0x258>
 80017ac:	eeb0 0a47 	vmov.f32	s0, s14
 80017b0:	eef0 0a67 	vmov.f32	s1, s15
 80017b4:	f004 fb6a 	bl	8005e8c <pow>
 80017b8:	ec59 8b10 	vmov	r8, r9, d0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80017c2:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8001958 <complementary_filter+0x258>
 80017c6:	eeb0 0a47 	vmov.f32	s0, s14
 80017ca:	eef0 0a67 	vmov.f32	s1, s15
 80017ce:	f004 fb5d 	bl	8005e8c <pow>
 80017d2:	ec53 2b10 	vmov	r2, r3, d0
 80017d6:	4640      	mov	r0, r8
 80017d8:	4649      	mov	r1, r9
 80017da:	f7fe fd03 	bl	80001e4 <__adddf3>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	ec43 2b17 	vmov	d7, r2, r3
 80017e6:	eeb0 0a47 	vmov.f32	s0, s14
 80017ea:	eef0 0a67 	vmov.f32	s1, s15
 80017ee:	f004 fcbd 	bl	800616c <sqrt>
 80017f2:	ec53 2b10 	vmov	r2, r3, d0
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7fe ffd3 	bl	80007a4 <__aeabi_ddiv>
 80017fe:	4603      	mov	r3, r0
 8001800:	460c      	mov	r4, r1
 8001802:	ec44 3b17 	vmov	d7, r3, r4
 8001806:	eeb0 0a47 	vmov.f32	s0, s14
 800180a:	eef0 0a67 	vmov.f32	s1, s15
 800180e:	f004 f993 	bl	8005b38 <atan>
 8001812:	ec51 0b10 	vmov	r0, r1, d0
 8001816:	a354      	add	r3, pc, #336	; (adr r3, 8001968 <complementary_filter+0x268>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe fe98 	bl	8000550 <__aeabi_dmul>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	e9c2 3406 	strd	r3, r4, [r2, #24]
	angle->accel_angle_y = atan(icm20948->accel_g_x / sqrt( pow(icm20948->accel_g_y, 2) + pow(icm20948->accel_g_z, 2) ) ) * 57.3;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001836:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8001958 <complementary_filter+0x258>
 800183a:	eeb0 0a47 	vmov.f32	s0, s14
 800183e:	eef0 0a67 	vmov.f32	s1, s15
 8001842:	f004 fb23 	bl	8005e8c <pow>
 8001846:	ec59 8b10 	vmov	r8, r9, d0
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001850:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001958 <complementary_filter+0x258>
 8001854:	eeb0 0a47 	vmov.f32	s0, s14
 8001858:	eef0 0a67 	vmov.f32	s1, s15
 800185c:	f004 fb16 	bl	8005e8c <pow>
 8001860:	ec53 2b10 	vmov	r2, r3, d0
 8001864:	4640      	mov	r0, r8
 8001866:	4649      	mov	r1, r9
 8001868:	f7fe fcbc 	bl	80001e4 <__adddf3>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	ec43 2b17 	vmov	d7, r2, r3
 8001874:	eeb0 0a47 	vmov.f32	s0, s14
 8001878:	eef0 0a67 	vmov.f32	s1, s15
 800187c:	f004 fc76 	bl	800616c <sqrt>
 8001880:	ec53 2b10 	vmov	r2, r3, d0
 8001884:	4620      	mov	r0, r4
 8001886:	4629      	mov	r1, r5
 8001888:	f7fe ff8c 	bl	80007a4 <__aeabi_ddiv>
 800188c:	4603      	mov	r3, r0
 800188e:	460c      	mov	r4, r1
 8001890:	ec44 3b17 	vmov	d7, r3, r4
 8001894:	eeb0 0a47 	vmov.f32	s0, s14
 8001898:	eef0 0a67 	vmov.f32	s1, s15
 800189c:	f004 f94c 	bl	8005b38 <atan>
 80018a0:	ec51 0b10 	vmov	r0, r1, d0
 80018a4:	a330      	add	r3, pc, #192	; (adr r3, 8001968 <complementary_filter+0x268>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fe51 	bl	8000550 <__aeabi_dmul>
 80018ae:	4603      	mov	r3, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	e9c2 3408 	strd	r3, r4, [r2, #32]
	angle->accel_angle_z = 0;
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	f04f 0400 	mov.w	r4, #0
 80018c2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	// angle from complementary filter
	angle->angle_x = ALPHA * angle->gyro_angle_x + (1 - ALPHA) * angle->accel_angle_x;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018cc:	a328      	add	r3, pc, #160	; (adr r3, 8001970 <complementary_filter+0x270>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fe3d 	bl	8000550 <__aeabi_dmul>
 80018d6:	4603      	mov	r3, r0
 80018d8:	460c      	mov	r4, r1
 80018da:	4625      	mov	r5, r4
 80018dc:	461c      	mov	r4, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018e4:	a324      	add	r3, pc, #144	; (adr r3, 8001978 <complementary_filter+0x278>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fe31 	bl	8000550 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4620      	mov	r0, r4
 80018f4:	4629      	mov	r1, r5
 80018f6:	f7fe fc75 	bl	80001e4 <__adddf3>
 80018fa:	4603      	mov	r3, r0
 80018fc:	460c      	mov	r4, r1
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	angle->angle_y = ALPHA * angle->gyro_angle_y + (1 - ALPHA) * angle->accel_angle_y;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800190a:	a319      	add	r3, pc, #100	; (adr r3, 8001970 <complementary_filter+0x270>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe fe1e 	bl	8000550 <__aeabi_dmul>
 8001914:	4603      	mov	r3, r0
 8001916:	460c      	mov	r4, r1
 8001918:	4625      	mov	r5, r4
 800191a:	461c      	mov	r4, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001922:	a315      	add	r3, pc, #84	; (adr r3, 8001978 <complementary_filter+0x278>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe12 	bl	8000550 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fc56 	bl	80001e4 <__adddf3>
 8001938:	4603      	mov	r3, r0
 800193a:	460c      	mov	r4, r1
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	angle->angle_z = angle->gyro_angle_z;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001958:	00000000 	.word	0x00000000
 800195c:	40000000 	.word	0x40000000
 8001960:	d2f1a9fc 	.word	0xd2f1a9fc
 8001964:	3f50624d 	.word	0x3f50624d
 8001968:	66666666 	.word	0x66666666
 800196c:	404ca666 	.word	0x404ca666
 8001970:	eb851eb8 	.word	0xeb851eb8
 8001974:	3feeb851 	.word	0x3feeb851
 8001978:	47ae1480 	.word	0x47ae1480
 800197c:	3fa47ae1 	.word	0x3fa47ae1

08001980 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// timer interrupt 1kHz
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if (htim == &htim11)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d108      	bne.n	80019a2 <HAL_TIM_PeriodElapsedCallback+0x22>
  {
	  //run_dshot600(&my_motors, my_value);
	  //__HAL_TIM_SET_COUNTER(&htim10, 0);
	  complementary_filter(&my_icm20948, &my_angle);
 8001990:	4907      	ldr	r1, [pc, #28]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001992:	4808      	ldr	r0, [pc, #32]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001994:	f7ff feb4 	bl	8001700 <complementary_filter>
	  period_us = __HAL_TIM_GET_COUNTER(&htim11);
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80019a0:	6013      	str	r3, [r2, #0]


  }
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200002f8 	.word	0x200002f8
 80019b0:	20000108 	.word	0x20000108
 80019b4:	200000c8 	.word	0x200000c8
 80019b8:	20000150 	.word	0x20000150

080019bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == IBUS_UART_INSTANCE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_UART_RxCpltCallback+0x20>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d102      	bne.n	80019d4 <HAL_UART_RxCpltCallback+0x18>
	{
		ibus_read_channel(my_channel);
 80019ce:	4804      	ldr	r0, [pc, #16]	; (80019e0 <HAL_UART_RxCpltCallback+0x24>)
 80019d0:	f7ff fa34 	bl	8000e3c <ibus_read_channel>
	}
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40011000 	.word	0x40011000
 80019e0:	20000154 	.word	0x20000154

080019e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e8:	f000 fd46 	bl	8002478 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ec:	f000 f832 	bl	8001a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f0:	f7ff faa6 	bl	8000f40 <MX_GPIO_Init>
  MX_DMA_Init();
 80019f4:	f7ff f9dc 	bl	8000db0 <MX_DMA_Init>
  MX_SPI1_Init();
 80019f8:	f000 f898 	bl	8001b2c <MX_SPI1_Init>
  MX_TIM2_Init();
 80019fc:	f000 f9b8 	bl	8001d70 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001a00:	f000 fa18 	bl	8001e34 <MX_TIM5_Init>
  MX_TIM11_Init();
 8001a04:	f000 fa9e 	bl	8001f44 <MX_TIM11_Init>
  MX_USART1_UART_Init();
 8001a08:	f000 fc92 	bl	8002330 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8001a0c:	f000 fa76 	bl	8001efc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */


  // send dshot 1Khz
  HAL_TIM_Base_Start_IT(&htim11);
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <main+0x60>)
 8001a12:	f002 fd38 	bl	8004486 <HAL_TIM_Base_Start_IT>

  // init rc controller
  ibus_init();
 8001a16:	f7ff fa03 	bl	8000e20 <ibus_init>

  // check sensor id
  id_icm20948 = whoami_icm20948();
 8001a1a:	f7ff fbbd 	bl	8001198 <whoami_icm20948>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <main+0x64>)
 8001a24:	701a      	strb	r2, [r3, #0]
  id_ak09916 = whoami_ak09916();
 8001a26:	f7ff fbc7 	bl	80011b8 <whoami_ak09916>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <main+0x68>)
 8001a30:	701a      	strb	r2, [r3, #0]

  // init sensor
  icm20948_init();
 8001a32:	f7ff fbcd 	bl	80011d0 <icm20948_init>
  ak09916_init();
 8001a36:	f7ff fbf7 	bl	8001228 <ak09916_init>

  // calibrate sensor
  calibrate_icm20948(&my_icm20948, 100);
 8001a3a:	2164      	movs	r1, #100	; 0x64
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <main+0x6c>)
 8001a3e:	f7ff fcff 	bl	8001440 <calibrate_icm20948>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <main+0x5e>
 8001a44:	200002f8 	.word	0x200002f8
 8001a48:	200000c2 	.word	0x200000c2
 8001a4c:	200000c3 	.word	0x200000c3
 8001a50:	200000c8 	.word	0x200000c8

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b094      	sub	sp, #80	; 0x50
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	f107 0320 	add.w	r3, r7, #32
 8001a5e:	2230      	movs	r2, #48	; 0x30
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 f860 	bl	8005b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <SystemClock_Config+0xc8>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <SystemClock_Config+0xc8>)
 8001a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a86:	6413      	str	r3, [r2, #64]	; 0x40
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <SystemClock_Config+0xc8>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <SystemClock_Config+0xcc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a20      	ldr	r2, [pc, #128]	; (8001b20 <SystemClock_Config+0xcc>)
 8001a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <SystemClock_Config+0xcc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab8:	2310      	movs	r3, #16
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abc:	2302      	movs	r3, #2
 8001abe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ac8:	2364      	movs	r3, #100	; 0x64
 8001aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001acc:	2302      	movs	r3, #2
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 fb19 	bl	8003110 <HAL_RCC_OscConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ae4:	f000 f81e 	bl	8001b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae8:	230f      	movs	r3, #15
 8001aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aec:	2302      	movs	r3, #2
 8001aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	2103      	movs	r1, #3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 fd73 	bl	80035f0 <HAL_RCC_ClockConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b10:	f000 f808 	bl	8001b24 <Error_Handler>
  }
}
 8001b14:	bf00      	nop
 8001b16:	3750      	adds	r7, #80	; 0x50
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40007000 	.word	0x40007000

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <Error_Handler+0x6>

08001b2c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b32:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <MX_SPI1_Init+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b60:	2210      	movs	r2, #16
 8001b62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b78:	220a      	movs	r2, #10
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_SPI1_Init+0x64>)
 8001b7e:	f001 ff03 	bl	8003988 <HAL_SPI_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b88:	f7ff ffcc 	bl	8001b24 <Error_Handler>
  }

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000160 	.word	0x20000160
 8001b94:	40013000 	.word	0x40013000

08001b98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a19      	ldr	r2, [pc, #100]	; (8001c1c <HAL_SPI_MspInit+0x84>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d12b      	bne.n	8001c12 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_SPI_MspInit+0x88>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_SPI_MspInit+0x88>)
 8001bc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_SPI_MspInit+0x88>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_SPI_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_SPI_MspInit+0x88>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_SPI_MspInit+0x88>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ICM20948_SCK_Pin|SPI_ICM20948_MISO_Pin|SPI_ICM20948_MOSI_Pin;
 8001bf2:	23e0      	movs	r3, #224	; 0xe0
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c02:	2305      	movs	r3, #5
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <HAL_SPI_MspInit+0x8c>)
 8001c0e:	f001 f8e3 	bl	8002dd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40013000 	.word	0x40013000
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000

08001c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800

08001c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <NMI_Handler+0x4>

08001c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc4:	f000 fc2a 	bl	800251c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <DMA1_Stream1_IRQHandler+0x10>)
 8001cd2:	f000 fe47 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000398 	.word	0x20000398

08001ce0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <DMA1_Stream3_IRQHandler+0x10>)
 8001ce6:	f000 fe3d 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000258 	.word	0x20000258

08001cf4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <DMA1_Stream4_IRQHandler+0x10>)
 8001cfa:	f000 fe33 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000338 	.word	0x20000338

08001d08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <DMA1_Stream5_IRQHandler+0x10>)
 8001d0e:	f000 fe29 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200001b8 	.word	0x200001b8

08001d1c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001d22:	f002 fbff 	bl	8004524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200002f8 	.word	0x200002f8

08001d30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <USART1_IRQHandler+0x10>)
 8001d36:	f003 f91b 	bl	8004f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000438 	.word	0x20000438

08001d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <SystemInit+0x28>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <SystemInit+0x28>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SystemInit+0x28>)
 8001d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	615a      	str	r2, [r3, #20]
 8001d90:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001d92:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <MX_TIM2_Init+0xc0>)
 8001d94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <MX_TIM2_Init+0xc0>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da0:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <MX_TIM2_Init+0xc0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <MX_TIM2_Init+0xc0>)
 8001da8:	2214      	movs	r2, #20
 8001daa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <MX_TIM2_Init+0xc0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db2:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <MX_TIM2_Init+0xc0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001db8:	481d      	ldr	r0, [pc, #116]	; (8001e30 <MX_TIM2_Init+0xc0>)
 8001dba:	f002 fb88 	bl	80044ce <HAL_TIM_PWM_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001dc4:	f7ff feae 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4816      	ldr	r0, [pc, #88]	; (8001e30 <MX_TIM2_Init+0xc0>)
 8001dd8:	f002 ffa6 	bl	8004d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001de2:	f7ff fe9f 	bl	8001b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de6:	2360      	movs	r3, #96	; 0x60
 8001de8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2200      	movs	r2, #0
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480c      	ldr	r0, [pc, #48]	; (8001e30 <MX_TIM2_Init+0xc0>)
 8001dfe:	f002 fc99 	bl	8004734 <HAL_TIM_PWM_ConfigChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001e08:	f7ff fe8c 	bl	8001b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2208      	movs	r2, #8
 8001e10:	4619      	mov	r1, r3
 8001e12:	4807      	ldr	r0, [pc, #28]	; (8001e30 <MX_TIM2_Init+0xc0>)
 8001e14:	f002 fc8e 	bl	8004734 <HAL_TIM_PWM_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e1e:	f7ff fe81 	bl	8001b24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001e22:	4803      	ldr	r0, [pc, #12]	; (8001e30 <MX_TIM2_Init+0xc0>)
 8001e24:	f000 fa26 	bl	8002274 <HAL_TIM_MspPostInit>

}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	; 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200003f8 	.word	0x200003f8

08001e34 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]
 8001e52:	615a      	str	r2, [r3, #20]
 8001e54:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8001e56:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <MX_TIM5_Init+0xc0>)
 8001e58:	4a27      	ldr	r2, [pc, #156]	; (8001ef8 <MX_TIM5_Init+0xc4>)
 8001e5a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8-1;
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <MX_TIM5_Init+0xc0>)
 8001e5e:	2207      	movs	r2, #7
 8001e60:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <MX_TIM5_Init+0xc0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20;
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <MX_TIM5_Init+0xc0>)
 8001e6a:	2214      	movs	r2, #20
 8001e6c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <MX_TIM5_Init+0xc0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <MX_TIM5_Init+0xc0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e7a:	481e      	ldr	r0, [pc, #120]	; (8001ef4 <MX_TIM5_Init+0xc0>)
 8001e7c:	f002 fb27 	bl	80044ce <HAL_TIM_PWM_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001e86:	f7ff fe4d 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e92:	f107 0320 	add.w	r3, r7, #32
 8001e96:	4619      	mov	r1, r3
 8001e98:	4816      	ldr	r0, [pc, #88]	; (8001ef4 <MX_TIM5_Init+0xc0>)
 8001e9a:	f002 ff45 	bl	8004d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001ea4:	f7ff fe3e 	bl	8001b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea8:	2360      	movs	r3, #96	; 0x60
 8001eaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2204      	movs	r2, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <MX_TIM5_Init+0xc0>)
 8001ec0:	f002 fc38 	bl	8004734 <HAL_TIM_PWM_ConfigChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001eca:	f7ff fe2b 	bl	8001b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	220c      	movs	r2, #12
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <MX_TIM5_Init+0xc0>)
 8001ed6:	f002 fc2d 	bl	8004734 <HAL_TIM_PWM_ConfigChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001ee0:	f7ff fe20 	bl	8001b24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <MX_TIM5_Init+0xc0>)
 8001ee6:	f000 f9c5 	bl	8002274 <HAL_TIM_MspPostInit>

}
 8001eea:	bf00      	nop
 8001eec:	3728      	adds	r7, #40	; 0x28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200002b8 	.word	0x200002b8
 8001ef8:	40000c00 	.word	0x40000c00

08001efc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_TIM10_Init+0x40>)
 8001f02:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <MX_TIM10_Init+0x44>)
 8001f04:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <MX_TIM10_Init+0x40>)
 8001f08:	2263      	movs	r2, #99	; 0x63
 8001f0a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <MX_TIM10_Init+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <MX_TIM10_Init+0x40>)
 8001f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f18:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <MX_TIM10_Init+0x40>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_TIM10_Init+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_TIM10_Init+0x40>)
 8001f28:	f002 fa82 	bl	8004430 <HAL_TIM_Base_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001f32:	f7ff fdf7 	bl	8001b24 <Error_Handler>
  }

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000218 	.word	0x20000218
 8001f40:	40014400 	.word	0x40014400

08001f44 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_TIM11_Init+0x40>)
 8001f4a:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <MX_TIM11_Init+0x44>)
 8001f4c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <MX_TIM11_Init+0x40>)
 8001f50:	2263      	movs	r2, #99	; 0x63
 8001f52:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <MX_TIM11_Init+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <MX_TIM11_Init+0x40>)
 8001f5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f60:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MX_TIM11_Init+0x40>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_TIM11_Init+0x40>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_TIM11_Init+0x40>)
 8001f70:	f002 fa5e 	bl	8004430 <HAL_TIM_Base_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001f7a:	f7ff fdd3 	bl	8001b24 <Error_Handler>
  }

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002f8 	.word	0x200002f8
 8001f88:	40014800 	.word	0x40014800

08001f8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	f040 8087 	bne.w	80020ae <HAL_TIM_PWM_MspInit+0x122>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b8a      	ldr	r3, [pc, #552]	; (80021d0 <HAL_TIM_PWM_MspInit+0x244>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a89      	ldr	r2, [pc, #548]	; (80021d0 <HAL_TIM_PWM_MspInit+0x244>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb0:	4b87      	ldr	r3, [pc, #540]	; (80021d0 <HAL_TIM_PWM_MspInit+0x244>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001fbc:	4b85      	ldr	r3, [pc, #532]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8001fbe:	4a86      	ldr	r2, [pc, #536]	; (80021d8 <HAL_TIM_PWM_MspInit+0x24c>)
 8001fc0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001fc2:	4b84      	ldr	r3, [pc, #528]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8001fc4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001fc8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fca:	4b82      	ldr	r3, [pc, #520]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8001fcc:	2240      	movs	r2, #64	; 0x40
 8001fce:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd0:	4b80      	ldr	r3, [pc, #512]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001fd6:	4b7f      	ldr	r3, [pc, #508]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8001fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fdc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fde:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8001fe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fe4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fe6:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8001fe8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fec:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001fee:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001ff4:	4b77      	ldr	r3, [pc, #476]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ffa:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002000:	4b74      	ldr	r3, [pc, #464]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002006:	4b73      	ldr	r3, [pc, #460]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8002008:	2200      	movs	r2, #0
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800200c:	4b71      	ldr	r3, [pc, #452]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 800200e:	2200      	movs	r2, #0
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002012:	4870      	ldr	r0, [pc, #448]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8002014:	f000 fbd6 	bl	80027c4 <HAL_DMA_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_TIM_PWM_MspInit+0x96>
    {
      Error_Handler();
 800201e:	f7ff fd81 	bl	8001b24 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a6b      	ldr	r2, [pc, #428]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
 8002028:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <HAL_TIM_PWM_MspInit+0x248>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 800202e:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 8002030:	4a6b      	ldr	r2, [pc, #428]	; (80021e0 <HAL_TIM_PWM_MspInit+0x254>)
 8002032:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8002034:	4b69      	ldr	r3, [pc, #420]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 8002036:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800203a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800203c:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 800203e:	2240      	movs	r2, #64	; 0x40
 8002040:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002042:	4b66      	ldr	r3, [pc, #408]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8002048:	4b64      	ldr	r3, [pc, #400]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 800204a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002050:	4b62      	ldr	r3, [pc, #392]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 8002052:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002056:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002058:	4b60      	ldr	r3, [pc, #384]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 800205a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800205e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 8002066:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 8002068:	2200      	movs	r2, #0
 800206a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800206c:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 800206e:	2204      	movs	r2, #4
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002072:	4b5a      	ldr	r3, [pc, #360]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 8002074:	2200      	movs	r2, #0
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8002078:	4b58      	ldr	r3, [pc, #352]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 800207a:	2200      	movs	r2, #0
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800207e:	4b57      	ldr	r3, [pc, #348]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8002084:	4855      	ldr	r0, [pc, #340]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 8002086:	f000 fb9d 	bl	80027c4 <HAL_DMA_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_TIM_PWM_MspInit+0x108>
    {
      Error_Handler();
 8002090:	f7ff fd48 	bl	8001b24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a51      	ldr	r2, [pc, #324]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
 800209a:	4a50      	ldr	r2, [pc, #320]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 80020a4:	621a      	str	r2, [r3, #32]
 80020a6:	4a4d      	ldr	r2, [pc, #308]	; (80021dc <HAL_TIM_PWM_MspInit+0x250>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80020ac:	e08b      	b.n	80021c6 <HAL_TIM_PWM_MspInit+0x23a>
  else if(tim_pwmHandle->Instance==TIM5)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a4c      	ldr	r2, [pc, #304]	; (80021e4 <HAL_TIM_PWM_MspInit+0x258>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	f040 8086 	bne.w	80021c6 <HAL_TIM_PWM_MspInit+0x23a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	4b44      	ldr	r3, [pc, #272]	; (80021d0 <HAL_TIM_PWM_MspInit+0x244>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a43      	ldr	r2, [pc, #268]	; (80021d0 <HAL_TIM_PWM_MspInit+0x244>)
 80020c4:	f043 0308 	orr.w	r3, r3, #8
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_TIM_PWM_MspInit+0x244>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80020d6:	4b44      	ldr	r3, [pc, #272]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80020d8:	4a44      	ldr	r2, [pc, #272]	; (80021ec <HAL_TIM_PWM_MspInit+0x260>)
 80020da:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 80020dc:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80020de:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80020e2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e4:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80020e6:	2240      	movs	r2, #64	; 0x40
 80020e8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ea:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80020f0:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80020f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020f8:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 80020fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020fe:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002100:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002106:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8002108:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800210e:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002114:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002116:	2204      	movs	r2, #4
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800211a:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 800211c:	2200      	movs	r2, #0
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002120:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002122:	2200      	movs	r2, #0
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 800212c:	482e      	ldr	r0, [pc, #184]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 800212e:	f000 fb49 	bl	80027c4 <HAL_DMA_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_TIM_PWM_MspInit+0x1b0>
      Error_Handler();
 8002138:	f7ff fcf4 	bl	8001b24 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002140:	629a      	str	r2, [r3, #40]	; 0x28
 8002142:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <HAL_TIM_PWM_MspInit+0x25c>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 8002148:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 800214a:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <HAL_TIM_PWM_MspInit+0x268>)
 800214c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 8002150:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002154:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 8002158:	2240      	movs	r2, #64	; 0x40
 800215a:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800215c:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 8002164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002168:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 800216c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002170:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002172:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 8002174:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002178:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 800217c:	2200      	movs	r2, #0
 800217e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 8002182:	2200      	movs	r2, #0
 8002184:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 8002188:	2204      	movs	r2, #4
 800218a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 800218e:	2200      	movs	r2, #0
 8002190:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 8002194:	2200      	movs	r2, #0
 8002196:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 800219a:	2200      	movs	r2, #0
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 800219e:	4814      	ldr	r0, [pc, #80]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 80021a0:	f000 fb10 	bl	80027c4 <HAL_DMA_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_TIM_PWM_MspInit+0x222>
      Error_Handler();
 80021aa:	f7ff fcbb 	bl	8001b24 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 80021be:	639a      	str	r2, [r3, #56]	; 0x38
 80021c0:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <HAL_TIM_PWM_MspInit+0x264>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	200001b8 	.word	0x200001b8
 80021d8:	40026088 	.word	0x40026088
 80021dc:	20000398 	.word	0x20000398
 80021e0:	40026028 	.word	0x40026028
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	20000338 	.word	0x20000338
 80021ec:	40026070 	.word	0x40026070
 80021f0:	20000258 	.word	0x20000258
 80021f4:	40026058 	.word	0x40026058

080021f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a18      	ldr	r2, [pc, #96]	; (8002268 <HAL_TIM_Base_MspInit+0x70>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10e      	bne.n	8002228 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_TIM_Base_MspInit+0x74>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <HAL_TIM_Base_MspInit+0x74>)
 8002214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002218:	6453      	str	r3, [r2, #68]	; 0x44
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_TIM_Base_MspInit+0x74>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002226:	e01a      	b.n	800225e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM11)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a10      	ldr	r2, [pc, #64]	; (8002270 <HAL_TIM_Base_MspInit+0x78>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d115      	bne.n	800225e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_TIM_Base_MspInit+0x74>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <HAL_TIM_Base_MspInit+0x74>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002240:	6453      	str	r3, [r2, #68]	; 0x44
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_TIM_Base_MspInit+0x74>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	201a      	movs	r0, #26
 8002254:	f000 fa7f 	bl	8002756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002258:	201a      	movs	r0, #26
 800225a:	f000 fa98 	bl	800278e <HAL_NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40014400 	.word	0x40014400
 800226c:	40023800 	.word	0x40023800
 8002270:	40014800 	.word	0x40014800

08002274 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002294:	d11e      	bne.n	80022d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_TIM_MspPostInit+0xb0>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a21      	ldr	r2, [pc, #132]	; (8002324 <HAL_TIM_MspPostInit+0xb0>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <HAL_TIM_MspPostInit+0xb0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_4_Pin|MOTOR_1_Pin;
 80022b2:	2305      	movs	r3, #5
 80022b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022c2:	2301      	movs	r3, #1
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	4816      	ldr	r0, [pc, #88]	; (8002328 <HAL_TIM_MspPostInit+0xb4>)
 80022ce:	f000 fd83 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80022d2:	e022      	b.n	800231a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <HAL_TIM_MspPostInit+0xb8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d11d      	bne.n	800231a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_TIM_MspPostInit+0xb0>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <HAL_TIM_MspPostInit+0xb0>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_TIM_MspPostInit+0xb0>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_2_Pin;
 80022fa:	230a      	movs	r3, #10
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800230a:	2302      	movs	r3, #2
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	4804      	ldr	r0, [pc, #16]	; (8002328 <HAL_TIM_MspPostInit+0xb4>)
 8002316:	f000 fd5f 	bl	8002dd8 <HAL_GPIO_Init>
}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40020000 	.word	0x40020000
 800232c:	40000c00 	.word	0x40000c00

08002330 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <MX_USART1_UART_Init+0x50>)
 8002338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <MX_USART1_UART_Init+0x4c>)
 800233c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <MX_USART1_UART_Init+0x4c>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002356:	2204      	movs	r2, #4
 8002358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <MX_USART1_UART_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002362:	2200      	movs	r2, #0
 8002364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002366:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_USART1_UART_Init+0x4c>)
 8002368:	f002 fd60 	bl	8004e2c <HAL_UART_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002372:	f7ff fbd7 	bl	8001b24 <Error_Handler>
  }

}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000438 	.word	0x20000438
 8002380:	40011000 	.word	0x40011000

08002384 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <HAL_UART_MspInit+0x94>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d134      	bne.n	8002410 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <HAL_UART_MspInit+0x98>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a1b      	ldr	r2, [pc, #108]	; (800241c <HAL_UART_MspInit+0x98>)
 80023b0:	f043 0310 	orr.w	r3, r3, #16
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_UART_MspInit+0x98>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_UART_MspInit+0x98>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a14      	ldr	r2, [pc, #80]	; (800241c <HAL_UART_MspInit+0x98>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_UART_MspInit+0x98>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ec:	2303      	movs	r3, #3
 80023ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f0:	2307      	movs	r3, #7
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4619      	mov	r1, r3
 80023fa:	4809      	ldr	r0, [pc, #36]	; (8002420 <HAL_UART_MspInit+0x9c>)
 80023fc:	f000 fcec 	bl	8002dd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	2025      	movs	r0, #37	; 0x25
 8002406:	f000 f9a6 	bl	8002756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800240a:	2025      	movs	r0, #37	; 0x25
 800240c:	f000 f9bf 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002410:	bf00      	nop
 8002412:	3728      	adds	r7, #40	; 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40011000 	.word	0x40011000
 800241c:	40023800 	.word	0x40023800
 8002420:	40020000 	.word	0x40020000

08002424 <Reset_Handler>:
 8002424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800245c <LoopFillZerobss+0x14>
 8002428:	2100      	movs	r1, #0
 800242a:	e003      	b.n	8002434 <LoopCopyDataInit>

0800242c <CopyDataInit>:
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <LoopFillZerobss+0x18>)
 800242e:	585b      	ldr	r3, [r3, r1]
 8002430:	5043      	str	r3, [r0, r1]
 8002432:	3104      	adds	r1, #4

08002434 <LoopCopyDataInit>:
 8002434:	480b      	ldr	r0, [pc, #44]	; (8002464 <LoopFillZerobss+0x1c>)
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <LoopFillZerobss+0x20>)
 8002438:	1842      	adds	r2, r0, r1
 800243a:	429a      	cmp	r2, r3
 800243c:	d3f6      	bcc.n	800242c <CopyDataInit>
 800243e:	4a0b      	ldr	r2, [pc, #44]	; (800246c <LoopFillZerobss+0x24>)
 8002440:	e002      	b.n	8002448 <LoopFillZerobss>

08002442 <FillZerobss>:
 8002442:	2300      	movs	r3, #0
 8002444:	f842 3b04 	str.w	r3, [r2], #4

08002448 <LoopFillZerobss>:
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <LoopFillZerobss+0x28>)
 800244a:	429a      	cmp	r2, r3
 800244c:	d3f9      	bcc.n	8002442 <FillZerobss>
 800244e:	f7ff fc79 	bl	8001d44 <SystemInit>
 8002452:	f003 fb45 	bl	8005ae0 <__libc_init_array>
 8002456:	f7ff fac5 	bl	80019e4 <main>
 800245a:	4770      	bx	lr
 800245c:	20020000 	.word	0x20020000
 8002460:	080070b0 	.word	0x080070b0
 8002464:	20000000 	.word	0x20000000
 8002468:	20000074 	.word	0x20000074
 800246c:	20000078 	.word	0x20000078
 8002470:	2000047c 	.word	0x2000047c

08002474 <ADC_IRQHandler>:
 8002474:	e7fe      	b.n	8002474 <ADC_IRQHandler>
	...

08002478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <HAL_Init+0x40>)
 8002482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_Init+0x40>)
 800248e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <HAL_Init+0x40>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a0:	2003      	movs	r0, #3
 80024a2:	f000 f94d 	bl	8002740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f000 f808 	bl	80024bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ac:	f7ff fbbc 	bl	8001c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00

080024bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_InitTick+0x54>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x58>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f965 	bl	80027aa <HAL_SYSTICK_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00e      	b.n	8002508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d80a      	bhi.n	8002506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f000 f92d 	bl	8002756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024fc:	4a06      	ldr	r2, [pc, #24]	; (8002518 <HAL_InitTick+0x5c>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000000 	.word	0x20000000
 8002514:	20000008 	.word	0x20000008
 8002518:	20000004 	.word	0x20000004

0800251c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_IncTick+0x20>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x24>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4413      	add	r3, r2
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_IncTick+0x24>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000008 	.word	0x20000008
 8002540:	20000478 	.word	0x20000478

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_GetTick+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000478 	.word	0x20000478

0800255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff ffee 	bl	8002544 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d005      	beq.n	8002582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_Delay+0x40>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002582:	bf00      	nop
 8002584:	f7ff ffde 	bl	8002544 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d8f7      	bhi.n	8002584 <HAL_Delay+0x28>
  {
  }
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000008 	.word	0x20000008

080025a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d2:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	60d3      	str	r3, [r2, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <__NVIC_GetPriorityGrouping+0x18>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 0307 	and.w	r3, r3, #7
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	2b00      	cmp	r3, #0
 8002614:	db0b      	blt.n	800262e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4907      	ldr	r1, [pc, #28]	; (800263c <__NVIC_EnableIRQ+0x38>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2001      	movs	r0, #1
 8002626:	fa00 f202 	lsl.w	r2, r0, r2
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000e100 	.word	0xe000e100

08002640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db0a      	blt.n	800266a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	490c      	ldr	r1, [pc, #48]	; (800268c <__NVIC_SetPriority+0x4c>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002668:	e00a      	b.n	8002680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	; (8002690 <__NVIC_SetPriority+0x50>)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3b04      	subs	r3, #4
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	440b      	add	r3, r1
 800267e:	761a      	strb	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f1c3 0307 	rsb	r3, r3, #7
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	bf28      	it	cs
 80026b2:	2304      	movcs	r3, #4
 80026b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d902      	bls.n	80026c4 <NVIC_EncodePriority+0x30>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3b03      	subs	r3, #3
 80026c2:	e000      	b.n	80026c6 <NVIC_EncodePriority+0x32>
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	401a      	ands	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026dc:	f04f 31ff 	mov.w	r1, #4294967295
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	4313      	orrs	r3, r2
         );
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	; 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800270c:	d301      	bcc.n	8002712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270e:	2301      	movs	r3, #1
 8002710:	e00f      	b.n	8002732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002712:	4a0a      	ldr	r2, [pc, #40]	; (800273c <SysTick_Config+0x40>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271a:	210f      	movs	r1, #15
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	f7ff ff8e 	bl	8002640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <SysTick_Config+0x40>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272a:	4b04      	ldr	r3, [pc, #16]	; (800273c <SysTick_Config+0x40>)
 800272c:	2207      	movs	r2, #7
 800272e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	e000e010 	.word	0xe000e010

08002740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ff29 	bl	80025a0 <__NVIC_SetPriorityGrouping>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002768:	f7ff ff3e 	bl	80025e8 <__NVIC_GetPriorityGrouping>
 800276c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	6978      	ldr	r0, [r7, #20]
 8002774:	f7ff ff8e 	bl	8002694 <NVIC_EncodePriority>
 8002778:	4602      	mov	r2, r0
 800277a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff5d 	bl	8002640 <__NVIC_SetPriority>
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff31 	bl	8002604 <__NVIC_EnableIRQ>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff ffa2 	bl	80026fc <SysTick_Config>
 80027b8:	4603      	mov	r3, r0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027d0:	f7ff feb8 	bl	8002544 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e099      	b.n	8002914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002800:	e00f      	b.n	8002822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002802:	f7ff fe9f 	bl	8002544 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b05      	cmp	r3, #5
 800280e:	d908      	bls.n	8002822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2203      	movs	r2, #3
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e078      	b.n	8002914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e8      	bne.n	8002802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4b38      	ldr	r3, [pc, #224]	; (800291c <HAL_DMA_Init+0x158>)
 800283c:	4013      	ands	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	2b04      	cmp	r3, #4
 800287a:	d107      	bne.n	800288c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	4313      	orrs	r3, r2
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f023 0307 	bic.w	r3, r3, #7
 80028a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d117      	bne.n	80028e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00e      	beq.n	80028e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fa0b 	bl	8002ce4 <DMA_CheckFifoParam>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2240      	movs	r2, #64	; 0x40
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028e2:	2301      	movs	r3, #1
 80028e4:	e016      	b.n	8002914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9c2 	bl	8002c78 <DMA_CalcBaseAndBitshift>
 80028f4:	4603      	mov	r3, r0
 80028f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	223f      	movs	r2, #63	; 0x3f
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	f010803f 	.word	0xf010803f

08002920 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d004      	beq.n	800293e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00c      	b.n	8002958 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2205      	movs	r2, #5
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002970:	4b92      	ldr	r3, [pc, #584]	; (8002bbc <HAL_DMA_IRQHandler+0x258>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a92      	ldr	r2, [pc, #584]	; (8002bc0 <HAL_DMA_IRQHandler+0x25c>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	2208      	movs	r2, #8
 8002990:	409a      	lsls	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	2208      	movs	r2, #8
 80029be:	409a      	lsls	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2201      	movs	r2, #1
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f043 0202 	orr.w	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d012      	beq.n	8002a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	2204      	movs	r2, #4
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f043 0204 	orr.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2210      	movs	r2, #16
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d043      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d03c      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	2210      	movs	r2, #16
 8002a60:	409a      	lsls	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d018      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d024      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
 8002a92:	e01f      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01b      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
 8002aa4:	e016      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0208 	bic.w	r2, r2, #8
 8002ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	2220      	movs	r2, #32
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 808e 	beq.w	8002c02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8086 	beq.w	8002c02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2220      	movs	r2, #32
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b05      	cmp	r3, #5
 8002b0c:	d136      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0216 	bic.w	r2, r2, #22
 8002b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <HAL_DMA_IRQHandler+0x1da>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0208 	bic.w	r2, r2, #8
 8002b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	223f      	movs	r2, #63	; 0x3f
 8002b54:	409a      	lsls	r2, r3
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d07d      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
        }
        return;
 8002b7a:	e078      	b.n	8002c6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01c      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d108      	bne.n	8002baa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d030      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
 8002ba8:	e02b      	b.n	8002c02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d027      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
 8002bba:	e022      	b.n	8002c02 <HAL_DMA_IRQHandler+0x29e>
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0210 	bic.w	r2, r2, #16
 8002be0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d032      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d022      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2205      	movs	r2, #5
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3301      	adds	r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d307      	bcc.n	8002c4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f2      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x2ca>
 8002c48:	e000      	b.n	8002c4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
 8002c6c:	e000      	b.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c6e:	bf00      	nop
    }
  }
}
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop

08002c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3b10      	subs	r3, #16
 8002c88:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <DMA_CalcBaseAndBitshift+0x64>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c92:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d909      	bls.n	8002cba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	1d1a      	adds	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8002cb8:	e007      	b.n	8002cca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	aaaaaaab 	.word	0xaaaaaaab
 8002ce0:	08007008 	.word	0x08007008

08002ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d11f      	bne.n	8002d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d855      	bhi.n	8002db0 <DMA_CheckFifoParam+0xcc>
 8002d04:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <DMA_CheckFifoParam+0x28>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d1d 	.word	0x08002d1d
 8002d10:	08002d2f 	.word	0x08002d2f
 8002d14:	08002d1d 	.word	0x08002d1d
 8002d18:	08002db1 	.word	0x08002db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d045      	beq.n	8002db4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2c:	e042      	b.n	8002db4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d36:	d13f      	bne.n	8002db8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3c:	e03c      	b.n	8002db8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d46:	d121      	bne.n	8002d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d836      	bhi.n	8002dbc <DMA_CheckFifoParam+0xd8>
 8002d4e:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <DMA_CheckFifoParam+0x70>)
 8002d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d6b 	.word	0x08002d6b
 8002d5c:	08002d65 	.word	0x08002d65
 8002d60:	08002d7d 	.word	0x08002d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
      break;
 8002d68:	e02f      	b.n	8002dca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d024      	beq.n	8002dc0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7a:	e021      	b.n	8002dc0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d84:	d11e      	bne.n	8002dc4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d8a:	e01b      	b.n	8002dc4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d902      	bls.n	8002d98 <DMA_CheckFifoParam+0xb4>
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d003      	beq.n	8002d9e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d96:	e018      	b.n	8002dca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9c:	e015      	b.n	8002dca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00e      	beq.n	8002dc8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
      break;
 8002dae:	e00b      	b.n	8002dc8 <DMA_CheckFifoParam+0xe4>
      break;
 8002db0:	bf00      	nop
 8002db2:	e00a      	b.n	8002dca <DMA_CheckFifoParam+0xe6>
      break;
 8002db4:	bf00      	nop
 8002db6:	e008      	b.n	8002dca <DMA_CheckFifoParam+0xe6>
      break;
 8002db8:	bf00      	nop
 8002dba:	e006      	b.n	8002dca <DMA_CheckFifoParam+0xe6>
      break;
 8002dbc:	bf00      	nop
 8002dbe:	e004      	b.n	8002dca <DMA_CheckFifoParam+0xe6>
      break;
 8002dc0:	bf00      	nop
 8002dc2:	e002      	b.n	8002dca <DMA_CheckFifoParam+0xe6>
      break;   
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <DMA_CheckFifoParam+0xe6>
      break;
 8002dc8:	bf00      	nop
    }
  } 
  
  return status; 
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	; 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	e159      	b.n	80030a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df4:	2201      	movs	r2, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	f040 8148 	bne.w	80030a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d00b      	beq.n	8002e32 <HAL_GPIO_Init+0x5a>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d007      	beq.n	8002e32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e26:	2b11      	cmp	r3, #17
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b12      	cmp	r3, #18
 8002e30:	d130      	bne.n	8002e94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e68:	2201      	movs	r2, #1
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 0201 	and.w	r2, r3, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0xfc>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b12      	cmp	r3, #18
 8002ed2:	d123      	bne.n	8002f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	08da      	lsrs	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3208      	adds	r2, #8
 8002edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	220f      	movs	r2, #15
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	08da      	lsrs	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3208      	adds	r2, #8
 8002f16:	69b9      	ldr	r1, [r7, #24]
 8002f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	2203      	movs	r2, #3
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0203 	and.w	r2, r3, #3
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a2 	beq.w	80030a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	4b56      	ldr	r3, [pc, #344]	; (80030bc <HAL_GPIO_Init+0x2e4>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4a55      	ldr	r2, [pc, #340]	; (80030bc <HAL_GPIO_Init+0x2e4>)
 8002f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6e:	4b53      	ldr	r3, [pc, #332]	; (80030bc <HAL_GPIO_Init+0x2e4>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f7a:	4a51      	ldr	r2, [pc, #324]	; (80030c0 <HAL_GPIO_Init+0x2e8>)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220f      	movs	r2, #15
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a48      	ldr	r2, [pc, #288]	; (80030c4 <HAL_GPIO_Init+0x2ec>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d019      	beq.n	8002fda <HAL_GPIO_Init+0x202>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a47      	ldr	r2, [pc, #284]	; (80030c8 <HAL_GPIO_Init+0x2f0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_GPIO_Init+0x1fe>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a46      	ldr	r2, [pc, #280]	; (80030cc <HAL_GPIO_Init+0x2f4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_GPIO_Init+0x1fa>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a45      	ldr	r2, [pc, #276]	; (80030d0 <HAL_GPIO_Init+0x2f8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <HAL_GPIO_Init+0x1f6>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a44      	ldr	r2, [pc, #272]	; (80030d4 <HAL_GPIO_Init+0x2fc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_GPIO_Init+0x1f2>
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	e008      	b.n	8002fdc <HAL_GPIO_Init+0x204>
 8002fca:	2307      	movs	r3, #7
 8002fcc:	e006      	b.n	8002fdc <HAL_GPIO_Init+0x204>
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e004      	b.n	8002fdc <HAL_GPIO_Init+0x204>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e002      	b.n	8002fdc <HAL_GPIO_Init+0x204>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_GPIO_Init+0x204>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	f002 0203 	and.w	r2, r2, #3
 8002fe2:	0092      	lsls	r2, r2, #2
 8002fe4:	4093      	lsls	r3, r2
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fec:	4934      	ldr	r1, [pc, #208]	; (80030c0 <HAL_GPIO_Init+0x2e8>)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800301e:	4a2e      	ldr	r2, [pc, #184]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003024:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003048:	4a23      	ldr	r2, [pc, #140]	; (80030d8 <HAL_GPIO_Init+0x300>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800304e:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003072:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_GPIO_Init+0x300>)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <HAL_GPIO_Init+0x300>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800309c:	4a0e      	ldr	r2, [pc, #56]	; (80030d8 <HAL_GPIO_Init+0x300>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3301      	adds	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2b0f      	cmp	r3, #15
 80030ac:	f67f aea2 	bls.w	8002df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030b0:	bf00      	nop
 80030b2:	3724      	adds	r7, #36	; 0x24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40013800 	.word	0x40013800
 80030c4:	40020000 	.word	0x40020000
 80030c8:	40020400 	.word	0x40020400
 80030cc:	40020800 	.word	0x40020800
 80030d0:	40020c00 	.word	0x40020c00
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40013c00 	.word	0x40013c00

080030dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
 80030e8:	4613      	mov	r3, r2
 80030ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ec:	787b      	ldrb	r3, [r7, #1]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f8:	e003      	b.n	8003102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030fa:	887b      	ldrh	r3, [r7, #2]
 80030fc:	041a      	lsls	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	619a      	str	r2, [r3, #24]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e25b      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d075      	beq.n	800321a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800312e:	4ba3      	ldr	r3, [pc, #652]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b04      	cmp	r3, #4
 8003138:	d00c      	beq.n	8003154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313a:	4ba0      	ldr	r3, [pc, #640]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003142:	2b08      	cmp	r3, #8
 8003144:	d112      	bne.n	800316c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003146:	4b9d      	ldr	r3, [pc, #628]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003152:	d10b      	bne.n	800316c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003154:	4b99      	ldr	r3, [pc, #612]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d05b      	beq.n	8003218 <HAL_RCC_OscConfig+0x108>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d157      	bne.n	8003218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e236      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003174:	d106      	bne.n	8003184 <HAL_RCC_OscConfig+0x74>
 8003176:	4b91      	ldr	r3, [pc, #580]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a90      	ldr	r2, [pc, #576]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 800317c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e01d      	b.n	80031c0 <HAL_RCC_OscConfig+0xb0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x98>
 800318e:	4b8b      	ldr	r3, [pc, #556]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a8a      	ldr	r2, [pc, #552]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b88      	ldr	r3, [pc, #544]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a87      	ldr	r2, [pc, #540]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0xb0>
 80031a8:	4b84      	ldr	r3, [pc, #528]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a83      	ldr	r2, [pc, #524]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 80031ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4b81      	ldr	r3, [pc, #516]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a80      	ldr	r2, [pc, #512]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 80031ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d013      	beq.n	80031f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7ff f9bc 	bl	8002544 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d0:	f7ff f9b8 	bl	8002544 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e1fb      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	4b76      	ldr	r3, [pc, #472]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0xc0>
 80031ee:	e014      	b.n	800321a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7ff f9a8 	bl	8002544 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f8:	f7ff f9a4 	bl	8002544 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e1e7      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320a:	4b6c      	ldr	r3, [pc, #432]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0xe8>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d063      	beq.n	80032ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003226:	4b65      	ldr	r3, [pc, #404]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003232:	4b62      	ldr	r3, [pc, #392]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800323a:	2b08      	cmp	r3, #8
 800323c:	d11c      	bne.n	8003278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323e:	4b5f      	ldr	r3, [pc, #380]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d116      	bne.n	8003278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	4b5c      	ldr	r3, [pc, #368]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_RCC_OscConfig+0x152>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d001      	beq.n	8003262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e1bb      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003262:	4b56      	ldr	r3, [pc, #344]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4952      	ldr	r1, [pc, #328]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	e03a      	b.n	80032ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d020      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003280:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <HAL_RCC_OscConfig+0x2b0>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7ff f95d 	bl	8002544 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328e:	f7ff f959 	bl	8002544 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e19c      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a0:	4b46      	ldr	r3, [pc, #280]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ac:	4b43      	ldr	r3, [pc, #268]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4940      	ldr	r1, [pc, #256]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c2:	4b3f      	ldr	r3, [pc, #252]	; (80033c0 <HAL_RCC_OscConfig+0x2b0>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7ff f93c 	bl	8002544 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d0:	f7ff f938 	bl	8002544 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e17b      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e2:	4b36      	ldr	r3, [pc, #216]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d030      	beq.n	800335c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003302:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <HAL_RCC_OscConfig+0x2b4>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7ff f91c 	bl	8002544 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003310:	f7ff f918 	bl	8002544 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e15b      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003322:	4b26      	ldr	r3, [pc, #152]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x200>
 800332e:	e015      	b.n	800335c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003330:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_RCC_OscConfig+0x2b4>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003336:	f7ff f905 	bl	8002544 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333e:	f7ff f901 	bl	8002544 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e144      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f0      	bne.n	800333e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a0 	beq.w	80034aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10f      	bne.n	800339a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <HAL_RCC_OscConfig+0x2ac>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x2b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d121      	bne.n	80033ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCC_OscConfig+0x2b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a07      	ldr	r2, [pc, #28]	; (80033c8 <HAL_RCC_OscConfig+0x2b8>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b2:	f7ff f8c7 	bl	8002544 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	e011      	b.n	80033de <HAL_RCC_OscConfig+0x2ce>
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	42470000 	.word	0x42470000
 80033c4:	42470e80 	.word	0x42470e80
 80033c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033cc:	f7ff f8ba 	bl	8002544 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e0fd      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b81      	ldr	r3, [pc, #516]	; (80035e4 <HAL_RCC_OscConfig+0x4d4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d106      	bne.n	8003400 <HAL_RCC_OscConfig+0x2f0>
 80033f2:	4b7d      	ldr	r3, [pc, #500]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4a7c      	ldr	r2, [pc, #496]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	6713      	str	r3, [r2, #112]	; 0x70
 80033fe:	e01c      	b.n	800343a <HAL_RCC_OscConfig+0x32a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b05      	cmp	r3, #5
 8003406:	d10c      	bne.n	8003422 <HAL_RCC_OscConfig+0x312>
 8003408:	4b77      	ldr	r3, [pc, #476]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a76      	ldr	r2, [pc, #472]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
 8003414:	4b74      	ldr	r3, [pc, #464]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	4a73      	ldr	r2, [pc, #460]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6713      	str	r3, [r2, #112]	; 0x70
 8003420:	e00b      	b.n	800343a <HAL_RCC_OscConfig+0x32a>
 8003422:	4b71      	ldr	r3, [pc, #452]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	4a70      	ldr	r2, [pc, #448]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	6713      	str	r3, [r2, #112]	; 0x70
 800342e:	4b6e      	ldr	r3, [pc, #440]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003432:	4a6d      	ldr	r2, [pc, #436]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d015      	beq.n	800346e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003442:	f7ff f87f 	bl	8002544 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003448:	e00a      	b.n	8003460 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344a:	f7ff f87b 	bl	8002544 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f241 3288 	movw	r2, #5000	; 0x1388
 8003458:	4293      	cmp	r3, r2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e0bc      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ee      	beq.n	800344a <HAL_RCC_OscConfig+0x33a>
 800346c:	e014      	b.n	8003498 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7ff f869 	bl	8002544 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003474:	e00a      	b.n	800348c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003476:	f7ff f865 	bl	8002544 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f241 3288 	movw	r2, #5000	; 0x1388
 8003484:	4293      	cmp	r3, r2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e0a6      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ee      	bne.n	8003476 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d105      	bne.n	80034aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349e:	4b52      	ldr	r3, [pc, #328]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	4a51      	ldr	r2, [pc, #324]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 80034a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8092 	beq.w	80035d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034b4:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d05c      	beq.n	800357a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d141      	bne.n	800354c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c8:	4b48      	ldr	r3, [pc, #288]	; (80035ec <HAL_RCC_OscConfig+0x4dc>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7ff f839 	bl	8002544 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d6:	f7ff f835 	bl	8002544 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e078      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e8:	4b3f      	ldr	r3, [pc, #252]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	019b      	lsls	r3, r3, #6
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	3b01      	subs	r3, #1
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	061b      	lsls	r3, r3, #24
 8003518:	4933      	ldr	r1, [pc, #204]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351e:	4b33      	ldr	r3, [pc, #204]	; (80035ec <HAL_RCC_OscConfig+0x4dc>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7ff f80e 	bl	8002544 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352c:	f7ff f80a 	bl	8002544 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e04d      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353e:	4b2a      	ldr	r3, [pc, #168]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x41c>
 800354a:	e045      	b.n	80035d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354c:	4b27      	ldr	r3, [pc, #156]	; (80035ec <HAL_RCC_OscConfig+0x4dc>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe fff7 	bl	8002544 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355a:	f7fe fff3 	bl	8002544 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e036      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356c:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f0      	bne.n	800355a <HAL_RCC_OscConfig+0x44a>
 8003578:	e02e      	b.n	80035d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e029      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003586:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <HAL_RCC_OscConfig+0x4d8>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	429a      	cmp	r2, r3
 8003598:	d11c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d115      	bne.n	80035d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035ae:	4013      	ands	r3, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d10d      	bne.n	80035d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40007000 	.word	0x40007000
 80035e8:	40023800 	.word	0x40023800
 80035ec:	42470060 	.word	0x42470060

080035f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0cc      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003604:	4b68      	ldr	r3, [pc, #416]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d90c      	bls.n	800362c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b65      	ldr	r3, [pc, #404]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b63      	ldr	r3, [pc, #396]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0b8      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d020      	beq.n	800367a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003644:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4a58      	ldr	r2, [pc, #352]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800364e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800365c:	4b53      	ldr	r3, [pc, #332]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a52      	ldr	r2, [pc, #328]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003668:	4b50      	ldr	r3, [pc, #320]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	494d      	ldr	r1, [pc, #308]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d044      	beq.n	8003710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	4b47      	ldr	r3, [pc, #284]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d119      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e07f      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d003      	beq.n	80036ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ae:	4b3f      	ldr	r3, [pc, #252]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e06f      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036be:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e067      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ce:	4b37      	ldr	r3, [pc, #220]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f023 0203 	bic.w	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4934      	ldr	r1, [pc, #208]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e0:	f7fe ff30 	bl	8002544 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e8:	f7fe ff2c 	bl	8002544 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e04f      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 020c 	and.w	r2, r3, #12
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	429a      	cmp	r2, r3
 800370e:	d1eb      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003710:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d20c      	bcs.n	8003738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e032      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4916      	ldr	r1, [pc, #88]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	490e      	ldr	r1, [pc, #56]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003776:	f000 f821 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 800377a:	4601      	mov	r1, r0
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003788:	5cd3      	ldrb	r3, [r2, r3]
 800378a:	fa21 f303 	lsr.w	r3, r1, r3
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fe90 	bl	80024bc <HAL_InitTick>

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023c00 	.word	0x40023c00
 80037ac:	40023800 	.word	0x40023800
 80037b0:	08006ff0 	.word	0x08006ff0
 80037b4:	20000000 	.word	0x20000000
 80037b8:	20000004 	.word	0x20000004

080037bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	2300      	movs	r3, #0
 80037cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d2:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_RCC_GetSysClockFreq+0x158>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d007      	beq.n	80037ee <HAL_RCC_GetSysClockFreq+0x32>
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d008      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x38>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f040 808d 	bne.w	8003902 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <HAL_RCC_GetSysClockFreq+0x15c>)
 80037ea:	60bb      	str	r3, [r7, #8]
       break;
 80037ec:	e08c      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ee:	4b4b      	ldr	r3, [pc, #300]	; (800391c <HAL_RCC_GetSysClockFreq+0x160>)
 80037f0:	60bb      	str	r3, [r7, #8]
      break;
 80037f2:	e089      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037f4:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_RCC_GetSysClockFreq+0x158>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037fe:	4b45      	ldr	r3, [pc, #276]	; (8003914 <HAL_RCC_GetSysClockFreq+0x158>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d023      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380a:	4b42      	ldr	r3, [pc, #264]	; (8003914 <HAL_RCC_GetSysClockFreq+0x158>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	099b      	lsrs	r3, r3, #6
 8003810:	f04f 0400 	mov.w	r4, #0
 8003814:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	ea03 0501 	and.w	r5, r3, r1
 8003820:	ea04 0602 	and.w	r6, r4, r2
 8003824:	4a3d      	ldr	r2, [pc, #244]	; (800391c <HAL_RCC_GetSysClockFreq+0x160>)
 8003826:	fb02 f106 	mul.w	r1, r2, r6
 800382a:	2200      	movs	r2, #0
 800382c:	fb02 f205 	mul.w	r2, r2, r5
 8003830:	440a      	add	r2, r1
 8003832:	493a      	ldr	r1, [pc, #232]	; (800391c <HAL_RCC_GetSysClockFreq+0x160>)
 8003834:	fba5 0101 	umull	r0, r1, r5, r1
 8003838:	1853      	adds	r3, r2, r1
 800383a:	4619      	mov	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f04f 0400 	mov.w	r4, #0
 8003842:	461a      	mov	r2, r3
 8003844:	4623      	mov	r3, r4
 8003846:	f7fd f933 	bl	8000ab0 <__aeabi_uldivmod>
 800384a:	4603      	mov	r3, r0
 800384c:	460c      	mov	r4, r1
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e049      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b30      	ldr	r3, [pc, #192]	; (8003914 <HAL_RCC_GetSysClockFreq+0x158>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	f04f 0400 	mov.w	r4, #0
 800385c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	ea03 0501 	and.w	r5, r3, r1
 8003868:	ea04 0602 	and.w	r6, r4, r2
 800386c:	4629      	mov	r1, r5
 800386e:	4632      	mov	r2, r6
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	f04f 0400 	mov.w	r4, #0
 8003878:	0154      	lsls	r4, r2, #5
 800387a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800387e:	014b      	lsls	r3, r1, #5
 8003880:	4619      	mov	r1, r3
 8003882:	4622      	mov	r2, r4
 8003884:	1b49      	subs	r1, r1, r5
 8003886:	eb62 0206 	sbc.w	r2, r2, r6
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	f04f 0400 	mov.w	r4, #0
 8003892:	0194      	lsls	r4, r2, #6
 8003894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003898:	018b      	lsls	r3, r1, #6
 800389a:	1a5b      	subs	r3, r3, r1
 800389c:	eb64 0402 	sbc.w	r4, r4, r2
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	00e2      	lsls	r2, r4, #3
 80038aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038ae:	00d9      	lsls	r1, r3, #3
 80038b0:	460b      	mov	r3, r1
 80038b2:	4614      	mov	r4, r2
 80038b4:	195b      	adds	r3, r3, r5
 80038b6:	eb44 0406 	adc.w	r4, r4, r6
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	02a2      	lsls	r2, r4, #10
 80038c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038c8:	0299      	lsls	r1, r3, #10
 80038ca:	460b      	mov	r3, r1
 80038cc:	4614      	mov	r4, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	4621      	mov	r1, r4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f04f 0400 	mov.w	r4, #0
 80038d8:	461a      	mov	r2, r3
 80038da:	4623      	mov	r3, r4
 80038dc:	f7fd f8e8 	bl	8000ab0 <__aeabi_uldivmod>
 80038e0:	4603      	mov	r3, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCC_GetSysClockFreq+0x158>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0c1b      	lsrs	r3, r3, #16
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	3301      	adds	r3, #1
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fe:	60bb      	str	r3, [r7, #8]
      break;
 8003900:	e002      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003904:	60bb      	str	r3, [r7, #8]
      break;
 8003906:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003908:	68bb      	ldr	r3, [r7, #8]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800
 8003918:	00f42400 	.word	0x00f42400
 800391c:	017d7840 	.word	0x017d7840

08003920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_GetHCLKFreq+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff0 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003940:	4601      	mov	r1, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0a9b      	lsrs	r3, r3, #10
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4a03      	ldr	r2, [pc, #12]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	08007000 	.word	0x08007000

08003960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003964:	f7ff ffdc 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003968:	4601      	mov	r1, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0b5b      	lsrs	r3, r3, #13
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4a03      	ldr	r2, [pc, #12]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003976:	5cd3      	ldrb	r3, [r2, r3]
 8003978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800
 8003984:	08007000 	.word	0x08007000

08003988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e056      	b.n	8003a48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fe f8ef 	bl	8001b98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	ea42 0103 	orr.w	r1, r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	f003 0104 	and.w	r1, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69da      	ldr	r2, [r3, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_SPI_Transmit+0x22>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e11e      	b.n	8003cb0 <HAL_SPI_Transmit+0x260>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a7a:	f7fe fd63 	bl	8002544 <HAL_GetTick>
 8003a7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
 8003a92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a94:	e103      	b.n	8003c9e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_SPI_Transmit+0x52>
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d102      	bne.n	8003aa8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aa6:	e0fa      	b.n	8003c9e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2203      	movs	r2, #3
 8003aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	88fa      	ldrh	r2, [r7, #6]
 8003ac6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aee:	d107      	bne.n	8003b00 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003afe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d007      	beq.n	8003b1e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b26:	d14b      	bne.n	8003bc0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_SPI_Transmit+0xe6>
 8003b30:	8afb      	ldrh	r3, [r7, #22]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d13e      	bne.n	8003bb4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	881a      	ldrh	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	1c9a      	adds	r2, r3, #2
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b5a:	e02b      	b.n	8003bb4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d112      	bne.n	8003b90 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b8e:	e011      	b.n	8003bb4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b90:	f7fe fcd8 	bl	8002544 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d803      	bhi.n	8003ba8 <HAL_SPI_Transmit+0x158>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d102      	bne.n	8003bae <HAL_SPI_Transmit+0x15e>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bb2:	e074      	b.n	8003c9e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1ce      	bne.n	8003b5c <HAL_SPI_Transmit+0x10c>
 8003bbe:	e04c      	b.n	8003c5a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_SPI_Transmit+0x17e>
 8003bc8:	8afb      	ldrh	r3, [r7, #22]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d140      	bne.n	8003c50 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	7812      	ldrb	r2, [r2, #0]
 8003bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bf4:	e02c      	b.n	8003c50 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d113      	bne.n	8003c2c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	7812      	ldrb	r2, [r2, #0]
 8003c10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c2a:	e011      	b.n	8003c50 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c2c:	f7fe fc8a 	bl	8002544 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d803      	bhi.n	8003c44 <HAL_SPI_Transmit+0x1f4>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d102      	bne.n	8003c4a <HAL_SPI_Transmit+0x1fa>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c4e:	e026      	b.n	8003c9e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1cd      	bne.n	8003bf6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	6839      	ldr	r1, [r7, #0]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fba4 	bl	80043ac <SPI_EndRxTxTransaction>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e000      	b.n	8003c9e <HAL_SPI_Transmit+0x24e>
  }

error:
 8003c9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cae:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3720      	adds	r7, #32
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd4:	d112      	bne.n	8003cfc <HAL_SPI_Receive+0x44>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10e      	bne.n	8003cfc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ce6:	88fa      	ldrh	r2, [r7, #6]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f8e9 	bl	8003eca <HAL_SPI_TransmitReceive>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	e0e2      	b.n	8003ec2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_SPI_Receive+0x52>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e0db      	b.n	8003ec2 <HAL_SPI_Receive+0x20a>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d12:	f7fe fc17 	bl	8002544 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d002      	beq.n	8003d2a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d24:	2302      	movs	r3, #2
 8003d26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d28:	e0c2      	b.n	8003eb0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_SPI_Receive+0x7e>
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d3a:	e0b9      	b.n	8003eb0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2204      	movs	r2, #4
 8003d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	88fa      	ldrh	r2, [r7, #6]
 8003d5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d82:	d107      	bne.n	8003d94 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d007      	beq.n	8003db2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d162      	bne.n	8003e80 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003dba:	e02e      	b.n	8003e1a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d115      	bne.n	8003df6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f103 020c 	add.w	r2, r3, #12
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	7812      	ldrb	r2, [r2, #0]
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003df4:	e011      	b.n	8003e1a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df6:	f7fe fba5 	bl	8002544 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d803      	bhi.n	8003e0e <HAL_SPI_Receive+0x156>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d102      	bne.n	8003e14 <HAL_SPI_Receive+0x15c>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e18:	e04a      	b.n	8003eb0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1cb      	bne.n	8003dbc <HAL_SPI_Receive+0x104>
 8003e24:	e031      	b.n	8003e8a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d113      	bne.n	8003e5c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	b292      	uxth	r2, r2
 8003e40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	1c9a      	adds	r2, r3, #2
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e5a:	e011      	b.n	8003e80 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5c:	f7fe fb72 	bl	8002544 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d803      	bhi.n	8003e74 <HAL_SPI_Receive+0x1bc>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	d102      	bne.n	8003e7a <HAL_SPI_Receive+0x1c2>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e7e:	e017      	b.n	8003eb0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1cd      	bne.n	8003e26 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fa27 	bl	80042e2 <SPI_EndRxTransaction>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
 8003eac:	e000      	b.n	8003eb0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003eae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b08c      	sub	sp, #48	; 0x30
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_SPI_TransmitReceive+0x26>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e18a      	b.n	8004206 <HAL_SPI_TransmitReceive+0x33c>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef8:	f7fe fb24 	bl	8002544 <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d00f      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x70>
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f20:	d107      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d103      	bne.n	8003f32 <HAL_SPI_TransmitReceive+0x68>
 8003f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d003      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
 8003f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f38:	e15b      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x82>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x82>
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d103      	bne.n	8003f54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f52:	e14e      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d003      	beq.n	8003f68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2205      	movs	r2, #5
 8003f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	887a      	ldrh	r2, [r7, #2]
 8003f7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	887a      	ldrh	r2, [r7, #2]
 8003f8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d007      	beq.n	8003fbc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc4:	d178      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SPI_TransmitReceive+0x10a>
 8003fce:	8b7b      	ldrh	r3, [r7, #26]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d166      	bne.n	80040a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	881a      	ldrh	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	1c9a      	adds	r2, r3, #2
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff8:	e053      	b.n	80040a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	d11b      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x176>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x176>
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d113      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	881a      	ldrh	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	1c9a      	adds	r2, r3, #2
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b01      	cmp	r3, #1
 800404c:	d119      	bne.n	8004082 <HAL_SPI_TransmitReceive+0x1b8>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d014      	beq.n	8004082 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	b292      	uxth	r2, r2
 8004064:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	1c9a      	adds	r2, r3, #2
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800407e:	2301      	movs	r3, #1
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004082:	f7fe fa5f 	bl	8002544 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800408e:	429a      	cmp	r2, r3
 8004090:	d807      	bhi.n	80040a2 <HAL_SPI_TransmitReceive+0x1d8>
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004098:	d003      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040a0:	e0a7      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1a6      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x130>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1a1      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x130>
 80040b6:	e07c      	b.n	80041b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_SPI_TransmitReceive+0x1fc>
 80040c0:	8b7b      	ldrh	r3, [r7, #26]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d16b      	bne.n	800419e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	7812      	ldrb	r2, [r2, #0]
 80040d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ec:	e057      	b.n	800419e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d11c      	bne.n	8004136 <HAL_SPI_TransmitReceive+0x26c>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d017      	beq.n	8004136 <HAL_SPI_TransmitReceive+0x26c>
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d114      	bne.n	8004136 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	7812      	ldrb	r2, [r2, #0]
 8004118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d119      	bne.n	8004178 <HAL_SPI_TransmitReceive+0x2ae>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d014      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004174:	2301      	movs	r3, #1
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004178:	f7fe f9e4 	bl	8002544 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004184:	429a      	cmp	r2, r3
 8004186:	d803      	bhi.n	8004190 <HAL_SPI_TransmitReceive+0x2c6>
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d102      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x2cc>
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800419c:	e029      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1a2      	bne.n	80040ee <HAL_SPI_TransmitReceive+0x224>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d19d      	bne.n	80040ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f8f8 	bl	80043ac <SPI_EndRxTxTransaction>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d006      	beq.n	80041d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041ce:	e010      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10b      	bne.n	80041f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	e000      	b.n	80041f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80041f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004202:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004206:	4618      	mov	r0, r3
 8004208:	3730      	adds	r7, #48	; 0x30
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800421e:	e04c      	b.n	80042ba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d048      	beq.n	80042ba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004228:	f7fe f98c 	bl	8002544 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d902      	bls.n	800423e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d13d      	bne.n	80042ba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800424c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004256:	d111      	bne.n	800427c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004260:	d004      	beq.n	800426c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426a:	d107      	bne.n	800427c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800427a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004284:	d10f      	bne.n	80042a6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e00f      	b.n	80042da <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4013      	ands	r3, r2
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	bf0c      	ite	eq
 80042ca:	2301      	moveq	r3, #1
 80042cc:	2300      	movne	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1a3      	bne.n	8004220 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af02      	add	r7, sp, #8
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f6:	d111      	bne.n	800431c <SPI_EndRxTransaction+0x3a>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004300:	d004      	beq.n	800430c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430a:	d107      	bne.n	800431c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004324:	d12a      	bne.n	800437c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432e:	d012      	beq.n	8004356 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2200      	movs	r2, #0
 8004338:	2180      	movs	r1, #128	; 0x80
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff ff67 	bl	800420e <SPI_WaitFlagStateUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d02d      	beq.n	80043a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	f043 0220 	orr.w	r2, r3, #32
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e026      	b.n	80043a4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2200      	movs	r2, #0
 800435e:	2101      	movs	r1, #1
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7ff ff54 	bl	800420e <SPI_WaitFlagStateUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01a      	beq.n	80043a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e013      	b.n	80043a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2200      	movs	r2, #0
 8004384:	2101      	movs	r1, #1
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff ff41 	bl	800420e <SPI_WaitFlagStateUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f043 0220 	orr.w	r2, r3, #32
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e000      	b.n	80043a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <SPI_EndRxTxTransaction+0x7c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1b      	ldr	r2, [pc, #108]	; (800442c <SPI_EndRxTxTransaction+0x80>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	0d5b      	lsrs	r3, r3, #21
 80043c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d6:	d112      	bne.n	80043fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	2180      	movs	r1, #128	; 0x80
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff ff13 	bl	800420e <SPI_WaitFlagStateUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f2:	f043 0220 	orr.w	r2, r3, #32
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e00f      	b.n	800441e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	3b01      	subs	r3, #1
 8004408:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004414:	2b80      	cmp	r3, #128	; 0x80
 8004416:	d0f2      	beq.n	80043fe <SPI_EndRxTxTransaction+0x52>
 8004418:	e000      	b.n	800441c <SPI_EndRxTxTransaction+0x70>
        break;
 800441a:	bf00      	nop
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000000 	.word	0x20000000
 800442c:	165e9f81 	.word	0x165e9f81

08004430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e01d      	b.n	800447e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fd fece 	bl	80021f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f000 fa4e 	bl	8004910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d007      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e01d      	b.n	800451c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fd fd49 	bl	8001f8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3304      	adds	r3, #4
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f000 f9ff 	bl	8004910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d122      	bne.n	8004580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b02      	cmp	r3, #2
 8004546:	d11b      	bne.n	8004580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0202 	mvn.w	r2, #2
 8004550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f9b4 	bl	80048d4 <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f9a6 	bl	80048c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f9b7 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b04      	cmp	r3, #4
 800458c:	d122      	bne.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b04      	cmp	r3, #4
 800459a:	d11b      	bne.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0204 	mvn.w	r2, #4
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f98a 	bl	80048d4 <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f97c 	bl	80048c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f98d 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d122      	bne.n	8004628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0208 	mvn.w	r2, #8
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f960 	bl	80048d4 <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f952 	bl	80048c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f963 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b10      	cmp	r3, #16
 8004634:	d122      	bne.n	800467c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b10      	cmp	r3, #16
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0210 	mvn.w	r2, #16
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2208      	movs	r2, #8
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f936 	bl	80048d4 <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f928 	bl	80048c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f939 	bl	80048e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0201 	mvn.w	r2, #1
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fd f96c 	bl	8001980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	2b80      	cmp	r3, #128	; 0x80
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fba2 	bl	8004e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d10e      	bne.n	8004700 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d107      	bne.n	8004700 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8fe 	bl	80048fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b20      	cmp	r3, #32
 800470c:	d10e      	bne.n	800472c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b20      	cmp	r3, #32
 800471a:	d107      	bne.n	800472c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0220 	mvn.w	r2, #32
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fb6c 	bl	8004e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800474a:	2302      	movs	r3, #2
 800474c:	e0b4      	b.n	80048b8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2202      	movs	r2, #2
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b0c      	cmp	r3, #12
 8004762:	f200 809f 	bhi.w	80048a4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004766:	a201      	add	r2, pc, #4	; (adr r2, 800476c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	080047a1 	.word	0x080047a1
 8004770:	080048a5 	.word	0x080048a5
 8004774:	080048a5 	.word	0x080048a5
 8004778:	080048a5 	.word	0x080048a5
 800477c:	080047e1 	.word	0x080047e1
 8004780:	080048a5 	.word	0x080048a5
 8004784:	080048a5 	.word	0x080048a5
 8004788:	080048a5 	.word	0x080048a5
 800478c:	08004823 	.word	0x08004823
 8004790:	080048a5 	.word	0x080048a5
 8004794:	080048a5 	.word	0x080048a5
 8004798:	080048a5 	.word	0x080048a5
 800479c:	08004863 	.word	0x08004863
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f932 	bl	8004a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0208 	orr.w	r2, r2, #8
 80047ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0204 	bic.w	r2, r2, #4
 80047ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6999      	ldr	r1, [r3, #24]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	619a      	str	r2, [r3, #24]
      break;
 80047de:	e062      	b.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f978 	bl	8004adc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6999      	ldr	r1, [r3, #24]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	021a      	lsls	r2, r3, #8
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	619a      	str	r2, [r3, #24]
      break;
 8004820:	e041      	b.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	4618      	mov	r0, r3
 800482a:	f000 f9c3 	bl	8004bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0208 	orr.w	r2, r2, #8
 800483c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69da      	ldr	r2, [r3, #28]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0204 	bic.w	r2, r2, #4
 800484c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69d9      	ldr	r1, [r3, #28]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	61da      	str	r2, [r3, #28]
      break;
 8004860:	e021      	b.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fa0d 	bl	8004c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800487c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69d9      	ldr	r1, [r3, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	021a      	lsls	r2, r3, #8
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	61da      	str	r2, [r3, #28]
      break;
 80048a2:	e000      	b.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80048a4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a34      	ldr	r2, [pc, #208]	; (80049f4 <TIM_Base_SetConfig+0xe4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00f      	beq.n	8004948 <TIM_Base_SetConfig+0x38>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492e:	d00b      	beq.n	8004948 <TIM_Base_SetConfig+0x38>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a31      	ldr	r2, [pc, #196]	; (80049f8 <TIM_Base_SetConfig+0xe8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d007      	beq.n	8004948 <TIM_Base_SetConfig+0x38>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a30      	ldr	r2, [pc, #192]	; (80049fc <TIM_Base_SetConfig+0xec>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_Base_SetConfig+0x38>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a2f      	ldr	r2, [pc, #188]	; (8004a00 <TIM_Base_SetConfig+0xf0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d108      	bne.n	800495a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a25      	ldr	r2, [pc, #148]	; (80049f4 <TIM_Base_SetConfig+0xe4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01b      	beq.n	800499a <TIM_Base_SetConfig+0x8a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004968:	d017      	beq.n	800499a <TIM_Base_SetConfig+0x8a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a22      	ldr	r2, [pc, #136]	; (80049f8 <TIM_Base_SetConfig+0xe8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <TIM_Base_SetConfig+0x8a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a21      	ldr	r2, [pc, #132]	; (80049fc <TIM_Base_SetConfig+0xec>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_Base_SetConfig+0x8a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a20      	ldr	r2, [pc, #128]	; (8004a00 <TIM_Base_SetConfig+0xf0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_Base_SetConfig+0x8a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <TIM_Base_SetConfig+0xf4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_Base_SetConfig+0x8a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1e      	ldr	r2, [pc, #120]	; (8004a08 <TIM_Base_SetConfig+0xf8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_Base_SetConfig+0x8a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <TIM_Base_SetConfig+0xfc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a08      	ldr	r2, [pc, #32]	; (80049f4 <TIM_Base_SetConfig+0xe4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d103      	bne.n	80049e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	615a      	str	r2, [r3, #20]
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40010000 	.word	0x40010000
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800
 8004a00:	40000c00 	.word	0x40000c00
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800

08004a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0201 	bic.w	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0303 	bic.w	r3, r3, #3
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f023 0302 	bic.w	r3, r3, #2
 8004a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <TIM_OC1_SetConfig+0xc8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d10c      	bne.n	8004a86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0308 	bic.w	r3, r3, #8
 8004a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f023 0304 	bic.w	r3, r3, #4
 8004a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a13      	ldr	r2, [pc, #76]	; (8004ad8 <TIM_OC1_SetConfig+0xc8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d111      	bne.n	8004ab2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	621a      	str	r2, [r3, #32]
}
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40010000 	.word	0x40010000

08004adc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f023 0210 	bic.w	r2, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0320 	bic.w	r3, r3, #32
 8004b26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a1e      	ldr	r2, [pc, #120]	; (8004bb0 <TIM_OC2_SetConfig+0xd4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d10d      	bne.n	8004b58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <TIM_OC2_SetConfig+0xd4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d113      	bne.n	8004b88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	621a      	str	r2, [r3, #32]
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40010000 	.word	0x40010000

08004bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <TIM_OC3_SetConfig+0xd0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d10d      	bne.n	8004c2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a14      	ldr	r2, [pc, #80]	; (8004c84 <TIM_OC3_SetConfig+0xd0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d113      	bne.n	8004c5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	621a      	str	r2, [r3, #32]
}
 8004c78:	bf00      	nop
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40010000 	.word	0x40010000

08004c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	031b      	lsls	r3, r3, #12
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a10      	ldr	r2, [pc, #64]	; (8004d24 <TIM_OC4_SetConfig+0x9c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d109      	bne.n	8004cfc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	019b      	lsls	r3, r3, #6
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40010000 	.word	0x40010000

08004d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e050      	b.n	8004de2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1c      	ldr	r2, [pc, #112]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d018      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8c:	d013      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a18      	ldr	r2, [pc, #96]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00e      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a16      	ldr	r2, [pc, #88]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d004      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d10c      	bne.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	40014000 	.word	0x40014000

08004e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e03f      	b.n	8004ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fd fa96 	bl	8002384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2224      	movs	r2, #36	; 0x24
 8004e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fab3 	bl	80053dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d140      	bne.n	8004f62 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_UART_Receive_IT+0x26>
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e039      	b.n	8004f64 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_UART_Receive_IT+0x38>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e032      	b.n	8004f64 <HAL_UART_Receive_IT+0x9e>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2222      	movs	r2, #34	; 0x22
 8004f22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f3c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0220 	orr.w	r2, r2, #32
 8004f5c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e000      	b.n	8004f64 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
  }
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10d      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x52>
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f98c 	bl	80052d8 <UART_Receive_IT>
      return;
 8004fc0:	e0d1      	b.n	8005166 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80b0 	beq.w	800512a <HAL_UART_IRQHandler+0x1ba>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d105      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x70>
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80a5 	beq.w	800512a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_UART_IRQHandler+0x90>
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff8:	f043 0201 	orr.w	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_UART_IRQHandler+0xb0>
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005018:	f043 0202 	orr.w	r2, r3, #2
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_UART_IRQHandler+0xd0>
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005038:	f043 0204 	orr.w	r2, r3, #4
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00f      	beq.n	800506a <HAL_UART_IRQHandler+0xfa>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d104      	bne.n	800505e <HAL_UART_IRQHandler+0xee>
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	f043 0208 	orr.w	r2, r3, #8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d078      	beq.n	8005164 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <HAL_UART_IRQHandler+0x11c>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f926 	bl	80052d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	bf0c      	ite	eq
 800509a:	2301      	moveq	r3, #1
 800509c:	2300      	movne	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <HAL_UART_IRQHandler+0x144>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d031      	beq.n	8005118 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f86f 	bl	8005198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d123      	bne.n	8005110 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d013      	beq.n	8005108 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e4:	4a21      	ldr	r2, [pc, #132]	; (800516c <HAL_UART_IRQHandler+0x1fc>)
 80050e6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fd fc17 	bl	8002920 <HAL_DMA_Abort_IT>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d016      	beq.n	8005126 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005102:	4610      	mov	r0, r2
 8005104:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005106:	e00e      	b.n	8005126 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f83b 	bl	8005184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510e:	e00a      	b.n	8005126 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f837 	bl	8005184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005116:	e006      	b.n	8005126 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f833 	bl	8005184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005124:	e01e      	b.n	8005164 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005126:	bf00      	nop
    return;
 8005128:	e01c      	b.n	8005164 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <HAL_UART_IRQHandler+0x1d6>
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f85c 	bl	80051fc <UART_Transmit_IT>
    return;
 8005144:	e00f      	b.n	8005166 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <HAL_UART_IRQHandler+0x1f6>
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8a4 	bl	80052a8 <UART_EndTransmit_IT>
    return;
 8005160:	bf00      	nop
 8005162:	e000      	b.n	8005166 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005164:	bf00      	nop
  }
}
 8005166:	3720      	adds	r7, #32
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	080051d5 	.word	0x080051d5

08005170 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff ffc8 	bl	8005184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b21      	cmp	r3, #33	; 0x21
 800520e:	d144      	bne.n	800529a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005218:	d11a      	bne.n	8005250 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800522e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	1c9a      	adds	r2, r3, #2
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]
 8005242:	e00e      	b.n	8005262 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]
 800524e:	e008      	b.n	8005262 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	1c59      	adds	r1, r3, #1
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6211      	str	r1, [r2, #32]
 800525a:	781a      	ldrb	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	4619      	mov	r1, r3
 8005270:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10f      	bne.n	8005296 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005284:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005294:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ff51 	bl	8005170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b22      	cmp	r3, #34	; 0x22
 80052ea:	d171      	bne.n	80053d0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f4:	d123      	bne.n	800533e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10e      	bne.n	8005322 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	1c9a      	adds	r2, r3, #2
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
 8005320:	e029      	b.n	8005376 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	b29b      	uxth	r3, r3
 800532a:	b2db      	uxtb	r3, r3
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
 800533c:	e01b      	b.n	8005376 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6858      	ldr	r0, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005350:	1c59      	adds	r1, r3, #1
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6291      	str	r1, [r2, #40]	; 0x28
 8005356:	b2c2      	uxtb	r2, r0
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	e00c      	b.n	8005376 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	1c58      	adds	r0, r3, #1
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	6288      	str	r0, [r1, #40]	; 0x28
 800536e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29b      	uxth	r3, r3
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	4619      	mov	r1, r3
 8005384:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005386:	2b00      	cmp	r3, #0
 8005388:	d120      	bne.n	80053cc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0220 	bic.w	r2, r2, #32
 8005398:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fc fafa 	bl	80019bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e002      	b.n	80053d2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800541e:	f023 030c 	bic.w	r3, r3, #12
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	68f9      	ldr	r1, [r7, #12]
 8005428:	430b      	orrs	r3, r1
 800542a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544a:	f040 818b 	bne.w	8005764 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4ac1      	ldr	r2, [pc, #772]	; (8005758 <UART_SetConfig+0x37c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d005      	beq.n	8005464 <UART_SetConfig+0x88>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4abf      	ldr	r2, [pc, #764]	; (800575c <UART_SetConfig+0x380>)
 800545e:	4293      	cmp	r3, r2
 8005460:	f040 80bd 	bne.w	80055de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005464:	f7fe fa7c 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 8005468:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	461d      	mov	r5, r3
 800546e:	f04f 0600 	mov.w	r6, #0
 8005472:	46a8      	mov	r8, r5
 8005474:	46b1      	mov	r9, r6
 8005476:	eb18 0308 	adds.w	r3, r8, r8
 800547a:	eb49 0409 	adc.w	r4, r9, r9
 800547e:	4698      	mov	r8, r3
 8005480:	46a1      	mov	r9, r4
 8005482:	eb18 0805 	adds.w	r8, r8, r5
 8005486:	eb49 0906 	adc.w	r9, r9, r6
 800548a:	f04f 0100 	mov.w	r1, #0
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005496:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800549a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800549e:	4688      	mov	r8, r1
 80054a0:	4691      	mov	r9, r2
 80054a2:	eb18 0005 	adds.w	r0, r8, r5
 80054a6:	eb49 0106 	adc.w	r1, r9, r6
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	461d      	mov	r5, r3
 80054b0:	f04f 0600 	mov.w	r6, #0
 80054b4:	196b      	adds	r3, r5, r5
 80054b6:	eb46 0406 	adc.w	r4, r6, r6
 80054ba:	461a      	mov	r2, r3
 80054bc:	4623      	mov	r3, r4
 80054be:	f7fb faf7 	bl	8000ab0 <__aeabi_uldivmod>
 80054c2:	4603      	mov	r3, r0
 80054c4:	460c      	mov	r4, r1
 80054c6:	461a      	mov	r2, r3
 80054c8:	4ba5      	ldr	r3, [pc, #660]	; (8005760 <UART_SetConfig+0x384>)
 80054ca:	fba3 2302 	umull	r2, r3, r3, r2
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	461d      	mov	r5, r3
 80054d8:	f04f 0600 	mov.w	r6, #0
 80054dc:	46a9      	mov	r9, r5
 80054de:	46b2      	mov	sl, r6
 80054e0:	eb19 0309 	adds.w	r3, r9, r9
 80054e4:	eb4a 040a 	adc.w	r4, sl, sl
 80054e8:	4699      	mov	r9, r3
 80054ea:	46a2      	mov	sl, r4
 80054ec:	eb19 0905 	adds.w	r9, r9, r5
 80054f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80054f4:	f04f 0100 	mov.w	r1, #0
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005500:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005504:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005508:	4689      	mov	r9, r1
 800550a:	4692      	mov	sl, r2
 800550c:	eb19 0005 	adds.w	r0, r9, r5
 8005510:	eb4a 0106 	adc.w	r1, sl, r6
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	461d      	mov	r5, r3
 800551a:	f04f 0600 	mov.w	r6, #0
 800551e:	196b      	adds	r3, r5, r5
 8005520:	eb46 0406 	adc.w	r4, r6, r6
 8005524:	461a      	mov	r2, r3
 8005526:	4623      	mov	r3, r4
 8005528:	f7fb fac2 	bl	8000ab0 <__aeabi_uldivmod>
 800552c:	4603      	mov	r3, r0
 800552e:	460c      	mov	r4, r1
 8005530:	461a      	mov	r2, r3
 8005532:	4b8b      	ldr	r3, [pc, #556]	; (8005760 <UART_SetConfig+0x384>)
 8005534:	fba3 1302 	umull	r1, r3, r3, r2
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	2164      	movs	r1, #100	; 0x64
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	3332      	adds	r3, #50	; 0x32
 8005546:	4a86      	ldr	r2, [pc, #536]	; (8005760 <UART_SetConfig+0x384>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005554:	4498      	add	r8, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	461d      	mov	r5, r3
 800555a:	f04f 0600 	mov.w	r6, #0
 800555e:	46a9      	mov	r9, r5
 8005560:	46b2      	mov	sl, r6
 8005562:	eb19 0309 	adds.w	r3, r9, r9
 8005566:	eb4a 040a 	adc.w	r4, sl, sl
 800556a:	4699      	mov	r9, r3
 800556c:	46a2      	mov	sl, r4
 800556e:	eb19 0905 	adds.w	r9, r9, r5
 8005572:	eb4a 0a06 	adc.w	sl, sl, r6
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	f04f 0200 	mov.w	r2, #0
 800557e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800558a:	4689      	mov	r9, r1
 800558c:	4692      	mov	sl, r2
 800558e:	eb19 0005 	adds.w	r0, r9, r5
 8005592:	eb4a 0106 	adc.w	r1, sl, r6
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	461d      	mov	r5, r3
 800559c:	f04f 0600 	mov.w	r6, #0
 80055a0:	196b      	adds	r3, r5, r5
 80055a2:	eb46 0406 	adc.w	r4, r6, r6
 80055a6:	461a      	mov	r2, r3
 80055a8:	4623      	mov	r3, r4
 80055aa:	f7fb fa81 	bl	8000ab0 <__aeabi_uldivmod>
 80055ae:	4603      	mov	r3, r0
 80055b0:	460c      	mov	r4, r1
 80055b2:	461a      	mov	r2, r3
 80055b4:	4b6a      	ldr	r3, [pc, #424]	; (8005760 <UART_SetConfig+0x384>)
 80055b6:	fba3 1302 	umull	r1, r3, r3, r2
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	2164      	movs	r1, #100	; 0x64
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	3332      	adds	r3, #50	; 0x32
 80055c8:	4a65      	ldr	r2, [pc, #404]	; (8005760 <UART_SetConfig+0x384>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	f003 0207 	and.w	r2, r3, #7
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4442      	add	r2, r8
 80055da:	609a      	str	r2, [r3, #8]
 80055dc:	e26f      	b.n	8005abe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055de:	f7fe f9ab 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 80055e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	461d      	mov	r5, r3
 80055e8:	f04f 0600 	mov.w	r6, #0
 80055ec:	46a8      	mov	r8, r5
 80055ee:	46b1      	mov	r9, r6
 80055f0:	eb18 0308 	adds.w	r3, r8, r8
 80055f4:	eb49 0409 	adc.w	r4, r9, r9
 80055f8:	4698      	mov	r8, r3
 80055fa:	46a1      	mov	r9, r4
 80055fc:	eb18 0805 	adds.w	r8, r8, r5
 8005600:	eb49 0906 	adc.w	r9, r9, r6
 8005604:	f04f 0100 	mov.w	r1, #0
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005610:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005614:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005618:	4688      	mov	r8, r1
 800561a:	4691      	mov	r9, r2
 800561c:	eb18 0005 	adds.w	r0, r8, r5
 8005620:	eb49 0106 	adc.w	r1, r9, r6
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	461d      	mov	r5, r3
 800562a:	f04f 0600 	mov.w	r6, #0
 800562e:	196b      	adds	r3, r5, r5
 8005630:	eb46 0406 	adc.w	r4, r6, r6
 8005634:	461a      	mov	r2, r3
 8005636:	4623      	mov	r3, r4
 8005638:	f7fb fa3a 	bl	8000ab0 <__aeabi_uldivmod>
 800563c:	4603      	mov	r3, r0
 800563e:	460c      	mov	r4, r1
 8005640:	461a      	mov	r2, r3
 8005642:	4b47      	ldr	r3, [pc, #284]	; (8005760 <UART_SetConfig+0x384>)
 8005644:	fba3 2302 	umull	r2, r3, r3, r2
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	461d      	mov	r5, r3
 8005652:	f04f 0600 	mov.w	r6, #0
 8005656:	46a9      	mov	r9, r5
 8005658:	46b2      	mov	sl, r6
 800565a:	eb19 0309 	adds.w	r3, r9, r9
 800565e:	eb4a 040a 	adc.w	r4, sl, sl
 8005662:	4699      	mov	r9, r3
 8005664:	46a2      	mov	sl, r4
 8005666:	eb19 0905 	adds.w	r9, r9, r5
 800566a:	eb4a 0a06 	adc.w	sl, sl, r6
 800566e:	f04f 0100 	mov.w	r1, #0
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800567a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800567e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005682:	4689      	mov	r9, r1
 8005684:	4692      	mov	sl, r2
 8005686:	eb19 0005 	adds.w	r0, r9, r5
 800568a:	eb4a 0106 	adc.w	r1, sl, r6
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	461d      	mov	r5, r3
 8005694:	f04f 0600 	mov.w	r6, #0
 8005698:	196b      	adds	r3, r5, r5
 800569a:	eb46 0406 	adc.w	r4, r6, r6
 800569e:	461a      	mov	r2, r3
 80056a0:	4623      	mov	r3, r4
 80056a2:	f7fb fa05 	bl	8000ab0 <__aeabi_uldivmod>
 80056a6:	4603      	mov	r3, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	461a      	mov	r2, r3
 80056ac:	4b2c      	ldr	r3, [pc, #176]	; (8005760 <UART_SetConfig+0x384>)
 80056ae:	fba3 1302 	umull	r1, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	2164      	movs	r1, #100	; 0x64
 80056b6:	fb01 f303 	mul.w	r3, r1, r3
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	3332      	adds	r3, #50	; 0x32
 80056c0:	4a27      	ldr	r2, [pc, #156]	; (8005760 <UART_SetConfig+0x384>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056ce:	4498      	add	r8, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	461d      	mov	r5, r3
 80056d4:	f04f 0600 	mov.w	r6, #0
 80056d8:	46a9      	mov	r9, r5
 80056da:	46b2      	mov	sl, r6
 80056dc:	eb19 0309 	adds.w	r3, r9, r9
 80056e0:	eb4a 040a 	adc.w	r4, sl, sl
 80056e4:	4699      	mov	r9, r3
 80056e6:	46a2      	mov	sl, r4
 80056e8:	eb19 0905 	adds.w	r9, r9, r5
 80056ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80056f0:	f04f 0100 	mov.w	r1, #0
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005700:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005704:	4689      	mov	r9, r1
 8005706:	4692      	mov	sl, r2
 8005708:	eb19 0005 	adds.w	r0, r9, r5
 800570c:	eb4a 0106 	adc.w	r1, sl, r6
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	461d      	mov	r5, r3
 8005716:	f04f 0600 	mov.w	r6, #0
 800571a:	196b      	adds	r3, r5, r5
 800571c:	eb46 0406 	adc.w	r4, r6, r6
 8005720:	461a      	mov	r2, r3
 8005722:	4623      	mov	r3, r4
 8005724:	f7fb f9c4 	bl	8000ab0 <__aeabi_uldivmod>
 8005728:	4603      	mov	r3, r0
 800572a:	460c      	mov	r4, r1
 800572c:	461a      	mov	r2, r3
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <UART_SetConfig+0x384>)
 8005730:	fba3 1302 	umull	r1, r3, r3, r2
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	2164      	movs	r1, #100	; 0x64
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	3332      	adds	r3, #50	; 0x32
 8005742:	4a07      	ldr	r2, [pc, #28]	; (8005760 <UART_SetConfig+0x384>)
 8005744:	fba2 2303 	umull	r2, r3, r2, r3
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	f003 0207 	and.w	r2, r3, #7
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4442      	add	r2, r8
 8005754:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005756:	e1b2      	b.n	8005abe <UART_SetConfig+0x6e2>
 8005758:	40011000 	.word	0x40011000
 800575c:	40011400 	.word	0x40011400
 8005760:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4ad7      	ldr	r2, [pc, #860]	; (8005ac8 <UART_SetConfig+0x6ec>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d005      	beq.n	800577a <UART_SetConfig+0x39e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4ad6      	ldr	r2, [pc, #856]	; (8005acc <UART_SetConfig+0x6f0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	f040 80d1 	bne.w	800591c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800577a:	f7fe f8f1 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 800577e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	469a      	mov	sl, r3
 8005784:	f04f 0b00 	mov.w	fp, #0
 8005788:	46d0      	mov	r8, sl
 800578a:	46d9      	mov	r9, fp
 800578c:	eb18 0308 	adds.w	r3, r8, r8
 8005790:	eb49 0409 	adc.w	r4, r9, r9
 8005794:	4698      	mov	r8, r3
 8005796:	46a1      	mov	r9, r4
 8005798:	eb18 080a 	adds.w	r8, r8, sl
 800579c:	eb49 090b 	adc.w	r9, r9, fp
 80057a0:	f04f 0100 	mov.w	r1, #0
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057b4:	4688      	mov	r8, r1
 80057b6:	4691      	mov	r9, r2
 80057b8:	eb1a 0508 	adds.w	r5, sl, r8
 80057bc:	eb4b 0609 	adc.w	r6, fp, r9
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4619      	mov	r1, r3
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	f04f 0400 	mov.w	r4, #0
 80057d2:	0094      	lsls	r4, r2, #2
 80057d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057d8:	008b      	lsls	r3, r1, #2
 80057da:	461a      	mov	r2, r3
 80057dc:	4623      	mov	r3, r4
 80057de:	4628      	mov	r0, r5
 80057e0:	4631      	mov	r1, r6
 80057e2:	f7fb f965 	bl	8000ab0 <__aeabi_uldivmod>
 80057e6:	4603      	mov	r3, r0
 80057e8:	460c      	mov	r4, r1
 80057ea:	461a      	mov	r2, r3
 80057ec:	4bb8      	ldr	r3, [pc, #736]	; (8005ad0 <UART_SetConfig+0x6f4>)
 80057ee:	fba3 2302 	umull	r2, r3, r3, r2
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	469b      	mov	fp, r3
 80057fc:	f04f 0c00 	mov.w	ip, #0
 8005800:	46d9      	mov	r9, fp
 8005802:	46e2      	mov	sl, ip
 8005804:	eb19 0309 	adds.w	r3, r9, r9
 8005808:	eb4a 040a 	adc.w	r4, sl, sl
 800580c:	4699      	mov	r9, r3
 800580e:	46a2      	mov	sl, r4
 8005810:	eb19 090b 	adds.w	r9, r9, fp
 8005814:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005818:	f04f 0100 	mov.w	r1, #0
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005824:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005828:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800582c:	4689      	mov	r9, r1
 800582e:	4692      	mov	sl, r2
 8005830:	eb1b 0509 	adds.w	r5, fp, r9
 8005834:	eb4c 060a 	adc.w	r6, ip, sl
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4619      	mov	r1, r3
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	f04f 0400 	mov.w	r4, #0
 800584a:	0094      	lsls	r4, r2, #2
 800584c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005850:	008b      	lsls	r3, r1, #2
 8005852:	461a      	mov	r2, r3
 8005854:	4623      	mov	r3, r4
 8005856:	4628      	mov	r0, r5
 8005858:	4631      	mov	r1, r6
 800585a:	f7fb f929 	bl	8000ab0 <__aeabi_uldivmod>
 800585e:	4603      	mov	r3, r0
 8005860:	460c      	mov	r4, r1
 8005862:	461a      	mov	r2, r3
 8005864:	4b9a      	ldr	r3, [pc, #616]	; (8005ad0 <UART_SetConfig+0x6f4>)
 8005866:	fba3 1302 	umull	r1, r3, r3, r2
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	2164      	movs	r1, #100	; 0x64
 800586e:	fb01 f303 	mul.w	r3, r1, r3
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	3332      	adds	r3, #50	; 0x32
 8005878:	4a95      	ldr	r2, [pc, #596]	; (8005ad0 <UART_SetConfig+0x6f4>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005884:	4498      	add	r8, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	469b      	mov	fp, r3
 800588a:	f04f 0c00 	mov.w	ip, #0
 800588e:	46d9      	mov	r9, fp
 8005890:	46e2      	mov	sl, ip
 8005892:	eb19 0309 	adds.w	r3, r9, r9
 8005896:	eb4a 040a 	adc.w	r4, sl, sl
 800589a:	4699      	mov	r9, r3
 800589c:	46a2      	mov	sl, r4
 800589e:	eb19 090b 	adds.w	r9, r9, fp
 80058a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058a6:	f04f 0100 	mov.w	r1, #0
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058ba:	4689      	mov	r9, r1
 80058bc:	4692      	mov	sl, r2
 80058be:	eb1b 0509 	adds.w	r5, fp, r9
 80058c2:	eb4c 060a 	adc.w	r6, ip, sl
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4619      	mov	r1, r3
 80058cc:	f04f 0200 	mov.w	r2, #0
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	f04f 0400 	mov.w	r4, #0
 80058d8:	0094      	lsls	r4, r2, #2
 80058da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058de:	008b      	lsls	r3, r1, #2
 80058e0:	461a      	mov	r2, r3
 80058e2:	4623      	mov	r3, r4
 80058e4:	4628      	mov	r0, r5
 80058e6:	4631      	mov	r1, r6
 80058e8:	f7fb f8e2 	bl	8000ab0 <__aeabi_uldivmod>
 80058ec:	4603      	mov	r3, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	461a      	mov	r2, r3
 80058f2:	4b77      	ldr	r3, [pc, #476]	; (8005ad0 <UART_SetConfig+0x6f4>)
 80058f4:	fba3 1302 	umull	r1, r3, r3, r2
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	2164      	movs	r1, #100	; 0x64
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	3332      	adds	r3, #50	; 0x32
 8005906:	4a72      	ldr	r2, [pc, #456]	; (8005ad0 <UART_SetConfig+0x6f4>)
 8005908:	fba2 2303 	umull	r2, r3, r2, r3
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	f003 020f 	and.w	r2, r3, #15
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4442      	add	r2, r8
 8005918:	609a      	str	r2, [r3, #8]
 800591a:	e0d0      	b.n	8005abe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800591c:	f7fe f80c 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8005920:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	469a      	mov	sl, r3
 8005926:	f04f 0b00 	mov.w	fp, #0
 800592a:	46d0      	mov	r8, sl
 800592c:	46d9      	mov	r9, fp
 800592e:	eb18 0308 	adds.w	r3, r8, r8
 8005932:	eb49 0409 	adc.w	r4, r9, r9
 8005936:	4698      	mov	r8, r3
 8005938:	46a1      	mov	r9, r4
 800593a:	eb18 080a 	adds.w	r8, r8, sl
 800593e:	eb49 090b 	adc.w	r9, r9, fp
 8005942:	f04f 0100 	mov.w	r1, #0
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800594e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005952:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005956:	4688      	mov	r8, r1
 8005958:	4691      	mov	r9, r2
 800595a:	eb1a 0508 	adds.w	r5, sl, r8
 800595e:	eb4b 0609 	adc.w	r6, fp, r9
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4619      	mov	r1, r3
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	f04f 0400 	mov.w	r4, #0
 8005974:	0094      	lsls	r4, r2, #2
 8005976:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800597a:	008b      	lsls	r3, r1, #2
 800597c:	461a      	mov	r2, r3
 800597e:	4623      	mov	r3, r4
 8005980:	4628      	mov	r0, r5
 8005982:	4631      	mov	r1, r6
 8005984:	f7fb f894 	bl	8000ab0 <__aeabi_uldivmod>
 8005988:	4603      	mov	r3, r0
 800598a:	460c      	mov	r4, r1
 800598c:	461a      	mov	r2, r3
 800598e:	4b50      	ldr	r3, [pc, #320]	; (8005ad0 <UART_SetConfig+0x6f4>)
 8005990:	fba3 2302 	umull	r2, r3, r3, r2
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	469b      	mov	fp, r3
 800599e:	f04f 0c00 	mov.w	ip, #0
 80059a2:	46d9      	mov	r9, fp
 80059a4:	46e2      	mov	sl, ip
 80059a6:	eb19 0309 	adds.w	r3, r9, r9
 80059aa:	eb4a 040a 	adc.w	r4, sl, sl
 80059ae:	4699      	mov	r9, r3
 80059b0:	46a2      	mov	sl, r4
 80059b2:	eb19 090b 	adds.w	r9, r9, fp
 80059b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059ba:	f04f 0100 	mov.w	r1, #0
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059ce:	4689      	mov	r9, r1
 80059d0:	4692      	mov	sl, r2
 80059d2:	eb1b 0509 	adds.w	r5, fp, r9
 80059d6:	eb4c 060a 	adc.w	r6, ip, sl
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4619      	mov	r1, r3
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	f04f 0400 	mov.w	r4, #0
 80059ec:	0094      	lsls	r4, r2, #2
 80059ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059f2:	008b      	lsls	r3, r1, #2
 80059f4:	461a      	mov	r2, r3
 80059f6:	4623      	mov	r3, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	4631      	mov	r1, r6
 80059fc:	f7fb f858 	bl	8000ab0 <__aeabi_uldivmod>
 8005a00:	4603      	mov	r3, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	461a      	mov	r2, r3
 8005a06:	4b32      	ldr	r3, [pc, #200]	; (8005ad0 <UART_SetConfig+0x6f4>)
 8005a08:	fba3 1302 	umull	r1, r3, r3, r2
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	2164      	movs	r1, #100	; 0x64
 8005a10:	fb01 f303 	mul.w	r3, r1, r3
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	3332      	adds	r3, #50	; 0x32
 8005a1a:	4a2d      	ldr	r2, [pc, #180]	; (8005ad0 <UART_SetConfig+0x6f4>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a26:	4498      	add	r8, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	469b      	mov	fp, r3
 8005a2c:	f04f 0c00 	mov.w	ip, #0
 8005a30:	46d9      	mov	r9, fp
 8005a32:	46e2      	mov	sl, ip
 8005a34:	eb19 0309 	adds.w	r3, r9, r9
 8005a38:	eb4a 040a 	adc.w	r4, sl, sl
 8005a3c:	4699      	mov	r9, r3
 8005a3e:	46a2      	mov	sl, r4
 8005a40:	eb19 090b 	adds.w	r9, r9, fp
 8005a44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a48:	f04f 0100 	mov.w	r1, #0
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a5c:	4689      	mov	r9, r1
 8005a5e:	4692      	mov	sl, r2
 8005a60:	eb1b 0509 	adds.w	r5, fp, r9
 8005a64:	eb4c 060a 	adc.w	r6, ip, sl
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	f04f 0400 	mov.w	r4, #0
 8005a7a:	0094      	lsls	r4, r2, #2
 8005a7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a80:	008b      	lsls	r3, r1, #2
 8005a82:	461a      	mov	r2, r3
 8005a84:	4623      	mov	r3, r4
 8005a86:	4628      	mov	r0, r5
 8005a88:	4631      	mov	r1, r6
 8005a8a:	f7fb f811 	bl	8000ab0 <__aeabi_uldivmod>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	461a      	mov	r2, r3
 8005a94:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <UART_SetConfig+0x6f4>)
 8005a96:	fba3 1302 	umull	r1, r3, r3, r2
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	2164      	movs	r1, #100	; 0x64
 8005a9e:	fb01 f303 	mul.w	r3, r1, r3
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	3332      	adds	r3, #50	; 0x32
 8005aa8:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <UART_SetConfig+0x6f4>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	f003 020f 	and.w	r2, r3, #15
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4442      	add	r2, r8
 8005aba:	609a      	str	r2, [r3, #8]
}
 8005abc:	e7ff      	b.n	8005abe <UART_SetConfig+0x6e2>
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac8:	40011000 	.word	0x40011000
 8005acc:	40011400 	.word	0x40011400
 8005ad0:	51eb851f 	.word	0x51eb851f

08005ad4 <__errno>:
 8005ad4:	4b01      	ldr	r3, [pc, #4]	; (8005adc <__errno+0x8>)
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	2000000c 	.word	0x2000000c

08005ae0 <__libc_init_array>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	4e0d      	ldr	r6, [pc, #52]	; (8005b18 <__libc_init_array+0x38>)
 8005ae4:	4c0d      	ldr	r4, [pc, #52]	; (8005b1c <__libc_init_array+0x3c>)
 8005ae6:	1ba4      	subs	r4, r4, r6
 8005ae8:	10a4      	asrs	r4, r4, #2
 8005aea:	2500      	movs	r5, #0
 8005aec:	42a5      	cmp	r5, r4
 8005aee:	d109      	bne.n	8005b04 <__libc_init_array+0x24>
 8005af0:	4e0b      	ldr	r6, [pc, #44]	; (8005b20 <__libc_init_array+0x40>)
 8005af2:	4c0c      	ldr	r4, [pc, #48]	; (8005b24 <__libc_init_array+0x44>)
 8005af4:	f001 fa6e 	bl	8006fd4 <_init>
 8005af8:	1ba4      	subs	r4, r4, r6
 8005afa:	10a4      	asrs	r4, r4, #2
 8005afc:	2500      	movs	r5, #0
 8005afe:	42a5      	cmp	r5, r4
 8005b00:	d105      	bne.n	8005b0e <__libc_init_array+0x2e>
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b08:	4798      	blx	r3
 8005b0a:	3501      	adds	r5, #1
 8005b0c:	e7ee      	b.n	8005aec <__libc_init_array+0xc>
 8005b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b12:	4798      	blx	r3
 8005b14:	3501      	adds	r5, #1
 8005b16:	e7f2      	b.n	8005afe <__libc_init_array+0x1e>
 8005b18:	080070a8 	.word	0x080070a8
 8005b1c:	080070a8 	.word	0x080070a8
 8005b20:	080070a8 	.word	0x080070a8
 8005b24:	080070ac 	.word	0x080070ac

08005b28 <memset>:
 8005b28:	4402      	add	r2, r0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d100      	bne.n	8005b32 <memset+0xa>
 8005b30:	4770      	bx	lr
 8005b32:	f803 1b01 	strb.w	r1, [r3], #1
 8005b36:	e7f9      	b.n	8005b2c <memset+0x4>

08005b38 <atan>:
 8005b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	ec55 4b10 	vmov	r4, r5, d0
 8005b40:	4bc3      	ldr	r3, [pc, #780]	; (8005e50 <atan+0x318>)
 8005b42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005b46:	429e      	cmp	r6, r3
 8005b48:	46ab      	mov	fp, r5
 8005b4a:	dd18      	ble.n	8005b7e <atan+0x46>
 8005b4c:	4bc1      	ldr	r3, [pc, #772]	; (8005e54 <atan+0x31c>)
 8005b4e:	429e      	cmp	r6, r3
 8005b50:	dc01      	bgt.n	8005b56 <atan+0x1e>
 8005b52:	d109      	bne.n	8005b68 <atan+0x30>
 8005b54:	b144      	cbz	r4, 8005b68 <atan+0x30>
 8005b56:	4622      	mov	r2, r4
 8005b58:	462b      	mov	r3, r5
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	f7fa fb41 	bl	80001e4 <__adddf3>
 8005b62:	4604      	mov	r4, r0
 8005b64:	460d      	mov	r5, r1
 8005b66:	e006      	b.n	8005b76 <atan+0x3e>
 8005b68:	f1bb 0f00 	cmp.w	fp, #0
 8005b6c:	f340 8131 	ble.w	8005dd2 <atan+0x29a>
 8005b70:	a59b      	add	r5, pc, #620	; (adr r5, 8005de0 <atan+0x2a8>)
 8005b72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005b76:	ec45 4b10 	vmov	d0, r4, r5
 8005b7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7e:	4bb6      	ldr	r3, [pc, #728]	; (8005e58 <atan+0x320>)
 8005b80:	429e      	cmp	r6, r3
 8005b82:	dc14      	bgt.n	8005bae <atan+0x76>
 8005b84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005b88:	429e      	cmp	r6, r3
 8005b8a:	dc0d      	bgt.n	8005ba8 <atan+0x70>
 8005b8c:	a396      	add	r3, pc, #600	; (adr r3, 8005de8 <atan+0x2b0>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	ee10 0a10 	vmov	r0, s0
 8005b96:	4629      	mov	r1, r5
 8005b98:	f7fa fb24 	bl	80001e4 <__adddf3>
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	4baf      	ldr	r3, [pc, #700]	; (8005e5c <atan+0x324>)
 8005ba0:	f7fa ff66 	bl	8000a70 <__aeabi_dcmpgt>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d1e6      	bne.n	8005b76 <atan+0x3e>
 8005ba8:	f04f 3aff 	mov.w	sl, #4294967295
 8005bac:	e02b      	b.n	8005c06 <atan+0xce>
 8005bae:	f000 f963 	bl	8005e78 <fabs>
 8005bb2:	4bab      	ldr	r3, [pc, #684]	; (8005e60 <atan+0x328>)
 8005bb4:	429e      	cmp	r6, r3
 8005bb6:	ec55 4b10 	vmov	r4, r5, d0
 8005bba:	f300 80bf 	bgt.w	8005d3c <atan+0x204>
 8005bbe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005bc2:	429e      	cmp	r6, r3
 8005bc4:	f300 80a0 	bgt.w	8005d08 <atan+0x1d0>
 8005bc8:	ee10 2a10 	vmov	r2, s0
 8005bcc:	ee10 0a10 	vmov	r0, s0
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	f7fa fb06 	bl	80001e4 <__adddf3>
 8005bd8:	2200      	movs	r2, #0
 8005bda:	4ba0      	ldr	r3, [pc, #640]	; (8005e5c <atan+0x324>)
 8005bdc:	f7fa fb00 	bl	80001e0 <__aeabi_dsub>
 8005be0:	2200      	movs	r2, #0
 8005be2:	4606      	mov	r6, r0
 8005be4:	460f      	mov	r7, r1
 8005be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bea:	4620      	mov	r0, r4
 8005bec:	4629      	mov	r1, r5
 8005bee:	f7fa faf9 	bl	80001e4 <__adddf3>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	f7fa fdd3 	bl	80007a4 <__aeabi_ddiv>
 8005bfe:	f04f 0a00 	mov.w	sl, #0
 8005c02:	4604      	mov	r4, r0
 8005c04:	460d      	mov	r5, r1
 8005c06:	4622      	mov	r2, r4
 8005c08:	462b      	mov	r3, r5
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	f7fa fc9f 	bl	8000550 <__aeabi_dmul>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4680      	mov	r8, r0
 8005c18:	4689      	mov	r9, r1
 8005c1a:	f7fa fc99 	bl	8000550 <__aeabi_dmul>
 8005c1e:	a374      	add	r3, pc, #464	; (adr r3, 8005df0 <atan+0x2b8>)
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	4606      	mov	r6, r0
 8005c26:	460f      	mov	r7, r1
 8005c28:	f7fa fc92 	bl	8000550 <__aeabi_dmul>
 8005c2c:	a372      	add	r3, pc, #456	; (adr r3, 8005df8 <atan+0x2c0>)
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	f7fa fad7 	bl	80001e4 <__adddf3>
 8005c36:	4632      	mov	r2, r6
 8005c38:	463b      	mov	r3, r7
 8005c3a:	f7fa fc89 	bl	8000550 <__aeabi_dmul>
 8005c3e:	a370      	add	r3, pc, #448	; (adr r3, 8005e00 <atan+0x2c8>)
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	f7fa face 	bl	80001e4 <__adddf3>
 8005c48:	4632      	mov	r2, r6
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	f7fa fc80 	bl	8000550 <__aeabi_dmul>
 8005c50:	a36d      	add	r3, pc, #436	; (adr r3, 8005e08 <atan+0x2d0>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f7fa fac5 	bl	80001e4 <__adddf3>
 8005c5a:	4632      	mov	r2, r6
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	f7fa fc77 	bl	8000550 <__aeabi_dmul>
 8005c62:	a36b      	add	r3, pc, #428	; (adr r3, 8005e10 <atan+0x2d8>)
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f7fa fabc 	bl	80001e4 <__adddf3>
 8005c6c:	4632      	mov	r2, r6
 8005c6e:	463b      	mov	r3, r7
 8005c70:	f7fa fc6e 	bl	8000550 <__aeabi_dmul>
 8005c74:	a368      	add	r3, pc, #416	; (adr r3, 8005e18 <atan+0x2e0>)
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	f7fa fab3 	bl	80001e4 <__adddf3>
 8005c7e:	4642      	mov	r2, r8
 8005c80:	464b      	mov	r3, r9
 8005c82:	f7fa fc65 	bl	8000550 <__aeabi_dmul>
 8005c86:	a366      	add	r3, pc, #408	; (adr r3, 8005e20 <atan+0x2e8>)
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	4680      	mov	r8, r0
 8005c8e:	4689      	mov	r9, r1
 8005c90:	4630      	mov	r0, r6
 8005c92:	4639      	mov	r1, r7
 8005c94:	f7fa fc5c 	bl	8000550 <__aeabi_dmul>
 8005c98:	a363      	add	r3, pc, #396	; (adr r3, 8005e28 <atan+0x2f0>)
 8005c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9e:	f7fa fa9f 	bl	80001e0 <__aeabi_dsub>
 8005ca2:	4632      	mov	r2, r6
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	f7fa fc53 	bl	8000550 <__aeabi_dmul>
 8005caa:	a361      	add	r3, pc, #388	; (adr r3, 8005e30 <atan+0x2f8>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f7fa fa96 	bl	80001e0 <__aeabi_dsub>
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	f7fa fc4a 	bl	8000550 <__aeabi_dmul>
 8005cbc:	a35e      	add	r3, pc, #376	; (adr r3, 8005e38 <atan+0x300>)
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f7fa fa8d 	bl	80001e0 <__aeabi_dsub>
 8005cc6:	4632      	mov	r2, r6
 8005cc8:	463b      	mov	r3, r7
 8005cca:	f7fa fc41 	bl	8000550 <__aeabi_dmul>
 8005cce:	a35c      	add	r3, pc, #368	; (adr r3, 8005e40 <atan+0x308>)
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f7fa fa84 	bl	80001e0 <__aeabi_dsub>
 8005cd8:	4632      	mov	r2, r6
 8005cda:	463b      	mov	r3, r7
 8005cdc:	f7fa fc38 	bl	8000550 <__aeabi_dmul>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4640      	mov	r0, r8
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	f7fa fa7c 	bl	80001e4 <__adddf3>
 8005cec:	4622      	mov	r2, r4
 8005cee:	462b      	mov	r3, r5
 8005cf0:	f7fa fc2e 	bl	8000550 <__aeabi_dmul>
 8005cf4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	d14b      	bne.n	8005d96 <atan+0x25e>
 8005cfe:	4620      	mov	r0, r4
 8005d00:	4629      	mov	r1, r5
 8005d02:	f7fa fa6d 	bl	80001e0 <__aeabi_dsub>
 8005d06:	e72c      	b.n	8005b62 <atan+0x2a>
 8005d08:	ee10 0a10 	vmov	r0, s0
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4b53      	ldr	r3, [pc, #332]	; (8005e5c <atan+0x324>)
 8005d10:	4629      	mov	r1, r5
 8005d12:	f7fa fa65 	bl	80001e0 <__aeabi_dsub>
 8005d16:	2200      	movs	r2, #0
 8005d18:	4606      	mov	r6, r0
 8005d1a:	460f      	mov	r7, r1
 8005d1c:	4b4f      	ldr	r3, [pc, #316]	; (8005e5c <atan+0x324>)
 8005d1e:	4620      	mov	r0, r4
 8005d20:	4629      	mov	r1, r5
 8005d22:	f7fa fa5f 	bl	80001e4 <__adddf3>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	f7fa fd39 	bl	80007a4 <__aeabi_ddiv>
 8005d32:	f04f 0a01 	mov.w	sl, #1
 8005d36:	4604      	mov	r4, r0
 8005d38:	460d      	mov	r5, r1
 8005d3a:	e764      	b.n	8005c06 <atan+0xce>
 8005d3c:	4b49      	ldr	r3, [pc, #292]	; (8005e64 <atan+0x32c>)
 8005d3e:	429e      	cmp	r6, r3
 8005d40:	dc1d      	bgt.n	8005d7e <atan+0x246>
 8005d42:	ee10 0a10 	vmov	r0, s0
 8005d46:	2200      	movs	r2, #0
 8005d48:	4b47      	ldr	r3, [pc, #284]	; (8005e68 <atan+0x330>)
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	f7fa fa48 	bl	80001e0 <__aeabi_dsub>
 8005d50:	2200      	movs	r2, #0
 8005d52:	4606      	mov	r6, r0
 8005d54:	460f      	mov	r7, r1
 8005d56:	4b44      	ldr	r3, [pc, #272]	; (8005e68 <atan+0x330>)
 8005d58:	4620      	mov	r0, r4
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	f7fa fbf8 	bl	8000550 <__aeabi_dmul>
 8005d60:	2200      	movs	r2, #0
 8005d62:	4b3e      	ldr	r3, [pc, #248]	; (8005e5c <atan+0x324>)
 8005d64:	f7fa fa3e 	bl	80001e4 <__adddf3>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	4639      	mov	r1, r7
 8005d70:	f7fa fd18 	bl	80007a4 <__aeabi_ddiv>
 8005d74:	f04f 0a02 	mov.w	sl, #2
 8005d78:	4604      	mov	r4, r0
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	e743      	b.n	8005c06 <atan+0xce>
 8005d7e:	462b      	mov	r3, r5
 8005d80:	ee10 2a10 	vmov	r2, s0
 8005d84:	2000      	movs	r0, #0
 8005d86:	4939      	ldr	r1, [pc, #228]	; (8005e6c <atan+0x334>)
 8005d88:	f7fa fd0c 	bl	80007a4 <__aeabi_ddiv>
 8005d8c:	f04f 0a03 	mov.w	sl, #3
 8005d90:	4604      	mov	r4, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	e737      	b.n	8005c06 <atan+0xce>
 8005d96:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <atan+0x338>)
 8005d98:	4e36      	ldr	r6, [pc, #216]	; (8005e74 <atan+0x33c>)
 8005d9a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005d9e:	4456      	add	r6, sl
 8005da0:	449a      	add	sl, r3
 8005da2:	e9da 2300 	ldrd	r2, r3, [sl]
 8005da6:	f7fa fa1b 	bl	80001e0 <__aeabi_dsub>
 8005daa:	4622      	mov	r2, r4
 8005dac:	462b      	mov	r3, r5
 8005dae:	f7fa fa17 	bl	80001e0 <__aeabi_dsub>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005dba:	f7fa fa11 	bl	80001e0 <__aeabi_dsub>
 8005dbe:	f1bb 0f00 	cmp.w	fp, #0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	460d      	mov	r5, r1
 8005dc6:	f6bf aed6 	bge.w	8005b76 <atan+0x3e>
 8005dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dce:	461d      	mov	r5, r3
 8005dd0:	e6d1      	b.n	8005b76 <atan+0x3e>
 8005dd2:	a51d      	add	r5, pc, #116	; (adr r5, 8005e48 <atan+0x310>)
 8005dd4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005dd8:	e6cd      	b.n	8005b76 <atan+0x3e>
 8005dda:	bf00      	nop
 8005ddc:	f3af 8000 	nop.w
 8005de0:	54442d18 	.word	0x54442d18
 8005de4:	3ff921fb 	.word	0x3ff921fb
 8005de8:	8800759c 	.word	0x8800759c
 8005dec:	7e37e43c 	.word	0x7e37e43c
 8005df0:	e322da11 	.word	0xe322da11
 8005df4:	3f90ad3a 	.word	0x3f90ad3a
 8005df8:	24760deb 	.word	0x24760deb
 8005dfc:	3fa97b4b 	.word	0x3fa97b4b
 8005e00:	a0d03d51 	.word	0xa0d03d51
 8005e04:	3fb10d66 	.word	0x3fb10d66
 8005e08:	c54c206e 	.word	0xc54c206e
 8005e0c:	3fb745cd 	.word	0x3fb745cd
 8005e10:	920083ff 	.word	0x920083ff
 8005e14:	3fc24924 	.word	0x3fc24924
 8005e18:	5555550d 	.word	0x5555550d
 8005e1c:	3fd55555 	.word	0x3fd55555
 8005e20:	2c6a6c2f 	.word	0x2c6a6c2f
 8005e24:	bfa2b444 	.word	0xbfa2b444
 8005e28:	52defd9a 	.word	0x52defd9a
 8005e2c:	3fadde2d 	.word	0x3fadde2d
 8005e30:	af749a6d 	.word	0xaf749a6d
 8005e34:	3fb3b0f2 	.word	0x3fb3b0f2
 8005e38:	fe231671 	.word	0xfe231671
 8005e3c:	3fbc71c6 	.word	0x3fbc71c6
 8005e40:	9998ebc4 	.word	0x9998ebc4
 8005e44:	3fc99999 	.word	0x3fc99999
 8005e48:	54442d18 	.word	0x54442d18
 8005e4c:	bff921fb 	.word	0xbff921fb
 8005e50:	440fffff 	.word	0x440fffff
 8005e54:	7ff00000 	.word	0x7ff00000
 8005e58:	3fdbffff 	.word	0x3fdbffff
 8005e5c:	3ff00000 	.word	0x3ff00000
 8005e60:	3ff2ffff 	.word	0x3ff2ffff
 8005e64:	40037fff 	.word	0x40037fff
 8005e68:	3ff80000 	.word	0x3ff80000
 8005e6c:	bff00000 	.word	0xbff00000
 8005e70:	08007030 	.word	0x08007030
 8005e74:	08007010 	.word	0x08007010

08005e78 <fabs>:
 8005e78:	ec51 0b10 	vmov	r0, r1, d0
 8005e7c:	ee10 2a10 	vmov	r2, s0
 8005e80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e84:	ec43 2b10 	vmov	d0, r2, r3
 8005e88:	4770      	bx	lr
	...

08005e8c <pow>:
 8005e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e90:	ed2d 8b04 	vpush	{d8-d9}
 8005e94:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006168 <pow+0x2dc>
 8005e98:	b08d      	sub	sp, #52	; 0x34
 8005e9a:	ec57 6b10 	vmov	r6, r7, d0
 8005e9e:	ec55 4b11 	vmov	r4, r5, d1
 8005ea2:	f000 f9bd 	bl	8006220 <__ieee754_pow>
 8005ea6:	f999 3000 	ldrsb.w	r3, [r9]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	eeb0 8a40 	vmov.f32	s16, s0
 8005eb2:	eef0 8a60 	vmov.f32	s17, s1
 8005eb6:	46c8      	mov	r8, r9
 8005eb8:	d05f      	beq.n	8005f7a <pow+0xee>
 8005eba:	4622      	mov	r2, r4
 8005ebc:	462b      	mov	r3, r5
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	f7fa fddf 	bl	8000a84 <__aeabi_dcmpun>
 8005ec6:	4683      	mov	fp, r0
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d156      	bne.n	8005f7a <pow+0xee>
 8005ecc:	4632      	mov	r2, r6
 8005ece:	463b      	mov	r3, r7
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	4639      	mov	r1, r7
 8005ed4:	f7fa fdd6 	bl	8000a84 <__aeabi_dcmpun>
 8005ed8:	9001      	str	r0, [sp, #4]
 8005eda:	b1e8      	cbz	r0, 8005f18 <pow+0x8c>
 8005edc:	2200      	movs	r2, #0
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	f7fa fd9c 	bl	8000a20 <__aeabi_dcmpeq>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d046      	beq.n	8005f7a <pow+0xee>
 8005eec:	2301      	movs	r3, #1
 8005eee:	9302      	str	r3, [sp, #8]
 8005ef0:	4b96      	ldr	r3, [pc, #600]	; (800614c <pow+0x2c0>)
 8005ef2:	9303      	str	r3, [sp, #12]
 8005ef4:	4b96      	ldr	r3, [pc, #600]	; (8006150 <pow+0x2c4>)
 8005ef6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005efa:	2200      	movs	r2, #0
 8005efc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f00:	9b00      	ldr	r3, [sp, #0]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005f08:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005f0c:	d033      	beq.n	8005f76 <pow+0xea>
 8005f0e:	a802      	add	r0, sp, #8
 8005f10:	f000 ff4c 	bl	8006dac <matherr>
 8005f14:	bb48      	cbnz	r0, 8005f6a <pow+0xde>
 8005f16:	e05d      	b.n	8005fd4 <pow+0x148>
 8005f18:	f04f 0a00 	mov.w	sl, #0
 8005f1c:	f04f 0b00 	mov.w	fp, #0
 8005f20:	4652      	mov	r2, sl
 8005f22:	465b      	mov	r3, fp
 8005f24:	4630      	mov	r0, r6
 8005f26:	4639      	mov	r1, r7
 8005f28:	f7fa fd7a 	bl	8000a20 <__aeabi_dcmpeq>
 8005f2c:	ec4b ab19 	vmov	d9, sl, fp
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d054      	beq.n	8005fde <pow+0x152>
 8005f34:	4652      	mov	r2, sl
 8005f36:	465b      	mov	r3, fp
 8005f38:	4620      	mov	r0, r4
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	f7fa fd70 	bl	8000a20 <__aeabi_dcmpeq>
 8005f40:	4680      	mov	r8, r0
 8005f42:	b318      	cbz	r0, 8005f8c <pow+0x100>
 8005f44:	2301      	movs	r3, #1
 8005f46:	9302      	str	r3, [sp, #8]
 8005f48:	4b80      	ldr	r3, [pc, #512]	; (800614c <pow+0x2c0>)
 8005f4a:	9303      	str	r3, [sp, #12]
 8005f4c:	9b01      	ldr	r3, [sp, #4]
 8005f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f50:	9b00      	ldr	r3, [sp, #0]
 8005f52:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005f56:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005f5a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0d5      	beq.n	8005f0e <pow+0x82>
 8005f62:	4b7b      	ldr	r3, [pc, #492]	; (8006150 <pow+0x2c4>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f6c:	b11b      	cbz	r3, 8005f76 <pow+0xea>
 8005f6e:	f7ff fdb1 	bl	8005ad4 <__errno>
 8005f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f74:	6003      	str	r3, [r0, #0]
 8005f76:	ed9d 8b08 	vldr	d8, [sp, #32]
 8005f7a:	eeb0 0a48 	vmov.f32	s0, s16
 8005f7e:	eef0 0a68 	vmov.f32	s1, s17
 8005f82:	b00d      	add	sp, #52	; 0x34
 8005f84:	ecbd 8b04 	vpop	{d8-d9}
 8005f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8c:	ec45 4b10 	vmov	d0, r4, r5
 8005f90:	f000 ff04 	bl	8006d9c <finite>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d0f0      	beq.n	8005f7a <pow+0xee>
 8005f98:	4652      	mov	r2, sl
 8005f9a:	465b      	mov	r3, fp
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	f7fa fd48 	bl	8000a34 <__aeabi_dcmplt>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	d0e8      	beq.n	8005f7a <pow+0xee>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	9302      	str	r3, [sp, #8]
 8005fac:	4b67      	ldr	r3, [pc, #412]	; (800614c <pow+0x2c0>)
 8005fae:	9303      	str	r3, [sp, #12]
 8005fb0:	f999 3000 	ldrsb.w	r3, [r9]
 8005fb4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005fb8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005fbc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005fc0:	b913      	cbnz	r3, 8005fc8 <pow+0x13c>
 8005fc2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005fc6:	e7a2      	b.n	8005f0e <pow+0x82>
 8005fc8:	4962      	ldr	r1, [pc, #392]	; (8006154 <pow+0x2c8>)
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d19c      	bne.n	8005f0e <pow+0x82>
 8005fd4:	f7ff fd7e 	bl	8005ad4 <__errno>
 8005fd8:	2321      	movs	r3, #33	; 0x21
 8005fda:	6003      	str	r3, [r0, #0]
 8005fdc:	e7c5      	b.n	8005f6a <pow+0xde>
 8005fde:	eeb0 0a48 	vmov.f32	s0, s16
 8005fe2:	eef0 0a68 	vmov.f32	s1, s17
 8005fe6:	f000 fed9 	bl	8006d9c <finite>
 8005fea:	9000      	str	r0, [sp, #0]
 8005fec:	2800      	cmp	r0, #0
 8005fee:	f040 8081 	bne.w	80060f4 <pow+0x268>
 8005ff2:	ec47 6b10 	vmov	d0, r6, r7
 8005ff6:	f000 fed1 	bl	8006d9c <finite>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d07a      	beq.n	80060f4 <pow+0x268>
 8005ffe:	ec45 4b10 	vmov	d0, r4, r5
 8006002:	f000 fecb 	bl	8006d9c <finite>
 8006006:	2800      	cmp	r0, #0
 8006008:	d074      	beq.n	80060f4 <pow+0x268>
 800600a:	ec53 2b18 	vmov	r2, r3, d8
 800600e:	ee18 0a10 	vmov	r0, s16
 8006012:	4619      	mov	r1, r3
 8006014:	f7fa fd36 	bl	8000a84 <__aeabi_dcmpun>
 8006018:	f999 9000 	ldrsb.w	r9, [r9]
 800601c:	4b4b      	ldr	r3, [pc, #300]	; (800614c <pow+0x2c0>)
 800601e:	b1b0      	cbz	r0, 800604e <pow+0x1c2>
 8006020:	2201      	movs	r2, #1
 8006022:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006026:	9b00      	ldr	r3, [sp, #0]
 8006028:	930a      	str	r3, [sp, #40]	; 0x28
 800602a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800602e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006032:	f1b9 0f00 	cmp.w	r9, #0
 8006036:	d0c4      	beq.n	8005fc2 <pow+0x136>
 8006038:	4652      	mov	r2, sl
 800603a:	465b      	mov	r3, fp
 800603c:	4650      	mov	r0, sl
 800603e:	4659      	mov	r1, fp
 8006040:	f7fa fbb0 	bl	80007a4 <__aeabi_ddiv>
 8006044:	f1b9 0f02 	cmp.w	r9, #2
 8006048:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800604c:	e7c1      	b.n	8005fd2 <pow+0x146>
 800604e:	2203      	movs	r2, #3
 8006050:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006054:	900a      	str	r0, [sp, #40]	; 0x28
 8006056:	4629      	mov	r1, r5
 8006058:	4620      	mov	r0, r4
 800605a:	2200      	movs	r2, #0
 800605c:	4b3e      	ldr	r3, [pc, #248]	; (8006158 <pow+0x2cc>)
 800605e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006062:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006066:	f7fa fa73 	bl	8000550 <__aeabi_dmul>
 800606a:	4604      	mov	r4, r0
 800606c:	460d      	mov	r5, r1
 800606e:	f1b9 0f00 	cmp.w	r9, #0
 8006072:	d124      	bne.n	80060be <pow+0x232>
 8006074:	4b39      	ldr	r3, [pc, #228]	; (800615c <pow+0x2d0>)
 8006076:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800607a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800607e:	4630      	mov	r0, r6
 8006080:	4652      	mov	r2, sl
 8006082:	465b      	mov	r3, fp
 8006084:	4639      	mov	r1, r7
 8006086:	f7fa fcd5 	bl	8000a34 <__aeabi_dcmplt>
 800608a:	2800      	cmp	r0, #0
 800608c:	d056      	beq.n	800613c <pow+0x2b0>
 800608e:	ec45 4b10 	vmov	d0, r4, r5
 8006092:	f000 fe95 	bl	8006dc0 <rint>
 8006096:	4622      	mov	r2, r4
 8006098:	462b      	mov	r3, r5
 800609a:	ec51 0b10 	vmov	r0, r1, d0
 800609e:	f7fa fcbf 	bl	8000a20 <__aeabi_dcmpeq>
 80060a2:	b920      	cbnz	r0, 80060ae <pow+0x222>
 80060a4:	4b2e      	ldr	r3, [pc, #184]	; (8006160 <pow+0x2d4>)
 80060a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80060aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060ae:	f998 3000 	ldrsb.w	r3, [r8]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d142      	bne.n	800613c <pow+0x2b0>
 80060b6:	f7ff fd0d 	bl	8005ad4 <__errno>
 80060ba:	2322      	movs	r3, #34	; 0x22
 80060bc:	e78d      	b.n	8005fda <pow+0x14e>
 80060be:	4b29      	ldr	r3, [pc, #164]	; (8006164 <pow+0x2d8>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060c6:	4630      	mov	r0, r6
 80060c8:	4652      	mov	r2, sl
 80060ca:	465b      	mov	r3, fp
 80060cc:	4639      	mov	r1, r7
 80060ce:	f7fa fcb1 	bl	8000a34 <__aeabi_dcmplt>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d0eb      	beq.n	80060ae <pow+0x222>
 80060d6:	ec45 4b10 	vmov	d0, r4, r5
 80060da:	f000 fe71 	bl	8006dc0 <rint>
 80060de:	4622      	mov	r2, r4
 80060e0:	462b      	mov	r3, r5
 80060e2:	ec51 0b10 	vmov	r0, r1, d0
 80060e6:	f7fa fc9b 	bl	8000a20 <__aeabi_dcmpeq>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d1df      	bne.n	80060ae <pow+0x222>
 80060ee:	2200      	movs	r2, #0
 80060f0:	4b18      	ldr	r3, [pc, #96]	; (8006154 <pow+0x2c8>)
 80060f2:	e7da      	b.n	80060aa <pow+0x21e>
 80060f4:	2200      	movs	r2, #0
 80060f6:	2300      	movs	r3, #0
 80060f8:	ec51 0b18 	vmov	r0, r1, d8
 80060fc:	f7fa fc90 	bl	8000a20 <__aeabi_dcmpeq>
 8006100:	2800      	cmp	r0, #0
 8006102:	f43f af3a 	beq.w	8005f7a <pow+0xee>
 8006106:	ec47 6b10 	vmov	d0, r6, r7
 800610a:	f000 fe47 	bl	8006d9c <finite>
 800610e:	2800      	cmp	r0, #0
 8006110:	f43f af33 	beq.w	8005f7a <pow+0xee>
 8006114:	ec45 4b10 	vmov	d0, r4, r5
 8006118:	f000 fe40 	bl	8006d9c <finite>
 800611c:	2800      	cmp	r0, #0
 800611e:	f43f af2c 	beq.w	8005f7a <pow+0xee>
 8006122:	2304      	movs	r3, #4
 8006124:	9302      	str	r3, [sp, #8]
 8006126:	4b09      	ldr	r3, [pc, #36]	; (800614c <pow+0x2c0>)
 8006128:	9303      	str	r3, [sp, #12]
 800612a:	2300      	movs	r3, #0
 800612c:	930a      	str	r3, [sp, #40]	; 0x28
 800612e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006132:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006136:	ed8d 9b08 	vstr	d9, [sp, #32]
 800613a:	e7b8      	b.n	80060ae <pow+0x222>
 800613c:	a802      	add	r0, sp, #8
 800613e:	f000 fe35 	bl	8006dac <matherr>
 8006142:	2800      	cmp	r0, #0
 8006144:	f47f af11 	bne.w	8005f6a <pow+0xde>
 8006148:	e7b5      	b.n	80060b6 <pow+0x22a>
 800614a:	bf00      	nop
 800614c:	08007050 	.word	0x08007050
 8006150:	3ff00000 	.word	0x3ff00000
 8006154:	fff00000 	.word	0xfff00000
 8006158:	3fe00000 	.word	0x3fe00000
 800615c:	47efffff 	.word	0x47efffff
 8006160:	c7efffff 	.word	0xc7efffff
 8006164:	7ff00000 	.word	0x7ff00000
 8006168:	20000070 	.word	0x20000070

0800616c <sqrt>:
 800616c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006170:	ed2d 8b02 	vpush	{d8}
 8006174:	b08b      	sub	sp, #44	; 0x2c
 8006176:	ec55 4b10 	vmov	r4, r5, d0
 800617a:	f000 fd5f 	bl	8006c3c <__ieee754_sqrt>
 800617e:	4b26      	ldr	r3, [pc, #152]	; (8006218 <sqrt+0xac>)
 8006180:	eeb0 8a40 	vmov.f32	s16, s0
 8006184:	eef0 8a60 	vmov.f32	s17, s1
 8006188:	f993 6000 	ldrsb.w	r6, [r3]
 800618c:	1c73      	adds	r3, r6, #1
 800618e:	d02a      	beq.n	80061e6 <sqrt+0x7a>
 8006190:	4622      	mov	r2, r4
 8006192:	462b      	mov	r3, r5
 8006194:	4620      	mov	r0, r4
 8006196:	4629      	mov	r1, r5
 8006198:	f7fa fc74 	bl	8000a84 <__aeabi_dcmpun>
 800619c:	4607      	mov	r7, r0
 800619e:	bb10      	cbnz	r0, 80061e6 <sqrt+0x7a>
 80061a0:	f04f 0800 	mov.w	r8, #0
 80061a4:	f04f 0900 	mov.w	r9, #0
 80061a8:	4642      	mov	r2, r8
 80061aa:	464b      	mov	r3, r9
 80061ac:	4620      	mov	r0, r4
 80061ae:	4629      	mov	r1, r5
 80061b0:	f7fa fc40 	bl	8000a34 <__aeabi_dcmplt>
 80061b4:	b1b8      	cbz	r0, 80061e6 <sqrt+0x7a>
 80061b6:	2301      	movs	r3, #1
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	4b18      	ldr	r3, [pc, #96]	; (800621c <sqrt+0xb0>)
 80061bc:	9301      	str	r3, [sp, #4]
 80061be:	9708      	str	r7, [sp, #32]
 80061c0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80061c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80061c8:	b9b6      	cbnz	r6, 80061f8 <sqrt+0x8c>
 80061ca:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80061ce:	4668      	mov	r0, sp
 80061d0:	f000 fdec 	bl	8006dac <matherr>
 80061d4:	b1d0      	cbz	r0, 800620c <sqrt+0xa0>
 80061d6:	9b08      	ldr	r3, [sp, #32]
 80061d8:	b11b      	cbz	r3, 80061e2 <sqrt+0x76>
 80061da:	f7ff fc7b 	bl	8005ad4 <__errno>
 80061de:	9b08      	ldr	r3, [sp, #32]
 80061e0:	6003      	str	r3, [r0, #0]
 80061e2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80061e6:	eeb0 0a48 	vmov.f32	s0, s16
 80061ea:	eef0 0a68 	vmov.f32	s1, s17
 80061ee:	b00b      	add	sp, #44	; 0x2c
 80061f0:	ecbd 8b02 	vpop	{d8}
 80061f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	4640      	mov	r0, r8
 80061fe:	4649      	mov	r1, r9
 8006200:	f7fa fad0 	bl	80007a4 <__aeabi_ddiv>
 8006204:	2e02      	cmp	r6, #2
 8006206:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800620a:	d1e0      	bne.n	80061ce <sqrt+0x62>
 800620c:	f7ff fc62 	bl	8005ad4 <__errno>
 8006210:	2321      	movs	r3, #33	; 0x21
 8006212:	6003      	str	r3, [r0, #0]
 8006214:	e7df      	b.n	80061d6 <sqrt+0x6a>
 8006216:	bf00      	nop
 8006218:	20000070 	.word	0x20000070
 800621c:	08007054 	.word	0x08007054

08006220 <__ieee754_pow>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	b091      	sub	sp, #68	; 0x44
 8006226:	ed8d 1b00 	vstr	d1, [sp]
 800622a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800622e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006232:	ea58 0302 	orrs.w	r3, r8, r2
 8006236:	ec57 6b10 	vmov	r6, r7, d0
 800623a:	f000 84be 	beq.w	8006bba <__ieee754_pow+0x99a>
 800623e:	4b7a      	ldr	r3, [pc, #488]	; (8006428 <__ieee754_pow+0x208>)
 8006240:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006244:	429c      	cmp	r4, r3
 8006246:	463d      	mov	r5, r7
 8006248:	ee10 aa10 	vmov	sl, s0
 800624c:	dc09      	bgt.n	8006262 <__ieee754_pow+0x42>
 800624e:	d103      	bne.n	8006258 <__ieee754_pow+0x38>
 8006250:	b93e      	cbnz	r6, 8006262 <__ieee754_pow+0x42>
 8006252:	45a0      	cmp	r8, r4
 8006254:	dc0d      	bgt.n	8006272 <__ieee754_pow+0x52>
 8006256:	e001      	b.n	800625c <__ieee754_pow+0x3c>
 8006258:	4598      	cmp	r8, r3
 800625a:	dc02      	bgt.n	8006262 <__ieee754_pow+0x42>
 800625c:	4598      	cmp	r8, r3
 800625e:	d10e      	bne.n	800627e <__ieee754_pow+0x5e>
 8006260:	b16a      	cbz	r2, 800627e <__ieee754_pow+0x5e>
 8006262:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006266:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800626a:	ea54 030a 	orrs.w	r3, r4, sl
 800626e:	f000 84a4 	beq.w	8006bba <__ieee754_pow+0x99a>
 8006272:	486e      	ldr	r0, [pc, #440]	; (800642c <__ieee754_pow+0x20c>)
 8006274:	b011      	add	sp, #68	; 0x44
 8006276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	f000 bd99 	b.w	8006db0 <nan>
 800627e:	2d00      	cmp	r5, #0
 8006280:	da53      	bge.n	800632a <__ieee754_pow+0x10a>
 8006282:	4b6b      	ldr	r3, [pc, #428]	; (8006430 <__ieee754_pow+0x210>)
 8006284:	4598      	cmp	r8, r3
 8006286:	dc4d      	bgt.n	8006324 <__ieee754_pow+0x104>
 8006288:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800628c:	4598      	cmp	r8, r3
 800628e:	dd4c      	ble.n	800632a <__ieee754_pow+0x10a>
 8006290:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006294:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006298:	2b14      	cmp	r3, #20
 800629a:	dd26      	ble.n	80062ea <__ieee754_pow+0xca>
 800629c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80062a0:	fa22 f103 	lsr.w	r1, r2, r3
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d13e      	bne.n	800632a <__ieee754_pow+0x10a>
 80062ac:	f001 0101 	and.w	r1, r1, #1
 80062b0:	f1c1 0b02 	rsb	fp, r1, #2
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	d15b      	bne.n	8006370 <__ieee754_pow+0x150>
 80062b8:	4b5b      	ldr	r3, [pc, #364]	; (8006428 <__ieee754_pow+0x208>)
 80062ba:	4598      	cmp	r8, r3
 80062bc:	d124      	bne.n	8006308 <__ieee754_pow+0xe8>
 80062be:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80062c2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80062c6:	ea53 030a 	orrs.w	r3, r3, sl
 80062ca:	f000 8476 	beq.w	8006bba <__ieee754_pow+0x99a>
 80062ce:	4b59      	ldr	r3, [pc, #356]	; (8006434 <__ieee754_pow+0x214>)
 80062d0:	429c      	cmp	r4, r3
 80062d2:	dd2d      	ble.n	8006330 <__ieee754_pow+0x110>
 80062d4:	f1b9 0f00 	cmp.w	r9, #0
 80062d8:	f280 8473 	bge.w	8006bc2 <__ieee754_pow+0x9a2>
 80062dc:	2000      	movs	r0, #0
 80062de:	2100      	movs	r1, #0
 80062e0:	ec41 0b10 	vmov	d0, r0, r1
 80062e4:	b011      	add	sp, #68	; 0x44
 80062e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ea:	2a00      	cmp	r2, #0
 80062ec:	d13e      	bne.n	800636c <__ieee754_pow+0x14c>
 80062ee:	f1c3 0314 	rsb	r3, r3, #20
 80062f2:	fa48 f103 	asr.w	r1, r8, r3
 80062f6:	fa01 f303 	lsl.w	r3, r1, r3
 80062fa:	4543      	cmp	r3, r8
 80062fc:	f040 8469 	bne.w	8006bd2 <__ieee754_pow+0x9b2>
 8006300:	f001 0101 	and.w	r1, r1, #1
 8006304:	f1c1 0b02 	rsb	fp, r1, #2
 8006308:	4b4b      	ldr	r3, [pc, #300]	; (8006438 <__ieee754_pow+0x218>)
 800630a:	4598      	cmp	r8, r3
 800630c:	d118      	bne.n	8006340 <__ieee754_pow+0x120>
 800630e:	f1b9 0f00 	cmp.w	r9, #0
 8006312:	f280 845a 	bge.w	8006bca <__ieee754_pow+0x9aa>
 8006316:	4948      	ldr	r1, [pc, #288]	; (8006438 <__ieee754_pow+0x218>)
 8006318:	4632      	mov	r2, r6
 800631a:	463b      	mov	r3, r7
 800631c:	2000      	movs	r0, #0
 800631e:	f7fa fa41 	bl	80007a4 <__aeabi_ddiv>
 8006322:	e7dd      	b.n	80062e0 <__ieee754_pow+0xc0>
 8006324:	f04f 0b02 	mov.w	fp, #2
 8006328:	e7c4      	b.n	80062b4 <__ieee754_pow+0x94>
 800632a:	f04f 0b00 	mov.w	fp, #0
 800632e:	e7c1      	b.n	80062b4 <__ieee754_pow+0x94>
 8006330:	f1b9 0f00 	cmp.w	r9, #0
 8006334:	dad2      	bge.n	80062dc <__ieee754_pow+0xbc>
 8006336:	e9dd 0300 	ldrd	r0, r3, [sp]
 800633a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800633e:	e7cf      	b.n	80062e0 <__ieee754_pow+0xc0>
 8006340:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006344:	d106      	bne.n	8006354 <__ieee754_pow+0x134>
 8006346:	4632      	mov	r2, r6
 8006348:	463b      	mov	r3, r7
 800634a:	4610      	mov	r0, r2
 800634c:	4619      	mov	r1, r3
 800634e:	f7fa f8ff 	bl	8000550 <__aeabi_dmul>
 8006352:	e7c5      	b.n	80062e0 <__ieee754_pow+0xc0>
 8006354:	4b39      	ldr	r3, [pc, #228]	; (800643c <__ieee754_pow+0x21c>)
 8006356:	4599      	cmp	r9, r3
 8006358:	d10a      	bne.n	8006370 <__ieee754_pow+0x150>
 800635a:	2d00      	cmp	r5, #0
 800635c:	db08      	blt.n	8006370 <__ieee754_pow+0x150>
 800635e:	ec47 6b10 	vmov	d0, r6, r7
 8006362:	b011      	add	sp, #68	; 0x44
 8006364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006368:	f000 bc68 	b.w	8006c3c <__ieee754_sqrt>
 800636c:	f04f 0b00 	mov.w	fp, #0
 8006370:	ec47 6b10 	vmov	d0, r6, r7
 8006374:	f7ff fd80 	bl	8005e78 <fabs>
 8006378:	ec51 0b10 	vmov	r0, r1, d0
 800637c:	f1ba 0f00 	cmp.w	sl, #0
 8006380:	d127      	bne.n	80063d2 <__ieee754_pow+0x1b2>
 8006382:	b124      	cbz	r4, 800638e <__ieee754_pow+0x16e>
 8006384:	4b2c      	ldr	r3, [pc, #176]	; (8006438 <__ieee754_pow+0x218>)
 8006386:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800638a:	429a      	cmp	r2, r3
 800638c:	d121      	bne.n	80063d2 <__ieee754_pow+0x1b2>
 800638e:	f1b9 0f00 	cmp.w	r9, #0
 8006392:	da05      	bge.n	80063a0 <__ieee754_pow+0x180>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	2000      	movs	r0, #0
 800639a:	4927      	ldr	r1, [pc, #156]	; (8006438 <__ieee754_pow+0x218>)
 800639c:	f7fa fa02 	bl	80007a4 <__aeabi_ddiv>
 80063a0:	2d00      	cmp	r5, #0
 80063a2:	da9d      	bge.n	80062e0 <__ieee754_pow+0xc0>
 80063a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80063a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80063ac:	ea54 030b 	orrs.w	r3, r4, fp
 80063b0:	d108      	bne.n	80063c4 <__ieee754_pow+0x1a4>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4610      	mov	r0, r2
 80063b8:	4619      	mov	r1, r3
 80063ba:	f7f9 ff11 	bl	80001e0 <__aeabi_dsub>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	e7ac      	b.n	800631e <__ieee754_pow+0xfe>
 80063c4:	f1bb 0f01 	cmp.w	fp, #1
 80063c8:	d18a      	bne.n	80062e0 <__ieee754_pow+0xc0>
 80063ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063ce:	4619      	mov	r1, r3
 80063d0:	e786      	b.n	80062e0 <__ieee754_pow+0xc0>
 80063d2:	0fed      	lsrs	r5, r5, #31
 80063d4:	1e6b      	subs	r3, r5, #1
 80063d6:	930d      	str	r3, [sp, #52]	; 0x34
 80063d8:	ea5b 0303 	orrs.w	r3, fp, r3
 80063dc:	d102      	bne.n	80063e4 <__ieee754_pow+0x1c4>
 80063de:	4632      	mov	r2, r6
 80063e0:	463b      	mov	r3, r7
 80063e2:	e7e8      	b.n	80063b6 <__ieee754_pow+0x196>
 80063e4:	4b16      	ldr	r3, [pc, #88]	; (8006440 <__ieee754_pow+0x220>)
 80063e6:	4598      	cmp	r8, r3
 80063e8:	f340 80fe 	ble.w	80065e8 <__ieee754_pow+0x3c8>
 80063ec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80063f0:	4598      	cmp	r8, r3
 80063f2:	dd0a      	ble.n	800640a <__ieee754_pow+0x1ea>
 80063f4:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <__ieee754_pow+0x214>)
 80063f6:	429c      	cmp	r4, r3
 80063f8:	dc0d      	bgt.n	8006416 <__ieee754_pow+0x1f6>
 80063fa:	f1b9 0f00 	cmp.w	r9, #0
 80063fe:	f6bf af6d 	bge.w	80062dc <__ieee754_pow+0xbc>
 8006402:	a307      	add	r3, pc, #28	; (adr r3, 8006420 <__ieee754_pow+0x200>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	e79f      	b.n	800634a <__ieee754_pow+0x12a>
 800640a:	4b0e      	ldr	r3, [pc, #56]	; (8006444 <__ieee754_pow+0x224>)
 800640c:	429c      	cmp	r4, r3
 800640e:	ddf4      	ble.n	80063fa <__ieee754_pow+0x1da>
 8006410:	4b09      	ldr	r3, [pc, #36]	; (8006438 <__ieee754_pow+0x218>)
 8006412:	429c      	cmp	r4, r3
 8006414:	dd18      	ble.n	8006448 <__ieee754_pow+0x228>
 8006416:	f1b9 0f00 	cmp.w	r9, #0
 800641a:	dcf2      	bgt.n	8006402 <__ieee754_pow+0x1e2>
 800641c:	e75e      	b.n	80062dc <__ieee754_pow+0xbc>
 800641e:	bf00      	nop
 8006420:	8800759c 	.word	0x8800759c
 8006424:	7e37e43c 	.word	0x7e37e43c
 8006428:	7ff00000 	.word	0x7ff00000
 800642c:	08007058 	.word	0x08007058
 8006430:	433fffff 	.word	0x433fffff
 8006434:	3fefffff 	.word	0x3fefffff
 8006438:	3ff00000 	.word	0x3ff00000
 800643c:	3fe00000 	.word	0x3fe00000
 8006440:	41e00000 	.word	0x41e00000
 8006444:	3feffffe 	.word	0x3feffffe
 8006448:	2200      	movs	r2, #0
 800644a:	4b63      	ldr	r3, [pc, #396]	; (80065d8 <__ieee754_pow+0x3b8>)
 800644c:	f7f9 fec8 	bl	80001e0 <__aeabi_dsub>
 8006450:	a355      	add	r3, pc, #340	; (adr r3, 80065a8 <__ieee754_pow+0x388>)
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	4604      	mov	r4, r0
 8006458:	460d      	mov	r5, r1
 800645a:	f7fa f879 	bl	8000550 <__aeabi_dmul>
 800645e:	a354      	add	r3, pc, #336	; (adr r3, 80065b0 <__ieee754_pow+0x390>)
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	4606      	mov	r6, r0
 8006466:	460f      	mov	r7, r1
 8006468:	4620      	mov	r0, r4
 800646a:	4629      	mov	r1, r5
 800646c:	f7fa f870 	bl	8000550 <__aeabi_dmul>
 8006470:	2200      	movs	r2, #0
 8006472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006476:	4b59      	ldr	r3, [pc, #356]	; (80065dc <__ieee754_pow+0x3bc>)
 8006478:	4620      	mov	r0, r4
 800647a:	4629      	mov	r1, r5
 800647c:	f7fa f868 	bl	8000550 <__aeabi_dmul>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	a14c      	add	r1, pc, #304	; (adr r1, 80065b8 <__ieee754_pow+0x398>)
 8006486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800648a:	f7f9 fea9 	bl	80001e0 <__aeabi_dsub>
 800648e:	4622      	mov	r2, r4
 8006490:	462b      	mov	r3, r5
 8006492:	f7fa f85d 	bl	8000550 <__aeabi_dmul>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	2000      	movs	r0, #0
 800649c:	4950      	ldr	r1, [pc, #320]	; (80065e0 <__ieee754_pow+0x3c0>)
 800649e:	f7f9 fe9f 	bl	80001e0 <__aeabi_dsub>
 80064a2:	4622      	mov	r2, r4
 80064a4:	462b      	mov	r3, r5
 80064a6:	4680      	mov	r8, r0
 80064a8:	4689      	mov	r9, r1
 80064aa:	4620      	mov	r0, r4
 80064ac:	4629      	mov	r1, r5
 80064ae:	f7fa f84f 	bl	8000550 <__aeabi_dmul>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4640      	mov	r0, r8
 80064b8:	4649      	mov	r1, r9
 80064ba:	f7fa f849 	bl	8000550 <__aeabi_dmul>
 80064be:	a340      	add	r3, pc, #256	; (adr r3, 80065c0 <__ieee754_pow+0x3a0>)
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	f7fa f844 	bl	8000550 <__aeabi_dmul>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d0:	f7f9 fe86 	bl	80001e0 <__aeabi_dsub>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4604      	mov	r4, r0
 80064da:	460d      	mov	r5, r1
 80064dc:	4630      	mov	r0, r6
 80064de:	4639      	mov	r1, r7
 80064e0:	f7f9 fe80 	bl	80001e4 <__adddf3>
 80064e4:	2000      	movs	r0, #0
 80064e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064ea:	4632      	mov	r2, r6
 80064ec:	463b      	mov	r3, r7
 80064ee:	f7f9 fe77 	bl	80001e0 <__aeabi_dsub>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7f9 fe71 	bl	80001e0 <__aeabi_dsub>
 80064fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006500:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006504:	4313      	orrs	r3, r2
 8006506:	4606      	mov	r6, r0
 8006508:	460f      	mov	r7, r1
 800650a:	f040 81eb 	bne.w	80068e4 <__ieee754_pow+0x6c4>
 800650e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80065c8 <__ieee754_pow+0x3a8>
 8006512:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006516:	2400      	movs	r4, #0
 8006518:	4622      	mov	r2, r4
 800651a:	462b      	mov	r3, r5
 800651c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006520:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006524:	f7f9 fe5c 	bl	80001e0 <__aeabi_dsub>
 8006528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800652c:	f7fa f810 	bl	8000550 <__aeabi_dmul>
 8006530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006534:	4680      	mov	r8, r0
 8006536:	4689      	mov	r9, r1
 8006538:	4630      	mov	r0, r6
 800653a:	4639      	mov	r1, r7
 800653c:	f7fa f808 	bl	8000550 <__aeabi_dmul>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4640      	mov	r0, r8
 8006546:	4649      	mov	r1, r9
 8006548:	f7f9 fe4c 	bl	80001e4 <__adddf3>
 800654c:	4622      	mov	r2, r4
 800654e:	462b      	mov	r3, r5
 8006550:	4680      	mov	r8, r0
 8006552:	4689      	mov	r9, r1
 8006554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006558:	f7f9 fffa 	bl	8000550 <__aeabi_dmul>
 800655c:	460b      	mov	r3, r1
 800655e:	4604      	mov	r4, r0
 8006560:	460d      	mov	r5, r1
 8006562:	4602      	mov	r2, r0
 8006564:	4649      	mov	r1, r9
 8006566:	4640      	mov	r0, r8
 8006568:	e9cd 4500 	strd	r4, r5, [sp]
 800656c:	f7f9 fe3a 	bl	80001e4 <__adddf3>
 8006570:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <__ieee754_pow+0x3c4>)
 8006572:	4299      	cmp	r1, r3
 8006574:	4606      	mov	r6, r0
 8006576:	460f      	mov	r7, r1
 8006578:	468b      	mov	fp, r1
 800657a:	f340 82f7 	ble.w	8006b6c <__ieee754_pow+0x94c>
 800657e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006582:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006586:	4303      	orrs	r3, r0
 8006588:	f000 81ea 	beq.w	8006960 <__ieee754_pow+0x740>
 800658c:	a310      	add	r3, pc, #64	; (adr r3, 80065d0 <__ieee754_pow+0x3b0>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006596:	f7f9 ffdb 	bl	8000550 <__aeabi_dmul>
 800659a:	a30d      	add	r3, pc, #52	; (adr r3, 80065d0 <__ieee754_pow+0x3b0>)
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	e6d5      	b.n	800634e <__ieee754_pow+0x12e>
 80065a2:	bf00      	nop
 80065a4:	f3af 8000 	nop.w
 80065a8:	60000000 	.word	0x60000000
 80065ac:	3ff71547 	.word	0x3ff71547
 80065b0:	f85ddf44 	.word	0xf85ddf44
 80065b4:	3e54ae0b 	.word	0x3e54ae0b
 80065b8:	55555555 	.word	0x55555555
 80065bc:	3fd55555 	.word	0x3fd55555
 80065c0:	652b82fe 	.word	0x652b82fe
 80065c4:	3ff71547 	.word	0x3ff71547
 80065c8:	00000000 	.word	0x00000000
 80065cc:	bff00000 	.word	0xbff00000
 80065d0:	8800759c 	.word	0x8800759c
 80065d4:	7e37e43c 	.word	0x7e37e43c
 80065d8:	3ff00000 	.word	0x3ff00000
 80065dc:	3fd00000 	.word	0x3fd00000
 80065e0:	3fe00000 	.word	0x3fe00000
 80065e4:	408fffff 	.word	0x408fffff
 80065e8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	da05      	bge.n	80065fe <__ieee754_pow+0x3de>
 80065f2:	4bd3      	ldr	r3, [pc, #844]	; (8006940 <__ieee754_pow+0x720>)
 80065f4:	f7f9 ffac 	bl	8000550 <__aeabi_dmul>
 80065f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80065fc:	460c      	mov	r4, r1
 80065fe:	1523      	asrs	r3, r4, #20
 8006600:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006604:	4413      	add	r3, r2
 8006606:	9309      	str	r3, [sp, #36]	; 0x24
 8006608:	4bce      	ldr	r3, [pc, #824]	; (8006944 <__ieee754_pow+0x724>)
 800660a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800660e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006612:	429c      	cmp	r4, r3
 8006614:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006618:	dd08      	ble.n	800662c <__ieee754_pow+0x40c>
 800661a:	4bcb      	ldr	r3, [pc, #812]	; (8006948 <__ieee754_pow+0x728>)
 800661c:	429c      	cmp	r4, r3
 800661e:	f340 815e 	ble.w	80068de <__ieee754_pow+0x6be>
 8006622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006624:	3301      	adds	r3, #1
 8006626:	9309      	str	r3, [sp, #36]	; 0x24
 8006628:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800662c:	f04f 0a00 	mov.w	sl, #0
 8006630:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8006634:	930c      	str	r3, [sp, #48]	; 0x30
 8006636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006638:	4bc4      	ldr	r3, [pc, #784]	; (800694c <__ieee754_pow+0x72c>)
 800663a:	4413      	add	r3, r2
 800663c:	ed93 7b00 	vldr	d7, [r3]
 8006640:	4629      	mov	r1, r5
 8006642:	ec53 2b17 	vmov	r2, r3, d7
 8006646:	ed8d 7b06 	vstr	d7, [sp, #24]
 800664a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800664e:	f7f9 fdc7 	bl	80001e0 <__aeabi_dsub>
 8006652:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006656:	4606      	mov	r6, r0
 8006658:	460f      	mov	r7, r1
 800665a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800665e:	f7f9 fdc1 	bl	80001e4 <__adddf3>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	2000      	movs	r0, #0
 8006668:	49b9      	ldr	r1, [pc, #740]	; (8006950 <__ieee754_pow+0x730>)
 800666a:	f7fa f89b 	bl	80007a4 <__aeabi_ddiv>
 800666e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4630      	mov	r0, r6
 8006678:	4639      	mov	r1, r7
 800667a:	f7f9 ff69 	bl	8000550 <__aeabi_dmul>
 800667e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006682:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006686:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800668a:	2300      	movs	r3, #0
 800668c:	9302      	str	r3, [sp, #8]
 800668e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006692:	106d      	asrs	r5, r5, #1
 8006694:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006698:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800669c:	2200      	movs	r2, #0
 800669e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80066a2:	4640      	mov	r0, r8
 80066a4:	4649      	mov	r1, r9
 80066a6:	4614      	mov	r4, r2
 80066a8:	461d      	mov	r5, r3
 80066aa:	f7f9 ff51 	bl	8000550 <__aeabi_dmul>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4630      	mov	r0, r6
 80066b4:	4639      	mov	r1, r7
 80066b6:	f7f9 fd93 	bl	80001e0 <__aeabi_dsub>
 80066ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066be:	4606      	mov	r6, r0
 80066c0:	460f      	mov	r7, r1
 80066c2:	4620      	mov	r0, r4
 80066c4:	4629      	mov	r1, r5
 80066c6:	f7f9 fd8b 	bl	80001e0 <__aeabi_dsub>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066d2:	f7f9 fd85 	bl	80001e0 <__aeabi_dsub>
 80066d6:	4642      	mov	r2, r8
 80066d8:	464b      	mov	r3, r9
 80066da:	f7f9 ff39 	bl	8000550 <__aeabi_dmul>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7f9 fd7b 	bl	80001e0 <__aeabi_dsub>
 80066ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80066ee:	f7f9 ff2f 	bl	8000550 <__aeabi_dmul>
 80066f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80066fa:	4610      	mov	r0, r2
 80066fc:	4619      	mov	r1, r3
 80066fe:	f7f9 ff27 	bl	8000550 <__aeabi_dmul>
 8006702:	a37b      	add	r3, pc, #492	; (adr r3, 80068f0 <__ieee754_pow+0x6d0>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	4604      	mov	r4, r0
 800670a:	460d      	mov	r5, r1
 800670c:	f7f9 ff20 	bl	8000550 <__aeabi_dmul>
 8006710:	a379      	add	r3, pc, #484	; (adr r3, 80068f8 <__ieee754_pow+0x6d8>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7f9 fd65 	bl	80001e4 <__adddf3>
 800671a:	4622      	mov	r2, r4
 800671c:	462b      	mov	r3, r5
 800671e:	f7f9 ff17 	bl	8000550 <__aeabi_dmul>
 8006722:	a377      	add	r3, pc, #476	; (adr r3, 8006900 <__ieee754_pow+0x6e0>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f7f9 fd5c 	bl	80001e4 <__adddf3>
 800672c:	4622      	mov	r2, r4
 800672e:	462b      	mov	r3, r5
 8006730:	f7f9 ff0e 	bl	8000550 <__aeabi_dmul>
 8006734:	a374      	add	r3, pc, #464	; (adr r3, 8006908 <__ieee754_pow+0x6e8>)
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f7f9 fd53 	bl	80001e4 <__adddf3>
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	f7f9 ff05 	bl	8000550 <__aeabi_dmul>
 8006746:	a372      	add	r3, pc, #456	; (adr r3, 8006910 <__ieee754_pow+0x6f0>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fd4a 	bl	80001e4 <__adddf3>
 8006750:	4622      	mov	r2, r4
 8006752:	462b      	mov	r3, r5
 8006754:	f7f9 fefc 	bl	8000550 <__aeabi_dmul>
 8006758:	a36f      	add	r3, pc, #444	; (adr r3, 8006918 <__ieee754_pow+0x6f8>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f7f9 fd41 	bl	80001e4 <__adddf3>
 8006762:	4622      	mov	r2, r4
 8006764:	4606      	mov	r6, r0
 8006766:	460f      	mov	r7, r1
 8006768:	462b      	mov	r3, r5
 800676a:	4620      	mov	r0, r4
 800676c:	4629      	mov	r1, r5
 800676e:	f7f9 feef 	bl	8000550 <__aeabi_dmul>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4630      	mov	r0, r6
 8006778:	4639      	mov	r1, r7
 800677a:	f7f9 fee9 	bl	8000550 <__aeabi_dmul>
 800677e:	4642      	mov	r2, r8
 8006780:	4604      	mov	r4, r0
 8006782:	460d      	mov	r5, r1
 8006784:	464b      	mov	r3, r9
 8006786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800678a:	f7f9 fd2b 	bl	80001e4 <__adddf3>
 800678e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006792:	f7f9 fedd 	bl	8000550 <__aeabi_dmul>
 8006796:	4622      	mov	r2, r4
 8006798:	462b      	mov	r3, r5
 800679a:	f7f9 fd23 	bl	80001e4 <__adddf3>
 800679e:	4642      	mov	r2, r8
 80067a0:	4606      	mov	r6, r0
 80067a2:	460f      	mov	r7, r1
 80067a4:	464b      	mov	r3, r9
 80067a6:	4640      	mov	r0, r8
 80067a8:	4649      	mov	r1, r9
 80067aa:	f7f9 fed1 	bl	8000550 <__aeabi_dmul>
 80067ae:	2200      	movs	r2, #0
 80067b0:	4b68      	ldr	r3, [pc, #416]	; (8006954 <__ieee754_pow+0x734>)
 80067b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80067b6:	f7f9 fd15 	bl	80001e4 <__adddf3>
 80067ba:	4632      	mov	r2, r6
 80067bc:	463b      	mov	r3, r7
 80067be:	f7f9 fd11 	bl	80001e4 <__adddf3>
 80067c2:	9802      	ldr	r0, [sp, #8]
 80067c4:	460d      	mov	r5, r1
 80067c6:	4604      	mov	r4, r0
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4640      	mov	r0, r8
 80067ce:	4649      	mov	r1, r9
 80067d0:	f7f9 febe 	bl	8000550 <__aeabi_dmul>
 80067d4:	2200      	movs	r2, #0
 80067d6:	4680      	mov	r8, r0
 80067d8:	4689      	mov	r9, r1
 80067da:	4b5e      	ldr	r3, [pc, #376]	; (8006954 <__ieee754_pow+0x734>)
 80067dc:	4620      	mov	r0, r4
 80067de:	4629      	mov	r1, r5
 80067e0:	f7f9 fcfe 	bl	80001e0 <__aeabi_dsub>
 80067e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80067e8:	f7f9 fcfa 	bl	80001e0 <__aeabi_dsub>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7f9 fcf4 	bl	80001e0 <__aeabi_dsub>
 80067f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067fc:	f7f9 fea8 	bl	8000550 <__aeabi_dmul>
 8006800:	4622      	mov	r2, r4
 8006802:	4606      	mov	r6, r0
 8006804:	460f      	mov	r7, r1
 8006806:	462b      	mov	r3, r5
 8006808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800680c:	f7f9 fea0 	bl	8000550 <__aeabi_dmul>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4630      	mov	r0, r6
 8006816:	4639      	mov	r1, r7
 8006818:	f7f9 fce4 	bl	80001e4 <__adddf3>
 800681c:	4606      	mov	r6, r0
 800681e:	460f      	mov	r7, r1
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4640      	mov	r0, r8
 8006826:	4649      	mov	r1, r9
 8006828:	f7f9 fcdc 	bl	80001e4 <__adddf3>
 800682c:	9802      	ldr	r0, [sp, #8]
 800682e:	a33c      	add	r3, pc, #240	; (adr r3, 8006920 <__ieee754_pow+0x700>)
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	4604      	mov	r4, r0
 8006836:	460d      	mov	r5, r1
 8006838:	f7f9 fe8a 	bl	8000550 <__aeabi_dmul>
 800683c:	4642      	mov	r2, r8
 800683e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006842:	464b      	mov	r3, r9
 8006844:	4620      	mov	r0, r4
 8006846:	4629      	mov	r1, r5
 8006848:	f7f9 fcca 	bl	80001e0 <__aeabi_dsub>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4630      	mov	r0, r6
 8006852:	4639      	mov	r1, r7
 8006854:	f7f9 fcc4 	bl	80001e0 <__aeabi_dsub>
 8006858:	a333      	add	r3, pc, #204	; (adr r3, 8006928 <__ieee754_pow+0x708>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f7f9 fe77 	bl	8000550 <__aeabi_dmul>
 8006862:	a333      	add	r3, pc, #204	; (adr r3, 8006930 <__ieee754_pow+0x710>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	4606      	mov	r6, r0
 800686a:	460f      	mov	r7, r1
 800686c:	4620      	mov	r0, r4
 800686e:	4629      	mov	r1, r5
 8006870:	f7f9 fe6e 	bl	8000550 <__aeabi_dmul>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	f7f9 fcb2 	bl	80001e4 <__adddf3>
 8006880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006882:	4b35      	ldr	r3, [pc, #212]	; (8006958 <__ieee754_pow+0x738>)
 8006884:	4413      	add	r3, r2
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 fcab 	bl	80001e4 <__adddf3>
 800688e:	4604      	mov	r4, r0
 8006890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006892:	460d      	mov	r5, r1
 8006894:	f7f9 fdf2 	bl	800047c <__aeabi_i2d>
 8006898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800689a:	4b30      	ldr	r3, [pc, #192]	; (800695c <__ieee754_pow+0x73c>)
 800689c:	4413      	add	r3, r2
 800689e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068a2:	4606      	mov	r6, r0
 80068a4:	460f      	mov	r7, r1
 80068a6:	4622      	mov	r2, r4
 80068a8:	462b      	mov	r3, r5
 80068aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068ae:	f7f9 fc99 	bl	80001e4 <__adddf3>
 80068b2:	4642      	mov	r2, r8
 80068b4:	464b      	mov	r3, r9
 80068b6:	f7f9 fc95 	bl	80001e4 <__adddf3>
 80068ba:	4632      	mov	r2, r6
 80068bc:	463b      	mov	r3, r7
 80068be:	f7f9 fc91 	bl	80001e4 <__adddf3>
 80068c2:	9802      	ldr	r0, [sp, #8]
 80068c4:	4632      	mov	r2, r6
 80068c6:	463b      	mov	r3, r7
 80068c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068cc:	f7f9 fc88 	bl	80001e0 <__aeabi_dsub>
 80068d0:	4642      	mov	r2, r8
 80068d2:	464b      	mov	r3, r9
 80068d4:	f7f9 fc84 	bl	80001e0 <__aeabi_dsub>
 80068d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068dc:	e607      	b.n	80064ee <__ieee754_pow+0x2ce>
 80068de:	f04f 0a01 	mov.w	sl, #1
 80068e2:	e6a5      	b.n	8006630 <__ieee754_pow+0x410>
 80068e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006938 <__ieee754_pow+0x718>
 80068e8:	e613      	b.n	8006512 <__ieee754_pow+0x2f2>
 80068ea:	bf00      	nop
 80068ec:	f3af 8000 	nop.w
 80068f0:	4a454eef 	.word	0x4a454eef
 80068f4:	3fca7e28 	.word	0x3fca7e28
 80068f8:	93c9db65 	.word	0x93c9db65
 80068fc:	3fcd864a 	.word	0x3fcd864a
 8006900:	a91d4101 	.word	0xa91d4101
 8006904:	3fd17460 	.word	0x3fd17460
 8006908:	518f264d 	.word	0x518f264d
 800690c:	3fd55555 	.word	0x3fd55555
 8006910:	db6fabff 	.word	0xdb6fabff
 8006914:	3fdb6db6 	.word	0x3fdb6db6
 8006918:	33333303 	.word	0x33333303
 800691c:	3fe33333 	.word	0x3fe33333
 8006920:	e0000000 	.word	0xe0000000
 8006924:	3feec709 	.word	0x3feec709
 8006928:	dc3a03fd 	.word	0xdc3a03fd
 800692c:	3feec709 	.word	0x3feec709
 8006930:	145b01f5 	.word	0x145b01f5
 8006934:	be3e2fe0 	.word	0xbe3e2fe0
 8006938:	00000000 	.word	0x00000000
 800693c:	3ff00000 	.word	0x3ff00000
 8006940:	43400000 	.word	0x43400000
 8006944:	0003988e 	.word	0x0003988e
 8006948:	000bb679 	.word	0x000bb679
 800694c:	08007060 	.word	0x08007060
 8006950:	3ff00000 	.word	0x3ff00000
 8006954:	40080000 	.word	0x40080000
 8006958:	08007080 	.word	0x08007080
 800695c:	08007070 	.word	0x08007070
 8006960:	a3b4      	add	r3, pc, #720	; (adr r3, 8006c34 <__ieee754_pow+0xa14>)
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	4640      	mov	r0, r8
 8006968:	4649      	mov	r1, r9
 800696a:	f7f9 fc3b 	bl	80001e4 <__adddf3>
 800696e:	4622      	mov	r2, r4
 8006970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006974:	462b      	mov	r3, r5
 8006976:	4630      	mov	r0, r6
 8006978:	4639      	mov	r1, r7
 800697a:	f7f9 fc31 	bl	80001e0 <__aeabi_dsub>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006986:	f7fa f873 	bl	8000a70 <__aeabi_dcmpgt>
 800698a:	2800      	cmp	r0, #0
 800698c:	f47f adfe 	bne.w	800658c <__ieee754_pow+0x36c>
 8006990:	4aa3      	ldr	r2, [pc, #652]	; (8006c20 <__ieee754_pow+0xa00>)
 8006992:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006996:	4293      	cmp	r3, r2
 8006998:	f340 810a 	ble.w	8006bb0 <__ieee754_pow+0x990>
 800699c:	151b      	asrs	r3, r3, #20
 800699e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80069a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80069a6:	fa4a f303 	asr.w	r3, sl, r3
 80069aa:	445b      	add	r3, fp
 80069ac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80069b0:	4e9c      	ldr	r6, [pc, #624]	; (8006c24 <__ieee754_pow+0xa04>)
 80069b2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80069b6:	4116      	asrs	r6, r2
 80069b8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80069bc:	2000      	movs	r0, #0
 80069be:	ea23 0106 	bic.w	r1, r3, r6
 80069c2:	f1c2 0214 	rsb	r2, r2, #20
 80069c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80069ca:	fa4a fa02 	asr.w	sl, sl, r2
 80069ce:	f1bb 0f00 	cmp.w	fp, #0
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4620      	mov	r0, r4
 80069d8:	4629      	mov	r1, r5
 80069da:	bfb8      	it	lt
 80069dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80069e0:	f7f9 fbfe 	bl	80001e0 <__aeabi_dsub>
 80069e4:	e9cd 0100 	strd	r0, r1, [sp]
 80069e8:	4642      	mov	r2, r8
 80069ea:	464b      	mov	r3, r9
 80069ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069f0:	f7f9 fbf8 	bl	80001e4 <__adddf3>
 80069f4:	2000      	movs	r0, #0
 80069f6:	a378      	add	r3, pc, #480	; (adr r3, 8006bd8 <__ieee754_pow+0x9b8>)
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	4604      	mov	r4, r0
 80069fe:	460d      	mov	r5, r1
 8006a00:	f7f9 fda6 	bl	8000550 <__aeabi_dmul>
 8006a04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a08:	4606      	mov	r6, r0
 8006a0a:	460f      	mov	r7, r1
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	4629      	mov	r1, r5
 8006a10:	f7f9 fbe6 	bl	80001e0 <__aeabi_dsub>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4640      	mov	r0, r8
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f7f9 fbe0 	bl	80001e0 <__aeabi_dsub>
 8006a20:	a36f      	add	r3, pc, #444	; (adr r3, 8006be0 <__ieee754_pow+0x9c0>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f7f9 fd93 	bl	8000550 <__aeabi_dmul>
 8006a2a:	a36f      	add	r3, pc, #444	; (adr r3, 8006be8 <__ieee754_pow+0x9c8>)
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	4680      	mov	r8, r0
 8006a32:	4689      	mov	r9, r1
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7f9 fd8a 	bl	8000550 <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4640      	mov	r0, r8
 8006a42:	4649      	mov	r1, r9
 8006a44:	f7f9 fbce 	bl	80001e4 <__adddf3>
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4630      	mov	r0, r6
 8006a52:	4639      	mov	r1, r7
 8006a54:	f7f9 fbc6 	bl	80001e4 <__adddf3>
 8006a58:	4632      	mov	r2, r6
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	4689      	mov	r9, r1
 8006a60:	f7f9 fbbe 	bl	80001e0 <__aeabi_dsub>
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	4620      	mov	r0, r4
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	f7f9 fbb8 	bl	80001e0 <__aeabi_dsub>
 8006a70:	4642      	mov	r2, r8
 8006a72:	4606      	mov	r6, r0
 8006a74:	460f      	mov	r7, r1
 8006a76:	464b      	mov	r3, r9
 8006a78:	4640      	mov	r0, r8
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	f7f9 fd68 	bl	8000550 <__aeabi_dmul>
 8006a80:	a35b      	add	r3, pc, #364	; (adr r3, 8006bf0 <__ieee754_pow+0x9d0>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	f7f9 fd61 	bl	8000550 <__aeabi_dmul>
 8006a8e:	a35a      	add	r3, pc, #360	; (adr r3, 8006bf8 <__ieee754_pow+0x9d8>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7f9 fba4 	bl	80001e0 <__aeabi_dsub>
 8006a98:	4622      	mov	r2, r4
 8006a9a:	462b      	mov	r3, r5
 8006a9c:	f7f9 fd58 	bl	8000550 <__aeabi_dmul>
 8006aa0:	a357      	add	r3, pc, #348	; (adr r3, 8006c00 <__ieee754_pow+0x9e0>)
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f7f9 fb9d 	bl	80001e4 <__adddf3>
 8006aaa:	4622      	mov	r2, r4
 8006aac:	462b      	mov	r3, r5
 8006aae:	f7f9 fd4f 	bl	8000550 <__aeabi_dmul>
 8006ab2:	a355      	add	r3, pc, #340	; (adr r3, 8006c08 <__ieee754_pow+0x9e8>)
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f7f9 fb92 	bl	80001e0 <__aeabi_dsub>
 8006abc:	4622      	mov	r2, r4
 8006abe:	462b      	mov	r3, r5
 8006ac0:	f7f9 fd46 	bl	8000550 <__aeabi_dmul>
 8006ac4:	a352      	add	r3, pc, #328	; (adr r3, 8006c10 <__ieee754_pow+0x9f0>)
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f7f9 fb8b 	bl	80001e4 <__adddf3>
 8006ace:	4622      	mov	r2, r4
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	f7f9 fd3d 	bl	8000550 <__aeabi_dmul>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4640      	mov	r0, r8
 8006adc:	4649      	mov	r1, r9
 8006ade:	f7f9 fb7f 	bl	80001e0 <__aeabi_dsub>
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	460d      	mov	r5, r1
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4640      	mov	r0, r8
 8006aec:	4649      	mov	r1, r9
 8006aee:	f7f9 fd2f 	bl	8000550 <__aeabi_dmul>
 8006af2:	2200      	movs	r2, #0
 8006af4:	e9cd 0100 	strd	r0, r1, [sp]
 8006af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7f9 fb6e 	bl	80001e0 <__aeabi_dsub>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b0c:	f7f9 fe4a 	bl	80007a4 <__aeabi_ddiv>
 8006b10:	4632      	mov	r2, r6
 8006b12:	4604      	mov	r4, r0
 8006b14:	460d      	mov	r5, r1
 8006b16:	463b      	mov	r3, r7
 8006b18:	4640      	mov	r0, r8
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	f7f9 fd18 	bl	8000550 <__aeabi_dmul>
 8006b20:	4632      	mov	r2, r6
 8006b22:	463b      	mov	r3, r7
 8006b24:	f7f9 fb5e 	bl	80001e4 <__adddf3>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	4629      	mov	r1, r5
 8006b30:	f7f9 fb56 	bl	80001e0 <__aeabi_dsub>
 8006b34:	4642      	mov	r2, r8
 8006b36:	464b      	mov	r3, r9
 8006b38:	f7f9 fb52 	bl	80001e0 <__aeabi_dsub>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	2000      	movs	r0, #0
 8006b42:	4939      	ldr	r1, [pc, #228]	; (8006c28 <__ieee754_pow+0xa08>)
 8006b44:	f7f9 fb4c 	bl	80001e0 <__aeabi_dsub>
 8006b48:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006b4c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	da2f      	bge.n	8006bb6 <__ieee754_pow+0x996>
 8006b56:	4650      	mov	r0, sl
 8006b58:	ec43 2b10 	vmov	d0, r2, r3
 8006b5c:	f000 f9b4 	bl	8006ec8 <scalbn>
 8006b60:	ec51 0b10 	vmov	r0, r1, d0
 8006b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b68:	f7ff bbf1 	b.w	800634e <__ieee754_pow+0x12e>
 8006b6c:	4b2f      	ldr	r3, [pc, #188]	; (8006c2c <__ieee754_pow+0xa0c>)
 8006b6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006b72:	429e      	cmp	r6, r3
 8006b74:	f77f af0c 	ble.w	8006990 <__ieee754_pow+0x770>
 8006b78:	4b2d      	ldr	r3, [pc, #180]	; (8006c30 <__ieee754_pow+0xa10>)
 8006b7a:	440b      	add	r3, r1
 8006b7c:	4303      	orrs	r3, r0
 8006b7e:	d00b      	beq.n	8006b98 <__ieee754_pow+0x978>
 8006b80:	a325      	add	r3, pc, #148	; (adr r3, 8006c18 <__ieee754_pow+0x9f8>)
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b8a:	f7f9 fce1 	bl	8000550 <__aeabi_dmul>
 8006b8e:	a322      	add	r3, pc, #136	; (adr r3, 8006c18 <__ieee754_pow+0x9f8>)
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f7ff bbdb 	b.w	800634e <__ieee754_pow+0x12e>
 8006b98:	4622      	mov	r2, r4
 8006b9a:	462b      	mov	r3, r5
 8006b9c:	f7f9 fb20 	bl	80001e0 <__aeabi_dsub>
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	f7f9 ff5a 	bl	8000a5c <__aeabi_dcmpge>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	f43f aef1 	beq.w	8006990 <__ieee754_pow+0x770>
 8006bae:	e7e7      	b.n	8006b80 <__ieee754_pow+0x960>
 8006bb0:	f04f 0a00 	mov.w	sl, #0
 8006bb4:	e718      	b.n	80069e8 <__ieee754_pow+0x7c8>
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	e7d4      	b.n	8006b64 <__ieee754_pow+0x944>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	491a      	ldr	r1, [pc, #104]	; (8006c28 <__ieee754_pow+0xa08>)
 8006bbe:	f7ff bb8f 	b.w	80062e0 <__ieee754_pow+0xc0>
 8006bc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bc6:	f7ff bb8b 	b.w	80062e0 <__ieee754_pow+0xc0>
 8006bca:	4630      	mov	r0, r6
 8006bcc:	4639      	mov	r1, r7
 8006bce:	f7ff bb87 	b.w	80062e0 <__ieee754_pow+0xc0>
 8006bd2:	4693      	mov	fp, r2
 8006bd4:	f7ff bb98 	b.w	8006308 <__ieee754_pow+0xe8>
 8006bd8:	00000000 	.word	0x00000000
 8006bdc:	3fe62e43 	.word	0x3fe62e43
 8006be0:	fefa39ef 	.word	0xfefa39ef
 8006be4:	3fe62e42 	.word	0x3fe62e42
 8006be8:	0ca86c39 	.word	0x0ca86c39
 8006bec:	be205c61 	.word	0xbe205c61
 8006bf0:	72bea4d0 	.word	0x72bea4d0
 8006bf4:	3e663769 	.word	0x3e663769
 8006bf8:	c5d26bf1 	.word	0xc5d26bf1
 8006bfc:	3ebbbd41 	.word	0x3ebbbd41
 8006c00:	af25de2c 	.word	0xaf25de2c
 8006c04:	3f11566a 	.word	0x3f11566a
 8006c08:	16bebd93 	.word	0x16bebd93
 8006c0c:	3f66c16c 	.word	0x3f66c16c
 8006c10:	5555553e 	.word	0x5555553e
 8006c14:	3fc55555 	.word	0x3fc55555
 8006c18:	c2f8f359 	.word	0xc2f8f359
 8006c1c:	01a56e1f 	.word	0x01a56e1f
 8006c20:	3fe00000 	.word	0x3fe00000
 8006c24:	000fffff 	.word	0x000fffff
 8006c28:	3ff00000 	.word	0x3ff00000
 8006c2c:	4090cbff 	.word	0x4090cbff
 8006c30:	3f6f3400 	.word	0x3f6f3400
 8006c34:	652b82fe 	.word	0x652b82fe
 8006c38:	3c971547 	.word	0x3c971547

08006c3c <__ieee754_sqrt>:
 8006c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c40:	4955      	ldr	r1, [pc, #340]	; (8006d98 <__ieee754_sqrt+0x15c>)
 8006c42:	ec55 4b10 	vmov	r4, r5, d0
 8006c46:	43a9      	bics	r1, r5
 8006c48:	462b      	mov	r3, r5
 8006c4a:	462a      	mov	r2, r5
 8006c4c:	d112      	bne.n	8006c74 <__ieee754_sqrt+0x38>
 8006c4e:	ee10 2a10 	vmov	r2, s0
 8006c52:	ee10 0a10 	vmov	r0, s0
 8006c56:	4629      	mov	r1, r5
 8006c58:	f7f9 fc7a 	bl	8000550 <__aeabi_dmul>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4620      	mov	r0, r4
 8006c62:	4629      	mov	r1, r5
 8006c64:	f7f9 fabe 	bl	80001e4 <__adddf3>
 8006c68:	4604      	mov	r4, r0
 8006c6a:	460d      	mov	r5, r1
 8006c6c:	ec45 4b10 	vmov	d0, r4, r5
 8006c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c74:	2d00      	cmp	r5, #0
 8006c76:	ee10 0a10 	vmov	r0, s0
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	dc0f      	bgt.n	8006c9e <__ieee754_sqrt+0x62>
 8006c7e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006c82:	4330      	orrs	r0, r6
 8006c84:	d0f2      	beq.n	8006c6c <__ieee754_sqrt+0x30>
 8006c86:	b155      	cbz	r5, 8006c9e <__ieee754_sqrt+0x62>
 8006c88:	ee10 2a10 	vmov	r2, s0
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	4629      	mov	r1, r5
 8006c90:	f7f9 faa6 	bl	80001e0 <__aeabi_dsub>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	f7f9 fd84 	bl	80007a4 <__aeabi_ddiv>
 8006c9c:	e7e4      	b.n	8006c68 <__ieee754_sqrt+0x2c>
 8006c9e:	151b      	asrs	r3, r3, #20
 8006ca0:	d073      	beq.n	8006d8a <__ieee754_sqrt+0x14e>
 8006ca2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006ca6:	07dd      	lsls	r5, r3, #31
 8006ca8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006cac:	bf48      	it	mi
 8006cae:	0fc8      	lsrmi	r0, r1, #31
 8006cb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006cb4:	bf44      	itt	mi
 8006cb6:	0049      	lslmi	r1, r1, #1
 8006cb8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006cbc:	2500      	movs	r5, #0
 8006cbe:	1058      	asrs	r0, r3, #1
 8006cc0:	0fcb      	lsrs	r3, r1, #31
 8006cc2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006cc6:	0049      	lsls	r1, r1, #1
 8006cc8:	2316      	movs	r3, #22
 8006cca:	462c      	mov	r4, r5
 8006ccc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006cd0:	19a7      	adds	r7, r4, r6
 8006cd2:	4297      	cmp	r7, r2
 8006cd4:	bfde      	ittt	le
 8006cd6:	19bc      	addle	r4, r7, r6
 8006cd8:	1bd2      	suble	r2, r2, r7
 8006cda:	19ad      	addle	r5, r5, r6
 8006cdc:	0fcf      	lsrs	r7, r1, #31
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006ce4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006ce8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006cec:	d1f0      	bne.n	8006cd0 <__ieee754_sqrt+0x94>
 8006cee:	f04f 0c20 	mov.w	ip, #32
 8006cf2:	469e      	mov	lr, r3
 8006cf4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006cf8:	42a2      	cmp	r2, r4
 8006cfa:	eb06 070e 	add.w	r7, r6, lr
 8006cfe:	dc02      	bgt.n	8006d06 <__ieee754_sqrt+0xca>
 8006d00:	d112      	bne.n	8006d28 <__ieee754_sqrt+0xec>
 8006d02:	428f      	cmp	r7, r1
 8006d04:	d810      	bhi.n	8006d28 <__ieee754_sqrt+0xec>
 8006d06:	2f00      	cmp	r7, #0
 8006d08:	eb07 0e06 	add.w	lr, r7, r6
 8006d0c:	da42      	bge.n	8006d94 <__ieee754_sqrt+0x158>
 8006d0e:	f1be 0f00 	cmp.w	lr, #0
 8006d12:	db3f      	blt.n	8006d94 <__ieee754_sqrt+0x158>
 8006d14:	f104 0801 	add.w	r8, r4, #1
 8006d18:	1b12      	subs	r2, r2, r4
 8006d1a:	428f      	cmp	r7, r1
 8006d1c:	bf88      	it	hi
 8006d1e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006d22:	1bc9      	subs	r1, r1, r7
 8006d24:	4433      	add	r3, r6
 8006d26:	4644      	mov	r4, r8
 8006d28:	0052      	lsls	r2, r2, #1
 8006d2a:	f1bc 0c01 	subs.w	ip, ip, #1
 8006d2e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006d32:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d36:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006d3a:	d1dd      	bne.n	8006cf8 <__ieee754_sqrt+0xbc>
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	d006      	beq.n	8006d4e <__ieee754_sqrt+0x112>
 8006d40:	1c5c      	adds	r4, r3, #1
 8006d42:	bf13      	iteet	ne
 8006d44:	3301      	addne	r3, #1
 8006d46:	3501      	addeq	r5, #1
 8006d48:	4663      	moveq	r3, ip
 8006d4a:	f023 0301 	bicne.w	r3, r3, #1
 8006d4e:	106a      	asrs	r2, r5, #1
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	07e9      	lsls	r1, r5, #31
 8006d54:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006d58:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006d5c:	bf48      	it	mi
 8006d5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006d62:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006d66:	461c      	mov	r4, r3
 8006d68:	e780      	b.n	8006c6c <__ieee754_sqrt+0x30>
 8006d6a:	0aca      	lsrs	r2, r1, #11
 8006d6c:	3815      	subs	r0, #21
 8006d6e:	0549      	lsls	r1, r1, #21
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d0fa      	beq.n	8006d6a <__ieee754_sqrt+0x12e>
 8006d74:	02d6      	lsls	r6, r2, #11
 8006d76:	d50a      	bpl.n	8006d8e <__ieee754_sqrt+0x152>
 8006d78:	f1c3 0420 	rsb	r4, r3, #32
 8006d7c:	fa21 f404 	lsr.w	r4, r1, r4
 8006d80:	1e5d      	subs	r5, r3, #1
 8006d82:	4099      	lsls	r1, r3
 8006d84:	4322      	orrs	r2, r4
 8006d86:	1b43      	subs	r3, r0, r5
 8006d88:	e78b      	b.n	8006ca2 <__ieee754_sqrt+0x66>
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	e7f0      	b.n	8006d70 <__ieee754_sqrt+0x134>
 8006d8e:	0052      	lsls	r2, r2, #1
 8006d90:	3301      	adds	r3, #1
 8006d92:	e7ef      	b.n	8006d74 <__ieee754_sqrt+0x138>
 8006d94:	46a0      	mov	r8, r4
 8006d96:	e7bf      	b.n	8006d18 <__ieee754_sqrt+0xdc>
 8006d98:	7ff00000 	.word	0x7ff00000

08006d9c <finite>:
 8006d9c:	ee10 3a90 	vmov	r3, s1
 8006da0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8006da4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006da8:	0fc0      	lsrs	r0, r0, #31
 8006daa:	4770      	bx	lr

08006dac <matherr>:
 8006dac:	2000      	movs	r0, #0
 8006dae:	4770      	bx	lr

08006db0 <nan>:
 8006db0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006db8 <nan+0x8>
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	00000000 	.word	0x00000000
 8006dbc:	7ff80000 	.word	0x7ff80000

08006dc0 <rint>:
 8006dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dc2:	ec51 0b10 	vmov	r0, r1, d0
 8006dc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006dca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006dce:	2e13      	cmp	r6, #19
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	ee10 4a10 	vmov	r4, s0
 8006dd6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006dda:	dc56      	bgt.n	8006e8a <rint+0xca>
 8006ddc:	2e00      	cmp	r6, #0
 8006dde:	da2b      	bge.n	8006e38 <rint+0x78>
 8006de0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006de4:	4302      	orrs	r2, r0
 8006de6:	d023      	beq.n	8006e30 <rint+0x70>
 8006de8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006dec:	4302      	orrs	r2, r0
 8006dee:	4254      	negs	r4, r2
 8006df0:	4314      	orrs	r4, r2
 8006df2:	0c4b      	lsrs	r3, r1, #17
 8006df4:	0b24      	lsrs	r4, r4, #12
 8006df6:	045b      	lsls	r3, r3, #17
 8006df8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006dfc:	ea44 0103 	orr.w	r1, r4, r3
 8006e00:	460b      	mov	r3, r1
 8006e02:	492f      	ldr	r1, [pc, #188]	; (8006ec0 <rint+0x100>)
 8006e04:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006e08:	e9d1 6700 	ldrd	r6, r7, [r1]
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	4639      	mov	r1, r7
 8006e10:	4630      	mov	r0, r6
 8006e12:	f7f9 f9e7 	bl	80001e4 <__adddf3>
 8006e16:	e9cd 0100 	strd	r0, r1, [sp]
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e22:	f7f9 f9dd 	bl	80001e0 <__aeabi_dsub>
 8006e26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e2a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006e2e:	4639      	mov	r1, r7
 8006e30:	ec41 0b10 	vmov	d0, r0, r1
 8006e34:	b003      	add	sp, #12
 8006e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e38:	4a22      	ldr	r2, [pc, #136]	; (8006ec4 <rint+0x104>)
 8006e3a:	4132      	asrs	r2, r6
 8006e3c:	ea01 0702 	and.w	r7, r1, r2
 8006e40:	4307      	orrs	r7, r0
 8006e42:	d0f5      	beq.n	8006e30 <rint+0x70>
 8006e44:	0852      	lsrs	r2, r2, #1
 8006e46:	4011      	ands	r1, r2
 8006e48:	430c      	orrs	r4, r1
 8006e4a:	d00b      	beq.n	8006e64 <rint+0xa4>
 8006e4c:	ea23 0202 	bic.w	r2, r3, r2
 8006e50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e54:	2e13      	cmp	r6, #19
 8006e56:	fa43 f306 	asr.w	r3, r3, r6
 8006e5a:	bf0c      	ite	eq
 8006e5c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006e60:	2400      	movne	r4, #0
 8006e62:	4313      	orrs	r3, r2
 8006e64:	4916      	ldr	r1, [pc, #88]	; (8006ec0 <rint+0x100>)
 8006e66:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e70:	4620      	mov	r0, r4
 8006e72:	4629      	mov	r1, r5
 8006e74:	f7f9 f9b6 	bl	80001e4 <__adddf3>
 8006e78:	e9cd 0100 	strd	r0, r1, [sp]
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	462b      	mov	r3, r5
 8006e80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e84:	f7f9 f9ac 	bl	80001e0 <__aeabi_dsub>
 8006e88:	e7d2      	b.n	8006e30 <rint+0x70>
 8006e8a:	2e33      	cmp	r6, #51	; 0x33
 8006e8c:	dd07      	ble.n	8006e9e <rint+0xde>
 8006e8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006e92:	d1cd      	bne.n	8006e30 <rint+0x70>
 8006e94:	ee10 2a10 	vmov	r2, s0
 8006e98:	f7f9 f9a4 	bl	80001e4 <__adddf3>
 8006e9c:	e7c8      	b.n	8006e30 <rint+0x70>
 8006e9e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8006ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea6:	40f2      	lsrs	r2, r6
 8006ea8:	4210      	tst	r0, r2
 8006eaa:	d0c1      	beq.n	8006e30 <rint+0x70>
 8006eac:	0852      	lsrs	r2, r2, #1
 8006eae:	4210      	tst	r0, r2
 8006eb0:	bf1f      	itttt	ne
 8006eb2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006eb6:	ea20 0202 	bicne.w	r2, r0, r2
 8006eba:	4134      	asrne	r4, r6
 8006ebc:	4314      	orrne	r4, r2
 8006ebe:	e7d1      	b.n	8006e64 <rint+0xa4>
 8006ec0:	08007090 	.word	0x08007090
 8006ec4:	000fffff 	.word	0x000fffff

08006ec8 <scalbn>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	ec55 4b10 	vmov	r4, r5, d0
 8006ece:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	462b      	mov	r3, r5
 8006ed6:	b9aa      	cbnz	r2, 8006f04 <scalbn+0x3c>
 8006ed8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006edc:	4323      	orrs	r3, r4
 8006ede:	d03b      	beq.n	8006f58 <scalbn+0x90>
 8006ee0:	4b31      	ldr	r3, [pc, #196]	; (8006fa8 <scalbn+0xe0>)
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	ee10 0a10 	vmov	r0, s0
 8006eea:	f7f9 fb31 	bl	8000550 <__aeabi_dmul>
 8006eee:	4b2f      	ldr	r3, [pc, #188]	; (8006fac <scalbn+0xe4>)
 8006ef0:	429e      	cmp	r6, r3
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	460d      	mov	r5, r1
 8006ef6:	da12      	bge.n	8006f1e <scalbn+0x56>
 8006ef8:	a327      	add	r3, pc, #156	; (adr r3, 8006f98 <scalbn+0xd0>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f7f9 fb27 	bl	8000550 <__aeabi_dmul>
 8006f02:	e009      	b.n	8006f18 <scalbn+0x50>
 8006f04:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006f08:	428a      	cmp	r2, r1
 8006f0a:	d10c      	bne.n	8006f26 <scalbn+0x5e>
 8006f0c:	ee10 2a10 	vmov	r2, s0
 8006f10:	4620      	mov	r0, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	f7f9 f966 	bl	80001e4 <__adddf3>
 8006f18:	4604      	mov	r4, r0
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	e01c      	b.n	8006f58 <scalbn+0x90>
 8006f1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006f22:	460b      	mov	r3, r1
 8006f24:	3a36      	subs	r2, #54	; 0x36
 8006f26:	4432      	add	r2, r6
 8006f28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006f2c:	428a      	cmp	r2, r1
 8006f2e:	dd0b      	ble.n	8006f48 <scalbn+0x80>
 8006f30:	ec45 4b11 	vmov	d1, r4, r5
 8006f34:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006fa0 <scalbn+0xd8>
 8006f38:	f000 f83c 	bl	8006fb4 <copysign>
 8006f3c:	a318      	add	r3, pc, #96	; (adr r3, 8006fa0 <scalbn+0xd8>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	ec51 0b10 	vmov	r0, r1, d0
 8006f46:	e7da      	b.n	8006efe <scalbn+0x36>
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	dd08      	ble.n	8006f5e <scalbn+0x96>
 8006f4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006f58:	ec45 4b10 	vmov	d0, r4, r5
 8006f5c:	bd70      	pop	{r4, r5, r6, pc}
 8006f5e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006f62:	da0d      	bge.n	8006f80 <scalbn+0xb8>
 8006f64:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006f68:	429e      	cmp	r6, r3
 8006f6a:	ec45 4b11 	vmov	d1, r4, r5
 8006f6e:	dce1      	bgt.n	8006f34 <scalbn+0x6c>
 8006f70:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006f98 <scalbn+0xd0>
 8006f74:	f000 f81e 	bl	8006fb4 <copysign>
 8006f78:	a307      	add	r3, pc, #28	; (adr r3, 8006f98 <scalbn+0xd0>)
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	e7e0      	b.n	8006f42 <scalbn+0x7a>
 8006f80:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f84:	3236      	adds	r2, #54	; 0x36
 8006f86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006f8e:	4620      	mov	r0, r4
 8006f90:	4629      	mov	r1, r5
 8006f92:	2200      	movs	r2, #0
 8006f94:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <scalbn+0xe8>)
 8006f96:	e7b2      	b.n	8006efe <scalbn+0x36>
 8006f98:	c2f8f359 	.word	0xc2f8f359
 8006f9c:	01a56e1f 	.word	0x01a56e1f
 8006fa0:	8800759c 	.word	0x8800759c
 8006fa4:	7e37e43c 	.word	0x7e37e43c
 8006fa8:	43500000 	.word	0x43500000
 8006fac:	ffff3cb0 	.word	0xffff3cb0
 8006fb0:	3c900000 	.word	0x3c900000

08006fb4 <copysign>:
 8006fb4:	ec51 0b10 	vmov	r0, r1, d0
 8006fb8:	ee11 0a90 	vmov	r0, s3
 8006fbc:	ee10 2a10 	vmov	r2, s0
 8006fc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006fc4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006fc8:	ea41 0300 	orr.w	r3, r1, r0
 8006fcc:	ec43 2b10 	vmov	d0, r2, r3
 8006fd0:	4770      	bx	lr
	...

08006fd4 <_init>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	bf00      	nop
 8006fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fda:	bc08      	pop	{r3}
 8006fdc:	469e      	mov	lr, r3
 8006fde:	4770      	bx	lr

08006fe0 <_fini>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	bf00      	nop
 8006fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe6:	bc08      	pop	{r3}
 8006fe8:	469e      	mov	lr, r3
 8006fea:	4770      	bx	lr
