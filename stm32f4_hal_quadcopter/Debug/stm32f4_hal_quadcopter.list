
stm32f4_hal_quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004274  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800442c  0800442c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800442c  0800442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004434  08004434  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800443c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  2000000c  08004448  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08004448  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed01  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024a2  00000000  00000000  0002ed3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea0  00000000  00000000  000311e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d58  00000000  00000000  00032080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016a06  00000000  00000000  00032dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c3a0  00000000  00000000  000497de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b4e9  00000000  00000000  00055b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e1067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b88  00000000  00000000  000e10e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080043f4 	.word	0x080043f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080043f4 	.word	0x080043f4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_DMA_Init+0x6c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a17      	ldr	r2, [pc, #92]	; (8000544 <MX_DMA_Init+0x6c>)
 80004e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_DMA_Init+0x6c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	200c      	movs	r0, #12
 8000500:	f001 f835 	bl	800156e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000504:	200c      	movs	r0, #12
 8000506:	f001 f84e 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	200e      	movs	r0, #14
 8000510:	f001 f82d 	bl	800156e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000514:	200e      	movs	r0, #14
 8000516:	f001 f846 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	200f      	movs	r0, #15
 8000520:	f001 f825 	bl	800156e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000524:	200f      	movs	r0, #15
 8000526:	f001 f83e 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	2010      	movs	r0, #16
 8000530:	f001 f81d 	bl	800156e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000534:	2010      	movs	r0, #16
 8000536:	f001 f836 	bl	80015a6 <HAL_NVIC_EnableIRQ>

}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800

08000548 <make_dshot600_frame>:
  // it have to send 0 value of dshot frame for a while to reset
  // regardless of RC receiver value
}

void make_dshot600_frame(dshot_frame *motor_x, throttle_value value)
{
 8000548:	b480      	push	{r7}
 800054a:	b089      	sub	sp, #36	; 0x24
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	807b      	strh	r3, [r7, #2]
  uint16_t packet = value << 1;
 8000554:	887b      	ldrh	r3, [r7, #2]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	83fb      	strh	r3, [r7, #30]

  // compute checksum
  int csum = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  int csum_data = packet;
 800055e:	8bfb      	ldrh	r3, [r7, #30]
 8000560:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	e009      	b.n	800057c <make_dshot600_frame+0x34>
    csum ^=  csum_data;   // xor data by nibbles
 8000568:	69ba      	ldr	r2, [r7, #24]
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	4053      	eors	r3, r2
 800056e:	61bb      	str	r3, [r7, #24]
    csum_data >>= 4;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	111b      	asrs	r3, r3, #4
 8000574:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	3301      	adds	r3, #1
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	2b02      	cmp	r3, #2
 8000580:	ddf2      	ble.n	8000568 <make_dshot600_frame+0x20>
  }
  csum &= 0xf;
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	f003 030f 	and.w	r3, r3, #15
 8000588:	61bb      	str	r3, [r7, #24]

  // append checksum
  packet = (packet << 4) | csum;
 800058a:	8bfb      	ldrh	r3, [r7, #30]
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	b21a      	sxth	r2, r3
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	b21b      	sxth	r3, r3
 8000594:	4313      	orrs	r3, r2
 8000596:	b21b      	sxth	r3, r3
 8000598:	83fb      	strh	r3, [r7, #30]

  // encoding
  int i;
  for (i = 0; i < 16; i++)
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	e011      	b.n	80005c4 <make_dshot600_frame+0x7c>
  {
      motor_x[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;  // MSB first
 80005a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	da01      	bge.n	80005ac <make_dshot600_frame+0x64>
 80005a8:	220e      	movs	r2, #14
 80005aa:	e000      	b.n	80005ae <make_dshot600_frame+0x66>
 80005ac:	2207      	movs	r2, #7
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	440b      	add	r3, r1
 80005b6:	601a      	str	r2, [r3, #0]
      packet <<= 1;
 80005b8:	8bfb      	ldrh	r3, [r7, #30]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	83fb      	strh	r3, [r7, #30]
  for (i = 0; i < 16; i++)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b0f      	cmp	r3, #15
 80005c8:	ddea      	ble.n	80005a0 <make_dshot600_frame+0x58>
  }

  motor_x[i++] = 0;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	60fa      	str	r2, [r7, #12]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
  motor_x[i++] = 0;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	60fa      	str	r2, [r7, #12]
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	3724      	adds	r7, #36	; 0x24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <run_dshot600>:

void run_dshot600(motors_s *motors, throttle_value value[])
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  // prepare dshot frame
  make_dshot600_frame(motors->motor_1, value[0]);
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	4619      	mov	r1, r3
 800060a:	4610      	mov	r0, r2
 800060c:	f7ff ff9c 	bl	8000548 <make_dshot600_frame>
  make_dshot600_frame(motors->motor_2, value[1]);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	3302      	adds	r3, #2
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	4610      	mov	r0, r2
 8000620:	f7ff ff92 	bl	8000548 <make_dshot600_frame>
  make_dshot600_frame(motors->motor_3, value[2]);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	3304      	adds	r3, #4
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	4610      	mov	r0, r2
 8000634:	f7ff ff88 	bl	8000548 <make_dshot600_frame>
  make_dshot600_frame(motors->motor_4, value[3]);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	3306      	adds	r3, #6
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	4610      	mov	r0, r2
 8000648:	f7ff ff7e 	bl	8000548 <make_dshot600_frame>

  // and send
  HAL_TIM_PWM_Start_DMA(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL, motors->motor_1, DSHOT_FRAME_SIZE);
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	2312      	movs	r3, #18
 8000650:	2108      	movs	r1, #8
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <run_dshot600+0xa8>)
 8000654:	f002 fa08 	bl	8002a68 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL, motors->motor_2, DSHOT_FRAME_SIZE);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800065e:	2312      	movs	r3, #18
 8000660:	210c      	movs	r1, #12
 8000662:	4810      	ldr	r0, [pc, #64]	; (80006a4 <run_dshot600+0xac>)
 8000664:	f002 fa00 	bl	8002a68 <HAL_TIM_PWM_Start_DMA>

  // commit : a0fc3be487dbd174be31abf8ce6e4e3b70c7a07b
  __HAL_TIM_RESET_HANDLE_STATE(&htim5);
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <run_dshot600+0xac>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_TIM_RESET_HANDLE_STATE(&htim2);
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <run_dshot600+0xa8>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  HAL_TIM_PWM_Start_DMA(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL, motors->motor_3, DSHOT_FRAME_SIZE);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800067e:	2312      	movs	r3, #18
 8000680:	2104      	movs	r1, #4
 8000682:	4808      	ldr	r0, [pc, #32]	; (80006a4 <run_dshot600+0xac>)
 8000684:	f002 f9f0 	bl	8002a68 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL, motors->motor_4, DSHOT_FRAME_SIZE);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800068e:	2312      	movs	r3, #18
 8000690:	2100      	movs	r1, #0
 8000692:	4803      	ldr	r0, [pc, #12]	; (80006a0 <run_dshot600+0xa8>)
 8000694:	f002 f9e8 	bl	8002a68 <HAL_TIM_PWM_Start_DMA>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200003e8 	.word	0x200003e8
 80006a4:	200002a8 	.word	0x200002a8

080006a8 <ibus_init>:
uint8_t ibus_buffer[32] = {0};
//uint16_t channel[IBUS_USER_CHANNELS] = {0};


void ibus_init()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	//uint8_t ibus_buffer[32] = {0};
	HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);
 80006ac:	2220      	movs	r2, #32
 80006ae:	4903      	ldr	r1, [pc, #12]	; (80006bc <ibus_init+0x14>)
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <ibus_init+0x18>)
 80006b2:	f003 f86c 	bl	800378e <HAL_UART_Receive_IT>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000028 	.word	0x20000028
 80006c0:	20000428 	.word	0x20000428

080006c4 <ibus_read_channel>:


void ibus_read_channel(channel_data *channel)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08e      	sub	sp, #56	; 0x38
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	//uint8_t ibus_buffer[32] = {0};
	//HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);

	uint16_t channel_buffer[IBUS_MAX_CHANNLES] = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]
 80006de:	619a      	str	r2, [r3, #24]
	uint16_t checksum_cal, checksum_ibus;

	// is it ibus?
	if(ibus_buffer[0] == IBUS_LENGTH && ibus_buffer[1] == IBUS_COMMAND40)
 80006e0:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <ibus_read_channel+0xfc>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b20      	cmp	r3, #32
 80006e6:	d161      	bne.n	80007ac <ibus_read_channel+0xe8>
 80006e8:	4b35      	ldr	r3, [pc, #212]	; (80007c0 <ibus_read_channel+0xfc>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	2b40      	cmp	r3, #64	; 0x40
 80006ee:	d15d      	bne.n	80007ac <ibus_read_channel+0xe8>
	{
		checksum_cal = 0xffff - ibus_buffer[0] - ibus_buffer[1];
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <ibus_read_channel+0xfc>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	43db      	mvns	r3, r3
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <ibus_read_channel+0xfc>)
 80006fc:	785b      	ldrb	r3, [r3, #1]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	86fb      	strh	r3, [r7, #54]	; 0x36

		// data parsing
		for(int i = 0; i < IBUS_MAX_CHANNLES; i++)
 8000704:	2300      	movs	r3, #0
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
 8000708:	e02a      	b.n	8000760 <ibus_read_channel+0x9c>
		{
			// little endian
			channel_buffer[i] = (uint16_t)(ibus_buffer[i * 2 + 3] << 8 | ibus_buffer[i * 2 + 2]);
 800070a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	3303      	adds	r3, #3
 8000710:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <ibus_read_channel+0xfc>)
 8000712:	5cd3      	ldrb	r3, [r2, r3]
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	b21a      	sxth	r2, r3
 8000718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800071a:	3301      	adds	r3, #1
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4928      	ldr	r1, [pc, #160]	; (80007c0 <ibus_read_channel+0xfc>)
 8000720:	5ccb      	ldrb	r3, [r1, r3]
 8000722:	b21b      	sxth	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b21b      	sxth	r3, r3
 8000728:	b29a      	uxth	r2, r3
 800072a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000732:	440b      	add	r3, r1
 8000734:	f823 2c2c 	strh.w	r2, [r3, #-44]
			
			// checksum from user calculation
			checksum_cal = checksum_cal - ibus_buffer[i * 2 + 3] - ibus_buffer[i * 2 + 2];
 8000738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	3303      	adds	r3, #3
 800073e:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <ibus_read_channel+0xfc>)
 8000740:	5cd3      	ldrb	r3, [r2, r3]
 8000742:	b29b      	uxth	r3, r3
 8000744:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800074c:	3301      	adds	r3, #1
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	491b      	ldr	r1, [pc, #108]	; (80007c0 <ibus_read_channel+0xfc>)
 8000752:	5ccb      	ldrb	r3, [r1, r3]
 8000754:	b29b      	uxth	r3, r3
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	86fb      	strh	r3, [r7, #54]	; 0x36
		for(int i = 0; i < IBUS_MAX_CHANNLES; i++)
 800075a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800075c:	3301      	adds	r3, #1
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
 8000760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000762:	2b0d      	cmp	r3, #13
 8000764:	ddd1      	ble.n	800070a <ibus_read_channel+0x46>
		}

		// checksum from received data
		checksum_ibus = ibus_buffer[31] << 8 | ibus_buffer[30];
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <ibus_read_channel+0xfc>)
 8000768:	7fdb      	ldrb	r3, [r3, #31]
 800076a:	021b      	lsls	r3, r3, #8
 800076c:	b21a      	sxth	r2, r3
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <ibus_read_channel+0xfc>)
 8000770:	7f9b      	ldrb	r3, [r3, #30]
 8000772:	b21b      	sxth	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	b21b      	sxth	r3, r3
 8000778:	857b      	strh	r3, [r7, #42]	; 0x2a

		// compare checksum 
		if(checksum_cal == checksum_ibus) 
 800077a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800077c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800077e:	429a      	cmp	r2, r3
 8000780:	d114      	bne.n	80007ac <ibus_read_channel+0xe8>
		{
			// return validated channel data
			for(int ch_index = 0; ch_index < IBUS_USER_CHANNELS; ch_index++)
 8000782:	2300      	movs	r3, #0
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000786:	e00e      	b.n	80007a6 <ibus_read_channel+0xe2>
			{
				channel[ch_index] = channel_buffer[ch_index];
 8000788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	441a      	add	r2, r3
 8000790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000798:	440b      	add	r3, r1
 800079a:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800079e:	8013      	strh	r3, [r2, #0]
			for(int ch_index = 0; ch_index < IBUS_USER_CHANNELS; ch_index++)
 80007a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a2:	3301      	adds	r3, #1
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a8:	2b05      	cmp	r3, #5
 80007aa:	dded      	ble.n	8000788 <ibus_read_channel+0xc4>
			}
		}
	}

	HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);
 80007ac:	2220      	movs	r2, #32
 80007ae:	4904      	ldr	r1, [pc, #16]	; (80007c0 <ibus_read_channel+0xfc>)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <ibus_read_channel+0x100>)
 80007b2:	f002 ffec 	bl	800378e <HAL_UART_Receive_IT>
}
 80007b6:	bf00      	nop
 80007b8:	3738      	adds	r7, #56	; 0x38
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000028 	.word	0x20000028
 80007c4:	20000428 	.word	0x20000428

080007c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0xc4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a29      	ldr	r2, [pc, #164]	; (800088c <MX_GPIO_Init+0xc4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_GPIO_Init+0xc4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_GPIO_Init+0xc4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <MX_GPIO_Init+0xc4>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_GPIO_Init+0xc4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_GPIO_Init+0xc4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a1b      	ldr	r2, [pc, #108]	; (800088c <MX_GPIO_Init+0xc4>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_GPIO_Init+0xc4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000838:	4815      	ldr	r0, [pc, #84]	; (8000890 <MX_GPIO_Init+0xc8>)
 800083a:	f001 fbe1 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_ICM20948_CS_GPIO_Port, SPI_ICM20948_CS_Pin, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2110      	movs	r1, #16
 8000842:	4814      	ldr	r0, [pc, #80]	; (8000894 <MX_GPIO_Init+0xcc>)
 8000844:	f001 fbdc 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8000848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4619      	mov	r1, r3
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <MX_GPIO_Init+0xc8>)
 8000862:	f001 fa4b 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_ICM20948_CS_Pin;
 8000866:	2310      	movs	r3, #16
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0xcc>)
 800087e:	f001 fa3d 	bl	8001cfc <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020800 	.word	0x40020800
 8000894:	40020000 	.word	0x40020000

08000898 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// timer interrupt 1kHz
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if (htim == &htim11)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d103      	bne.n	80008b0 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  run_dshot600(&mymotors, myvalue);
 80008a8:	4904      	ldr	r1, [pc, #16]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008ac:	f7ff fea4 	bl	80005f8 <run_dshot600>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200002e8 	.word	0x200002e8
 80008bc:	20000048 	.word	0x20000048
 80008c0:	2000005c 	.word	0x2000005c

080008c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == IBUS_UART_INSTANCE)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_UART_RxCpltCallback+0x20>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d102      	bne.n	80008dc <HAL_UART_RxCpltCallback+0x18>
	{
		ibus_read_channel(mychannel);
 80008d6:	4804      	ldr	r0, [pc, #16]	; (80008e8 <HAL_UART_RxCpltCallback+0x24>)
 80008d8:	f7ff fef4 	bl	80006c4 <ibus_read_channel>
	}
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40011000 	.word	0x40011000
 80008e8:	20000050 	.word	0x20000050

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 fcf0 	bl	80012d4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f816 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f7ff ff66 	bl	80007c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008fc:	f7ff fdec 	bl	80004d8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000900:	f000 f87c 	bl	80009fc <MX_SPI1_Init>
  MX_TIM2_Init();
 8000904:	f000 f99c 	bl	8000c40 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000908:	f000 f9fc 	bl	8000d04 <MX_TIM5_Init>
  MX_TIM11_Init();
 800090c:	f000 fa5e 	bl	8000dcc <MX_TIM11_Init>
  MX_USART1_UART_Init();
 8000910:	f000 fc3c 	bl	800118c <MX_USART1_UART_Init>
  if(WHOAMI_AK09916() == DEVICE_ID_AK09916)
  	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, RESET);	// Debug LED
  	  */


  HAL_TIM_Base_Start_IT(&htim11); // timer interrupt 1kHz
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <main+0x34>)
 8000916:	f002 f858 	bl	80029ca <HAL_TIM_Base_Start_IT>

  ibus_init();
 800091a:	f7ff fec5 	bl	80006a8 <ibus_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091e:	e7fe      	b.n	800091e <main+0x32>
 8000920:	200002e8 	.word	0x200002e8

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b094      	sub	sp, #80	; 0x50
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2230      	movs	r2, #48	; 0x30
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f003 fd56 	bl	80043e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <SystemClock_Config+0xc8>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <SystemClock_Config+0xc8>)
 8000952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000956:	6413      	str	r3, [r2, #64]	; 0x40
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <SystemClock_Config+0xc8>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <SystemClock_Config+0xcc>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <SystemClock_Config+0xcc>)
 800096e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <SystemClock_Config+0xcc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000984:	2301      	movs	r3, #1
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000988:	2310      	movs	r3, #16
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098c:	2302      	movs	r3, #2
 800098e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000990:	2300      	movs	r3, #0
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000994:	2308      	movs	r3, #8
 8000996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000998:	2364      	movs	r3, #100	; 0x64
 800099a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fb43 	bl	8002034 <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b4:	f000 f81e 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	230f      	movs	r3, #15
 80009ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	2302      	movs	r3, #2
 80009be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2103      	movs	r1, #3
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fd9d 	bl	8002514 <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009e0:	f000 f808 	bl	80009f4 <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3750      	adds	r7, #80	; 0x50
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40007000 	.word	0x40007000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fa:	e7fe      	b.n	80009fa <Error_Handler+0x6>

080009fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a30:	2218      	movs	r2, #24
 8000a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a48:	220a      	movs	r2, #10
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a4e:	f001 ff2d 	bl	80028ac <HAL_SPI_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a58:	f7ff ffcc 	bl	80009f4 <Error_Handler>
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000190 	.word	0x20000190
 8000a64:	40013000 	.word	0x40013000

08000a68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <HAL_SPI_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_SPI_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ICM20948_SCK_Pin|SPI_ICM20948_MISO_Pin|SPI_ICM20948_MOSI_Pin;
 8000ac2:	23e0      	movs	r3, #224	; 0xe0
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_SPI_MspInit+0x8c>)
 8000ade:	f001 f90d 	bl	8001cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40013000 	.word	0x40013000
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 fbf0 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <DMA1_Stream1_IRQHandler+0x10>)
 8000ba2:	f000 fe43 	bl	800182c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000388 	.word	0x20000388

08000bb0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <DMA1_Stream3_IRQHandler+0x10>)
 8000bb6:	f000 fe39 	bl	800182c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000248 	.word	0x20000248

08000bc4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <DMA1_Stream4_IRQHandler+0x10>)
 8000bca:	f000 fe2f 	bl	800182c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000328 	.word	0x20000328

08000bd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA1_Stream5_IRQHandler+0x10>)
 8000bde:	f000 fe25 	bl	800182c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001e8 	.word	0x200001e8

08000bec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000bf2:	f002 f83f 	bl	8002c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200002e8 	.word	0x200002e8

08000c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <USART1_IRQHandler+0x10>)
 8000c06:	f002 fe17 	bl	8003838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000428 	.word	0x20000428

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <SystemInit+0x28>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <SystemInit+0x28>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <SystemInit+0x28>)
 8000c2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000c62:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <MX_TIM2_Init+0xc0>)
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <MX_TIM2_Init+0xc0>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <MX_TIM2_Init+0xc0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_TIM2_Init+0xc0>)
 8000c78:	2214      	movs	r2, #20
 8000c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <MX_TIM2_Init+0xc0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_TIM2_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c88:	481d      	ldr	r0, [pc, #116]	; (8000d00 <MX_TIM2_Init+0xc0>)
 8000c8a:	f001 fec2 	bl	8002a12 <HAL_TIM_PWM_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c94:	f7ff feae 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4816      	ldr	r0, [pc, #88]	; (8000d00 <MX_TIM2_Init+0xc0>)
 8000ca8:	f002 fca2 	bl	80035f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000cb2:	f7ff fe9f 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb6:	2360      	movs	r3, #96	; 0x60
 8000cb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_TIM2_Init+0xc0>)
 8000cce:	f002 f8d9 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000cd8:	f7ff fe8c 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2208      	movs	r2, #8
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4807      	ldr	r0, [pc, #28]	; (8000d00 <MX_TIM2_Init+0xc0>)
 8000ce4:	f002 f8ce 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cee:	f7ff fe81 	bl	80009f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000cf2:	4803      	ldr	r0, [pc, #12]	; (8000d00 <MX_TIM2_Init+0xc0>)
 8000cf4:	f000 f9ec 	bl	80010d0 <HAL_TIM_MspPostInit>

}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	; 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200003e8 	.word	0x200003e8

08000d04 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	615a      	str	r2, [r3, #20]
 8000d24:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <MX_TIM5_Init+0xc0>)
 8000d28:	4a27      	ldr	r2, [pc, #156]	; (8000dc8 <MX_TIM5_Init+0xc4>)
 8000d2a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8-1;
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <MX_TIM5_Init+0xc0>)
 8000d2e:	2207      	movs	r2, #7
 8000d30:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <MX_TIM5_Init+0xc0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20;
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <MX_TIM5_Init+0xc0>)
 8000d3a:	2214      	movs	r2, #20
 8000d3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_TIM5_Init+0xc0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_TIM5_Init+0xc0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000d4a:	481e      	ldr	r0, [pc, #120]	; (8000dc4 <MX_TIM5_Init+0xc0>)
 8000d4c:	f001 fe61 	bl	8002a12 <HAL_TIM_PWM_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000d56:	f7ff fe4d 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d62:	f107 0320 	add.w	r3, r7, #32
 8000d66:	4619      	mov	r1, r3
 8000d68:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <MX_TIM5_Init+0xc0>)
 8000d6a:	f002 fc41 	bl	80035f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000d74:	f7ff fe3e 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d78:	2360      	movs	r3, #96	; 0x60
 8000d7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_TIM5_Init+0xc0>)
 8000d90:	f002 f878 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000d9a:	f7ff fe2b 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	220c      	movs	r2, #12
 8000da2:	4619      	mov	r1, r3
 8000da4:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <MX_TIM5_Init+0xc0>)
 8000da6:	f002 f86d 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000db0:	f7ff fe20 	bl	80009f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <MX_TIM5_Init+0xc0>)
 8000db6:	f000 f98b 	bl	80010d0 <HAL_TIM_MspPostInit>

}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200002a8 	.word	0x200002a8
 8000dc8:	40000c00 	.word	0x40000c00

08000dcc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_TIM11_Init+0x40>)
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <MX_TIM11_Init+0x44>)
 8000dd4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9999;
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <MX_TIM11_Init+0x40>)
 8000dd8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ddc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_TIM11_Init+0x40>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_TIM11_Init+0x40>)
 8000de6:	2209      	movs	r2, #9
 8000de8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_TIM11_Init+0x40>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_TIM11_Init+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_TIM11_Init+0x40>)
 8000df8:	f001 fdbc 	bl	8002974 <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000e02:	f7ff fdf7 	bl	80009f4 <Error_Handler>
  }

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200002e8 	.word	0x200002e8
 8000e10:	40014800 	.word	0x40014800

08000e14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e24:	f040 8087 	bne.w	8000f36 <HAL_TIM_PWM_MspInit+0x122>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	4b8a      	ldr	r3, [pc, #552]	; (8001058 <HAL_TIM_PWM_MspInit+0x244>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a89      	ldr	r2, [pc, #548]	; (8001058 <HAL_TIM_PWM_MspInit+0x244>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b87      	ldr	r3, [pc, #540]	; (8001058 <HAL_TIM_PWM_MspInit+0x244>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000e44:	4b85      	ldr	r3, [pc, #532]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e46:	4a86      	ldr	r2, [pc, #536]	; (8001060 <HAL_TIM_PWM_MspInit+0x24c>)
 8000e48:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000e4a:	4b84      	ldr	r3, [pc, #528]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e4c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e50:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e52:	4b82      	ldr	r3, [pc, #520]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e54:	2240      	movs	r2, #64	; 0x40
 8000e56:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e58:	4b80      	ldr	r3, [pc, #512]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e5e:	4b7f      	ldr	r3, [pc, #508]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e64:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e66:	4b7d      	ldr	r3, [pc, #500]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e6c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e6e:	4b7b      	ldr	r3, [pc, #492]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e74:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000e76:	4b79      	ldr	r3, [pc, #484]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000e7c:	4b77      	ldr	r3, [pc, #476]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e82:	4b76      	ldr	r3, [pc, #472]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e84:	2204      	movs	r2, #4
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000e88:	4b74      	ldr	r3, [pc, #464]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e8e:	4b73      	ldr	r3, [pc, #460]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e94:	4b71      	ldr	r3, [pc, #452]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000e9a:	4870      	ldr	r0, [pc, #448]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000e9c:	f000 fb9e 	bl	80015dc <HAL_DMA_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_TIM_PWM_MspInit+0x96>
    {
      Error_Handler();
 8000ea6:	f7ff fda5 	bl	80009f4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a6b      	ldr	r2, [pc, #428]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
 8000eb0:	4a6a      	ldr	r2, [pc, #424]	; (800105c <HAL_TIM_PWM_MspInit+0x248>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8000eb6:	4b6b      	ldr	r3, [pc, #428]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000eb8:	4a6b      	ldr	r2, [pc, #428]	; (8001068 <HAL_TIM_PWM_MspInit+0x254>)
 8000eba:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8000ebc:	4b69      	ldr	r3, [pc, #420]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000ebe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ec2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ec4:	4b67      	ldr	r3, [pc, #412]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000ec6:	2240      	movs	r2, #64	; 0x40
 8000ec8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eca:	4b66      	ldr	r3, [pc, #408]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ed0:	4b64      	ldr	r3, [pc, #400]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ed8:	4b62      	ldr	r3, [pc, #392]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ede:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ee0:	4b60      	ldr	r3, [pc, #384]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ee6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8000ee8:	4b5e      	ldr	r3, [pc, #376]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 8000eee:	4b5d      	ldr	r3, [pc, #372]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ef4:	4b5b      	ldr	r3, [pc, #364]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000efa:	4b5a      	ldr	r3, [pc, #360]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f00:	4b58      	ldr	r3, [pc, #352]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f06:	4b57      	ldr	r3, [pc, #348]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8000f0c:	4855      	ldr	r0, [pc, #340]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000f0e:	f000 fb65 	bl	80015dc <HAL_DMA_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_TIM_PWM_MspInit+0x108>
    {
      Error_Handler();
 8000f18:	f7ff fd6c 	bl	80009f4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a51      	ldr	r2, [pc, #324]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f22:	4a50      	ldr	r2, [pc, #320]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a4e      	ldr	r2, [pc, #312]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000f2c:	621a      	str	r2, [r3, #32]
 8000f2e:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_TIM_PWM_MspInit+0x250>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000f34:	e08b      	b.n	800104e <HAL_TIM_PWM_MspInit+0x23a>
  else if(tim_pwmHandle->Instance==TIM5)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a4c      	ldr	r2, [pc, #304]	; (800106c <HAL_TIM_PWM_MspInit+0x258>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	f040 8086 	bne.w	800104e <HAL_TIM_PWM_MspInit+0x23a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b44      	ldr	r3, [pc, #272]	; (8001058 <HAL_TIM_PWM_MspInit+0x244>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a43      	ldr	r2, [pc, #268]	; (8001058 <HAL_TIM_PWM_MspInit+0x244>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b41      	ldr	r3, [pc, #260]	; (8001058 <HAL_TIM_PWM_MspInit+0x244>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8000f5e:	4b44      	ldr	r3, [pc, #272]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f60:	4a44      	ldr	r2, [pc, #272]	; (8001074 <HAL_TIM_PWM_MspInit+0x260>)
 8000f62:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8000f64:	4b42      	ldr	r3, [pc, #264]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f66:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f6a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f6c:	4b40      	ldr	r3, [pc, #256]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f6e:	2240      	movs	r2, #64	; 0x40
 8000f70:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f72:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000f78:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f80:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f86:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f88:	4b39      	ldr	r3, [pc, #228]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f8e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8000f90:	4b37      	ldr	r3, [pc, #220]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b36      	ldr	r3, [pc, #216]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f9c:	4b34      	ldr	r3, [pc, #208]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fa8:	4b31      	ldr	r3, [pc, #196]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8000fb4:	482e      	ldr	r0, [pc, #184]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000fb6:	f000 fb11 	bl	80015dc <HAL_DMA_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_TIM_PWM_MspInit+0x1b0>
      Error_Handler();
 8000fc0:	f7ff fd18 	bl	80009f4 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
 8000fca:	4a29      	ldr	r2, [pc, #164]	; (8001070 <HAL_TIM_PWM_MspInit+0x25c>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8000fd2:	4a2a      	ldr	r2, [pc, #168]	; (800107c <HAL_TIM_PWM_MspInit+0x268>)
 8000fd4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8000fd8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000fdc:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8000fe0:	2240      	movs	r2, #64	; 0x40
 8000fe2:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8000fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff0:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8000ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff8:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8000ffc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001000:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8001010:	2204      	movs	r2, #4
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 800101c:	2200      	movs	r2, #0
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8001022:	2200      	movs	r2, #0
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8001026:	4814      	ldr	r0, [pc, #80]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8001028:	f000 fad8 	bl	80015dc <HAL_DMA_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_TIM_PWM_MspInit+0x222>
      Error_Handler();
 8001032:	f7ff fcdf 	bl	80009f4 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 8001046:	639a      	str	r2, [r3, #56]	; 0x38
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_TIM_PWM_MspInit+0x264>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	200001e8 	.word	0x200001e8
 8001060:	40026088 	.word	0x40026088
 8001064:	20000388 	.word	0x20000388
 8001068:	40026028 	.word	0x40026028
 800106c:	40000c00 	.word	0x40000c00
 8001070:	20000328 	.word	0x20000328
 8001074:	40026070 	.word	0x40026070
 8001078:	20000248 	.word	0x20000248
 800107c:	40026058 	.word	0x40026058

08001080 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_TIM_Base_MspInit+0x48>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d115      	bne.n	80010be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_TIM_Base_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_TIM_Base_MspInit+0x4c>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_TIM_Base_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	201a      	movs	r0, #26
 80010b4:	f000 fa5b 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80010b8:	201a      	movs	r0, #26
 80010ba:	f000 fa74 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40014800 	.word	0x40014800
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d11e      	bne.n	8001130 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b22      	ldr	r3, [pc, #136]	; (8001180 <HAL_TIM_MspPostInit+0xb0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a21      	ldr	r2, [pc, #132]	; (8001180 <HAL_TIM_MspPostInit+0xb0>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <HAL_TIM_MspPostInit+0xb0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_4_Pin|MOTOR_1_Pin;
 800110e:	2305      	movs	r3, #5
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800111e:	2301      	movs	r3, #1
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4816      	ldr	r0, [pc, #88]	; (8001184 <HAL_TIM_MspPostInit+0xb4>)
 800112a:	f000 fde7 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800112e:	e022      	b.n	8001176 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <HAL_TIM_MspPostInit+0xb8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d11d      	bne.n	8001176 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_TIM_MspPostInit+0xb0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <HAL_TIM_MspPostInit+0xb0>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_TIM_MspPostInit+0xb0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_2_Pin;
 8001156:	230a      	movs	r3, #10
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001166:	2302      	movs	r3, #2
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <HAL_TIM_MspPostInit+0xb4>)
 8001172:	f000 fdc3 	bl	8001cfc <HAL_GPIO_Init>
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40020000 	.word	0x40020000
 8001188:	40000c00 	.word	0x40000c00

0800118c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_USART1_UART_Init+0x4c>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <MX_USART1_UART_Init+0x50>)
 8001194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_USART1_UART_Init+0x4c>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011b2:	2204      	movs	r2, #4
 80011b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_USART1_UART_Init+0x4c>)
 80011c4:	f002 fa96 	bl	80036f4 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011ce:	f7ff fc11 	bl	80009f4 <Error_Handler>
  }

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000428 	.word	0x20000428
 80011dc:	40011000 	.word	0x40011000

080011e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <HAL_UART_MspInit+0x94>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d134      	bne.n	800126c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <HAL_UART_MspInit+0x98>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <HAL_UART_MspInit+0x98>)
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_UART_MspInit+0x98>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_UART_MspInit+0x98>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <HAL_UART_MspInit+0x98>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_UART_MspInit+0x98>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800123a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800124c:	2307      	movs	r3, #7
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <HAL_UART_MspInit+0x9c>)
 8001258:	f000 fd50 	bl	8001cfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	2025      	movs	r0, #37	; 0x25
 8001262:	f000 f984 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001266:	2025      	movs	r0, #37	; 0x25
 8001268:	f000 f99d 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40011000 	.word	0x40011000
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000

08001280 <Reset_Handler>:
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b8 <LoopFillZerobss+0x14>
 8001284:	2100      	movs	r1, #0
 8001286:	e003      	b.n	8001290 <LoopCopyDataInit>

08001288 <CopyDataInit>:
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <LoopFillZerobss+0x18>)
 800128a:	585b      	ldr	r3, [r3, r1]
 800128c:	5043      	str	r3, [r0, r1]
 800128e:	3104      	adds	r1, #4

08001290 <LoopCopyDataInit>:
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <LoopFillZerobss+0x1c>)
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <LoopFillZerobss+0x20>)
 8001294:	1842      	adds	r2, r0, r1
 8001296:	429a      	cmp	r2, r3
 8001298:	d3f6      	bcc.n	8001288 <CopyDataInit>
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <LoopFillZerobss+0x24>)
 800129c:	e002      	b.n	80012a4 <LoopFillZerobss>

0800129e <FillZerobss>:
 800129e:	2300      	movs	r3, #0
 80012a0:	f842 3b04 	str.w	r3, [r2], #4

080012a4 <LoopFillZerobss>:
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <LoopFillZerobss+0x28>)
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d3f9      	bcc.n	800129e <FillZerobss>
 80012aa:	f7ff fcb3 	bl	8000c14 <SystemInit>
 80012ae:	f003 f875 	bl	800439c <__libc_init_array>
 80012b2:	f7ff fb1b 	bl	80008ec <main>
 80012b6:	4770      	bx	lr
 80012b8:	20020000 	.word	0x20020000
 80012bc:	0800443c 	.word	0x0800443c
 80012c0:	20000000 	.word	0x20000000
 80012c4:	2000000c 	.word	0x2000000c
 80012c8:	2000000c 	.word	0x2000000c
 80012cc:	2000046c 	.word	0x2000046c

080012d0 <ADC_IRQHandler>:
 80012d0:	e7fe      	b.n	80012d0 <ADC_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <HAL_Init+0x40>)
 80012de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_Init+0x40>)
 80012ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_Init+0x40>)
 80012f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f000 f92b 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001302:	2000      	movs	r0, #0
 8001304:	f000 f808 	bl	8001318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001308:	f7ff fbf6 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023c00 	.word	0x40023c00

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x54>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x58>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f943 	bl	80015c2 <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f000 f90b 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x5c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	20000008 	.word	0x20000008
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000008 	.word	0x20000008
 800139c:	20000468 	.word	0x20000468

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000468 	.word	0x20000468

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db0b      	blt.n	8001446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <__NVIC_EnableIRQ+0x38>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff29 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff3e 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff8e 	bl	80014ac <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5d 	bl	8001458 <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff31 	bl	800141c <__NVIC_EnableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffa2 	bl	8001514 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff feda 	bl	80013a0 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e099      	b.n	800172c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001618:	e00f      	b.n	800163a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800161a:	f7ff fec1 	bl	80013a0 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b05      	cmp	r3, #5
 8001626:	d908      	bls.n	800163a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2220      	movs	r2, #32
 800162c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2203      	movs	r2, #3
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e078      	b.n	800172c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1e8      	bne.n	800161a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	4b38      	ldr	r3, [pc, #224]	; (8001734 <HAL_DMA_Init+0x158>)
 8001654:	4013      	ands	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001666:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001672:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	2b04      	cmp	r3, #4
 8001692:	d107      	bne.n	80016a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	4313      	orrs	r3, r2
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f023 0307 	bic.w	r3, r3, #7
 80016ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d117      	bne.n	80016fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00e      	beq.n	80016fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fa91 	bl	8001c08 <DMA_CheckFifoParam>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2240      	movs	r2, #64	; 0x40
 80016f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016fa:	2301      	movs	r3, #1
 80016fc:	e016      	b.n	800172c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fa48 	bl	8001b9c <DMA_CalcBaseAndBitshift>
 800170c:	4603      	mov	r3, r0
 800170e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001714:	223f      	movs	r2, #63	; 0x3f
 8001716:	409a      	lsls	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	f010803f 	.word	0xf010803f

08001738 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_DMA_Start_IT+0x26>
 800175a:	2302      	movs	r3, #2
 800175c:	e040      	b.n	80017e0 <HAL_DMA_Start_IT+0xa8>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b01      	cmp	r3, #1
 8001770:	d12f      	bne.n	80017d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2202      	movs	r2, #2
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 f9da 	bl	8001b40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001790:	223f      	movs	r2, #63	; 0x3f
 8001792:	409a      	lsls	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0216 	orr.w	r2, r2, #22
 80017a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0208 	orr.w	r2, r2, #8
 80017be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e005      	b.n	80017de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017da:	2302      	movs	r3, #2
 80017dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017de:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d004      	beq.n	8001806 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00c      	b.n	8001820 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2205      	movs	r2, #5
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0201 	bic.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001838:	4b92      	ldr	r3, [pc, #584]	; (8001a84 <HAL_DMA_IRQHandler+0x258>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a92      	ldr	r2, [pc, #584]	; (8001a88 <HAL_DMA_IRQHandler+0x25c>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0a9b      	lsrs	r3, r3, #10
 8001844:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	2208      	movs	r2, #8
 8001858:	409a      	lsls	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d01a      	beq.n	8001898 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0204 	bic.w	r2, r2, #4
 800187e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	2208      	movs	r2, #8
 8001886:	409a      	lsls	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189c:	2201      	movs	r2, #1
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d012      	beq.n	80018ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ba:	2201      	movs	r2, #1
 80018bc:	409a      	lsls	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c6:	f043 0202 	orr.w	r2, r3, #2
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d2:	2204      	movs	r2, #4
 80018d4:	409a      	lsls	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d012      	beq.n	8001904 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00b      	beq.n	8001904 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f0:	2204      	movs	r2, #4
 80018f2:	409a      	lsls	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fc:	f043 0204 	orr.w	r2, r3, #4
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001908:	2210      	movs	r2, #16
 800190a:	409a      	lsls	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d043      	beq.n	800199c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d03c      	beq.n	800199c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	2210      	movs	r2, #16
 8001928:	409a      	lsls	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d018      	beq.n	800196e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d108      	bne.n	800195c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d024      	beq.n	800199c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	4798      	blx	r3
 800195a:	e01f      	b.n	800199c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01b      	beq.n	800199c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
 800196c:	e016      	b.n	800199c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d107      	bne.n	800198c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0208 	bic.w	r2, r2, #8
 800198a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a0:	2220      	movs	r2, #32
 80019a2:	409a      	lsls	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 808e 	beq.w	8001aca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8086 	beq.w	8001aca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c2:	2220      	movs	r2, #32
 80019c4:	409a      	lsls	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d136      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0216 	bic.w	r2, r2, #22
 80019e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d103      	bne.n	8001a06 <HAL_DMA_IRQHandler+0x1da>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0208 	bic.w	r2, r2, #8
 8001a14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	223f      	movs	r2, #63	; 0x3f
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d07d      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	4798      	blx	r3
        }
        return;
 8001a42:	e078      	b.n	8001b36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d01c      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d108      	bne.n	8001a72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d030      	beq.n	8001aca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	4798      	blx	r3
 8001a70:	e02b      	b.n	8001aca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d027      	beq.n	8001aca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
 8001a82:	e022      	b.n	8001aca <HAL_DMA_IRQHandler+0x29e>
 8001a84:	20000000 	.word	0x20000000
 8001a88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10f      	bne.n	8001aba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0210 	bic.w	r2, r2, #16
 8001aa8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d032      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d022      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0201 	bic.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d307      	bcc.n	8001b12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f2      	bne.n	8001af6 <HAL_DMA_IRQHandler+0x2ca>
 8001b10:	e000      	b.n	8001b14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
 8001b34:	e000      	b.n	8001b38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b36:	bf00      	nop
    }
  }
}
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop

08001b40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b40      	cmp	r3, #64	; 0x40
 8001b6c:	d108      	bne.n	8001b80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b7e:	e007      	b.n	8001b90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	60da      	str	r2, [r3, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	3b10      	subs	r3, #16
 8001bac:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <DMA_CalcBaseAndBitshift+0x64>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bb6:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <DMA_CalcBaseAndBitshift+0x68>)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d909      	bls.n	8001bde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bd2:	f023 0303 	bic.w	r3, r3, #3
 8001bd6:	1d1a      	adds	r2, r3, #4
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	659a      	str	r2, [r3, #88]	; 0x58
 8001bdc:	e007      	b.n	8001bee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001be6:	f023 0303 	bic.w	r3, r3, #3
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	aaaaaaab 	.word	0xaaaaaaab
 8001c04:	08004424 	.word	0x08004424

08001c08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d11f      	bne.n	8001c62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d855      	bhi.n	8001cd4 <DMA_CheckFifoParam+0xcc>
 8001c28:	a201      	add	r2, pc, #4	; (adr r2, 8001c30 <DMA_CheckFifoParam+0x28>)
 8001c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2e:	bf00      	nop
 8001c30:	08001c41 	.word	0x08001c41
 8001c34:	08001c53 	.word	0x08001c53
 8001c38:	08001c41 	.word	0x08001c41
 8001c3c:	08001cd5 	.word	0x08001cd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d045      	beq.n	8001cd8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c50:	e042      	b.n	8001cd8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c5a:	d13f      	bne.n	8001cdc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c60:	e03c      	b.n	8001cdc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c6a:	d121      	bne.n	8001cb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d836      	bhi.n	8001ce0 <DMA_CheckFifoParam+0xd8>
 8001c72:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <DMA_CheckFifoParam+0x70>)
 8001c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c78:	08001c89 	.word	0x08001c89
 8001c7c:	08001c8f 	.word	0x08001c8f
 8001c80:	08001c89 	.word	0x08001c89
 8001c84:	08001ca1 	.word	0x08001ca1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c8c:	e02f      	b.n	8001cee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d024      	beq.n	8001ce4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c9e:	e021      	b.n	8001ce4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ca8:	d11e      	bne.n	8001ce8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cae:	e01b      	b.n	8001ce8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d902      	bls.n	8001cbc <DMA_CheckFifoParam+0xb4>
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d003      	beq.n	8001cc2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cba:	e018      	b.n	8001cee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc0:	e015      	b.n	8001cee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00e      	beq.n	8001cec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd2:	e00b      	b.n	8001cec <DMA_CheckFifoParam+0xe4>
      break;
 8001cd4:	bf00      	nop
 8001cd6:	e00a      	b.n	8001cee <DMA_CheckFifoParam+0xe6>
      break;
 8001cd8:	bf00      	nop
 8001cda:	e008      	b.n	8001cee <DMA_CheckFifoParam+0xe6>
      break;
 8001cdc:	bf00      	nop
 8001cde:	e006      	b.n	8001cee <DMA_CheckFifoParam+0xe6>
      break;
 8001ce0:	bf00      	nop
 8001ce2:	e004      	b.n	8001cee <DMA_CheckFifoParam+0xe6>
      break;
 8001ce4:	bf00      	nop
 8001ce6:	e002      	b.n	8001cee <DMA_CheckFifoParam+0xe6>
      break;   
 8001ce8:	bf00      	nop
 8001cea:	e000      	b.n	8001cee <DMA_CheckFifoParam+0xe6>
      break;
 8001cec:	bf00      	nop
    }
  } 
  
  return status; 
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e159      	b.n	8001fcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 8148 	bne.w	8001fc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d00b      	beq.n	8001d56 <HAL_GPIO_Init+0x5a>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d4a:	2b11      	cmp	r3, #17
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d130      	bne.n	8001db8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 0201 	and.w	r2, r3, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0xfc>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b12      	cmp	r3, #18
 8001df6:	d123      	bne.n	8001e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3208      	adds	r2, #8
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80a2 	beq.w	8001fc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b56      	ldr	r3, [pc, #344]	; (8001fe0 <HAL_GPIO_Init+0x2e4>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a55      	ldr	r2, [pc, #340]	; (8001fe0 <HAL_GPIO_Init+0x2e4>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_GPIO_Init+0x2e4>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9e:	4a51      	ldr	r2, [pc, #324]	; (8001fe4 <HAL_GPIO_Init+0x2e8>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a48      	ldr	r2, [pc, #288]	; (8001fe8 <HAL_GPIO_Init+0x2ec>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d019      	beq.n	8001efe <HAL_GPIO_Init+0x202>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a47      	ldr	r2, [pc, #284]	; (8001fec <HAL_GPIO_Init+0x2f0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0x1fe>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a46      	ldr	r2, [pc, #280]	; (8001ff0 <HAL_GPIO_Init+0x2f4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00d      	beq.n	8001ef6 <HAL_GPIO_Init+0x1fa>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a45      	ldr	r2, [pc, #276]	; (8001ff4 <HAL_GPIO_Init+0x2f8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d007      	beq.n	8001ef2 <HAL_GPIO_Init+0x1f6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a44      	ldr	r2, [pc, #272]	; (8001ff8 <HAL_GPIO_Init+0x2fc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_GPIO_Init+0x1f2>
 8001eea:	2304      	movs	r3, #4
 8001eec:	e008      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001eee:	2307      	movs	r3, #7
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x204>
 8001efe:	2300      	movs	r3, #0
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f002 0203 	and.w	r2, r2, #3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f10:	4934      	ldr	r1, [pc, #208]	; (8001fe4 <HAL_GPIO_Init+0x2e8>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1e:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f42:	4a2e      	ldr	r2, [pc, #184]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f48:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f6c:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f96:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc0:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <HAL_GPIO_Init+0x300>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	f67f aea2 	bls.w	8001d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3724      	adds	r7, #36	; 0x24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40013800 	.word	0x40013800
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	40020800 	.word	0x40020800
 8001ff4:	40020c00 	.word	0x40020c00
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40013c00 	.word	0x40013c00

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800201c:	e003      	b.n	8002026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	041a      	lsls	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	619a      	str	r2, [r3, #24]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e25b      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d075      	beq.n	800213e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002052:	4ba3      	ldr	r3, [pc, #652]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b04      	cmp	r3, #4
 800205c:	d00c      	beq.n	8002078 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205e:	4ba0      	ldr	r3, [pc, #640]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002066:	2b08      	cmp	r3, #8
 8002068:	d112      	bne.n	8002090 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206a:	4b9d      	ldr	r3, [pc, #628]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002076:	d10b      	bne.n	8002090 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	4b99      	ldr	r3, [pc, #612]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d05b      	beq.n	800213c <HAL_RCC_OscConfig+0x108>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d157      	bne.n	800213c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e236      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002098:	d106      	bne.n	80020a8 <HAL_RCC_OscConfig+0x74>
 800209a:	4b91      	ldr	r3, [pc, #580]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a90      	ldr	r2, [pc, #576]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e01d      	b.n	80020e4 <HAL_RCC_OscConfig+0xb0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0x98>
 80020b2:	4b8b      	ldr	r3, [pc, #556]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a8a      	ldr	r2, [pc, #552]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a87      	ldr	r2, [pc, #540]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e00b      	b.n	80020e4 <HAL_RCC_OscConfig+0xb0>
 80020cc:	4b84      	ldr	r3, [pc, #528]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a83      	ldr	r2, [pc, #524]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a80      	ldr	r2, [pc, #512]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff f958 	bl	80013a0 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff f954 	bl	80013a0 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1fb      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0xc0>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff f944 	bl	80013a0 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff f940 	bl	80013a0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1e7      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	4b6c      	ldr	r3, [pc, #432]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0xe8>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d063      	beq.n	8002212 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214a:	4b65      	ldr	r3, [pc, #404]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00b      	beq.n	800216e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002156:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800215e:	2b08      	cmp	r3, #8
 8002160:	d11c      	bne.n	800219c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d116      	bne.n	800219c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <HAL_RCC_OscConfig+0x152>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d001      	beq.n	8002186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e1bb      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	4b56      	ldr	r3, [pc, #344]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4952      	ldr	r1, [pc, #328]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	e03a      	b.n	8002212 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a4:	4b4f      	ldr	r3, [pc, #316]	; (80022e4 <HAL_RCC_OscConfig+0x2b0>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7ff f8f9 	bl	80013a0 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b2:	f7ff f8f5 	bl	80013a0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e19c      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	4b46      	ldr	r3, [pc, #280]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b43      	ldr	r3, [pc, #268]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4940      	ldr	r1, [pc, #256]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
 80021e4:	e015      	b.n	8002212 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e6:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <HAL_RCC_OscConfig+0x2b0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7ff f8d8 	bl	80013a0 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f4:	f7ff f8d4 	bl	80013a0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e17b      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d030      	beq.n	8002280 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d016      	beq.n	8002254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <HAL_RCC_OscConfig+0x2b4>)
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff f8b8 	bl	80013a0 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002234:	f7ff f8b4 	bl	80013a0 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e15b      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x200>
 8002252:	e015      	b.n	8002280 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_RCC_OscConfig+0x2b4>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff f8a1 	bl	80013a0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002262:	f7ff f89d 	bl	80013a0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e144      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80a0 	beq.w	80023ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_OscConfig+0x2b8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d121      	bne.n	800230e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_RCC_OscConfig+0x2b8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a07      	ldr	r2, [pc, #28]	; (80022ec <HAL_RCC_OscConfig+0x2b8>)
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d6:	f7ff f863 	bl	80013a0 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	e011      	b.n	8002302 <HAL_RCC_OscConfig+0x2ce>
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	42470000 	.word	0x42470000
 80022e8:	42470e80 	.word	0x42470e80
 80022ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f0:	f7ff f856 	bl	80013a0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0fd      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002302:	4b81      	ldr	r3, [pc, #516]	; (8002508 <HAL_RCC_OscConfig+0x4d4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x2f0>
 8002316:	4b7d      	ldr	r3, [pc, #500]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231a:	4a7c      	ldr	r2, [pc, #496]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6713      	str	r3, [r2, #112]	; 0x70
 8002322:	e01c      	b.n	800235e <HAL_RCC_OscConfig+0x32a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d10c      	bne.n	8002346 <HAL_RCC_OscConfig+0x312>
 800232c:	4b77      	ldr	r3, [pc, #476]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	4a76      	ldr	r2, [pc, #472]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6713      	str	r3, [r2, #112]	; 0x70
 8002338:	4b74      	ldr	r3, [pc, #464]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	4a73      	ldr	r2, [pc, #460]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6713      	str	r3, [r2, #112]	; 0x70
 8002344:	e00b      	b.n	800235e <HAL_RCC_OscConfig+0x32a>
 8002346:	4b71      	ldr	r3, [pc, #452]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a70      	ldr	r2, [pc, #448]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
 8002352:	4b6e      	ldr	r3, [pc, #440]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	4a6d      	ldr	r2, [pc, #436]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d015      	beq.n	8002392 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002366:	f7ff f81b 	bl	80013a0 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7ff f817 	bl	80013a0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0bc      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	4b61      	ldr	r3, [pc, #388]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ee      	beq.n	800236e <HAL_RCC_OscConfig+0x33a>
 8002390:	e014      	b.n	80023bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002392:	f7ff f805 	bl	80013a0 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7ff f801 	bl	80013a0 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0a6      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	4b56      	ldr	r3, [pc, #344]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ee      	bne.n	800239a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b52      	ldr	r3, [pc, #328]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a51      	ldr	r2, [pc, #324]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8092 	beq.w	80024fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d8:	4b4c      	ldr	r3, [pc, #304]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d05c      	beq.n	800249e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d141      	bne.n	8002470 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b48      	ldr	r3, [pc, #288]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe ffd5 	bl	80013a0 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe ffd1 	bl	80013a0 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e078      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240c:	4b3f      	ldr	r3, [pc, #252]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	019b      	lsls	r3, r3, #6
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	3b01      	subs	r3, #1
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	061b      	lsls	r3, r3, #24
 800243c:	4933      	ldr	r1, [pc, #204]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002442:	4b33      	ldr	r3, [pc, #204]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe ffaa 	bl	80013a0 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe ffa6 	bl	80013a0 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e04d      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x41c>
 800246e:	e045      	b.n	80024fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_RCC_OscConfig+0x4dc>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe ff93 	bl	80013a0 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247e:	f7fe ff8f 	bl	80013a0 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e036      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f0      	bne.n	800247e <HAL_RCC_OscConfig+0x44a>
 800249c:	e02e      	b.n	80024fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e029      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_RCC_OscConfig+0x4d8>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d11c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d115      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d2:	4013      	ands	r3, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d8:	4293      	cmp	r3, r2
 80024da:	d10d      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40007000 	.word	0x40007000
 800250c:	40023800 	.word	0x40023800
 8002510:	42470060 	.word	0x42470060

08002514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0cc      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b68      	ldr	r3, [pc, #416]	; (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d90c      	bls.n	8002550 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b65      	ldr	r3, [pc, #404]	; (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0b8      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002568:	4b59      	ldr	r3, [pc, #356]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4a58      	ldr	r2, [pc, #352]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002572:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002580:	4b53      	ldr	r3, [pc, #332]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a52      	ldr	r2, [pc, #328]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800258a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	494d      	ldr	r1, [pc, #308]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d044      	beq.n	8002634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d119      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d2:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e06f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e2:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e067      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f2:	4b37      	ldr	r3, [pc, #220]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f023 0203 	bic.w	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4934      	ldr	r1, [pc, #208]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	4313      	orrs	r3, r2
 8002602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002604:	f7fe fecc 	bl	80013a0 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	e00a      	b.n	8002622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260c:	f7fe fec8 	bl	80013a0 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e04f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 020c 	and.w	r2, r3, #12
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	429a      	cmp	r2, r3
 8002632:	d1eb      	bne.n	800260c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002634:	4b25      	ldr	r3, [pc, #148]	; (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d20c      	bcs.n	800265c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e032      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4916      	ldr	r1, [pc, #88]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	490e      	ldr	r1, [pc, #56]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800269a:	f000 f821 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 800269e:	4601      	mov	r1, r0
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	5cd3      	ldrb	r3, [r2, r3]
 80026ae:	fa21 f303 	lsr.w	r3, r1, r3
 80026b2:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1c8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fe2c 	bl	8001318 <HAL_InitTick>

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023c00 	.word	0x40023c00
 80026d0:	40023800 	.word	0x40023800
 80026d4:	0800440c 	.word	0x0800440c
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000004 	.word	0x20000004

080026e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	2300      	movs	r3, #0
 80026f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f6:	4b50      	ldr	r3, [pc, #320]	; (8002838 <HAL_RCC_GetSysClockFreq+0x158>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d007      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x32>
 8002702:	2b08      	cmp	r3, #8
 8002704:	d008      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x38>
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 808d 	bne.w	8002826 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4b4b      	ldr	r3, [pc, #300]	; (800283c <HAL_RCC_GetSysClockFreq+0x15c>)
 800270e:	60bb      	str	r3, [r7, #8]
       break;
 8002710:	e08c      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002712:	4b4b      	ldr	r3, [pc, #300]	; (8002840 <HAL_RCC_GetSysClockFreq+0x160>)
 8002714:	60bb      	str	r3, [r7, #8]
      break;
 8002716:	e089      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002718:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_GetSysClockFreq+0x158>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002720:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002722:	4b45      	ldr	r3, [pc, #276]	; (8002838 <HAL_RCC_GetSysClockFreq+0x158>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d023      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272e:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_RCC_GetSysClockFreq+0x158>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	f04f 0400 	mov.w	r4, #0
 8002738:	f240 11ff 	movw	r1, #511	; 0x1ff
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	ea03 0501 	and.w	r5, r3, r1
 8002744:	ea04 0602 	and.w	r6, r4, r2
 8002748:	4a3d      	ldr	r2, [pc, #244]	; (8002840 <HAL_RCC_GetSysClockFreq+0x160>)
 800274a:	fb02 f106 	mul.w	r1, r2, r6
 800274e:	2200      	movs	r2, #0
 8002750:	fb02 f205 	mul.w	r2, r2, r5
 8002754:	440a      	add	r2, r1
 8002756:	493a      	ldr	r1, [pc, #232]	; (8002840 <HAL_RCC_GetSysClockFreq+0x160>)
 8002758:	fba5 0101 	umull	r0, r1, r5, r1
 800275c:	1853      	adds	r3, r2, r1
 800275e:	4619      	mov	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f04f 0400 	mov.w	r4, #0
 8002766:	461a      	mov	r2, r3
 8002768:	4623      	mov	r3, r4
 800276a:	f7fd fd35 	bl	80001d8 <__aeabi_uldivmod>
 800276e:	4603      	mov	r3, r0
 8002770:	460c      	mov	r4, r1
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e049      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002776:	4b30      	ldr	r3, [pc, #192]	; (8002838 <HAL_RCC_GetSysClockFreq+0x158>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	099b      	lsrs	r3, r3, #6
 800277c:	f04f 0400 	mov.w	r4, #0
 8002780:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	ea03 0501 	and.w	r5, r3, r1
 800278c:	ea04 0602 	and.w	r6, r4, r2
 8002790:	4629      	mov	r1, r5
 8002792:	4632      	mov	r2, r6
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	f04f 0400 	mov.w	r4, #0
 800279c:	0154      	lsls	r4, r2, #5
 800279e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027a2:	014b      	lsls	r3, r1, #5
 80027a4:	4619      	mov	r1, r3
 80027a6:	4622      	mov	r2, r4
 80027a8:	1b49      	subs	r1, r1, r5
 80027aa:	eb62 0206 	sbc.w	r2, r2, r6
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	f04f 0400 	mov.w	r4, #0
 80027b6:	0194      	lsls	r4, r2, #6
 80027b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027bc:	018b      	lsls	r3, r1, #6
 80027be:	1a5b      	subs	r3, r3, r1
 80027c0:	eb64 0402 	sbc.w	r4, r4, r2
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	00e2      	lsls	r2, r4, #3
 80027ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027d2:	00d9      	lsls	r1, r3, #3
 80027d4:	460b      	mov	r3, r1
 80027d6:	4614      	mov	r4, r2
 80027d8:	195b      	adds	r3, r3, r5
 80027da:	eb44 0406 	adc.w	r4, r4, r6
 80027de:	f04f 0100 	mov.w	r1, #0
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	02a2      	lsls	r2, r4, #10
 80027e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027ec:	0299      	lsls	r1, r3, #10
 80027ee:	460b      	mov	r3, r1
 80027f0:	4614      	mov	r4, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	4621      	mov	r1, r4
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f04f 0400 	mov.w	r4, #0
 80027fc:	461a      	mov	r2, r3
 80027fe:	4623      	mov	r3, r4
 8002800:	f7fd fcea 	bl	80001d8 <__aeabi_uldivmod>
 8002804:	4603      	mov	r3, r0
 8002806:	460c      	mov	r4, r1
 8002808:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_GetSysClockFreq+0x158>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	0c1b      	lsrs	r3, r3, #16
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	3301      	adds	r3, #1
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002822:	60bb      	str	r3, [r7, #8]
      break;
 8002824:	e002      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002828:	60bb      	str	r3, [r7, #8]
      break;
 800282a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282c:	68bb      	ldr	r3, [r7, #8]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	00f42400 	.word	0x00f42400
 8002840:	017d7840 	.word	0x017d7840

08002844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_RCC_GetHCLKFreq+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000000 	.word	0x20000000

0800285c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002860:	f7ff fff0 	bl	8002844 <HAL_RCC_GetHCLKFreq>
 8002864:	4601      	mov	r1, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0a9b      	lsrs	r3, r3, #10
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4a03      	ldr	r2, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	0800441c 	.word	0x0800441c

08002884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002888:	f7ff ffdc 	bl	8002844 <HAL_RCC_GetHCLKFreq>
 800288c:	4601      	mov	r1, r0
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	0b5b      	lsrs	r3, r3, #13
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40023800 	.word	0x40023800
 80028a8:	0800441c 	.word	0x0800441c

080028ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e056      	b.n	800296c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7fe f8c5 	bl	8000a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	ea42 0103 	orr.w	r1, r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	0c1b      	lsrs	r3, r3, #16
 800293c:	f003 0104 	and.w	r1, r3, #4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e01d      	b.n	80029c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe fb70 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 fbea 	bl	800318c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b06      	cmp	r3, #6
 80029f2:	d007      	beq.n	8002a04 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e01d      	b.n	8002a60 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7fe f9eb 	bl	8000e14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f000 fb9b 	bl	800318c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d101      	bne.n	8002a86 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
 8002a84:	e0e9      	b.n	8002c5a <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10b      	bne.n	8002aaa <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_PWM_Start_DMA+0x3a>
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0db      	b.n	8002c5a <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b0c      	cmp	r3, #12
 8002aae:	f200 80ad 	bhi.w	8002c0c <HAL_TIM_PWM_Start_DMA+0x1a4>
 8002ab2:	a201      	add	r2, pc, #4	; (adr r2, 8002ab8 <HAL_TIM_PWM_Start_DMA+0x50>)
 8002ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab8:	08002aed 	.word	0x08002aed
 8002abc:	08002c0d 	.word	0x08002c0d
 8002ac0:	08002c0d 	.word	0x08002c0d
 8002ac4:	08002c0d 	.word	0x08002c0d
 8002ac8:	08002b35 	.word	0x08002b35
 8002acc:	08002c0d 	.word	0x08002c0d
 8002ad0:	08002c0d 	.word	0x08002c0d
 8002ad4:	08002c0d 	.word	0x08002c0d
 8002ad8:	08002b7d 	.word	0x08002b7d
 8002adc:	08002c0d 	.word	0x08002c0d
 8002ae0:	08002c0d 	.word	0x08002c0d
 8002ae4:	08002c0d 	.word	0x08002c0d
 8002ae8:	08002bc5 	.word	0x08002bc5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	4a5c      	ldr	r2, [pc, #368]	; (8002c64 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	4a5b      	ldr	r2, [pc, #364]	; (8002c68 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	4a5a      	ldr	r2, [pc, #360]	; (8002c6c <HAL_TIM_PWM_Start_DMA+0x204>)
 8002b02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3334      	adds	r3, #52	; 0x34
 8002b10:	461a      	mov	r2, r3
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	f7fe fe10 	bl	8001738 <HAL_DMA_Start_IT>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e09b      	b.n	8002c5a <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b30:	60da      	str	r2, [r3, #12]
      break;
 8002b32:	e06c      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002b3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	4a49      	ldr	r2, [pc, #292]	; (8002c68 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	4a48      	ldr	r2, [pc, #288]	; (8002c6c <HAL_TIM_PWM_Start_DMA+0x204>)
 8002b4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3338      	adds	r3, #56	; 0x38
 8002b58:	461a      	mov	r2, r3
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	f7fe fdec 	bl	8001738 <HAL_DMA_Start_IT>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e077      	b.n	8002c5a <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b78:	60da      	str	r2, [r3, #12]
      break;
 8002b7a:	e048      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	4a38      	ldr	r2, [pc, #224]	; (8002c64 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002b82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	4a37      	ldr	r2, [pc, #220]	; (8002c68 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	4a36      	ldr	r2, [pc, #216]	; (8002c6c <HAL_TIM_PWM_Start_DMA+0x204>)
 8002b92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	333c      	adds	r3, #60	; 0x3c
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	f7fe fdc8 	bl	8001738 <HAL_DMA_Start_IT>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e053      	b.n	8002c5a <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc0:	60da      	str	r2, [r3, #12]
      break;
 8002bc2:	e024      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4a26      	ldr	r2, [pc, #152]	; (8002c64 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002bca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <HAL_TIM_PWM_Start_DMA+0x204>)
 8002bda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3340      	adds	r3, #64	; 0x40
 8002be8:	461a      	mov	r2, r3
 8002bea:	887b      	ldrh	r3, [r7, #2]
 8002bec:	f7fe fda4 	bl	8001738 <HAL_DMA_Start_IT>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e02f      	b.n	8002c5a <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c08:	60da      	str	r2, [r3, #12]
      break;
 8002c0a:	e000      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8002c0c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fcc4 	bl	80035a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <HAL_TIM_PWM_Start_DMA+0x208>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d107      	bne.n	8002c36 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b06      	cmp	r3, #6
 8002c46:	d007      	beq.n	8002c58 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	080030ad 	.word	0x080030ad
 8002c68:	0800311d 	.word	0x0800311d
 8002c6c:	08003089 	.word	0x08003089
 8002c70:	40010000 	.word	0x40010000

08002c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d122      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d11b      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0202 	mvn.w	r2, #2
 8002ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f9b4 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f9a6 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f9b7 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d122      	bne.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d11b      	bne.n	8002d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0204 	mvn.w	r2, #4
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f98a 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f97c 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f98d 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0208 	mvn.w	r2, #8
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f960 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f952 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f963 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0210 	mvn.w	r2, #16
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2208      	movs	r2, #8
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f936 	bl	8003024 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f928 	bl	8003010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f939 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d10e      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0201 	mvn.w	r2, #1
 8002df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd fd50 	bl	8000898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b80      	cmp	r3, #128	; 0x80
 8002e04:	d10e      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b80      	cmp	r3, #128	; 0x80
 8002e12:	d107      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fc5e 	bl	80036e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d10e      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d107      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f908 	bl	8003060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d10e      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d107      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0220 	mvn.w	r2, #32
 8002e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fc28 	bl	80036cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e0b4      	b.n	8003008 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b0c      	cmp	r3, #12
 8002eb2:	f200 809f 	bhi.w	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ef1 	.word	0x08002ef1
 8002ec0:	08002ff5 	.word	0x08002ff5
 8002ec4:	08002ff5 	.word	0x08002ff5
 8002ec8:	08002ff5 	.word	0x08002ff5
 8002ecc:	08002f31 	.word	0x08002f31
 8002ed0:	08002ff5 	.word	0x08002ff5
 8002ed4:	08002ff5 	.word	0x08002ff5
 8002ed8:	08002ff5 	.word	0x08002ff5
 8002edc:	08002f73 	.word	0x08002f73
 8002ee0:	08002ff5 	.word	0x08002ff5
 8002ee4:	08002ff5 	.word	0x08002ff5
 8002ee8:	08002ff5 	.word	0x08002ff5
 8002eec:	08002fb3 	.word	0x08002fb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f9c8 	bl	800328c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0208 	orr.w	r2, r2, #8
 8002f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0204 	bic.w	r2, r2, #4
 8002f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6999      	ldr	r1, [r3, #24]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	619a      	str	r2, [r3, #24]
      break;
 8002f2e:	e062      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fa0e 	bl	8003358 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6999      	ldr	r1, [r3, #24]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	021a      	lsls	r2, r3, #8
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	619a      	str	r2, [r3, #24]
      break;
 8002f70:	e041      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fa59 	bl	8003430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0208 	orr.w	r2, r2, #8
 8002f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0204 	bic.w	r2, r2, #4
 8002f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69d9      	ldr	r1, [r3, #28]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	61da      	str	r2, [r3, #28]
      break;
 8002fb0:	e021      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 faa3 	bl	8003504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69d9      	ldr	r1, [r3, #28]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	021a      	lsls	r2, r3, #8
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	61da      	str	r2, [r3, #28]
      break;
 8002ff2:	e000      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002ff4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7ff ffe8 	bl	8003074 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d103      	bne.n	80030d4 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	771a      	strb	r2, [r3, #28]
 80030d2:	e019      	b.n	8003108 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d103      	bne.n	80030e6 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2202      	movs	r2, #2
 80030e2:	771a      	strb	r2, [r3, #28]
 80030e4:	e010      	b.n	8003108 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d103      	bne.n	80030f8 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2204      	movs	r2, #4
 80030f4:	771a      	strb	r2, [r3, #28]
 80030f6:	e007      	b.n	8003108 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d102      	bne.n	8003108 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2208      	movs	r2, #8
 8003106:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff ff95 	bl	8003038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	771a      	strb	r2, [r3, #28]
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	d103      	bne.n	8003144 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	771a      	strb	r2, [r3, #28]
 8003142:	e019      	b.n	8003178 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d103      	bne.n	8003156 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2202      	movs	r2, #2
 8003152:	771a      	strb	r2, [r3, #28]
 8003154:	e010      	b.n	8003178 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	d103      	bne.n	8003168 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2204      	movs	r2, #4
 8003164:	771a      	strb	r2, [r3, #28]
 8003166:	e007      	b.n	8003178 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d102      	bne.n	8003178 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2208      	movs	r2, #8
 8003176:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7ff ff67 	bl	800304c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a34      	ldr	r2, [pc, #208]	; (8003270 <TIM_Base_SetConfig+0xe4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00f      	beq.n	80031c4 <TIM_Base_SetConfig+0x38>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031aa:	d00b      	beq.n	80031c4 <TIM_Base_SetConfig+0x38>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a31      	ldr	r2, [pc, #196]	; (8003274 <TIM_Base_SetConfig+0xe8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d007      	beq.n	80031c4 <TIM_Base_SetConfig+0x38>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a30      	ldr	r2, [pc, #192]	; (8003278 <TIM_Base_SetConfig+0xec>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d003      	beq.n	80031c4 <TIM_Base_SetConfig+0x38>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a2f      	ldr	r2, [pc, #188]	; (800327c <TIM_Base_SetConfig+0xf0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d108      	bne.n	80031d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a25      	ldr	r2, [pc, #148]	; (8003270 <TIM_Base_SetConfig+0xe4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01b      	beq.n	8003216 <TIM_Base_SetConfig+0x8a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e4:	d017      	beq.n	8003216 <TIM_Base_SetConfig+0x8a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a22      	ldr	r2, [pc, #136]	; (8003274 <TIM_Base_SetConfig+0xe8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <TIM_Base_SetConfig+0x8a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a21      	ldr	r2, [pc, #132]	; (8003278 <TIM_Base_SetConfig+0xec>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00f      	beq.n	8003216 <TIM_Base_SetConfig+0x8a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a20      	ldr	r2, [pc, #128]	; (800327c <TIM_Base_SetConfig+0xf0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00b      	beq.n	8003216 <TIM_Base_SetConfig+0x8a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <TIM_Base_SetConfig+0xf4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d007      	beq.n	8003216 <TIM_Base_SetConfig+0x8a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <TIM_Base_SetConfig+0xf8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d003      	beq.n	8003216 <TIM_Base_SetConfig+0x8a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <TIM_Base_SetConfig+0xfc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d108      	bne.n	8003228 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a08      	ldr	r2, [pc, #32]	; (8003270 <TIM_Base_SetConfig+0xe4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d103      	bne.n	800325c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	615a      	str	r2, [r3, #20]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40010000 	.word	0x40010000
 8003274:	40000400 	.word	0x40000400
 8003278:	40000800 	.word	0x40000800
 800327c:	40000c00 	.word	0x40000c00
 8003280:	40014000 	.word	0x40014000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800

0800328c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f023 0201 	bic.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 0302 	bic.w	r3, r3, #2
 80032d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <TIM_OC1_SetConfig+0xc8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10c      	bne.n	8003302 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0308 	bic.w	r3, r3, #8
 80032ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 0304 	bic.w	r3, r3, #4
 8003300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a13      	ldr	r2, [pc, #76]	; (8003354 <TIM_OC1_SetConfig+0xc8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d111      	bne.n	800332e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40010000 	.word	0x40010000

08003358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0210 	bic.w	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0320 	bic.w	r3, r3, #32
 80033a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a1e      	ldr	r2, [pc, #120]	; (800342c <TIM_OC2_SetConfig+0xd4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d10d      	bne.n	80033d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a15      	ldr	r2, [pc, #84]	; (800342c <TIM_OC2_SetConfig+0xd4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d113      	bne.n	8003404 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	621a      	str	r2, [r3, #32]
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40010000 	.word	0x40010000

08003430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <TIM_OC3_SetConfig+0xd0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10d      	bne.n	80034aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a14      	ldr	r2, [pc, #80]	; (8003500 <TIM_OC3_SetConfig+0xd0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d113      	bne.n	80034da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	621a      	str	r2, [r3, #32]
}
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40010000 	.word	0x40010000

08003504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800354e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	031b      	lsls	r3, r3, #12
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <TIM_OC4_SetConfig+0x9c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d109      	bne.n	8003578 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800356a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	019b      	lsls	r3, r3, #6
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40010000 	.word	0x40010000

080035a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	2201      	movs	r2, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	401a      	ands	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1a      	ldr	r2, [r3, #32]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	621a      	str	r2, [r3, #32]
}
 80035e2:	bf00      	nop
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003604:	2302      	movs	r3, #2
 8003606:	e050      	b.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d018      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003654:	d013      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a18      	ldr	r2, [pc, #96]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00e      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d009      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d10c      	bne.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4313      	orrs	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40000c00 	.word	0x40000c00
 80036c8:	40014000 	.word	0x40014000

080036cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e03f      	b.n	8003786 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd fd60 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fab3 	bl	8003ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800374c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800375c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800376c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800378e:	b480      	push	{r7}
 8003790:	b085      	sub	sp, #20
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	4613      	mov	r3, r2
 800379a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d140      	bne.n	800382a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_UART_Receive_IT+0x26>
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e039      	b.n	800382c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_UART_Receive_IT+0x38>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e032      	b.n	800382c <HAL_UART_Receive_IT+0x9e>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	88fa      	ldrh	r2, [r7, #6]
 80037de:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2222      	movs	r2, #34	; 0x22
 80037ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003804:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0220 	orr.w	r2, r2, #32
 8003824:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10d      	bne.n	800388a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_UART_IRQHandler+0x52>
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f98c 	bl	8003ba0 <UART_Receive_IT>
      return;
 8003888:	e0d1      	b.n	8003a2e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80b0 	beq.w	80039f2 <HAL_UART_IRQHandler+0x1ba>
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d105      	bne.n	80038a8 <HAL_UART_IRQHandler+0x70>
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80a5 	beq.w	80039f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_UART_IRQHandler+0x90>
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	f043 0201 	orr.w	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_UART_IRQHandler+0xb0>
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	f043 0202 	orr.w	r2, r3, #2
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_UART_IRQHandler+0xd0>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	f043 0204 	orr.w	r2, r3, #4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00f      	beq.n	8003932 <HAL_UART_IRQHandler+0xfa>
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_UART_IRQHandler+0xee>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	f043 0208 	orr.w	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d078      	beq.n	8003a2c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <HAL_UART_IRQHandler+0x11c>
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f926 	bl	8003ba0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	bf0c      	ite	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	2300      	movne	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <HAL_UART_IRQHandler+0x144>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d031      	beq.n	80039e0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f86f 	bl	8003a60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d123      	bne.n	80039d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d013      	beq.n	80039d0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	4a21      	ldr	r2, [pc, #132]	; (8003a34 <HAL_UART_IRQHandler+0x1fc>)
 80039ae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd ff17 	bl	80017e8 <HAL_DMA_Abort_IT>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d016      	beq.n	80039ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039ca:	4610      	mov	r0, r2
 80039cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ce:	e00e      	b.n	80039ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f83b 	bl	8003a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d6:	e00a      	b.n	80039ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f837 	bl	8003a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039de:	e006      	b.n	80039ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f833 	bl	8003a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80039ec:	e01e      	b.n	8003a2c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ee:	bf00      	nop
    return;
 80039f0:	e01c      	b.n	8003a2c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_UART_IRQHandler+0x1d6>
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f85c 	bl	8003ac4 <UART_Transmit_IT>
    return;
 8003a0c:	e00f      	b.n	8003a2e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_UART_IRQHandler+0x1f6>
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8a4 	bl	8003b70 <UART_EndTransmit_IT>
    return;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <HAL_UART_IRQHandler+0x1f6>
    return;
 8003a2c:	bf00      	nop
  }
}
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	08003a9d 	.word	0x08003a9d

08003a38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff ffc8 	bl	8003a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b21      	cmp	r3, #33	; 0x21
 8003ad6:	d144      	bne.n	8003b62 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae0:	d11a      	bne.n	8003b18 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	1c9a      	adds	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	621a      	str	r2, [r3, #32]
 8003b0a:	e00e      	b.n	8003b2a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	621a      	str	r2, [r3, #32]
 8003b16:	e008      	b.n	8003b2a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	1c59      	adds	r1, r3, #1
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6211      	str	r1, [r2, #32]
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4619      	mov	r1, r3
 8003b38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e000      	b.n	8003b64 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
  }
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff51 	bl	8003a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b22      	cmp	r3, #34	; 0x22
 8003bb2:	d171      	bne.n	8003c98 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbc:	d123      	bne.n	8003c06 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10e      	bne.n	8003bea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	1c9a      	adds	r2, r3, #2
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28
 8003be8:	e029      	b.n	8003c3e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
 8003c04:	e01b      	b.n	8003c3e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6858      	ldr	r0, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	1c59      	adds	r1, r3, #1
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6291      	str	r1, [r2, #40]	; 0x28
 8003c1e:	b2c2      	uxtb	r2, r0
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e00c      	b.n	8003c3e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	1c58      	adds	r0, r3, #1
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	6288      	str	r0, [r1, #40]	; 0x28
 8003c36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d120      	bne.n	8003c94 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0220 	bic.w	r2, r2, #32
 8003c60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695a      	ldr	r2, [r3, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fc fe1a 	bl	80008c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e002      	b.n	8003c9a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e000      	b.n	8003c9a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
  }
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ce6:	f023 030c 	bic.w	r3, r3, #12
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	68f9      	ldr	r1, [r7, #12]
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d12:	f040 818b 	bne.w	800402c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4ac1      	ldr	r2, [pc, #772]	; (8004020 <UART_SetConfig+0x37c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d005      	beq.n	8003d2c <UART_SetConfig+0x88>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4abf      	ldr	r2, [pc, #764]	; (8004024 <UART_SetConfig+0x380>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	f040 80bd 	bne.w	8003ea6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d2c:	f7fe fdaa 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 8003d30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	461d      	mov	r5, r3
 8003d36:	f04f 0600 	mov.w	r6, #0
 8003d3a:	46a8      	mov	r8, r5
 8003d3c:	46b1      	mov	r9, r6
 8003d3e:	eb18 0308 	adds.w	r3, r8, r8
 8003d42:	eb49 0409 	adc.w	r4, r9, r9
 8003d46:	4698      	mov	r8, r3
 8003d48:	46a1      	mov	r9, r4
 8003d4a:	eb18 0805 	adds.w	r8, r8, r5
 8003d4e:	eb49 0906 	adc.w	r9, r9, r6
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d66:	4688      	mov	r8, r1
 8003d68:	4691      	mov	r9, r2
 8003d6a:	eb18 0005 	adds.w	r0, r8, r5
 8003d6e:	eb49 0106 	adc.w	r1, r9, r6
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	461d      	mov	r5, r3
 8003d78:	f04f 0600 	mov.w	r6, #0
 8003d7c:	196b      	adds	r3, r5, r5
 8003d7e:	eb46 0406 	adc.w	r4, r6, r6
 8003d82:	461a      	mov	r2, r3
 8003d84:	4623      	mov	r3, r4
 8003d86:	f7fc fa27 	bl	80001d8 <__aeabi_uldivmod>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	460c      	mov	r4, r1
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4ba5      	ldr	r3, [pc, #660]	; (8004028 <UART_SetConfig+0x384>)
 8003d92:	fba3 2302 	umull	r2, r3, r3, r2
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	461d      	mov	r5, r3
 8003da0:	f04f 0600 	mov.w	r6, #0
 8003da4:	46a9      	mov	r9, r5
 8003da6:	46b2      	mov	sl, r6
 8003da8:	eb19 0309 	adds.w	r3, r9, r9
 8003dac:	eb4a 040a 	adc.w	r4, sl, sl
 8003db0:	4699      	mov	r9, r3
 8003db2:	46a2      	mov	sl, r4
 8003db4:	eb19 0905 	adds.w	r9, r9, r5
 8003db8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dd0:	4689      	mov	r9, r1
 8003dd2:	4692      	mov	sl, r2
 8003dd4:	eb19 0005 	adds.w	r0, r9, r5
 8003dd8:	eb4a 0106 	adc.w	r1, sl, r6
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	461d      	mov	r5, r3
 8003de2:	f04f 0600 	mov.w	r6, #0
 8003de6:	196b      	adds	r3, r5, r5
 8003de8:	eb46 0406 	adc.w	r4, r6, r6
 8003dec:	461a      	mov	r2, r3
 8003dee:	4623      	mov	r3, r4
 8003df0:	f7fc f9f2 	bl	80001d8 <__aeabi_uldivmod>
 8003df4:	4603      	mov	r3, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b8b      	ldr	r3, [pc, #556]	; (8004028 <UART_SetConfig+0x384>)
 8003dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	2164      	movs	r1, #100	; 0x64
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	3332      	adds	r3, #50	; 0x32
 8003e0e:	4a86      	ldr	r2, [pc, #536]	; (8004028 <UART_SetConfig+0x384>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e1c:	4498      	add	r8, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	461d      	mov	r5, r3
 8003e22:	f04f 0600 	mov.w	r6, #0
 8003e26:	46a9      	mov	r9, r5
 8003e28:	46b2      	mov	sl, r6
 8003e2a:	eb19 0309 	adds.w	r3, r9, r9
 8003e2e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e32:	4699      	mov	r9, r3
 8003e34:	46a2      	mov	sl, r4
 8003e36:	eb19 0905 	adds.w	r9, r9, r5
 8003e3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e3e:	f04f 0100 	mov.w	r1, #0
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e52:	4689      	mov	r9, r1
 8003e54:	4692      	mov	sl, r2
 8003e56:	eb19 0005 	adds.w	r0, r9, r5
 8003e5a:	eb4a 0106 	adc.w	r1, sl, r6
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	461d      	mov	r5, r3
 8003e64:	f04f 0600 	mov.w	r6, #0
 8003e68:	196b      	adds	r3, r5, r5
 8003e6a:	eb46 0406 	adc.w	r4, r6, r6
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4623      	mov	r3, r4
 8003e72:	f7fc f9b1 	bl	80001d8 <__aeabi_uldivmod>
 8003e76:	4603      	mov	r3, r0
 8003e78:	460c      	mov	r4, r1
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <UART_SetConfig+0x384>)
 8003e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	2164      	movs	r1, #100	; 0x64
 8003e86:	fb01 f303 	mul.w	r3, r1, r3
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	3332      	adds	r3, #50	; 0x32
 8003e90:	4a65      	ldr	r2, [pc, #404]	; (8004028 <UART_SetConfig+0x384>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	f003 0207 	and.w	r2, r3, #7
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4442      	add	r2, r8
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	e26f      	b.n	8004386 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ea6:	f7fe fcd9 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 8003eaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	461d      	mov	r5, r3
 8003eb0:	f04f 0600 	mov.w	r6, #0
 8003eb4:	46a8      	mov	r8, r5
 8003eb6:	46b1      	mov	r9, r6
 8003eb8:	eb18 0308 	adds.w	r3, r8, r8
 8003ebc:	eb49 0409 	adc.w	r4, r9, r9
 8003ec0:	4698      	mov	r8, r3
 8003ec2:	46a1      	mov	r9, r4
 8003ec4:	eb18 0805 	adds.w	r8, r8, r5
 8003ec8:	eb49 0906 	adc.w	r9, r9, r6
 8003ecc:	f04f 0100 	mov.w	r1, #0
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ed8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003edc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ee0:	4688      	mov	r8, r1
 8003ee2:	4691      	mov	r9, r2
 8003ee4:	eb18 0005 	adds.w	r0, r8, r5
 8003ee8:	eb49 0106 	adc.w	r1, r9, r6
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	461d      	mov	r5, r3
 8003ef2:	f04f 0600 	mov.w	r6, #0
 8003ef6:	196b      	adds	r3, r5, r5
 8003ef8:	eb46 0406 	adc.w	r4, r6, r6
 8003efc:	461a      	mov	r2, r3
 8003efe:	4623      	mov	r3, r4
 8003f00:	f7fc f96a 	bl	80001d8 <__aeabi_uldivmod>
 8003f04:	4603      	mov	r3, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4b47      	ldr	r3, [pc, #284]	; (8004028 <UART_SetConfig+0x384>)
 8003f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	461d      	mov	r5, r3
 8003f1a:	f04f 0600 	mov.w	r6, #0
 8003f1e:	46a9      	mov	r9, r5
 8003f20:	46b2      	mov	sl, r6
 8003f22:	eb19 0309 	adds.w	r3, r9, r9
 8003f26:	eb4a 040a 	adc.w	r4, sl, sl
 8003f2a:	4699      	mov	r9, r3
 8003f2c:	46a2      	mov	sl, r4
 8003f2e:	eb19 0905 	adds.w	r9, r9, r5
 8003f32:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f4a:	4689      	mov	r9, r1
 8003f4c:	4692      	mov	sl, r2
 8003f4e:	eb19 0005 	adds.w	r0, r9, r5
 8003f52:	eb4a 0106 	adc.w	r1, sl, r6
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	461d      	mov	r5, r3
 8003f5c:	f04f 0600 	mov.w	r6, #0
 8003f60:	196b      	adds	r3, r5, r5
 8003f62:	eb46 0406 	adc.w	r4, r6, r6
 8003f66:	461a      	mov	r2, r3
 8003f68:	4623      	mov	r3, r4
 8003f6a:	f7fc f935 	bl	80001d8 <__aeabi_uldivmod>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	460c      	mov	r4, r1
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <UART_SetConfig+0x384>)
 8003f76:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2164      	movs	r1, #100	; 0x64
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	3332      	adds	r3, #50	; 0x32
 8003f88:	4a27      	ldr	r2, [pc, #156]	; (8004028 <UART_SetConfig+0x384>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f96:	4498      	add	r8, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	461d      	mov	r5, r3
 8003f9c:	f04f 0600 	mov.w	r6, #0
 8003fa0:	46a9      	mov	r9, r5
 8003fa2:	46b2      	mov	sl, r6
 8003fa4:	eb19 0309 	adds.w	r3, r9, r9
 8003fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8003fac:	4699      	mov	r9, r3
 8003fae:	46a2      	mov	sl, r4
 8003fb0:	eb19 0905 	adds.w	r9, r9, r5
 8003fb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fcc:	4689      	mov	r9, r1
 8003fce:	4692      	mov	sl, r2
 8003fd0:	eb19 0005 	adds.w	r0, r9, r5
 8003fd4:	eb4a 0106 	adc.w	r1, sl, r6
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	461d      	mov	r5, r3
 8003fde:	f04f 0600 	mov.w	r6, #0
 8003fe2:	196b      	adds	r3, r5, r5
 8003fe4:	eb46 0406 	adc.w	r4, r6, r6
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4623      	mov	r3, r4
 8003fec:	f7fc f8f4 	bl	80001d8 <__aeabi_uldivmod>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <UART_SetConfig+0x384>)
 8003ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	2164      	movs	r1, #100	; 0x64
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	3332      	adds	r3, #50	; 0x32
 800400a:	4a07      	ldr	r2, [pc, #28]	; (8004028 <UART_SetConfig+0x384>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	f003 0207 	and.w	r2, r3, #7
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4442      	add	r2, r8
 800401c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800401e:	e1b2      	b.n	8004386 <UART_SetConfig+0x6e2>
 8004020:	40011000 	.word	0x40011000
 8004024:	40011400 	.word	0x40011400
 8004028:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4ad7      	ldr	r2, [pc, #860]	; (8004390 <UART_SetConfig+0x6ec>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d005      	beq.n	8004042 <UART_SetConfig+0x39e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4ad6      	ldr	r2, [pc, #856]	; (8004394 <UART_SetConfig+0x6f0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	f040 80d1 	bne.w	80041e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004042:	f7fe fc1f 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 8004046:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	469a      	mov	sl, r3
 800404c:	f04f 0b00 	mov.w	fp, #0
 8004050:	46d0      	mov	r8, sl
 8004052:	46d9      	mov	r9, fp
 8004054:	eb18 0308 	adds.w	r3, r8, r8
 8004058:	eb49 0409 	adc.w	r4, r9, r9
 800405c:	4698      	mov	r8, r3
 800405e:	46a1      	mov	r9, r4
 8004060:	eb18 080a 	adds.w	r8, r8, sl
 8004064:	eb49 090b 	adc.w	r9, r9, fp
 8004068:	f04f 0100 	mov.w	r1, #0
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004074:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004078:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800407c:	4688      	mov	r8, r1
 800407e:	4691      	mov	r9, r2
 8004080:	eb1a 0508 	adds.w	r5, sl, r8
 8004084:	eb4b 0609 	adc.w	r6, fp, r9
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4619      	mov	r1, r3
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	f04f 0400 	mov.w	r4, #0
 800409a:	0094      	lsls	r4, r2, #2
 800409c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040a0:	008b      	lsls	r3, r1, #2
 80040a2:	461a      	mov	r2, r3
 80040a4:	4623      	mov	r3, r4
 80040a6:	4628      	mov	r0, r5
 80040a8:	4631      	mov	r1, r6
 80040aa:	f7fc f895 	bl	80001d8 <__aeabi_uldivmod>
 80040ae:	4603      	mov	r3, r0
 80040b0:	460c      	mov	r4, r1
 80040b2:	461a      	mov	r2, r3
 80040b4:	4bb8      	ldr	r3, [pc, #736]	; (8004398 <UART_SetConfig+0x6f4>)
 80040b6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	469b      	mov	fp, r3
 80040c4:	f04f 0c00 	mov.w	ip, #0
 80040c8:	46d9      	mov	r9, fp
 80040ca:	46e2      	mov	sl, ip
 80040cc:	eb19 0309 	adds.w	r3, r9, r9
 80040d0:	eb4a 040a 	adc.w	r4, sl, sl
 80040d4:	4699      	mov	r9, r3
 80040d6:	46a2      	mov	sl, r4
 80040d8:	eb19 090b 	adds.w	r9, r9, fp
 80040dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040e0:	f04f 0100 	mov.w	r1, #0
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040f4:	4689      	mov	r9, r1
 80040f6:	4692      	mov	sl, r2
 80040f8:	eb1b 0509 	adds.w	r5, fp, r9
 80040fc:	eb4c 060a 	adc.w	r6, ip, sl
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4619      	mov	r1, r3
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	f04f 0400 	mov.w	r4, #0
 8004112:	0094      	lsls	r4, r2, #2
 8004114:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004118:	008b      	lsls	r3, r1, #2
 800411a:	461a      	mov	r2, r3
 800411c:	4623      	mov	r3, r4
 800411e:	4628      	mov	r0, r5
 8004120:	4631      	mov	r1, r6
 8004122:	f7fc f859 	bl	80001d8 <__aeabi_uldivmod>
 8004126:	4603      	mov	r3, r0
 8004128:	460c      	mov	r4, r1
 800412a:	461a      	mov	r2, r3
 800412c:	4b9a      	ldr	r3, [pc, #616]	; (8004398 <UART_SetConfig+0x6f4>)
 800412e:	fba3 1302 	umull	r1, r3, r3, r2
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2164      	movs	r1, #100	; 0x64
 8004136:	fb01 f303 	mul.w	r3, r1, r3
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	3332      	adds	r3, #50	; 0x32
 8004140:	4a95      	ldr	r2, [pc, #596]	; (8004398 <UART_SetConfig+0x6f4>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800414c:	4498      	add	r8, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	469b      	mov	fp, r3
 8004152:	f04f 0c00 	mov.w	ip, #0
 8004156:	46d9      	mov	r9, fp
 8004158:	46e2      	mov	sl, ip
 800415a:	eb19 0309 	adds.w	r3, r9, r9
 800415e:	eb4a 040a 	adc.w	r4, sl, sl
 8004162:	4699      	mov	r9, r3
 8004164:	46a2      	mov	sl, r4
 8004166:	eb19 090b 	adds.w	r9, r9, fp
 800416a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800417a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800417e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004182:	4689      	mov	r9, r1
 8004184:	4692      	mov	sl, r2
 8004186:	eb1b 0509 	adds.w	r5, fp, r9
 800418a:	eb4c 060a 	adc.w	r6, ip, sl
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4619      	mov	r1, r3
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	f04f 0400 	mov.w	r4, #0
 80041a0:	0094      	lsls	r4, r2, #2
 80041a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041a6:	008b      	lsls	r3, r1, #2
 80041a8:	461a      	mov	r2, r3
 80041aa:	4623      	mov	r3, r4
 80041ac:	4628      	mov	r0, r5
 80041ae:	4631      	mov	r1, r6
 80041b0:	f7fc f812 	bl	80001d8 <__aeabi_uldivmod>
 80041b4:	4603      	mov	r3, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	461a      	mov	r2, r3
 80041ba:	4b77      	ldr	r3, [pc, #476]	; (8004398 <UART_SetConfig+0x6f4>)
 80041bc:	fba3 1302 	umull	r1, r3, r3, r2
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	2164      	movs	r1, #100	; 0x64
 80041c4:	fb01 f303 	mul.w	r3, r1, r3
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	3332      	adds	r3, #50	; 0x32
 80041ce:	4a72      	ldr	r2, [pc, #456]	; (8004398 <UART_SetConfig+0x6f4>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	f003 020f 	and.w	r2, r3, #15
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4442      	add	r2, r8
 80041e0:	609a      	str	r2, [r3, #8]
 80041e2:	e0d0      	b.n	8004386 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80041e4:	f7fe fb3a 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 80041e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	469a      	mov	sl, r3
 80041ee:	f04f 0b00 	mov.w	fp, #0
 80041f2:	46d0      	mov	r8, sl
 80041f4:	46d9      	mov	r9, fp
 80041f6:	eb18 0308 	adds.w	r3, r8, r8
 80041fa:	eb49 0409 	adc.w	r4, r9, r9
 80041fe:	4698      	mov	r8, r3
 8004200:	46a1      	mov	r9, r4
 8004202:	eb18 080a 	adds.w	r8, r8, sl
 8004206:	eb49 090b 	adc.w	r9, r9, fp
 800420a:	f04f 0100 	mov.w	r1, #0
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004216:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800421a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800421e:	4688      	mov	r8, r1
 8004220:	4691      	mov	r9, r2
 8004222:	eb1a 0508 	adds.w	r5, sl, r8
 8004226:	eb4b 0609 	adc.w	r6, fp, r9
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4619      	mov	r1, r3
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	f04f 0400 	mov.w	r4, #0
 800423c:	0094      	lsls	r4, r2, #2
 800423e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004242:	008b      	lsls	r3, r1, #2
 8004244:	461a      	mov	r2, r3
 8004246:	4623      	mov	r3, r4
 8004248:	4628      	mov	r0, r5
 800424a:	4631      	mov	r1, r6
 800424c:	f7fb ffc4 	bl	80001d8 <__aeabi_uldivmod>
 8004250:	4603      	mov	r3, r0
 8004252:	460c      	mov	r4, r1
 8004254:	461a      	mov	r2, r3
 8004256:	4b50      	ldr	r3, [pc, #320]	; (8004398 <UART_SetConfig+0x6f4>)
 8004258:	fba3 2302 	umull	r2, r3, r3, r2
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	469b      	mov	fp, r3
 8004266:	f04f 0c00 	mov.w	ip, #0
 800426a:	46d9      	mov	r9, fp
 800426c:	46e2      	mov	sl, ip
 800426e:	eb19 0309 	adds.w	r3, r9, r9
 8004272:	eb4a 040a 	adc.w	r4, sl, sl
 8004276:	4699      	mov	r9, r3
 8004278:	46a2      	mov	sl, r4
 800427a:	eb19 090b 	adds.w	r9, r9, fp
 800427e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800428e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004292:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004296:	4689      	mov	r9, r1
 8004298:	4692      	mov	sl, r2
 800429a:	eb1b 0509 	adds.w	r5, fp, r9
 800429e:	eb4c 060a 	adc.w	r6, ip, sl
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4619      	mov	r1, r3
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	0094      	lsls	r4, r2, #2
 80042b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042ba:	008b      	lsls	r3, r1, #2
 80042bc:	461a      	mov	r2, r3
 80042be:	4623      	mov	r3, r4
 80042c0:	4628      	mov	r0, r5
 80042c2:	4631      	mov	r1, r6
 80042c4:	f7fb ff88 	bl	80001d8 <__aeabi_uldivmod>
 80042c8:	4603      	mov	r3, r0
 80042ca:	460c      	mov	r4, r1
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b32      	ldr	r3, [pc, #200]	; (8004398 <UART_SetConfig+0x6f4>)
 80042d0:	fba3 1302 	umull	r1, r3, r3, r2
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	2164      	movs	r1, #100	; 0x64
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	3332      	adds	r3, #50	; 0x32
 80042e2:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <UART_SetConfig+0x6f4>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ee:	4498      	add	r8, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	469b      	mov	fp, r3
 80042f4:	f04f 0c00 	mov.w	ip, #0
 80042f8:	46d9      	mov	r9, fp
 80042fa:	46e2      	mov	sl, ip
 80042fc:	eb19 0309 	adds.w	r3, r9, r9
 8004300:	eb4a 040a 	adc.w	r4, sl, sl
 8004304:	4699      	mov	r9, r3
 8004306:	46a2      	mov	sl, r4
 8004308:	eb19 090b 	adds.w	r9, r9, fp
 800430c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004310:	f04f 0100 	mov.w	r1, #0
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800431c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004320:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004324:	4689      	mov	r9, r1
 8004326:	4692      	mov	sl, r2
 8004328:	eb1b 0509 	adds.w	r5, fp, r9
 800432c:	eb4c 060a 	adc.w	r6, ip, sl
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4619      	mov	r1, r3
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	f04f 0400 	mov.w	r4, #0
 8004342:	0094      	lsls	r4, r2, #2
 8004344:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004348:	008b      	lsls	r3, r1, #2
 800434a:	461a      	mov	r2, r3
 800434c:	4623      	mov	r3, r4
 800434e:	4628      	mov	r0, r5
 8004350:	4631      	mov	r1, r6
 8004352:	f7fb ff41 	bl	80001d8 <__aeabi_uldivmod>
 8004356:	4603      	mov	r3, r0
 8004358:	460c      	mov	r4, r1
 800435a:	461a      	mov	r2, r3
 800435c:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <UART_SetConfig+0x6f4>)
 800435e:	fba3 1302 	umull	r1, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2164      	movs	r1, #100	; 0x64
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	3332      	adds	r3, #50	; 0x32
 8004370:	4a09      	ldr	r2, [pc, #36]	; (8004398 <UART_SetConfig+0x6f4>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	f003 020f 	and.w	r2, r3, #15
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4442      	add	r2, r8
 8004382:	609a      	str	r2, [r3, #8]
}
 8004384:	e7ff      	b.n	8004386 <UART_SetConfig+0x6e2>
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004390:	40011000 	.word	0x40011000
 8004394:	40011400 	.word	0x40011400
 8004398:	51eb851f 	.word	0x51eb851f

0800439c <__libc_init_array>:
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	4e0d      	ldr	r6, [pc, #52]	; (80043d4 <__libc_init_array+0x38>)
 80043a0:	4c0d      	ldr	r4, [pc, #52]	; (80043d8 <__libc_init_array+0x3c>)
 80043a2:	1ba4      	subs	r4, r4, r6
 80043a4:	10a4      	asrs	r4, r4, #2
 80043a6:	2500      	movs	r5, #0
 80043a8:	42a5      	cmp	r5, r4
 80043aa:	d109      	bne.n	80043c0 <__libc_init_array+0x24>
 80043ac:	4e0b      	ldr	r6, [pc, #44]	; (80043dc <__libc_init_array+0x40>)
 80043ae:	4c0c      	ldr	r4, [pc, #48]	; (80043e0 <__libc_init_array+0x44>)
 80043b0:	f000 f820 	bl	80043f4 <_init>
 80043b4:	1ba4      	subs	r4, r4, r6
 80043b6:	10a4      	asrs	r4, r4, #2
 80043b8:	2500      	movs	r5, #0
 80043ba:	42a5      	cmp	r5, r4
 80043bc:	d105      	bne.n	80043ca <__libc_init_array+0x2e>
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043c4:	4798      	blx	r3
 80043c6:	3501      	adds	r5, #1
 80043c8:	e7ee      	b.n	80043a8 <__libc_init_array+0xc>
 80043ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043ce:	4798      	blx	r3
 80043d0:	3501      	adds	r5, #1
 80043d2:	e7f2      	b.n	80043ba <__libc_init_array+0x1e>
 80043d4:	08004434 	.word	0x08004434
 80043d8:	08004434 	.word	0x08004434
 80043dc:	08004434 	.word	0x08004434
 80043e0:	08004438 	.word	0x08004438

080043e4 <memset>:
 80043e4:	4402      	add	r2, r0
 80043e6:	4603      	mov	r3, r0
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d100      	bne.n	80043ee <memset+0xa>
 80043ec:	4770      	bx	lr
 80043ee:	f803 1b01 	strb.w	r1, [r3], #1
 80043f2:	e7f9      	b.n	80043e8 <memset+0x4>

080043f4 <_init>:
 80043f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f6:	bf00      	nop
 80043f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043fa:	bc08      	pop	{r3}
 80043fc:	469e      	mov	lr, r3
 80043fe:	4770      	bx	lr

08004400 <_fini>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	bf00      	nop
 8004404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004406:	bc08      	pop	{r3}
 8004408:	469e      	mov	lr, r3
 800440a:	4770      	bx	lr
