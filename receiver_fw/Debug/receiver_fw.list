
receiver_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002954  08002954  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002954  08002954  00012954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800295c  0800295c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002970  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002970  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b05  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000183d  00000000  00000000  00027b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00029380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  00029ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000150ac  00000000  00000000  0002a178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008664  00000000  00000000  0003f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000818a3  00000000  00000000  00047888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c912b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001be0  00000000  00000000  000c9180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800292c 	.word	0x0800292c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800292c 	.word	0x0800292c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b40      	ldr	r3, [pc, #256]	; (80005ec <MX_GPIO_Init+0x11c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a3f      	ldr	r2, [pc, #252]	; (80005ec <MX_GPIO_Init+0x11c>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b3d      	ldr	r3, [pc, #244]	; (80005ec <MX_GPIO_Init+0x11c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b39      	ldr	r3, [pc, #228]	; (80005ec <MX_GPIO_Init+0x11c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a38      	ldr	r2, [pc, #224]	; (80005ec <MX_GPIO_Init+0x11c>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b36      	ldr	r3, [pc, #216]	; (80005ec <MX_GPIO_Init+0x11c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b32      	ldr	r3, [pc, #200]	; (80005ec <MX_GPIO_Init+0x11c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a31      	ldr	r2, [pc, #196]	; (80005ec <MX_GPIO_Init+0x11c>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <MX_GPIO_Init+0x11c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <MX_GPIO_Init+0x11c>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a2a      	ldr	r2, [pc, #168]	; (80005ec <MX_GPIO_Init+0x11c>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <MX_GPIO_Init+0x11c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	4824      	ldr	r0, [pc, #144]	; (80005f0 <MX_GPIO_Init+0x120>)
 800055e:	f000 fcff 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000568:	4822      	ldr	r0, [pc, #136]	; (80005f4 <MX_GPIO_Init+0x124>)
 800056a:	f000 fcf9 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000574:	481f      	ldr	r0, [pc, #124]	; (80005f4 <MX_GPIO_Init+0x124>)
 8000576:	f000 fcf3 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800057a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	4817      	ldr	r0, [pc, #92]	; (80005f0 <MX_GPIO_Init+0x120>)
 8000594:	f000 fb60 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|SPI2_CSN_Pin;
 8000598:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a6:	2302      	movs	r3, #2
 80005a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4619      	mov	r1, r3
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <MX_GPIO_Init+0x124>)
 80005b2:	f000 fb51 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80005b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	480a      	ldr	r0, [pc, #40]	; (80005f8 <MX_GPIO_Init+0x128>)
 80005ce:	f000 fb43 	bl	8000c58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2017      	movs	r0, #23
 80005d8:	f000 fb07 	bl	8000bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005dc:	2017      	movs	r0, #23
 80005de:	f000 fb20 	bl	8000c22 <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020800 	.word	0x40020800
 80005f4:	40020400 	.word	0x40020400
 80005f8:	40020000 	.word	0x40020000

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 f9a6 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f80c 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f7ff ff62 	bl	80004d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 800060c:	f000 f88c 	bl	8000728 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  nrf24l01p_rx_init(2500, _1Mbps, 3);
 8000610:	2203      	movs	r2, #3
 8000612:	2100      	movs	r1, #0
 8000614:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000618:	f001 feb6 	bl	8002388 <nrf24l01p_rx_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x20>
	...

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f974 	bl	800291c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <SystemClock_Config+0xc8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a26      	ldr	r2, [pc, #152]	; (80006e8 <SystemClock_Config+0xc8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <SystemClock_Config+0xc8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <SystemClock_Config+0xcc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a20      	ldr	r2, [pc, #128]	; (80006ec <SystemClock_Config+0xcc>)
 800066a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <SystemClock_Config+0xcc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000690:	230c      	movs	r3, #12
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000694:	2360      	movs	r3, #96	; 0x60
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fca7 	bl	8000ff8 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 f834 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2103      	movs	r1, #3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 ff09 	bl	80014e8 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006dc:	f000 f81e 	bl	800071c <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	; 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000700:	d105      	bne.n	800070e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		nrf24l01p_rx_receive(angle, 3); // read data when data ready flag is set
 8000702:	2103      	movs	r1, #3
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <HAL_GPIO_EXTI_Callback+0x28>)
 8000706:	f001 fe6f 	bl	80023e8 <nrf24l01p_rx_receive>
		led1_toggle();
 800070a:	f001 fe31 	bl	8002370 <led1_toggle>
	}
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000028 	.word	0x20000028

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI2_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_SPI2_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI2_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI2_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI2_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI2_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI2_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI2_Init+0x64>)
 800075c:	2210      	movs	r2, #16
 800075e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI2_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI2_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI2_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI2_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI2_Init+0x64>)
 800077a:	f001 f851 	bl	8001820 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000784:	f7ff ffca 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000002c 	.word	0x2000002c
 8000790:	40003800 	.word	0x40003800

08000794 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a19      	ldr	r2, [pc, #100]	; (8000818 <HAL_SPI_MspInit+0x84>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d12c      	bne.n	8000810 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <HAL_SPI_MspInit+0x88>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <HAL_SPI_MspInit+0x88>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6413      	str	r3, [r2, #64]	; 0x40
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <HAL_SPI_MspInit+0x88>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_SPI_MspInit+0x88>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <HAL_SPI_MspInit+0x88>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_SPI_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80007ee:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000800:	2305      	movs	r3, #5
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <HAL_SPI_MspInit+0x8c>)
 800080c:	f000 fa24 	bl	8000c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40003800 	.word	0x40003800
 800081c:	40023800 	.word	0x40023800
 8000820:	40020400 	.word	0x40020400

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <HAL_MspInit+0x4c>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <MemManage_Handler+0x4>

08000886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <UsageFault_Handler+0x4>

08000892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c0:	f000 f898 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80008cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008d0:	f000 fb7a 	bl	8000fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <SystemInit+0x20>)
 80008de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <SystemInit+0x20>)
 80008e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <Reset_Handler>:
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000934 <LoopFillZerobss+0x12>
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <LoopFillZerobss+0x16>)
 8000902:	490e      	ldr	r1, [pc, #56]	; (800093c <LoopFillZerobss+0x1a>)
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <LoopFillZerobss+0x1e>)
 8000906:	2300      	movs	r3, #0
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:
 800090a:	58d4      	ldr	r4, [r2, r3]
 800090c:	50c4      	str	r4, [r0, r3]
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:
 8000910:	18c4      	adds	r4, r0, r3
 8000912:	428c      	cmp	r4, r1
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <LoopFillZerobss+0x22>)
 8000918:	4c0b      	ldr	r4, [pc, #44]	; (8000948 <LoopFillZerobss+0x26>)
 800091a:	2300      	movs	r3, #0
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:
 8000922:	42a2      	cmp	r2, r4
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>
 8000926:	f7ff ffd7 	bl	80008d8 <SystemInit>
 800092a:	f001 ffd3 	bl	80028d4 <__libc_init_array>
 800092e:	f7ff fe65 	bl	80005fc <main>
 8000932:	4770      	bx	lr
 8000934:	20020000 	.word	0x20020000
 8000938:	20000000 	.word	0x20000000
 800093c:	2000000c 	.word	0x2000000c
 8000940:	08002964 	.word	0x08002964
 8000944:	2000000c 	.word	0x2000000c
 8000948:	20000088 	.word	0x20000088

0800094c <ADC_IRQHandler>:
 800094c:	e7fe      	b.n	800094c <ADC_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <HAL_Init+0x40>)
 800095a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_Init+0x40>)
 8000966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800096a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_Init+0x40>)
 8000972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f92b 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	2000      	movs	r0, #0
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff ff4e 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023c00 	.word	0x40023c00

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f943 	bl	8000c3e <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f90b 	bl	8000bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000084 	.word	0x20000084

08000a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000084 	.word	0x20000084

08000a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <__NVIC_SetPriorityGrouping+0x44>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__NVIC_GetPriorityGrouping+0x18>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	0a1b      	lsrs	r3, r3, #8
 8000a86:	f003 0307 	and.w	r3, r3, #7
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0b      	blt.n	8000ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 021f 	and.w	r2, r3, #31
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <__NVIC_EnableIRQ+0x38>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	2001      	movs	r0, #1
 8000aba:	fa00 f202 	lsl.w	r2, r0, r2
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	; (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	; (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff8e 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff29 	bl	8000a34 <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfc:	f7ff ff3e 	bl	8000a7c <__NVIC_GetPriorityGrouping>
 8000c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f7ff ff8e 	bl	8000b28 <NVIC_EncodePriority>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff5d 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff31 	bl	8000a98 <__NVIC_EnableIRQ>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffa2 	bl	8000b90 <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	e159      	b.n	8000f28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c74:	2201      	movs	r2, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f040 8148 	bne.w	8000f22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d005      	beq.n	8000caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d130      	bne.n	8000d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	68da      	ldr	r2, [r3, #12]
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	091b      	lsrs	r3, r3, #4
 8000cf6:	f003 0201 	and.w	r2, r3, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d017      	beq.n	8000d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d123      	bne.n	8000d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	08da      	lsrs	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3208      	adds	r2, #8
 8000d96:	69b9      	ldr	r1, [r7, #24]
 8000d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0203 	and.w	r2, r3, #3
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80a2 	beq.w	8000f22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b57      	ldr	r3, [pc, #348]	; (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a56      	ldr	r2, [pc, #344]	; (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b54      	ldr	r3, [pc, #336]	; (8000f40 <HAL_GPIO_Init+0x2e8>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfa:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a49      	ldr	r2, [pc, #292]	; (8000f48 <HAL_GPIO_Init+0x2f0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0x202>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a48      	ldr	r2, [pc, #288]	; (8000f4c <HAL_GPIO_Init+0x2f4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x1fe>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a47      	ldr	r2, [pc, #284]	; (8000f50 <HAL_GPIO_Init+0x2f8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x1fa>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a46      	ldr	r2, [pc, #280]	; (8000f54 <HAL_GPIO_Init+0x2fc>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x1f6>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a45      	ldr	r2, [pc, #276]	; (8000f58 <HAL_GPIO_Init+0x300>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x1f2>
 8000e46:	2304      	movs	r3, #4
 8000e48:	e008      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e004      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <HAL_GPIO_Init+0x204>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	f002 0203 	and.w	r2, r2, #3
 8000e62:	0092      	lsls	r2, r2, #2
 8000e64:	4093      	lsls	r3, r2
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e6c:	4935      	ldr	r1, [pc, #212]	; (8000f44 <HAL_GPIO_Init+0x2ec>)
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3302      	adds	r3, #2
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e7a:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <HAL_GPIO_Init+0x304>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <HAL_GPIO_Init+0x304>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <HAL_GPIO_Init+0x304>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ec8:	4a24      	ldr	r2, [pc, #144]	; (8000f5c <HAL_GPIO_Init+0x304>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ece:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <HAL_GPIO_Init+0x304>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ef2:	4a1a      	ldr	r2, [pc, #104]	; (8000f5c <HAL_GPIO_Init+0x304>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_GPIO_Init+0x304>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <HAL_GPIO_Init+0x304>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3301      	adds	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	f67f aea2 	bls.w	8000c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40013800 	.word	0x40013800
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40013c00 	.word	0x40013c00

08000f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f7c:	e003      	b.n	8000f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b085      	sub	sp, #20
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fa4:	887a      	ldrh	r2, [r7, #2]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	041a      	lsls	r2, r3, #16
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	619a      	str	r2, [r3, #24]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fb82 	bl	80006f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40013c00 	.word	0x40013c00

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e264      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d075      	beq.n	8001102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001016:	4ba3      	ldr	r3, [pc, #652]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	2b04      	cmp	r3, #4
 8001020:	d00c      	beq.n	800103c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001022:	4ba0      	ldr	r3, [pc, #640]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800102a:	2b08      	cmp	r3, #8
 800102c:	d112      	bne.n	8001054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800102e:	4b9d      	ldr	r3, [pc, #628]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800103a:	d10b      	bne.n	8001054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	4b99      	ldr	r3, [pc, #612]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d05b      	beq.n	8001100 <HAL_RCC_OscConfig+0x108>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d157      	bne.n	8001100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e23f      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800105c:	d106      	bne.n	800106c <HAL_RCC_OscConfig+0x74>
 800105e:	4b91      	ldr	r3, [pc, #580]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a90      	ldr	r2, [pc, #576]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e01d      	b.n	80010a8 <HAL_RCC_OscConfig+0xb0>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x98>
 8001076:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a8a      	ldr	r2, [pc, #552]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b88      	ldr	r3, [pc, #544]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a87      	ldr	r2, [pc, #540]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e00b      	b.n	80010a8 <HAL_RCC_OscConfig+0xb0>
 8001090:	4b84      	ldr	r3, [pc, #528]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a83      	ldr	r2, [pc, #524]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a80      	ldr	r2, [pc, #512]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d013      	beq.n	80010d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b0:	f7ff fcb4 	bl	8000a1c <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b8:	f7ff fcb0 	bl	8000a1c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b64      	cmp	r3, #100	; 0x64
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e204      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0xc0>
 80010d6:	e014      	b.n	8001102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fca0 	bl	8000a1c <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010e0:	f7ff fc9c 	bl	8000a1c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1f0      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	4b6c      	ldr	r3, [pc, #432]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0xe8>
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d063      	beq.n	80011d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800110e:	4b65      	ldr	r3, [pc, #404]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111a:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001122:	2b08      	cmp	r3, #8
 8001124:	d11c      	bne.n	8001160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001126:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d116      	bne.n	8001160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	4b5c      	ldr	r3, [pc, #368]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <HAL_RCC_OscConfig+0x152>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d001      	beq.n	800114a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e1c4      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4952      	ldr	r1, [pc, #328]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115e:	e03a      	b.n	80011d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001168:	4b4f      	ldr	r3, [pc, #316]	; (80012a8 <HAL_RCC_OscConfig+0x2b0>)
 800116a:	2201      	movs	r2, #1
 800116c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116e:	f7ff fc55 	bl	8000a1c <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fc51 	bl	8000a1c <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e1a5      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001194:	4b43      	ldr	r3, [pc, #268]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4940      	ldr	r1, [pc, #256]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011aa:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <HAL_RCC_OscConfig+0x2b0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc34 	bl	8000a1c <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b8:	f7ff fc30 	bl	8000a1c <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e184      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d030      	beq.n	8001244 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d016      	beq.n	8001218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_RCC_OscConfig+0x2b4>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fc14 	bl	8000a1c <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc10 	bl	8000a1c <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e164      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x200>
 8001216:	e015      	b.n	8001244 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_RCC_OscConfig+0x2b4>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fbfd 	bl	8000a1c <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001226:	f7ff fbf9 	bl	8000a1c <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e14d      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800123a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a0 	beq.w	8001392 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10f      	bne.n	8001282 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127e:	2301      	movs	r3, #1
 8001280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x2b8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d121      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_RCC_OscConfig+0x2b8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_RCC_OscConfig+0x2b8>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129a:	f7ff fbbf 	bl	8000a1c <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	e011      	b.n	80012c6 <HAL_RCC_OscConfig+0x2ce>
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	42470000 	.word	0x42470000
 80012ac:	42470e80 	.word	0x42470e80
 80012b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b4:	f7ff fbb2 	bl	8000a1c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e106      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b85      	ldr	r3, [pc, #532]	; (80014dc <HAL_RCC_OscConfig+0x4e4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d106      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2f0>
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012de:	4a80      	ldr	r2, [pc, #512]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6713      	str	r3, [r2, #112]	; 0x70
 80012e6:	e01c      	b.n	8001322 <HAL_RCC_OscConfig+0x32a>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d10c      	bne.n	800130a <HAL_RCC_OscConfig+0x312>
 80012f0:	4b7b      	ldr	r3, [pc, #492]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f4:	4a7a      	ldr	r2, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6713      	str	r3, [r2, #112]	; 0x70
 80012fc:	4b78      	ldr	r3, [pc, #480]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001300:	4a77      	ldr	r2, [pc, #476]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6713      	str	r3, [r2, #112]	; 0x70
 8001308:	e00b      	b.n	8001322 <HAL_RCC_OscConfig+0x32a>
 800130a:	4b75      	ldr	r3, [pc, #468]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	4a74      	ldr	r2, [pc, #464]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	6713      	str	r3, [r2, #112]	; 0x70
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131a:	4a71      	ldr	r2, [pc, #452]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 800131c:	f023 0304 	bic.w	r3, r3, #4
 8001320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d015      	beq.n	8001356 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff fb77 	bl	8000a1c <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	e00a      	b.n	8001348 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff fb73 	bl	8000a1c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001340:	4293      	cmp	r3, r2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0c5      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001348:	4b65      	ldr	r3, [pc, #404]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0ee      	beq.n	8001332 <HAL_RCC_OscConfig+0x33a>
 8001354:	e014      	b.n	8001380 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fb61 	bl	8000a1c <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fb5d 	bl	8000a1c <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0af      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001374:	4b5a      	ldr	r3, [pc, #360]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ee      	bne.n	800135e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d105      	bne.n	8001392 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001386:	4b56      	ldr	r3, [pc, #344]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a55      	ldr	r2, [pc, #340]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 800138c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 809b 	beq.w	80014d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d05c      	beq.n	8001462 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d141      	bne.n	8001434 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b0:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <HAL_RCC_OscConfig+0x4ec>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fb31 	bl	8000a1c <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013be:	f7ff fb2d 	bl	8000a1c <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e081      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d0:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69da      	ldr	r2, [r3, #28]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	019b      	lsls	r3, r3, #6
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	3b01      	subs	r3, #1
 80013f6:	041b      	lsls	r3, r3, #16
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	061b      	lsls	r3, r3, #24
 8001400:	4937      	ldr	r1, [pc, #220]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <HAL_RCC_OscConfig+0x4ec>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fb06 	bl	8000a1c <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fb02 	bl	8000a1c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e056      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x41c>
 8001432:	e04e      	b.n	80014d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_RCC_OscConfig+0x4ec>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7ff faef 	bl	8000a1c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001442:	f7ff faeb 	bl	8000a1c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e03f      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f0      	bne.n	8001442 <HAL_RCC_OscConfig+0x44a>
 8001460:	e037      	b.n	80014d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e032      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_RCC_OscConfig+0x4e8>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d028      	beq.n	80014ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001486:	429a      	cmp	r2, r3
 8001488:	d121      	bne.n	80014ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001494:	429a      	cmp	r2, r3
 8001496:	d11a      	bne.n	80014ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800149e:	4013      	ands	r3, r2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d111      	bne.n	80014ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	3b01      	subs	r3, #1
 80014b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40007000 	.word	0x40007000
 80014e0:	40023800 	.word	0x40023800
 80014e4:	42470060 	.word	0x42470060

080014e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0cc      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014fc:	4b68      	ldr	r3, [pc, #416]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d90c      	bls.n	8001524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b65      	ldr	r3, [pc, #404]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001512:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0b8      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800153c:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001554:	4b53      	ldr	r3, [pc, #332]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800155e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	494d      	ldr	r1, [pc, #308]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	4313      	orrs	r3, r2
 8001570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d044      	beq.n	8001608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d119      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e07f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d003      	beq.n	80015a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e06f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e067      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f023 0203 	bic.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4934      	ldr	r1, [pc, #208]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d8:	f7ff fa20 	bl	8000a1c <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff fa1c 	bl	8000a1c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e04f      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 020c 	and.w	r2, r3, #12
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	429a      	cmp	r2, r3
 8001606:	d1eb      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001608:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d20c      	bcs.n	8001630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e032      	b.n	8001696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4916      	ldr	r1, [pc, #88]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d009      	beq.n	800166e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	490e      	ldr	r1, [pc, #56]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800166e:	f000 f821 	bl	80016b4 <HAL_RCC_GetSysClockFreq>
 8001672:	4602      	mov	r2, r0
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	490a      	ldr	r1, [pc, #40]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	5ccb      	ldrb	r3, [r1, r3]
 8001682:	fa22 f303 	lsr.w	r3, r2, r3
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_ClockConfig+0x1c8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f980 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023c00 	.word	0x40023c00
 80016a4:	40023800 	.word	0x40023800
 80016a8:	08002944 	.word	0x08002944
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004

080016b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b4:	b5b0      	push	{r4, r5, r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016ba:	2100      	movs	r1, #0
 80016bc:	6079      	str	r1, [r7, #4]
 80016be:	2100      	movs	r1, #0
 80016c0:	60f9      	str	r1, [r7, #12]
 80016c2:	2100      	movs	r1, #0
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016c6:	2100      	movs	r1, #0
 80016c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ca:	4952      	ldr	r1, [pc, #328]	; (8001814 <HAL_RCC_GetSysClockFreq+0x160>)
 80016cc:	6889      	ldr	r1, [r1, #8]
 80016ce:	f001 010c 	and.w	r1, r1, #12
 80016d2:	2908      	cmp	r1, #8
 80016d4:	d00d      	beq.n	80016f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80016d6:	2908      	cmp	r1, #8
 80016d8:	f200 8094 	bhi.w	8001804 <HAL_RCC_GetSysClockFreq+0x150>
 80016dc:	2900      	cmp	r1, #0
 80016de:	d002      	beq.n	80016e6 <HAL_RCC_GetSysClockFreq+0x32>
 80016e0:	2904      	cmp	r1, #4
 80016e2:	d003      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x38>
 80016e4:	e08e      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <HAL_RCC_GetSysClockFreq+0x164>)
 80016e8:	60bb      	str	r3, [r7, #8]
       break;
 80016ea:	e08e      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ec:	4b4b      	ldr	r3, [pc, #300]	; (800181c <HAL_RCC_GetSysClockFreq+0x168>)
 80016ee:	60bb      	str	r3, [r7, #8]
      break;
 80016f0:	e08b      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016f2:	4948      	ldr	r1, [pc, #288]	; (8001814 <HAL_RCC_GetSysClockFreq+0x160>)
 80016f4:	6849      	ldr	r1, [r1, #4]
 80016f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80016fa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016fc:	4945      	ldr	r1, [pc, #276]	; (8001814 <HAL_RCC_GetSysClockFreq+0x160>)
 80016fe:	6849      	ldr	r1, [r1, #4]
 8001700:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001704:	2900      	cmp	r1, #0
 8001706:	d024      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001708:	4942      	ldr	r1, [pc, #264]	; (8001814 <HAL_RCC_GetSysClockFreq+0x160>)
 800170a:	6849      	ldr	r1, [r1, #4]
 800170c:	0989      	lsrs	r1, r1, #6
 800170e:	4608      	mov	r0, r1
 8001710:	f04f 0100 	mov.w	r1, #0
 8001714:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001718:	f04f 0500 	mov.w	r5, #0
 800171c:	ea00 0204 	and.w	r2, r0, r4
 8001720:	ea01 0305 	and.w	r3, r1, r5
 8001724:	493d      	ldr	r1, [pc, #244]	; (800181c <HAL_RCC_GetSysClockFreq+0x168>)
 8001726:	fb01 f003 	mul.w	r0, r1, r3
 800172a:	2100      	movs	r1, #0
 800172c:	fb01 f102 	mul.w	r1, r1, r2
 8001730:	1844      	adds	r4, r0, r1
 8001732:	493a      	ldr	r1, [pc, #232]	; (800181c <HAL_RCC_GetSysClockFreq+0x168>)
 8001734:	fba2 0101 	umull	r0, r1, r2, r1
 8001738:	1863      	adds	r3, r4, r1
 800173a:	4619      	mov	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	461a      	mov	r2, r3
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	f7fe fd48 	bl	80001d8 <__aeabi_uldivmod>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4613      	mov	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	e04a      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_RCC_GetSysClockFreq+0x160>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	099b      	lsrs	r3, r3, #6
 8001758:	461a      	mov	r2, r3
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001762:	f04f 0100 	mov.w	r1, #0
 8001766:	ea02 0400 	and.w	r4, r2, r0
 800176a:	ea03 0501 	and.w	r5, r3, r1
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	014b      	lsls	r3, r1, #5
 800177c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001780:	0142      	lsls	r2, r0, #5
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	1b00      	subs	r0, r0, r4
 8001788:	eb61 0105 	sbc.w	r1, r1, r5
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	018b      	lsls	r3, r1, #6
 8001796:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800179a:	0182      	lsls	r2, r0, #6
 800179c:	1a12      	subs	r2, r2, r0
 800179e:	eb63 0301 	sbc.w	r3, r3, r1
 80017a2:	f04f 0000 	mov.w	r0, #0
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	00d9      	lsls	r1, r3, #3
 80017ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017b0:	00d0      	lsls	r0, r2, #3
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	1912      	adds	r2, r2, r4
 80017b8:	eb45 0303 	adc.w	r3, r5, r3
 80017bc:	f04f 0000 	mov.w	r0, #0
 80017c0:	f04f 0100 	mov.w	r1, #0
 80017c4:	0299      	lsls	r1, r3, #10
 80017c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017ca:	0290      	lsls	r0, r2, #10
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	f7fe fcfc 	bl	80001d8 <__aeabi_uldivmod>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4613      	mov	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_RCC_GetSysClockFreq+0x160>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	0c1b      	lsrs	r3, r3, #16
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	3301      	adds	r3, #1
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	60bb      	str	r3, [r7, #8]
      break;
 8001802:	e002      	b.n	800180a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <HAL_RCC_GetSysClockFreq+0x164>)
 8001806:	60bb      	str	r3, [r7, #8]
      break;
 8001808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180a:	68bb      	ldr	r3, [r7, #8]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bdb0      	pop	{r4, r5, r7, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	00f42400 	.word	0x00f42400
 800181c:	017d7840 	.word	0x017d7840

08001820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07b      	b.n	800192a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	2b00      	cmp	r3, #0
 8001838:	d108      	bne.n	800184c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001842:	d009      	beq.n	8001858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
 800184a:	e005      	b.n	8001858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe ff8e 	bl	8000794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800188e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018dc:	ea42 0103 	orr.w	r1, r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	f003 0104 	and.w	r1, r3, #4
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	f003 0210 	and.w	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69da      	ldr	r2, [r3, #28]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001918:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b088      	sub	sp, #32
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4613      	mov	r3, r2
 8001940:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_SPI_Transmit+0x22>
 8001950:	2302      	movs	r3, #2
 8001952:	e126      	b.n	8001ba2 <HAL_SPI_Transmit+0x270>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800195c:	f7ff f85e 	bl	8000a1c <HAL_GetTick>
 8001960:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d002      	beq.n	8001978 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001972:	2302      	movs	r3, #2
 8001974:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001976:	e10b      	b.n	8001b90 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_SPI_Transmit+0x52>
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001988:	e102      	b.n	8001b90 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2203      	movs	r2, #3
 800198e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	88fa      	ldrh	r2, [r7, #6]
 80019a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d0:	d10f      	bne.n	80019f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fc:	2b40      	cmp	r3, #64	; 0x40
 80019fe:	d007      	beq.n	8001a10 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a18:	d14b      	bne.n	8001ab2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_SPI_Transmit+0xf6>
 8001a22:	8afb      	ldrh	r3, [r7, #22]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d13e      	bne.n	8001aa6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	881a      	ldrh	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	1c9a      	adds	r2, r3, #2
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a4c:	e02b      	b.n	8001aa6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d112      	bne.n	8001a82 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	1c9a      	adds	r2, r3, #2
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a80:	e011      	b.n	8001aa6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a82:	f7fe ffcb 	bl	8000a1c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d803      	bhi.n	8001a9a <HAL_SPI_Transmit+0x168>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d102      	bne.n	8001aa0 <HAL_SPI_Transmit+0x16e>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001aa4:	e074      	b.n	8001b90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ce      	bne.n	8001a4e <HAL_SPI_Transmit+0x11c>
 8001ab0:	e04c      	b.n	8001b4c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_SPI_Transmit+0x18e>
 8001aba:	8afb      	ldrh	r3, [r7, #22]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d140      	bne.n	8001b42 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	330c      	adds	r3, #12
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ae6:	e02c      	b.n	8001b42 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d113      	bne.n	8001b1e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	330c      	adds	r3, #12
 8001b00:	7812      	ldrb	r2, [r2, #0]
 8001b02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b1c:	e011      	b.n	8001b42 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b1e:	f7fe ff7d 	bl	8000a1c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d803      	bhi.n	8001b36 <HAL_SPI_Transmit+0x204>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d102      	bne.n	8001b3c <HAL_SPI_Transmit+0x20a>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b40:	e026      	b.n	8001b90 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1cd      	bne.n	8001ae8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	6839      	ldr	r1, [r7, #0]
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 fbcb 	bl	80022ec <SPI_EndRxTxTransaction>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10a      	bne.n	8001b80 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	77fb      	strb	r3, [r7, #31]
 8001b8c:	e000      	b.n	8001b90 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001b8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ba0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b088      	sub	sp, #32
 8001bae:	af02      	add	r7, sp, #8
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bc6:	d112      	bne.n	8001bee <HAL_SPI_Receive+0x44>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10e      	bne.n	8001bee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001bd8:	88fa      	ldrh	r2, [r7, #6]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	68b9      	ldr	r1, [r7, #8]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 f8f1 	bl	8001dcc <HAL_SPI_TransmitReceive>
 8001bea:	4603      	mov	r3, r0
 8001bec:	e0ea      	b.n	8001dc4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_SPI_Receive+0x52>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e0e3      	b.n	8001dc4 <HAL_SPI_Receive+0x21a>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c04:	f7fe ff0a 	bl	8000a1c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d002      	beq.n	8001c1c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001c16:	2302      	movs	r3, #2
 8001c18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c1a:	e0ca      	b.n	8001db2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_SPI_Receive+0x7e>
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c2c:	e0c1      	b.n	8001db2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2204      	movs	r2, #4
 8001c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	88fa      	ldrh	r2, [r7, #6]
 8001c46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	88fa      	ldrh	r2, [r7, #6]
 8001c4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c74:	d10f      	bne.n	8001c96 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca0:	2b40      	cmp	r3, #64	; 0x40
 8001ca2:	d007      	beq.n	8001cb4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d162      	bne.n	8001d82 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001cbc:	e02e      	b.n	8001d1c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d115      	bne.n	8001cf8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f103 020c 	add.w	r2, r3, #12
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd8:	7812      	ldrb	r2, [r2, #0]
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cf6:	e011      	b.n	8001d1c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cf8:	f7fe fe90 	bl	8000a1c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d803      	bhi.n	8001d10 <HAL_SPI_Receive+0x166>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0e:	d102      	bne.n	8001d16 <HAL_SPI_Receive+0x16c>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d102      	bne.n	8001d1c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001d1a:	e04a      	b.n	8001db2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1cb      	bne.n	8001cbe <HAL_SPI_Receive+0x114>
 8001d26:	e031      	b.n	8001d8c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d113      	bne.n	8001d5e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	b292      	uxth	r2, r2
 8001d42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	1c9a      	adds	r2, r3, #2
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d5c:	e011      	b.n	8001d82 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d5e:	f7fe fe5d 	bl	8000a1c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d803      	bhi.n	8001d76 <HAL_SPI_Receive+0x1cc>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d102      	bne.n	8001d7c <HAL_SPI_Receive+0x1d2>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001d80:	e017      	b.n	8001db2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1cd      	bne.n	8001d28 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fa45 	bl	8002220 <SPI_EndRxTransaction>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
 8001dae:	e000      	b.n	8001db2 <HAL_SPI_Receive+0x208>
  }

error :
 8001db0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	; 0x30
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_SPI_TransmitReceive+0x26>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e18a      	b.n	8002108 <HAL_SPI_TransmitReceive+0x33c>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dfa:	f7fe fe0f 	bl	8000a1c <HAL_GetTick>
 8001dfe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d00f      	beq.n	8001e3c <HAL_SPI_TransmitReceive+0x70>
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e22:	d107      	bne.n	8001e34 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <HAL_SPI_TransmitReceive+0x68>
 8001e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d003      	beq.n	8001e3c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e34:	2302      	movs	r3, #2
 8001e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e3a:	e15b      	b.n	80020f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_SPI_TransmitReceive+0x82>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_SPI_TransmitReceive+0x82>
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e54:	e14e      	b.n	80020f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d003      	beq.n	8001e6a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2205      	movs	r2, #5
 8001e66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	887a      	ldrh	r2, [r7, #2]
 8001e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	887a      	ldrh	r2, [r7, #2]
 8001e92:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eaa:	2b40      	cmp	r3, #64	; 0x40
 8001eac:	d007      	beq.n	8001ebe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ec6:	d178      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_SPI_TransmitReceive+0x10a>
 8001ed0:	8b7b      	ldrh	r3, [r7, #26]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d166      	bne.n	8001fa4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	881a      	ldrh	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	1c9a      	adds	r2, r3, #2
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001efa:	e053      	b.n	8001fa4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d11b      	bne.n	8001f42 <HAL_SPI_TransmitReceive+0x176>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d016      	beq.n	8001f42 <HAL_SPI_TransmitReceive+0x176>
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d113      	bne.n	8001f42 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	881a      	ldrh	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	1c9a      	adds	r2, r3, #2
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d119      	bne.n	8001f84 <HAL_SPI_TransmitReceive+0x1b8>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d014      	beq.n	8001f84 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	b292      	uxth	r2, r2
 8001f66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	1c9a      	adds	r2, r3, #2
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f80:	2301      	movs	r3, #1
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f84:	f7fe fd4a 	bl	8000a1c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d807      	bhi.n	8001fa4 <HAL_SPI_TransmitReceive+0x1d8>
 8001f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9a:	d003      	beq.n	8001fa4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fa2:	e0a7      	b.n	80020f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1a6      	bne.n	8001efc <HAL_SPI_TransmitReceive+0x130>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1a1      	bne.n	8001efc <HAL_SPI_TransmitReceive+0x130>
 8001fb8:	e07c      	b.n	80020b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_SPI_TransmitReceive+0x1fc>
 8001fc2:	8b7b      	ldrh	r3, [r7, #26]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d16b      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	330c      	adds	r3, #12
 8001fd2:	7812      	ldrb	r2, [r2, #0]
 8001fd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fee:	e057      	b.n	80020a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d11c      	bne.n	8002038 <HAL_SPI_TransmitReceive+0x26c>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d017      	beq.n	8002038 <HAL_SPI_TransmitReceive+0x26c>
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	2b01      	cmp	r3, #1
 800200c:	d114      	bne.n	8002038 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	330c      	adds	r3, #12
 8002018:	7812      	ldrb	r2, [r2, #0]
 800201a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d119      	bne.n	800207a <HAL_SPI_TransmitReceive+0x2ae>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d014      	beq.n	800207a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800206c:	b29b      	uxth	r3, r3
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002076:	2301      	movs	r3, #1
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800207a:	f7fe fccf 	bl	8000a1c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002086:	429a      	cmp	r2, r3
 8002088:	d803      	bhi.n	8002092 <HAL_SPI_TransmitReceive+0x2c6>
 800208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d102      	bne.n	8002098 <HAL_SPI_TransmitReceive+0x2cc>
 8002092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002094:	2b00      	cmp	r3, #0
 8002096:	d103      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800209e:	e029      	b.n	80020f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1a2      	bne.n	8001ff0 <HAL_SPI_TransmitReceive+0x224>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d19d      	bne.n	8001ff0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f917 	bl	80022ec <SPI_EndRxTxTransaction>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80020d0:	e010      	b.n	80020f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	e000      	b.n	80020f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80020f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002104:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002108:	4618      	mov	r0, r3
 800210a:	3730      	adds	r7, #48	; 0x30
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002120:	f7fe fc7c 	bl	8000a1c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002130:	f7fe fc74 	bl	8000a1c <HAL_GetTick>
 8002134:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002136:	4b39      	ldr	r3, [pc, #228]	; (800221c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	0d1b      	lsrs	r3, r3, #20
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	fb02 f303 	mul.w	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002146:	e054      	b.n	80021f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214e:	d050      	beq.n	80021f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002150:	f7fe fc64 	bl	8000a1c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	429a      	cmp	r2, r3
 800215e:	d902      	bls.n	8002166 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d13d      	bne.n	80021e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800217e:	d111      	bne.n	80021a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002188:	d004      	beq.n	8002194 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002192:	d107      	bne.n	80021a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ac:	d10f      	bne.n	80021ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e017      	b.n	8002212 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4013      	ands	r3, r2
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	429a      	cmp	r2, r3
 8002200:	bf0c      	ite	eq
 8002202:	2301      	moveq	r3, #1
 8002204:	2300      	movne	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	429a      	cmp	r2, r3
 800220e:	d19b      	bne.n	8002148 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000000 	.word	0x20000000

08002220 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af02      	add	r7, sp, #8
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002234:	d111      	bne.n	800225a <SPI_EndRxTransaction+0x3a>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800223e:	d004      	beq.n	800224a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002248:	d107      	bne.n	800225a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002262:	d12a      	bne.n	80022ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800226c:	d012      	beq.n	8002294 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2200      	movs	r2, #0
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7ff ff49 	bl	8002110 <SPI_WaitFlagStateUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d02d      	beq.n	80022e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e026      	b.n	80022e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2200      	movs	r2, #0
 800229c:	2101      	movs	r1, #1
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f7ff ff36 	bl	8002110 <SPI_WaitFlagStateUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d01a      	beq.n	80022e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	f043 0220 	orr.w	r2, r3, #32
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e013      	b.n	80022e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2101      	movs	r1, #1
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff ff23 	bl	8002110 <SPI_WaitFlagStateUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e000      	b.n	80022e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <SPI_EndRxTxTransaction+0x7c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1b      	ldr	r2, [pc, #108]	; (800236c <SPI_EndRxTxTransaction+0x80>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0d5b      	lsrs	r3, r3, #21
 8002304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002316:	d112      	bne.n	800233e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2200      	movs	r2, #0
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f7ff fef4 	bl	8002110 <SPI_WaitFlagStateUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	f043 0220 	orr.w	r2, r3, #32
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e00f      	b.n	800235e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3b01      	subs	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002354:	2b80      	cmp	r3, #128	; 0x80
 8002356:	d0f2      	beq.n	800233e <SPI_EndRxTxTransaction+0x52>
 8002358:	e000      	b.n	800235c <SPI_EndRxTxTransaction+0x70>
        break;
 800235a:	bf00      	nop
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000000 	.word	0x20000000
 800236c:	165e9f81 	.word	0x165e9f81

08002370 <led1_toggle>:
{
    HAL_GPIO_WritePin(LED1_PIN_PORT, LED1_PIN_NUMBER, SET);
}

void led1_toggle()
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED1_PIN_PORT, LED1_PIN_NUMBER);
 8002374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <led1_toggle+0x14>)
 800237a:	f7fe fe0a 	bl	8000f92 <HAL_GPIO_TogglePin>
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40020800 	.word	0x40020800

08002388 <nrf24l01p_rx_init>:
static uint8_t write_register(uint8_t reg, uint8_t value);


/* Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps, payload_length length)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	80fb      	strh	r3, [r7, #6]
 8002392:	460b      	mov	r3, r1
 8002394:	717b      	strb	r3, [r7, #5]
 8002396:	4613      	mov	r3, r2
 8002398:	713b      	strb	r3, [r7, #4]
    nrf24l01p_reset();
 800239a:	f000 f836 	bl	800240a <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 800239e:	f000 f888 	bl	80024b2 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 80023a2:	f000 f92d 	bl	8002600 <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(length);
 80023a6:	793b      	ldrb	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f907 	bl	80025bc <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 f9b1 	bl	8002718 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 80023b6:	797b      	ldrb	r3, [r7, #5]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f9dd 	bl	8002778 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 80023be:	2003      	movs	r0, #3
 80023c0:	f000 f9bd 	bl	800273e <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f000 f930 	bl	800262a <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 80023ca:	2005      	movs	r0, #5
 80023cc:	f000 f950 	bl	8002670 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f95d 	bl	8002690 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 80023d6:	20fa      	movs	r0, #250	; 0xfa
 80023d8:	f000 f976 	bl	80026c8 <nrf24l01p_auto_retransmit_delay>
    
    ce_high();
 80023dc:	f000 fa0e 	bl	80027fc <ce_high>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <nrf24l01p_rx_receive>:

    ce_high();
}

void nrf24l01p_rx_receive(uint8_t* rx_payload, payload_length length)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
    nrf24l01p_read_rx_fifo(rx_payload, length);
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	4619      	mov	r1, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f86f 	bl	80024dc <nrf24l01p_read_rx_fifo>
    nrf24l01p_clear_rx_dr();
 80023fe:	f000 f8eb 	bl	80025d8 <nrf24l01p_clear_rx_dr>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <nrf24l01p_reset>:
    }
}

/* Sub Functions */
void nrf24l01p_reset()
{
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 800240e:	f000 f9dd 	bl	80027cc <cs_high>
    ce_low();
 8002412:	f000 f9ff 	bl	8002814 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8002416:	2108      	movs	r1, #8
 8002418:	2000      	movs	r0, #0
 800241a:	f000 fa2d 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 800241e:	213f      	movs	r1, #63	; 0x3f
 8002420:	2001      	movs	r0, #1
 8002422:	f000 fa29 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8002426:	2103      	movs	r1, #3
 8002428:	2002      	movs	r0, #2
 800242a:	f000 fa25 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 800242e:	2103      	movs	r1, #3
 8002430:	2003      	movs	r0, #3
 8002432:	f000 fa21 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8002436:	2103      	movs	r1, #3
 8002438:	2004      	movs	r0, #4
 800243a:	f000 fa1d 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 800243e:	2102      	movs	r1, #2
 8002440:	2005      	movs	r0, #5
 8002442:	f000 fa19 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8002446:	2107      	movs	r1, #7
 8002448:	2006      	movs	r0, #6
 800244a:	f000 fa15 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 800244e:	217e      	movs	r1, #126	; 0x7e
 8002450:	2007      	movs	r0, #7
 8002452:	f000 fa11 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8002456:	2100      	movs	r1, #0
 8002458:	2011      	movs	r0, #17
 800245a:	f000 fa0d 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800245e:	2100      	movs	r1, #0
 8002460:	2011      	movs	r0, #17
 8002462:	f000 fa09 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8002466:	2100      	movs	r1, #0
 8002468:	2012      	movs	r0, #18
 800246a:	f000 fa05 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800246e:	2100      	movs	r1, #0
 8002470:	2013      	movs	r0, #19
 8002472:	f000 fa01 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8002476:	2100      	movs	r1, #0
 8002478:	2014      	movs	r0, #20
 800247a:	f000 f9fd 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800247e:	2100      	movs	r1, #0
 8002480:	2015      	movs	r0, #21
 8002482:	f000 f9f9 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8002486:	2100      	movs	r1, #0
 8002488:	2016      	movs	r0, #22
 800248a:	f000 f9f5 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800248e:	2111      	movs	r1, #17
 8002490:	2017      	movs	r0, #23
 8002492:	f000 f9f1 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8002496:	2100      	movs	r1, #0
 8002498:	201c      	movs	r0, #28
 800249a:	f000 f9ed 	bl	8002878 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 800249e:	2100      	movs	r1, #0
 80024a0:	201d      	movs	r0, #29
 80024a2:	f000 f9e9 	bl	8002878 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 80024a6:	f000 f83f 	bl	8002528 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 80024aa:	f000 f855 	bl	8002558 <nrf24l01p_flush_tx_fifo>
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f000 f9b7 	bl	800282c <read_register>
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	4619      	mov	r1, r3
 80024ce:	2000      	movs	r0, #0
 80024d0:	f000 f9d2 	bl	8002878 <write_register>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <nrf24l01p_read_rx_fifo>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t* rx_payload, payload_length length)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
    uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 80024e8:	2361      	movs	r3, #97	; 0x61
 80024ea:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 80024ec:	f000 f97a 	bl	80027e4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80024f0:	f107 020e 	add.w	r2, r7, #14
 80024f4:	f107 010f 	add.w	r1, r7, #15
 80024f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2301      	movs	r3, #1
 8002500:	4808      	ldr	r0, [pc, #32]	; (8002524 <nrf24l01p_read_rx_fifo+0x48>)
 8002502:	f7ff fc63 	bl	8001dcc <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, length, 2000);
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	b29a      	uxth	r2, r3
 800250a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4804      	ldr	r0, [pc, #16]	; (8002524 <nrf24l01p_read_rx_fifo+0x48>)
 8002512:	f7ff fb4a 	bl	8001baa <HAL_SPI_Receive>
    cs_high();
 8002516:	f000 f959 	bl	80027cc <cs_high>

    return status;
 800251a:	7bbb      	ldrb	r3, [r7, #14]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000002c 	.word	0x2000002c

08002528 <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800252e:	23e2      	movs	r3, #226	; 0xe2
 8002530:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002532:	f000 f957 	bl	80027e4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002536:	1dba      	adds	r2, r7, #6
 8002538:	1df9      	adds	r1, r7, #7
 800253a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2301      	movs	r3, #1
 8002542:	4804      	ldr	r0, [pc, #16]	; (8002554 <nrf24l01p_flush_rx_fifo+0x2c>)
 8002544:	f7ff fc42 	bl	8001dcc <HAL_SPI_TransmitReceive>
    cs_high();
 8002548:	f000 f940 	bl	80027cc <cs_high>
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	2000002c 	.word	0x2000002c

08002558 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800255e:	23e1      	movs	r3, #225	; 0xe1
 8002560:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002562:	f000 f93f 	bl	80027e4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002566:	1dba      	adds	r2, r7, #6
 8002568:	1df9      	adds	r1, r7, #7
 800256a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2301      	movs	r3, #1
 8002572:	4804      	ldr	r0, [pc, #16]	; (8002584 <nrf24l01p_flush_tx_fifo+0x2c>)
 8002574:	f7ff fc2a 	bl	8001dcc <HAL_SPI_TransmitReceive>
    cs_high();
 8002578:	f000 f928 	bl	80027cc <cs_high>
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000002c 	.word	0x2000002c

08002588 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 800258e:	23ff      	movs	r3, #255	; 0xff
 8002590:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002592:	f000 f927 	bl	80027e4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002596:	1dba      	adds	r2, r7, #6
 8002598:	1df9      	adds	r1, r7, #7
 800259a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	2301      	movs	r3, #1
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <nrf24l01p_get_status+0x30>)
 80025a4:	f7ff fc12 	bl	8001dcc <HAL_SPI_TransmitReceive>
    cs_high(); 
 80025a8:	f000 f910 	bl	80027cc <cs_high>

    return status;
 80025ac:	79bb      	ldrb	r3, [r7, #6]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2000002c 	.word	0x2000002c

080025bc <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	4619      	mov	r1, r3
 80025ca:	2011      	movs	r0, #17
 80025cc:	f000 f954 	bl	8002878 <write_register>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr()
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80025de:	f7ff ffd3 	bl	8002588 <nrf24l01p_get_status>
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x40;
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ec:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	4619      	mov	r1, r3
 80025f2:	2007      	movs	r0, #7
 80025f4:	f000 f940 	bl	8002878 <write_register>
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status); 
}

void nrf24l01p_power_up()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8002606:	2000      	movs	r0, #0
 8002608:	f000 f910 	bl	800282c <read_register>
 800260c:	4603      	mov	r3, r0
 800260e:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	4619      	mov	r1, r3
 800261c:	2000      	movs	r0, #0
 800261e:	f000 f92b 	bl	8002878 <write_register>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8002634:	2000      	movs	r0, #0
 8002636:	f000 f8f9 	bl	800282c <read_register>
 800263a:	4603      	mov	r3, r0
 800263c:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d002      	beq.n	800264a <nrf24l01p_set_crc_length+0x20>
 8002644:	2b02      	cmp	r3, #2
 8002646:	d005      	beq.n	8002654 <nrf24l01p_set_crc_length+0x2a>
 8002648:	e009      	b.n	800265e <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	73fb      	strb	r3, [r7, #15]
            break;
 8002652:	e004      	b.n	800265e <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	73fb      	strb	r3, [r7, #15]
            break;
 800265c:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	4619      	mov	r1, r3
 8002662:	2000      	movs	r0, #0
 8002664:	f000 f908 	bl	8002878 <write_register>
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	3b02      	subs	r3, #2
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	2003      	movs	r0, #3
 8002684:	f000 f8f8 	bl	8002878 <write_register>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 800269a:	2004      	movs	r0, #4
 800269c:	f000 f8c6 	bl	800282c <read_register>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	f063 030f 	orn	r3, r3, #15
 80026aa:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	4619      	mov	r1, r3
 80026b8:	2004      	movs	r0, #4
 80026ba:	f000 f8dd 	bl	8002878 <write_register>
}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80026d2:	2004      	movs	r0, #4
 80026d4:	f000 f8aa 	bl	800282c <read_register>
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	f043 030f 	orr.w	r3, r3, #15
 80026e2:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <nrf24l01p_auto_retransmit_delay+0x4c>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	b25a      	sxtb	r2, r3
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	b25b      	sxtb	r3, r3
 80026fe:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	4619      	mov	r1, r3
 8002704:	2004      	movs	r0, #4
 8002706:	f000 f8b7 	bl	8002878 <write_register>
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	10624dd3 	.word	0x10624dd3

08002718 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8002728:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 800272a:	89fb      	ldrh	r3, [r7, #14]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	2005      	movs	r0, #5
 8002732:	f000 f8a1 	bl	8002878 <write_register>
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8002748:	2006      	movs	r0, #6
 800274a:	f000 f86f 	bl	800282c <read_register>
 800274e:	4603      	mov	r3, r0
 8002750:	f023 0306 	bic.w	r3, r3, #6
 8002754:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	b25a      	sxtb	r2, r3
 800275c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002760:	4313      	orrs	r3, r2
 8002762:	b25b      	sxtb	r3, r3
 8002764:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	4619      	mov	r1, r3
 800276a:	2006      	movs	r0, #6
 800276c:	f000 f884 	bl	8002878 <write_register>
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8002782:	2006      	movs	r0, #6
 8002784:	f000 f852 	bl	800282c <read_register>
 8002788:	4603      	mov	r3, r0
 800278a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800278e:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d00a      	beq.n	80027ac <nrf24l01p_set_rf_air_data_rate+0x34>
 8002796:	2b02      	cmp	r3, #2
 8002798:	dc0e      	bgt.n	80027b8 <nrf24l01p_set_rf_air_data_rate+0x40>
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <nrf24l01p_set_rf_air_data_rate+0x3e>
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d10a      	bne.n	80027b8 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	73fb      	strb	r3, [r7, #15]
            break;
 80027aa:	e005      	b.n	80027b8 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	73fb      	strb	r3, [r7, #15]
            break;
 80027b4:	e000      	b.n	80027b8 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 80027b6:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	4619      	mov	r1, r3
 80027bc:	2006      	movs	r0, #6
 80027be:	f000 f85b 	bl	8002878 <write_register>
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <cs_high>:


/* Static Functions */
static void cs_high()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027d6:	4802      	ldr	r0, [pc, #8]	; (80027e0 <cs_high+0x14>)
 80027d8:	f7fe fbc2 	bl	8000f60 <HAL_GPIO_WritePin>
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40020400 	.word	0x40020400

080027e4 <cs_low>:

static void cs_low()
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 80027e8:	2200      	movs	r2, #0
 80027ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ee:	4802      	ldr	r0, [pc, #8]	; (80027f8 <cs_low+0x14>)
 80027f0:	f7fe fbb6 	bl	8000f60 <HAL_GPIO_WritePin>
}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40020400 	.word	0x40020400

080027fc <ce_high>:

static void ce_high()
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8002800:	2201      	movs	r2, #1
 8002802:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002806:	4802      	ldr	r0, [pc, #8]	; (8002810 <ce_high+0x14>)
 8002808:	f7fe fbaa 	bl	8000f60 <HAL_GPIO_WritePin>
}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40020400 	.word	0x40020400

08002814 <ce_low>:

static void ce_low()
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800281e:	4802      	ldr	r0, [pc, #8]	; (8002828 <ce_low+0x14>)
 8002820:	f7fe fb9e 	bl	8000f60 <HAL_GPIO_WritePin>
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40020400 	.word	0x40020400

0800282c <read_register>:

static uint8_t read_register(uint8_t reg)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 800283a:	f7ff ffd3 	bl	80027e4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800283e:	f107 020e 	add.w	r2, r7, #14
 8002842:	f107 010f 	add.w	r1, r7, #15
 8002846:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2301      	movs	r3, #1
 800284e:	4809      	ldr	r0, [pc, #36]	; (8002874 <read_register+0x48>)
 8002850:	f7ff fabc 	bl	8001dcc <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8002854:	f107 010d 	add.w	r1, r7, #13
 8002858:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800285c:	2201      	movs	r2, #1
 800285e:	4805      	ldr	r0, [pc, #20]	; (8002874 <read_register+0x48>)
 8002860:	f7ff f9a3 	bl	8001baa <HAL_SPI_Receive>
    cs_high();
 8002864:	f7ff ffb2 	bl	80027cc <cs_high>

    return read_val;
 8002868:	7b7b      	ldrb	r3, [r7, #13]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	2000002c 	.word	0x2000002c

08002878 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af02      	add	r7, sp, #8
 800287e:	4603      	mov	r3, r0
 8002880:	460a      	mov	r2, r1
 8002882:	71fb      	strb	r3, [r7, #7]
 8002884:	4613      	mov	r3, r2
 8002886:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	f043 0320 	orr.w	r3, r3, #32
 800288e:	b2db      	uxtb	r3, r3
 8002890:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8002892:	79bb      	ldrb	r3, [r7, #6]
 8002894:	737b      	strb	r3, [r7, #13]

    cs_low();
 8002896:	f7ff ffa5 	bl	80027e4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800289a:	f107 020e 	add.w	r2, r7, #14
 800289e:	f107 010f 	add.w	r1, r7, #15
 80028a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2301      	movs	r3, #1
 80028aa:	4809      	ldr	r0, [pc, #36]	; (80028d0 <write_register+0x58>)
 80028ac:	f7ff fa8e 	bl	8001dcc <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 80028b0:	f107 010d 	add.w	r1, r7, #13
 80028b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80028b8:	2201      	movs	r2, #1
 80028ba:	4805      	ldr	r0, [pc, #20]	; (80028d0 <write_register+0x58>)
 80028bc:	f7ff f839 	bl	8001932 <HAL_SPI_Transmit>
    cs_high();
 80028c0:	f7ff ff84 	bl	80027cc <cs_high>

    return write_val;
 80028c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000002c 	.word	0x2000002c

080028d4 <__libc_init_array>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	4d0d      	ldr	r5, [pc, #52]	; (800290c <__libc_init_array+0x38>)
 80028d8:	4c0d      	ldr	r4, [pc, #52]	; (8002910 <__libc_init_array+0x3c>)
 80028da:	1b64      	subs	r4, r4, r5
 80028dc:	10a4      	asrs	r4, r4, #2
 80028de:	2600      	movs	r6, #0
 80028e0:	42a6      	cmp	r6, r4
 80028e2:	d109      	bne.n	80028f8 <__libc_init_array+0x24>
 80028e4:	4d0b      	ldr	r5, [pc, #44]	; (8002914 <__libc_init_array+0x40>)
 80028e6:	4c0c      	ldr	r4, [pc, #48]	; (8002918 <__libc_init_array+0x44>)
 80028e8:	f000 f820 	bl	800292c <_init>
 80028ec:	1b64      	subs	r4, r4, r5
 80028ee:	10a4      	asrs	r4, r4, #2
 80028f0:	2600      	movs	r6, #0
 80028f2:	42a6      	cmp	r6, r4
 80028f4:	d105      	bne.n	8002902 <__libc_init_array+0x2e>
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028fc:	4798      	blx	r3
 80028fe:	3601      	adds	r6, #1
 8002900:	e7ee      	b.n	80028e0 <__libc_init_array+0xc>
 8002902:	f855 3b04 	ldr.w	r3, [r5], #4
 8002906:	4798      	blx	r3
 8002908:	3601      	adds	r6, #1
 800290a:	e7f2      	b.n	80028f2 <__libc_init_array+0x1e>
 800290c:	0800295c 	.word	0x0800295c
 8002910:	0800295c 	.word	0x0800295c
 8002914:	0800295c 	.word	0x0800295c
 8002918:	08002960 	.word	0x08002960

0800291c <memset>:
 800291c:	4402      	add	r2, r0
 800291e:	4603      	mov	r3, r0
 8002920:	4293      	cmp	r3, r2
 8002922:	d100      	bne.n	8002926 <memset+0xa>
 8002924:	4770      	bx	lr
 8002926:	f803 1b01 	strb.w	r1, [r3], #1
 800292a:	e7f9      	b.n	8002920 <memset+0x4>

0800292c <_init>:
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	bf00      	nop
 8002930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002932:	bc08      	pop	{r3}
 8002934:	469e      	mov	lr, r3
 8002936:	4770      	bx	lr

08002938 <_fini>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr
