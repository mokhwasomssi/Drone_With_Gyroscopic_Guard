
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006e90  08006e90  00016e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f00  08006f00  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f08  08006f08  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f08  08006f08  00016f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000078  08006f84  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08006f84  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd03  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc5  00000000  00000000  0003bda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003f970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  00040c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2e3  00000000  00000000  00041db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169a4  00000000  00000000  0005c09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009265f  00000000  00000000  00072a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010509e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f64  00000000  00000000  001050f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006e78 	.word	0x08006e78

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08006e78 	.word	0x08006e78

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b96e 	b.w	8000df4 <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9d08      	ldr	r5, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	468c      	mov	ip, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f040 8083 	bne.w	8000c46 <__udivmoddi4+0x116>
 8000b40:	428a      	cmp	r2, r1
 8000b42:	4617      	mov	r7, r2
 8000b44:	d947      	bls.n	8000bd6 <__udivmoddi4+0xa6>
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	b142      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4c:	f1c2 0020 	rsb	r0, r2, #32
 8000b50:	fa24 f000 	lsr.w	r0, r4, r0
 8000b54:	4091      	lsls	r1, r2
 8000b56:	4097      	lsls	r7, r2
 8000b58:	ea40 0c01 	orr.w	ip, r0, r1
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbbc f6f8 	udiv	r6, ip, r8
 8000b68:	fa1f fe87 	uxth.w	lr, r7
 8000b6c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b74:	fb06 f10e 	mul.w	r1, r6, lr
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 8119 	bcs.w	8000db8 <__udivmoddi4+0x288>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8116 	bls.w	8000db8 <__udivmoddi4+0x288>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	443b      	add	r3, r7
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba4:	45a6      	cmp	lr, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8105 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000bb2:	45a6      	cmp	lr, r4
 8000bb4:	f240 8102 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	443c      	add	r4, r7
 8000bbc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc0:	eba4 040e 	sub.w	r4, r4, lr
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	b902      	cbnz	r2, 8000bda <__udivmoddi4+0xaa>
 8000bd8:	deff      	udf	#255	; 0xff
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d150      	bne.n	8000c84 <__udivmoddi4+0x154>
 8000be2:	1bcb      	subs	r3, r1, r7
 8000be4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be8:	fa1f f887 	uxth.w	r8, r7
 8000bec:	2601      	movs	r6, #1
 8000bee:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf2:	0c21      	lsrs	r1, r4, #16
 8000bf4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bfc:	fb08 f30c 	mul.w	r3, r8, ip
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d907      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000c04:	1879      	adds	r1, r7, r1
 8000c06:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0xe2>
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	f200 80e9 	bhi.w	8000de4 <__udivmoddi4+0x2b4>
 8000c12:	4684      	mov	ip, r0
 8000c14:	1ac9      	subs	r1, r1, r3
 8000c16:	b2a3      	uxth	r3, r4
 8000c18:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c1c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c20:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c24:	fb08 f800 	mul.w	r8, r8, r0
 8000c28:	45a0      	cmp	r8, r4
 8000c2a:	d907      	bls.n	8000c3c <__udivmoddi4+0x10c>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x10a>
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	f200 80d9 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	eba4 0408 	sub.w	r4, r4, r8
 8000c40:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c44:	e7bf      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0x12e>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	f000 80b1 	beq.w	8000db2 <__udivmoddi4+0x282>
 8000c50:	2600      	movs	r6, #0
 8000c52:	e9c5 0100 	strd	r0, r1, [r5]
 8000c56:	4630      	mov	r0, r6
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	fab3 f683 	clz	r6, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d14a      	bne.n	8000cfc <__udivmoddi4+0x1cc>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0x140>
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	f200 80b8 	bhi.w	8000de0 <__udivmoddi4+0x2b0>
 8000c70:	1a84      	subs	r4, r0, r2
 8000c72:	eb61 0103 	sbc.w	r1, r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	468c      	mov	ip, r1
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0a8      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c7e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c82:	e7a5      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c84:	f1c2 0320 	rsb	r3, r2, #32
 8000c88:	fa20 f603 	lsr.w	r6, r0, r3
 8000c8c:	4097      	lsls	r7, r2
 8000c8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c92:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c96:	40d9      	lsrs	r1, r3
 8000c98:	4330      	orrs	r0, r6
 8000c9a:	0c03      	lsrs	r3, r0, #16
 8000c9c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f108 	mul.w	r1, r6, r8
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x19c>
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cbe:	f080 808d 	bcs.w	8000ddc <__udivmoddi4+0x2ac>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 808a 	bls.w	8000ddc <__udivmoddi4+0x2ac>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	443b      	add	r3, r7
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b281      	uxth	r1, r0
 8000cd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cdc:	fb00 f308 	mul.w	r3, r0, r8
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x1c4>
 8000ce4:	1879      	adds	r1, r7, r1
 8000ce6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cea:	d273      	bcs.n	8000dd4 <__udivmoddi4+0x2a4>
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d971      	bls.n	8000dd4 <__udivmoddi4+0x2a4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4439      	add	r1, r7
 8000cf4:	1acb      	subs	r3, r1, r3
 8000cf6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfa:	e778      	b.n	8000bee <__udivmoddi4+0xbe>
 8000cfc:	f1c6 0c20 	rsb	ip, r6, #32
 8000d00:	fa03 f406 	lsl.w	r4, r3, r6
 8000d04:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d08:	431c      	orrs	r4, r3
 8000d0a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d12:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d16:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	0c3b      	lsrs	r3, r7, #16
 8000d1e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d22:	fa1f f884 	uxth.w	r8, r4
 8000d26:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d2e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d32:	458a      	cmp	sl, r1
 8000d34:	fa02 f206 	lsl.w	r2, r2, r6
 8000d38:	fa00 f306 	lsl.w	r3, r0, r6
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x220>
 8000d3e:	1861      	adds	r1, r4, r1
 8000d40:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d44:	d248      	bcs.n	8000dd8 <__udivmoddi4+0x2a8>
 8000d46:	458a      	cmp	sl, r1
 8000d48:	d946      	bls.n	8000dd8 <__udivmoddi4+0x2a8>
 8000d4a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4e:	4421      	add	r1, r4
 8000d50:	eba1 010a 	sub.w	r1, r1, sl
 8000d54:	b2bf      	uxth	r7, r7
 8000d56:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d5e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d62:	fb00 f808 	mul.w	r8, r0, r8
 8000d66:	45b8      	cmp	r8, r7
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x24a>
 8000d6a:	19e7      	adds	r7, r4, r7
 8000d6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d70:	d22e      	bcs.n	8000dd0 <__udivmoddi4+0x2a0>
 8000d72:	45b8      	cmp	r8, r7
 8000d74:	d92c      	bls.n	8000dd0 <__udivmoddi4+0x2a0>
 8000d76:	3802      	subs	r0, #2
 8000d78:	4427      	add	r7, r4
 8000d7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7e:	eba7 0708 	sub.w	r7, r7, r8
 8000d82:	fba0 8902 	umull	r8, r9, r0, r2
 8000d86:	454f      	cmp	r7, r9
 8000d88:	46c6      	mov	lr, r8
 8000d8a:	4649      	mov	r1, r9
 8000d8c:	d31a      	bcc.n	8000dc4 <__udivmoddi4+0x294>
 8000d8e:	d017      	beq.n	8000dc0 <__udivmoddi4+0x290>
 8000d90:	b15d      	cbz	r5, 8000daa <__udivmoddi4+0x27a>
 8000d92:	ebb3 020e 	subs.w	r2, r3, lr
 8000d96:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d9e:	40f2      	lsrs	r2, r6
 8000da0:	ea4c 0202 	orr.w	r2, ip, r2
 8000da4:	40f7      	lsrs	r7, r6
 8000da6:	e9c5 2700 	strd	r2, r7, [r5]
 8000daa:	2600      	movs	r6, #0
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	462e      	mov	r6, r5
 8000db4:	4628      	mov	r0, r5
 8000db6:	e70b      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000db8:	4606      	mov	r6, r0
 8000dba:	e6e9      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fd      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc0:	4543      	cmp	r3, r8
 8000dc2:	d2e5      	bcs.n	8000d90 <__udivmoddi4+0x260>
 8000dc4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dcc:	3801      	subs	r0, #1
 8000dce:	e7df      	b.n	8000d90 <__udivmoddi4+0x260>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e7d2      	b.n	8000d7a <__udivmoddi4+0x24a>
 8000dd4:	4660      	mov	r0, ip
 8000dd6:	e78d      	b.n	8000cf4 <__udivmoddi4+0x1c4>
 8000dd8:	4681      	mov	r9, r0
 8000dda:	e7b9      	b.n	8000d50 <__udivmoddi4+0x220>
 8000ddc:	4666      	mov	r6, ip
 8000dde:	e775      	b.n	8000ccc <__udivmoddi4+0x19c>
 8000de0:	4630      	mov	r0, r6
 8000de2:	e74a      	b.n	8000c7a <__udivmoddi4+0x14a>
 8000de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de8:	4439      	add	r1, r7
 8000dea:	e713      	b.n	8000c14 <__udivmoddi4+0xe4>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	e724      	b.n	8000c3c <__udivmoddi4+0x10c>
 8000df2:	bf00      	nop

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	200c      	movs	r0, #12
 8000e3c:	f001 f8cf 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e40:	200c      	movs	r0, #12
 8000e42:	f001 f8e8 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200e      	movs	r0, #14
 8000e4c:	f001 f8c7 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e50:	200e      	movs	r0, #14
 8000e52:	f001 f8e0 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f001 f8bf 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e60:	200f      	movs	r0, #15
 8000e62:	f001 f8d8 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2010      	movs	r0, #16
 8000e6c:	f001 f8b7 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e70:	2010      	movs	r0, #16
 8000e72:	f001 f8d0 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	203a      	movs	r0, #58	; 0x3a
 8000e7c:	f001 f8af 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e80:	203a      	movs	r0, #58	; 0x3a
 8000e82:	f001 f8c8 	bl	8002016 <HAL_NVIC_EnableIRQ>

}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b64      	ldr	r3, [pc, #400]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a63      	ldr	r2, [pc, #396]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b61      	ldr	r3, [pc, #388]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b5d      	ldr	r3, [pc, #372]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a5c      	ldr	r2, [pc, #368]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4b56      	ldr	r3, [pc, #344]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a55      	ldr	r2, [pc, #340]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b53      	ldr	r3, [pc, #332]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f20:	4848      	ldr	r0, [pc, #288]	; (8001044 <MX_GPIO_Init+0x1b0>)
 8000f22:	f001 fd87 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2110      	movs	r1, #16
 8000f2a:	4847      	ldr	r0, [pc, #284]	; (8001048 <MX_GPIO_Init+0x1b4>)
 8000f2c:	f001 fd82 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|CE_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f241 0106 	movw	r1, #4102	; 0x1006
 8000f36:	4845      	ldr	r0, [pc, #276]	; (800104c <MX_GPIO_Init+0x1b8>)
 8000f38:	f001 fd7c 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	4842      	ldr	r0, [pc, #264]	; (800104c <MX_GPIO_Init+0x1b8>)
 8000f44:	f001 fd76 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4e:	483e      	ldr	r0, [pc, #248]	; (8001048 <MX_GPIO_Init+0x1b4>)
 8000f50:	f001 fd70 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4835      	ldr	r0, [pc, #212]	; (8001044 <MX_GPIO_Init+0x1b0>)
 8000f6e:	f001 fbdd 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f72:	2310      	movs	r3, #16
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	482f      	ldr	r0, [pc, #188]	; (8001048 <MX_GPIO_Init+0x1b4>)
 8000f8a:	f001 fbcf 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IRQ_Pin;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <MX_GPIO_Init+0x1bc>)
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	482a      	ldr	r0, [pc, #168]	; (800104c <MX_GPIO_Init+0x1b8>)
 8000fa2:	f001 fbc3 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4823      	ldr	r0, [pc, #140]	; (800104c <MX_GPIO_Init+0x1b8>)
 8000fbe:	f001 fbb5 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|SPI2_CSN_Pin;
 8000fc2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481c      	ldr	r0, [pc, #112]	; (800104c <MX_GPIO_Init+0x1b8>)
 8000fdc:	f001 fba6 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_GPIO_Init+0x1bc>)
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_GPIO_Init+0x1b4>)
 8000ff6:	f001 fb99 	bl	800272c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_GPIO_Init+0x1b4>)
 8001014:	f001 fb8a 	bl	800272c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2006      	movs	r0, #6
 800101e:	f000 ffde 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001022:	2006      	movs	r0, #6
 8001024:	f000 fff7 	bl	8002016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2017      	movs	r0, #23
 800102e:	f000 ffd6 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001032:	2017      	movs	r0, #23
 8001034:	f000 ffef 	bl	8002016 <HAL_NVIC_EnableIRQ>

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020800 	.word	0x40020800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020400 	.word	0x40020400
 8001050:	10210000 	.word	0x10210000
 8001054:	00000000 	.word	0x00000000

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fe4e 	bl	8001cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f882 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f7ff ff16 	bl	8000e94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001068:	f7ff fec6 	bl	8000df8 <MX_DMA_Init>
  MX_SPI1_Init();
 800106c:	f000 f922 	bl	80012b4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001070:	f000 fab0 	bl	80015d4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001074:	f000 fb10 	bl	8001698 <MX_TIM5_Init>
  MX_TIM11_Init();
 8001078:	f000 fb72 	bl	8001760 <MX_TIM11_Init>
  MX_SPI2_Init();
 800107c:	f000 f950 	bl	8001320 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001080:	f000 fd4c 	bl	8001b1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  icm20948_init();
 8001084:	f004 fa5c 	bl	8005540 <icm20948_init>
  ak09916_init();
 8001088:	f004 fa8e 	bl	80055a8 <ak09916_init>
  dshot_init(DSHOT600);
 800108c:	2002      	movs	r0, #2
 800108e:	f004 f937 	bl	8005300 <dshot_init>
  ibus_init();
 8001092:	f004 fa3b 	bl	800550c <ibus_init>
  nrf24l01p_tx_init(2500, _1Mbps);
 8001096:	2100      	movs	r1, #0
 8001098:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800109c:	f005 f8e6 	bl	800626c <nrf24l01p_tx_init>

  HAL_TIM_Base_Start(&htim11);
 80010a0:	482b      	ldr	r0, [pc, #172]	; (8001150 <main+0xf8>)
 80010a2:	f002 ff39 	bl	8003f18 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(imu_ready)
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <main+0xfc>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d042      	beq.n	8001134 <main+0xdc>
	  {
			led2_on();
 80010ae:	f005 f8ad 	bl	800620c <led2_on>
			led3_on();
 80010b2:	f005 f8c3 	bl	800623c <led3_on>

			// get angle (roll, pitch)
			icm20948_gyro_read_dps(&my_gyro);
 80010b6:	4828      	ldr	r0, [pc, #160]	; (8001158 <main+0x100>)
 80010b8:	f004 fb28 	bl	800570c <icm20948_gyro_read_dps>
			icm20948_accel_read_g(&my_accel);
 80010bc:	4827      	ldr	r0, [pc, #156]	; (800115c <main+0x104>)
 80010be:	f004 fb6b 	bl	8005798 <icm20948_accel_read_g>
			complementary_filter(my_gyro, my_accel, dt*0.000001, 0.99, &my_angle);
 80010c2:	4b27      	ldr	r3, [pc, #156]	; (8001160 <main+0x108>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f9d8 	bl	800047c <__aeabi_i2d>
 80010cc:	a31c      	add	r3, pc, #112	; (adr r3, 8001140 <main+0xe8>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fa3d 	bl	8000550 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	ec43 2b16 	vmov	d6, r2, r3
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <main+0x104>)
 80010e0:	ed93 3b00 	vldr	d3, [r3]
 80010e4:	ed93 4b02 	vldr	d4, [r3, #8]
 80010e8:	ed93 5b04 	vldr	d5, [r3, #16]
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <main+0x100>)
 80010ee:	ed93 0b00 	vldr	d0, [r3]
 80010f2:	ed93 1b02 	vldr	d1, [r3, #8]
 80010f6:	ed93 2b04 	vldr	d2, [r3, #16]
 80010fa:	481a      	ldr	r0, [pc, #104]	; (8001164 <main+0x10c>)
 80010fc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8001148 <main+0xf0>
 8001100:	f004 f864 	bl	80051cc <complementary_filter>

			// transmit angle to computer
			transmit_angle(my_angle);
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <main+0x10c>)
 8001106:	ed93 5b00 	vldr	d5, [r3]
 800110a:	ed93 6b02 	vldr	d6, [r3, #8]
 800110e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001112:	eeb0 0a45 	vmov.f32	s0, s10
 8001116:	eef0 0a65 	vmov.f32	s1, s11
 800111a:	eeb0 1a46 	vmov.f32	s2, s12
 800111e:	eef0 1a66 	vmov.f32	s3, s13
 8001122:	eeb0 2a47 	vmov.f32	s4, s14
 8001126:	eef0 2a67 	vmov.f32	s5, s15
 800112a:	f005 fb5b 	bl	80067e4 <transmit_angle>


			imu_ready = 0;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <main+0xfc>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
	  }

	  led2_off();
 8001134:	f005 f876 	bl	8006224 <led2_off>
	  if(imu_ready)
 8001138:	e7b5      	b.n	80010a6 <main+0x4e>
 800113a:	bf00      	nop
 800113c:	f3af 8000 	nop.w
 8001140:	a0b5ed8d 	.word	0xa0b5ed8d
 8001144:	3eb0c6f7 	.word	0x3eb0c6f7
 8001148:	7ae147ae 	.word	0x7ae147ae
 800114c:	3fefae14 	.word	0x3fefae14
 8001150:	2000032c 	.word	0x2000032c
 8001154:	20000170 	.word	0x20000170
 8001158:	20000158 	.word	0x20000158
 800115c:	20000120 	.word	0x20000120
 8001160:	20000138 	.word	0x20000138
 8001164:	200000e0 	.word	0x200000e0

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	2230      	movs	r2, #48	; 0x30
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f005 fb9e 	bl	80068b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <SystemClock_Config+0xc8>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <SystemClock_Config+0xc8>)
 8001196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <SystemClock_Config+0xc8>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <SystemClock_Config+0xcc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <SystemClock_Config+0xcc>)
 80011b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <SystemClock_Config+0xcc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80011d8:	230c      	movs	r3, #12
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80011dc:	2360      	movs	r3, #96	; 0x60
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011e4:	2304      	movs	r3, #4
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fc53 	bl	8002a98 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f8:	f000 f856 	bl	80012a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2103      	movs	r1, #3
 8001218:	4618      	mov	r0, r3
 800121a:	f001 feb5 	bl	8002f88 <HAL_RCC_ClockConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001224:	f000 f840 	bl	80012a8 <Error_Handler>
  }
}
 8001228:	bf00      	nop
 800122a:	3750      	adds	r7, #80	; 0x50
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	if(huart == IBUS_UART)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_UART_RxCpltCallback+0x1c>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d101      	bne.n	800124c <HAL_UART_RxCpltCallback+0x14>
		ibus_reset_failsafe();
 8001248:	f004 f96e 	bl	8005528 <ibus_reset_failsafe>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200004dc 	.word	0x200004dc

08001258 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	// rf transmitter data sent interrupt
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001268:	d103      	bne.n	8001272 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		nrf24l01p_tx_irq(); // clear interrupt flag
 800126a:	f005 f839 	bl	80062e0 <nrf24l01p_tx_irq>
		led3_off();
 800126e:	f004 fff1 	bl	8006254 <led3_off>
	}

	// imu data ready interrupt
	if(GPIO_Pin == ICM20948_IRQ_PIN_NUMBER)
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10c      	bne.n	8001292 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		imu_ready = 1;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_GPIO_EXTI_Callback+0x44>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
		dt = __HAL_TIM_GET_COUNTER(&htim11);
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x48>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001288:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim11, 0);
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x48>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000170 	.word	0x20000170
 80012a0:	2000032c 	.word	0x2000032c
 80012a4:	20000138 	.word	0x20000138

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <Error_Handler+0x8>
	...

080012b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_SPI1_Init+0x64>)
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <MX_SPI1_Init+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_SPI1_Init+0x64>)
 80012c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_SPI1_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_SPI1_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_SPI1_Init+0x64>)
 80012d4:	2202      	movs	r2, #2
 80012d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_SPI1_Init+0x64>)
 80012da:	2201      	movs	r2, #1
 80012dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_SPI1_Init+0x64>)
 80012e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_SPI1_Init+0x64>)
 80012e8:	2218      	movs	r2, #24
 80012ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_SPI1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_SPI1_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <MX_SPI1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_SPI1_Init+0x64>)
 8001300:	220a      	movs	r2, #10
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_SPI1_Init+0x64>)
 8001306:	f002 f80f 	bl	8003328 <HAL_SPI_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001310:	f7ff ffca 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200001cc 	.word	0x200001cc
 800131c:	40013000 	.word	0x40013000

08001320 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_SPI2_Init+0x64>)
 8001326:	4a18      	ldr	r2, [pc, #96]	; (8001388 <MX_SPI2_Init+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_SPI2_Init+0x64>)
 800132c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001330:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_SPI2_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_SPI2_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_SPI2_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_SPI2_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_SPI2_Init+0x64>)
 800134c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001350:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_SPI2_Init+0x64>)
 8001354:	2210      	movs	r2, #16
 8001356:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <MX_SPI2_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_SPI2_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <MX_SPI2_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_SPI2_Init+0x64>)
 800136c:	220a      	movs	r2, #10
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <MX_SPI2_Init+0x64>)
 8001372:	f001 ffd9 	bl	8003328 <HAL_SPI_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800137c:	f7ff ff94 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000174 	.word	0x20000174
 8001388:	40003800 	.word	0x40003800

0800138c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a32      	ldr	r2, [pc, #200]	; (8001474 <HAL_SPI_MspInit+0xe8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12c      	bne.n	8001408 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	4b31      	ldr	r3, [pc, #196]	; (8001478 <HAL_SPI_MspInit+0xec>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a30      	ldr	r2, [pc, #192]	; (8001478 <HAL_SPI_MspInit+0xec>)
 80013b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <HAL_SPI_MspInit+0xec>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_SPI_MspInit+0xec>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <HAL_SPI_MspInit+0xec>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_SPI_MspInit+0xec>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013e6:	23e0      	movs	r3, #224	; 0xe0
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f6:	2305      	movs	r3, #5
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	481e      	ldr	r0, [pc, #120]	; (800147c <HAL_SPI_MspInit+0xf0>)
 8001402:	f001 f993 	bl	800272c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001406:	e031      	b.n	800146c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <HAL_SPI_MspInit+0xf4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12c      	bne.n	800146c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_SPI_MspInit+0xec>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_SPI_MspInit+0xec>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_SPI_MspInit+0xec>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_SPI_MspInit+0xec>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_SPI_MspInit+0xec>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_SPI_MspInit+0xec>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 800144a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800145c:	2305      	movs	r3, #5
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <HAL_SPI_MspInit+0xf8>)
 8001468:	f001 f960 	bl	800272c <HAL_GPIO_Init>
}
 800146c:	bf00      	nop
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40013000 	.word	0x40013000
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000
 8001480:	40003800 	.word	0x40003800
 8001484:	40020400 	.word	0x40020400

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <HAL_MspInit+0x4c>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_MspInit+0x4c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_MspInit+0x4c>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 fc3c 	bl	8001da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001530:	2001      	movs	r0, #1
 8001532:	f001 fa99 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <DMA1_Stream1_IRQHandler+0x10>)
 8001542:	f000 fe89 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */


  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200003d4 	.word	0x200003d4

08001550 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <DMA1_Stream3_IRQHandler+0x10>)
 8001556:	f000 fe7f 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000284 	.word	0x20000284

08001564 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <DMA1_Stream4_IRQHandler+0x10>)
 800156a:	f000 fe75 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000374 	.word	0x20000374

08001578 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <DMA1_Stream5_IRQHandler+0x10>)
 800157e:	f000 fe6b 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000224 	.word	0x20000224

0800158c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001590:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001594:	f001 fa68 	bl	8002a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <DMA2_Stream2_IRQHandler+0x10>)
 80015a2:	f000 fe59 	bl	8002258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000047c 	.word	0x2000047c

080015b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <SystemInit+0x20>)
 80015b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <SystemInit+0x20>)
 80015bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015da:	f107 0320 	add.w	r3, r7, #32
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <MX_TIM2_Init+0xc0>)
 80015f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015fe:	4b25      	ldr	r3, [pc, #148]	; (8001694 <MX_TIM2_Init+0xc0>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <MX_TIM2_Init+0xc0>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <MX_TIM2_Init+0xc0>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <MX_TIM2_Init+0xc0>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <MX_TIM2_Init+0xc0>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800161c:	481d      	ldr	r0, [pc, #116]	; (8001694 <MX_TIM2_Init+0xc0>)
 800161e:	f002 fcd5 	bl	8003fcc <HAL_TIM_PWM_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001628:	f7ff fe3e 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4619      	mov	r1, r3
 800163a:	4816      	ldr	r0, [pc, #88]	; (8001694 <MX_TIM2_Init+0xc0>)
 800163c:	f003 f8b6 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001646:	f7ff fe2f 	bl	80012a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164a:	2360      	movs	r3, #96	; 0x60
 800164c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <MX_TIM2_Init+0xc0>)
 8001662:	f002 fdb3 	bl	80041cc <HAL_TIM_PWM_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800166c:	f7ff fe1c 	bl	80012a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2208      	movs	r2, #8
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_TIM2_Init+0xc0>)
 8001678:	f002 fda8 	bl	80041cc <HAL_TIM_PWM_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001682:	f7ff fe11 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_TIM2_Init+0xc0>)
 8001688:	f000 f9ea 	bl	8001a60 <HAL_TIM_MspPostInit>

}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000434 	.word	0x20000434

08001698 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	615a      	str	r2, [r3, #20]
 80016b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <MX_TIM5_Init+0xc0>)
 80016bc:	4a27      	ldr	r2, [pc, #156]	; (800175c <MX_TIM5_Init+0xc4>)
 80016be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MX_TIM5_Init+0xc0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <MX_TIM5_Init+0xc0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <MX_TIM5_Init+0xc0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_TIM5_Init+0xc0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <MX_TIM5_Init+0xc0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80016de:	481e      	ldr	r0, [pc, #120]	; (8001758 <MX_TIM5_Init+0xc0>)
 80016e0:	f002 fc74 	bl	8003fcc <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80016ea:	f7ff fddd 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	4619      	mov	r1, r3
 80016fc:	4816      	ldr	r0, [pc, #88]	; (8001758 <MX_TIM5_Init+0xc0>)
 80016fe:	f003 f855 	bl	80047ac <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001708:	f7ff fdce 	bl	80012a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170c:	2360      	movs	r3, #96	; 0x60
 800170e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2204      	movs	r2, #4
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_TIM5_Init+0xc0>)
 8001724:	f002 fd52 	bl	80041cc <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800172e:	f7ff fdbb 	bl	80012a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	220c      	movs	r2, #12
 8001736:	4619      	mov	r1, r3
 8001738:	4807      	ldr	r0, [pc, #28]	; (8001758 <MX_TIM5_Init+0xc0>)
 800173a:	f002 fd47 	bl	80041cc <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001744:	f7ff fdb0 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001748:	4803      	ldr	r0, [pc, #12]	; (8001758 <MX_TIM5_Init+0xc0>)
 800174a:	f000 f989 	bl	8001a60 <HAL_TIM_MspPostInit>

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200002e4 	.word	0x200002e4
 800175c:	40000c00 	.word	0x40000c00

08001760 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_TIM11_Init+0x40>)
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <MX_TIM11_Init+0x44>)
 8001768:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <MX_TIM11_Init+0x40>)
 800176c:	2263      	movs	r2, #99	; 0x63
 800176e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <MX_TIM11_Init+0x40>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <MX_TIM11_Init+0x40>)
 8001778:	f240 32e7 	movw	r2, #999	; 0x3e7
 800177c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <MX_TIM11_Init+0x40>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_TIM11_Init+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_TIM11_Init+0x40>)
 800178c:	f002 fb74 	bl	8003e78 <HAL_TIM_Base_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001796:	f7ff fd87 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000032c 	.word	0x2000032c
 80017a4:	40014800 	.word	0x40014800

080017a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	f040 8089 	bne.w	80018ce <HAL_TIM_PWM_MspInit+0x126>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	4b8c      	ldr	r3, [pc, #560]	; (80019f4 <HAL_TIM_PWM_MspInit+0x24c>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a8b      	ldr	r2, [pc, #556]	; (80019f4 <HAL_TIM_PWM_MspInit+0x24c>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <HAL_TIM_PWM_MspInit+0x24c>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80017d8:	4b87      	ldr	r3, [pc, #540]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 80017da:	4a88      	ldr	r2, [pc, #544]	; (80019fc <HAL_TIM_PWM_MspInit+0x254>)
 80017dc:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80017de:	4b86      	ldr	r3, [pc, #536]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 80017e0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017e4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e6:	4b84      	ldr	r3, [pc, #528]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ec:	4b82      	ldr	r3, [pc, #520]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017f2:	4b81      	ldr	r3, [pc, #516]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 80017f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017fa:	4b7f      	ldr	r3, [pc, #508]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 80017fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001800:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001802:	4b7d      	ldr	r3, [pc, #500]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 8001804:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001808:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800180a:	4b7b      	ldr	r3, [pc, #492]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 8001812:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001816:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001818:	4b77      	ldr	r3, [pc, #476]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 800181a:	2204      	movs	r2, #4
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800181e:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 8001820:	2200      	movs	r2, #0
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001824:	4b74      	ldr	r3, [pc, #464]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 8001826:	2200      	movs	r2, #0
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800182a:	4b73      	ldr	r3, [pc, #460]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 800182c:	2200      	movs	r2, #0
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001830:	4871      	ldr	r0, [pc, #452]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 8001832:	f000 fc0b 	bl	800204c <HAL_DMA_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 800183c:	f7ff fd34 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a6d      	ldr	r2, [pc, #436]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
 8001846:	4a6c      	ldr	r2, [pc, #432]	; (80019f8 <HAL_TIM_PWM_MspInit+0x250>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 800184c:	4b6c      	ldr	r3, [pc, #432]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 800184e:	4a6d      	ldr	r2, [pc, #436]	; (8001a04 <HAL_TIM_PWM_MspInit+0x25c>)
 8001850:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8001852:	4b6b      	ldr	r3, [pc, #428]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 8001854:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001858:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800185a:	4b69      	ldr	r3, [pc, #420]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 800185c:	2240      	movs	r2, #64	; 0x40
 800185e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001860:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001866:	4b66      	ldr	r3, [pc, #408]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 8001868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800186e:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 8001870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001874:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001876:	4b62      	ldr	r3, [pc, #392]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 8001878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 800187e:	4b60      	ldr	r3, [pc, #384]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001884:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 8001886:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800188a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800188c:	4b5c      	ldr	r3, [pc, #368]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 800188e:	2204      	movs	r2, #4
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8001898:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 800189a:	2200      	movs	r2, #0
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800189e:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 80018a4:	4856      	ldr	r0, [pc, #344]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 80018a6:	f000 fbd1 	bl	800204c <HAL_DMA_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_TIM_PWM_MspInit+0x10c>
    {
      Error_Handler();
 80018b0:	f7ff fcfa 	bl	80012a8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a52      	ldr	r2, [pc, #328]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ba:	4a51      	ldr	r2, [pc, #324]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a4f      	ldr	r2, [pc, #316]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 80018c4:	621a      	str	r2, [r3, #32]
 80018c6:	4a4e      	ldr	r2, [pc, #312]	; (8001a00 <HAL_TIM_PWM_MspInit+0x258>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80018cc:	e08d      	b.n	80019ea <HAL_TIM_PWM_MspInit+0x242>
  else if(tim_pwmHandle->Instance==TIM5)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a4d      	ldr	r2, [pc, #308]	; (8001a08 <HAL_TIM_PWM_MspInit+0x260>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	f040 8088 	bne.w	80019ea <HAL_TIM_PWM_MspInit+0x242>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <HAL_TIM_PWM_MspInit+0x24c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a44      	ldr	r2, [pc, #272]	; (80019f4 <HAL_TIM_PWM_MspInit+0x24c>)
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <HAL_TIM_PWM_MspInit+0x24c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80018f6:	4b45      	ldr	r3, [pc, #276]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 80018f8:	4a45      	ldr	r2, [pc, #276]	; (8001a10 <HAL_TIM_PWM_MspInit+0x268>)
 80018fa:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 80018fc:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 80018fe:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001902:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001904:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800190a:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001910:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 8001912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001916:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001918:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 800191a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800191e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001920:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 8001922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001926:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001928:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800192e:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 8001930:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001934:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001936:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 8001938:	2204      	movs	r2, #4
 800193a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 800193e:	2200      	movs	r2, #0
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 8001944:	2200      	movs	r2, #0
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001948:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 800194a:	2200      	movs	r2, #0
 800194c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 800194e:	482f      	ldr	r0, [pc, #188]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 8001950:	f000 fb7c 	bl	800204c <HAL_DMA_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800195a:	f7ff fca5 	bl	80012a8 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a2a      	ldr	r2, [pc, #168]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
 8001964:	4a29      	ldr	r2, [pc, #164]	; (8001a0c <HAL_TIM_PWM_MspInit+0x264>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 800196a:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 800196c:	4a2a      	ldr	r2, [pc, #168]	; (8001a18 <HAL_TIM_PWM_MspInit+0x270>)
 800196e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 8001972:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001976:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001978:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 800197a:	2240      	movs	r2, #64	; 0x40
 800197c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800197e:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001984:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 8001986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800198c:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 800198e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001992:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 8001996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 80019a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019a8:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 80019ac:	2204      	movs	r2, #4
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80019b0:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80019bc:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 80019c2:	4814      	ldr	r0, [pc, #80]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 80019c4:	f000 fb42 	bl	800204c <HAL_DMA_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_TIM_PWM_MspInit+0x22a>
      Error_Handler();
 80019ce:	f7ff fc6b 	bl	80012a8 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 80019d6:	631a      	str	r2, [r3, #48]	; 0x30
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 80019e2:	639a      	str	r2, [r3, #56]	; 0x38
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <HAL_TIM_PWM_MspInit+0x26c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	20000224 	.word	0x20000224
 80019fc:	40026088 	.word	0x40026088
 8001a00:	200003d4 	.word	0x200003d4
 8001a04:	40026028 	.word	0x40026028
 8001a08:	40000c00 	.word	0x40000c00
 8001a0c:	20000374 	.word	0x20000374
 8001a10:	40026070 	.word	0x40026070
 8001a14:	20000284 	.word	0x20000284
 8001a18:	40026058 	.word	0x40026058

08001a1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <HAL_TIM_Base_MspInit+0x3c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10d      	bne.n	8001a4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_TIM_Base_MspInit+0x40>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_TIM_Base_MspInit+0x40>)
 8001a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_TIM_Base_MspInit+0x40>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40014800 	.word	0x40014800
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a80:	d11e      	bne.n	8001ac0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_TIM_MspPostInit+0xb0>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <HAL_TIM_MspPostInit+0xb0>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_TIM_MspPostInit+0xb0>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR4_Pin|MOTOR2_Pin;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4816      	ldr	r0, [pc, #88]	; (8001b14 <HAL_TIM_MspPostInit+0xb4>)
 8001aba:	f000 fe37 	bl	800272c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001abe:	e022      	b.n	8001b06 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <HAL_TIM_MspPostInit+0xb8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d11d      	bne.n	8001b06 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_TIM_MspPostInit+0xb0>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_TIM_MspPostInit+0xb0>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_TIM_MspPostInit+0xb0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR3_Pin|MOTOR1_Pin;
 8001ae6:	230a      	movs	r3, #10
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001af6:	2302      	movs	r3, #2
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4804      	ldr	r0, [pc, #16]	; (8001b14 <HAL_TIM_MspPostInit+0xb4>)
 8001b02:	f000 fe13 	bl	800272c <HAL_GPIO_Init>
}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40000c00 	.word	0x40000c00

08001b1c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <MX_USART1_UART_Init+0x50>)
 8001b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b42:	220c      	movs	r2, #12
 8001b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b54:	f002 fe98 	bl	8004888 <HAL_UART_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b5e:	f7ff fba3 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200004dc 	.word	0x200004dc
 8001b6c:	40011000 	.word	0x40011000

08001b70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a40      	ldr	r2, [pc, #256]	; (8001c90 <HAL_UART_MspInit+0x120>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d179      	bne.n	8001c86 <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b3f      	ldr	r3, [pc, #252]	; (8001c94 <HAL_UART_MspInit+0x124>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	; (8001c94 <HAL_UART_MspInit+0x124>)
 8001b9c:	f043 0310 	orr.w	r3, r3, #16
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b3c      	ldr	r3, [pc, #240]	; (8001c94 <HAL_UART_MspInit+0x124>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <HAL_UART_MspInit+0x124>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <HAL_UART_MspInit+0x124>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <HAL_UART_MspInit+0x124>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <HAL_UART_MspInit+0x124>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <HAL_UART_MspInit+0x124>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b2e      	ldr	r3, [pc, #184]	; (8001c94 <HAL_UART_MspInit+0x124>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4619      	mov	r1, r3
 8001c02:	4825      	ldr	r0, [pc, #148]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c04:	f000 fd92 	bl	800272c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c18:	2307      	movs	r3, #7
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	481e      	ldr	r0, [pc, #120]	; (8001c9c <HAL_UART_MspInit+0x12c>)
 8001c24:	f000 fd82 	bl	800272c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_UART_MspInit+0x134>)
 8001c2c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c34:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c48:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c6a:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c6c:	f000 f9ee 	bl	800204c <HAL_DMA_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001c76:	f7ff fb17 	bl	80012a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	; 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40011000 	.word	0x40011000
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	2000047c 	.word	0x2000047c
 8001ca4:	40026440 	.word	0x40026440

08001ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cae:	e003      	b.n	8001cb8 <LoopCopyDataInit>

08001cb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cb6:	3104      	adds	r1, #4

08001cb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cb8:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cc0:	d3f6      	bcc.n	8001cb0 <CopyDataInit>
  ldr  r2, =_sbss
 8001cc2:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cc4:	e002      	b.n	8001ccc <LoopFillZerobss>

08001cc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cc8:	f842 3b04 	str.w	r3, [r2], #4

08001ccc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cd0:	d3f9      	bcc.n	8001cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cd2:	f7ff fc6d 	bl	80015b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f004 fdcb 	bl	8006870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cda:	f7ff f9bd 	bl	8001058 <main>
  bx  lr    
 8001cde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ce0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ce4:	08006f10 	.word	0x08006f10
  ldr  r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cec:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001cf0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001cf4:	20000524 	.word	0x20000524

08001cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC_IRQHandler>
	...

08001cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_Init+0x40>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <HAL_Init+0x40>)
 8001d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_Init+0x40>)
 8001d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <HAL_Init+0x40>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d24:	2003      	movs	r0, #3
 8001d26:	f000 f94f 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f000 f808 	bl	8001d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d30:	f7ff fbaa 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023c00 	.word	0x40023c00

08001d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_InitTick+0x54>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_InitTick+0x58>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f967 	bl	8002032 <HAL_SYSTICK_Config>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00e      	b.n	8001d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d80a      	bhi.n	8001d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d74:	2200      	movs	r2, #0
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f000 f92f 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d80:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <HAL_InitTick+0x5c>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	20000520 	.word	0x20000520

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000520 	.word	0x20000520

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4907      	ldr	r1, [pc, #28]	; (8001ec4 <__NVIC_EnableIRQ+0x38>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	; (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	; (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f7ff ff8e 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff29 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff3e 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff8e 	bl	8001f1c <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff31 	bl	8001e8c <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa2 	bl	8001f84 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff feb6 	bl	8001dc8 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e099      	b.n	800219c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002088:	e00f      	b.n	80020aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800208a:	f7ff fe9d 	bl	8001dc8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b05      	cmp	r3, #5
 8002096:	d908      	bls.n	80020aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2203      	movs	r2, #3
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e078      	b.n	800219c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e8      	bne.n	800208a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <HAL_DMA_Init+0x158>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2b04      	cmp	r3, #4
 8002102:	d107      	bne.n	8002114 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	4313      	orrs	r3, r2
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f023 0307 	bic.w	r3, r3, #7
 800212a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	2b04      	cmp	r3, #4
 800213c:	d117      	bne.n	800216e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00e      	beq.n	800216e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fa6f 	bl	8002634 <DMA_CheckFifoParam>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2240      	movs	r2, #64	; 0x40
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800216a:	2301      	movs	r3, #1
 800216c:	e016      	b.n	800219c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fa26 	bl	80025c8 <DMA_CalcBaseAndBitshift>
 800217c:	4603      	mov	r3, r0
 800217e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	223f      	movs	r2, #63	; 0x3f
 8002186:	409a      	lsls	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	f010803f 	.word	0xf010803f

080021a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_DMA_Start_IT+0x26>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e040      	b.n	8002250 <HAL_DMA_Start_IT+0xa8>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d12f      	bne.n	8002242 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2202      	movs	r2, #2
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f9b8 	bl	800256c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	223f      	movs	r2, #63	; 0x3f
 8002202:	409a      	lsls	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0216 	orr.w	r2, r2, #22
 8002216:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0208 	orr.w	r2, r2, #8
 800222e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e005      	b.n	800224e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800224a:	2302      	movs	r3, #2
 800224c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800224e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002264:	4b92      	ldr	r3, [pc, #584]	; (80024b0 <HAL_DMA_IRQHandler+0x258>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a92      	ldr	r2, [pc, #584]	; (80024b4 <HAL_DMA_IRQHandler+0x25c>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0a9b      	lsrs	r3, r3, #10
 8002270:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2208      	movs	r2, #8
 8002284:	409a      	lsls	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4013      	ands	r3, r2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d01a      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0204 	bic.w	r2, r2, #4
 80022aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	2208      	movs	r2, #8
 80022b2:	409a      	lsls	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c8:	2201      	movs	r2, #1
 80022ca:	409a      	lsls	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	2201      	movs	r2, #1
 80022e8:	409a      	lsls	r2, r3
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	f043 0202 	orr.w	r2, r3, #2
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	2204      	movs	r2, #4
 8002300:	409a      	lsls	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d012      	beq.n	8002330 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00b      	beq.n	8002330 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	2204      	movs	r2, #4
 800231e:	409a      	lsls	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	f043 0204 	orr.w	r2, r3, #4
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	2210      	movs	r2, #16
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d043      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d03c      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2210      	movs	r2, #16
 8002354:	409a      	lsls	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d018      	beq.n	800239a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d108      	bne.n	8002388 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d024      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
 8002386:	e01f      	b.n	80023c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	4798      	blx	r3
 8002398:	e016      	b.n	80023c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0208 	bic.w	r2, r2, #8
 80023b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	2220      	movs	r2, #32
 80023ce:	409a      	lsls	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 808e 	beq.w	80024f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8086 	beq.w	80024f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	2220      	movs	r2, #32
 80023f0:	409a      	lsls	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d136      	bne.n	8002470 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0216 	bic.w	r2, r2, #22
 8002410:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002420:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <HAL_DMA_IRQHandler+0x1da>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0208 	bic.w	r2, r2, #8
 8002440:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	223f      	movs	r2, #63	; 0x3f
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002462:	2b00      	cmp	r3, #0
 8002464:	d07d      	beq.n	8002562 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
        }
        return;
 800246e:	e078      	b.n	8002562 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01c      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d108      	bne.n	800249e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	2b00      	cmp	r3, #0
 8002492:	d030      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
 800249c:	e02b      	b.n	80024f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d027      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4798      	blx	r3
 80024ae:	e022      	b.n	80024f6 <HAL_DMA_IRQHandler+0x29e>
 80024b0:	20000000 	.word	0x20000000
 80024b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10f      	bne.n	80024e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0210 	bic.w	r2, r2, #16
 80024d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d032      	beq.n	8002564 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d022      	beq.n	8002550 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2205      	movs	r2, #5
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3301      	adds	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	429a      	cmp	r2, r3
 800252c:	d307      	bcc.n	800253e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f2      	bne.n	8002522 <HAL_DMA_IRQHandler+0x2ca>
 800253c:	e000      	b.n	8002540 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800253e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
 8002560:	e000      	b.n	8002564 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002562:	bf00      	nop
    }
  }
}
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop

0800256c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002588:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b40      	cmp	r3, #64	; 0x40
 8002598:	d108      	bne.n	80025ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025aa:	e007      	b.n	80025bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	60da      	str	r2, [r3, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	3b10      	subs	r3, #16
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <DMA_CalcBaseAndBitshift+0x64>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025e2:	4a13      	ldr	r2, [pc, #76]	; (8002630 <DMA_CalcBaseAndBitshift+0x68>)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d909      	bls.n	800260a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025fe:	f023 0303 	bic.w	r3, r3, #3
 8002602:	1d1a      	adds	r2, r3, #4
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	659a      	str	r2, [r3, #88]	; 0x58
 8002608:	e007      	b.n	800261a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	aaaaaaab 	.word	0xaaaaaaab
 8002630:	08006eb0 	.word	0x08006eb0

08002634 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d11f      	bne.n	800268e <DMA_CheckFifoParam+0x5a>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d856      	bhi.n	8002702 <DMA_CheckFifoParam+0xce>
 8002654:	a201      	add	r2, pc, #4	; (adr r2, 800265c <DMA_CheckFifoParam+0x28>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	0800266d 	.word	0x0800266d
 8002660:	0800267f 	.word	0x0800267f
 8002664:	0800266d 	.word	0x0800266d
 8002668:	08002703 	.word	0x08002703
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d046      	beq.n	8002706 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267c:	e043      	b.n	8002706 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002686:	d140      	bne.n	800270a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800268c:	e03d      	b.n	800270a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002696:	d121      	bne.n	80026dc <DMA_CheckFifoParam+0xa8>
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d837      	bhi.n	800270e <DMA_CheckFifoParam+0xda>
 800269e:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <DMA_CheckFifoParam+0x70>)
 80026a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a4:	080026b5 	.word	0x080026b5
 80026a8:	080026bb 	.word	0x080026bb
 80026ac:	080026b5 	.word	0x080026b5
 80026b0:	080026cd 	.word	0x080026cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      break;
 80026b8:	e030      	b.n	800271c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d025      	beq.n	8002712 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ca:	e022      	b.n	8002712 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026d4:	d11f      	bne.n	8002716 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026da:	e01c      	b.n	8002716 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d903      	bls.n	80026ea <DMA_CheckFifoParam+0xb6>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d003      	beq.n	80026f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026e8:	e018      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
      break;
 80026ee:	e015      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00e      	beq.n	800271a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002700:	e00b      	b.n	800271a <DMA_CheckFifoParam+0xe6>
      break;
 8002702:	bf00      	nop
 8002704:	e00a      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 8002706:	bf00      	nop
 8002708:	e008      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 800270a:	bf00      	nop
 800270c:	e006      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 800270e:	bf00      	nop
 8002710:	e004      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 8002712:	bf00      	nop
 8002714:	e002      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;   
 8002716:	bf00      	nop
 8002718:	e000      	b.n	800271c <DMA_CheckFifoParam+0xe8>
      break;
 800271a:	bf00      	nop
    }
  } 
  
  return status; 
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop

0800272c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	e159      	b.n	80029fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002748:	2201      	movs	r2, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	429a      	cmp	r2, r3
 8002762:	f040 8148 	bne.w	80029f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d005      	beq.n	800277e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277a:	2b02      	cmp	r3, #2
 800277c:	d130      	bne.n	80027e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	2203      	movs	r2, #3
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b4:	2201      	movs	r2, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 0201 	and.w	r2, r3, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d017      	beq.n	800281c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d123      	bne.n	8002870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	08da      	lsrs	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3208      	adds	r2, #8
 8002830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	08da      	lsrs	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3208      	adds	r2, #8
 800286a:	69b9      	ldr	r1, [r7, #24]
 800286c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0203 	and.w	r2, r3, #3
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80a2 	beq.w	80029f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <HAL_GPIO_Init+0x2e8>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4a56      	ldr	r2, [pc, #344]	; (8002a14 <HAL_GPIO_Init+0x2e8>)
 80028bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c0:	6453      	str	r3, [r2, #68]	; 0x44
 80028c2:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_GPIO_Init+0x2e8>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ce:	4a52      	ldr	r2, [pc, #328]	; (8002a18 <HAL_GPIO_Init+0x2ec>)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a49      	ldr	r2, [pc, #292]	; (8002a1c <HAL_GPIO_Init+0x2f0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d019      	beq.n	800292e <HAL_GPIO_Init+0x202>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a48      	ldr	r2, [pc, #288]	; (8002a20 <HAL_GPIO_Init+0x2f4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d013      	beq.n	800292a <HAL_GPIO_Init+0x1fe>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a47      	ldr	r2, [pc, #284]	; (8002a24 <HAL_GPIO_Init+0x2f8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00d      	beq.n	8002926 <HAL_GPIO_Init+0x1fa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a46      	ldr	r2, [pc, #280]	; (8002a28 <HAL_GPIO_Init+0x2fc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d007      	beq.n	8002922 <HAL_GPIO_Init+0x1f6>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a45      	ldr	r2, [pc, #276]	; (8002a2c <HAL_GPIO_Init+0x300>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d101      	bne.n	800291e <HAL_GPIO_Init+0x1f2>
 800291a:	2304      	movs	r3, #4
 800291c:	e008      	b.n	8002930 <HAL_GPIO_Init+0x204>
 800291e:	2307      	movs	r3, #7
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x204>
 8002922:	2303      	movs	r3, #3
 8002924:	e004      	b.n	8002930 <HAL_GPIO_Init+0x204>
 8002926:	2302      	movs	r3, #2
 8002928:	e002      	b.n	8002930 <HAL_GPIO_Init+0x204>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_GPIO_Init+0x204>
 800292e:	2300      	movs	r3, #0
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	f002 0203 	and.w	r2, r2, #3
 8002936:	0092      	lsls	r2, r2, #2
 8002938:	4093      	lsls	r3, r2
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002940:	4935      	ldr	r1, [pc, #212]	; (8002a18 <HAL_GPIO_Init+0x2ec>)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_GPIO_Init+0x304>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002972:	4a2f      	ldr	r2, [pc, #188]	; (8002a30 <HAL_GPIO_Init+0x304>)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <HAL_GPIO_Init+0x304>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299c:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <HAL_GPIO_Init+0x304>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a2:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_GPIO_Init+0x304>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029c6:	4a1a      	ldr	r2, [pc, #104]	; (8002a30 <HAL_GPIO_Init+0x304>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_GPIO_Init+0x304>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f0:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <HAL_GPIO_Init+0x304>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3301      	adds	r3, #1
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b0f      	cmp	r3, #15
 8002a00:	f67f aea2 	bls.w	8002748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40020800 	.word	0x40020800
 8002a28:	40020c00 	.word	0x40020c00
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40013c00 	.word	0x40013c00

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a50:	e003      	b.n	8002a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	041a      	lsls	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	619a      	str	r2, [r3, #24]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fbe6 	bl	8001258 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40013c00 	.word	0x40013c00

08002a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e264      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d075      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ab6:	4ba3      	ldr	r3, [pc, #652]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d00c      	beq.n	8002adc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac2:	4ba0      	ldr	r3, [pc, #640]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d112      	bne.n	8002af4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ace:	4b9d      	ldr	r3, [pc, #628]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	4b99      	ldr	r3, [pc, #612]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d05b      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x108>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d157      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e23f      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d106      	bne.n	8002b0c <HAL_RCC_OscConfig+0x74>
 8002afe:	4b91      	ldr	r3, [pc, #580]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a90      	ldr	r2, [pc, #576]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e01d      	b.n	8002b48 <HAL_RCC_OscConfig+0xb0>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x98>
 8002b16:	4b8b      	ldr	r3, [pc, #556]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a8a      	ldr	r2, [pc, #552]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b88      	ldr	r3, [pc, #544]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a87      	ldr	r2, [pc, #540]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0xb0>
 8002b30:	4b84      	ldr	r3, [pc, #528]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a83      	ldr	r2, [pc, #524]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b81      	ldr	r3, [pc, #516]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a80      	ldr	r2, [pc, #512]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7ff f93a 	bl	8001dc8 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b58:	f7ff f936 	bl	8001dc8 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e204      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b76      	ldr	r3, [pc, #472]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0xc0>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7ff f926 	bl	8001dc8 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b80:	f7ff f922 	bl	8001dc8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e1f0      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	4b6c      	ldr	r3, [pc, #432]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0xe8>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d063      	beq.n	8002c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bae:	4b65      	ldr	r3, [pc, #404]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bba:	4b62      	ldr	r3, [pc, #392]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d11c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc6:	4b5f      	ldr	r3, [pc, #380]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d116      	bne.n	8002c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	4b5c      	ldr	r3, [pc, #368]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x152>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e1c4      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bea:	4b56      	ldr	r3, [pc, #344]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4952      	ldr	r1, [pc, #328]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	e03a      	b.n	8002c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c08:	4b4f      	ldr	r3, [pc, #316]	; (8002d48 <HAL_RCC_OscConfig+0x2b0>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7ff f8db 	bl	8001dc8 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c16:	f7ff f8d7 	bl	8001dc8 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e1a5      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	4b46      	ldr	r3, [pc, #280]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b43      	ldr	r3, [pc, #268]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4940      	ldr	r1, [pc, #256]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	600b      	str	r3, [r1, #0]
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_RCC_OscConfig+0x2b0>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7ff f8ba 	bl	8001dc8 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c58:	f7ff f8b6 	bl	8001dc8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e184      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d030      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <HAL_RCC_OscConfig+0x2b4>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7ff f89a 	bl	8001dc8 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c98:	f7ff f896 	bl	8001dc8 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e164      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x200>
 8002cb6:	e015      	b.n	8002ce4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb8:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_RCC_OscConfig+0x2b4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbe:	f7ff f883 	bl	8001dc8 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc6:	f7ff f87f 	bl	8001dc8 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e14d      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a0 	beq.w	8002e32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_OscConfig+0x2b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d121      	bne.n	8002d72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_RCC_OscConfig+0x2b8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <HAL_RCC_OscConfig+0x2b8>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3a:	f7ff f845 	bl	8001dc8 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	e011      	b.n	8002d66 <HAL_RCC_OscConfig+0x2ce>
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	42470000 	.word	0x42470000
 8002d4c:	42470e80 	.word	0x42470e80
 8002d50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d54:	f7ff f838 	bl	8001dc8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e106      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d66:	4b85      	ldr	r3, [pc, #532]	; (8002f7c <HAL_RCC_OscConfig+0x4e4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d106      	bne.n	8002d88 <HAL_RCC_OscConfig+0x2f0>
 8002d7a:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a80      	ldr	r2, [pc, #512]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
 8002d86:	e01c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x32a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d10c      	bne.n	8002daa <HAL_RCC_OscConfig+0x312>
 8002d90:	4b7b      	ldr	r3, [pc, #492]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	4a7a      	ldr	r2, [pc, #488]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002d96:	f043 0304 	orr.w	r3, r3, #4
 8002d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9c:	4b78      	ldr	r3, [pc, #480]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a77      	ldr	r2, [pc, #476]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
 8002da8:	e00b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x32a>
 8002daa:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	4a74      	ldr	r2, [pc, #464]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6713      	str	r3, [r2, #112]	; 0x70
 8002db6:	4b72      	ldr	r3, [pc, #456]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a71      	ldr	r2, [pc, #452]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d015      	beq.n	8002df6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7fe fffd 	bl	8001dc8 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fe fff9 	bl	8001dc8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e0c5      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	4b65      	ldr	r3, [pc, #404]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ee      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x33a>
 8002df4:	e014      	b.n	8002e20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df6:	f7fe ffe7 	bl	8001dc8 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe ffe3 	bl	8001dc8 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0af      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e14:	4b5a      	ldr	r3, [pc, #360]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ee      	bne.n	8002dfe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d105      	bne.n	8002e32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e26:	4b56      	ldr	r3, [pc, #344]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a55      	ldr	r2, [pc, #340]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 809b 	beq.w	8002f72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e3c:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d05c      	beq.n	8002f02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d141      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e50:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <HAL_RCC_OscConfig+0x4ec>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7fe ffb7 	bl	8001dc8 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fe ffb3 	bl	8001dc8 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e081      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e70:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f0      	bne.n	8002e5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69da      	ldr	r2, [r3, #28]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	019b      	lsls	r3, r3, #6
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	3b01      	subs	r3, #1
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	4937      	ldr	r1, [pc, #220]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea6:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <HAL_RCC_OscConfig+0x4ec>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe ff8c 	bl	8001dc8 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe ff88 	bl	8001dc8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e056      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x41c>
 8002ed2:	e04e      	b.n	8002f72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <HAL_RCC_OscConfig+0x4ec>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eda:	f7fe ff75 	bl	8001dc8 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee2:	f7fe ff71 	bl	8001dc8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e03f      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef4:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f0      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x44a>
 8002f00:	e037      	b.n	8002f72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e032      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <HAL_RCC_OscConfig+0x4e8>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d028      	beq.n	8002f6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d121      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d11a      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f3e:	4013      	ands	r3, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d111      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	3b01      	subs	r3, #1
 8002f58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	40023800 	.word	0x40023800
 8002f84:	42470060 	.word	0x42470060

08002f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0cc      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b68      	ldr	r3, [pc, #416]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d90c      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b65      	ldr	r3, [pc, #404]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b63      	ldr	r3, [pc, #396]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0b8      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fdc:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4a58      	ldr	r2, [pc, #352]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff4:	4b53      	ldr	r3, [pc, #332]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003000:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	494d      	ldr	r1, [pc, #308]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d044      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d119      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e07f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d003      	beq.n	8003046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003042:	2b03      	cmp	r3, #3
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e06f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003056:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e067      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003066:	4b37      	ldr	r3, [pc, #220]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f023 0203 	bic.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4934      	ldr	r1, [pc, #208]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003078:	f7fe fea6 	bl	8001dc8 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	e00a      	b.n	8003096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7fe fea2 	bl	8001dc8 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e04f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 020c 	and.w	r2, r3, #12
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1eb      	bne.n	8003080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d20c      	bcs.n	80030d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e032      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4916      	ldr	r1, [pc, #88]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	490e      	ldr	r1, [pc, #56]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800310e:	f000 f821 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003112:	4602      	mov	r2, r0
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	490a      	ldr	r1, [pc, #40]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	5ccb      	ldrb	r3, [r1, r3]
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x1c8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fe06 	bl	8001d40 <HAL_InitTick>

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023c00 	.word	0x40023c00
 8003144:	40023800 	.word	0x40023800
 8003148:	08006e98 	.word	0x08006e98
 800314c:	20000000 	.word	0x20000000
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800315a:	2100      	movs	r1, #0
 800315c:	6079      	str	r1, [r7, #4]
 800315e:	2100      	movs	r1, #0
 8003160:	60f9      	str	r1, [r7, #12]
 8003162:	2100      	movs	r1, #0
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003166:	2100      	movs	r1, #0
 8003168:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800316a:	4952      	ldr	r1, [pc, #328]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800316c:	6889      	ldr	r1, [r1, #8]
 800316e:	f001 010c 	and.w	r1, r1, #12
 8003172:	2908      	cmp	r1, #8
 8003174:	d00d      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0x3e>
 8003176:	2908      	cmp	r1, #8
 8003178:	f200 8094 	bhi.w	80032a4 <HAL_RCC_GetSysClockFreq+0x150>
 800317c:	2900      	cmp	r1, #0
 800317e:	d002      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x32>
 8003180:	2904      	cmp	r1, #4
 8003182:	d003      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x38>
 8003184:	e08e      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003186:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003188:	60bb      	str	r3, [r7, #8]
       break;
 800318a:	e08e      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800318c:	4b4b      	ldr	r3, [pc, #300]	; (80032bc <HAL_RCC_GetSysClockFreq+0x168>)
 800318e:	60bb      	str	r3, [r7, #8]
      break;
 8003190:	e08b      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003192:	4948      	ldr	r1, [pc, #288]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003194:	6849      	ldr	r1, [r1, #4]
 8003196:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800319a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800319c:	4945      	ldr	r1, [pc, #276]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800319e:	6849      	ldr	r1, [r1, #4]
 80031a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80031a4:	2900      	cmp	r1, #0
 80031a6:	d024      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a8:	4942      	ldr	r1, [pc, #264]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80031aa:	6849      	ldr	r1, [r1, #4]
 80031ac:	0989      	lsrs	r1, r1, #6
 80031ae:	4608      	mov	r0, r1
 80031b0:	f04f 0100 	mov.w	r1, #0
 80031b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80031b8:	f04f 0500 	mov.w	r5, #0
 80031bc:	ea00 0204 	and.w	r2, r0, r4
 80031c0:	ea01 0305 	and.w	r3, r1, r5
 80031c4:	493d      	ldr	r1, [pc, #244]	; (80032bc <HAL_RCC_GetSysClockFreq+0x168>)
 80031c6:	fb01 f003 	mul.w	r0, r1, r3
 80031ca:	2100      	movs	r1, #0
 80031cc:	fb01 f102 	mul.w	r1, r1, r2
 80031d0:	1844      	adds	r4, r0, r1
 80031d2:	493a      	ldr	r1, [pc, #232]	; (80032bc <HAL_RCC_GetSysClockFreq+0x168>)
 80031d4:	fba2 0101 	umull	r0, r1, r2, r1
 80031d8:	1863      	adds	r3, r4, r1
 80031da:	4619      	mov	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	461a      	mov	r2, r3
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	f7fd fc8c 	bl	8000b00 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4613      	mov	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e04a      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f2:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	099b      	lsrs	r3, r3, #6
 80031f8:	461a      	mov	r2, r3
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003202:	f04f 0100 	mov.w	r1, #0
 8003206:	ea02 0400 	and.w	r4, r2, r0
 800320a:	ea03 0501 	and.w	r5, r3, r1
 800320e:	4620      	mov	r0, r4
 8003210:	4629      	mov	r1, r5
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	014b      	lsls	r3, r1, #5
 800321c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003220:	0142      	lsls	r2, r0, #5
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	1b00      	subs	r0, r0, r4
 8003228:	eb61 0105 	sbc.w	r1, r1, r5
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	018b      	lsls	r3, r1, #6
 8003236:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800323a:	0182      	lsls	r2, r0, #6
 800323c:	1a12      	subs	r2, r2, r0
 800323e:	eb63 0301 	sbc.w	r3, r3, r1
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	00d9      	lsls	r1, r3, #3
 800324c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003250:	00d0      	lsls	r0, r2, #3
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	1912      	adds	r2, r2, r4
 8003258:	eb45 0303 	adc.w	r3, r5, r3
 800325c:	f04f 0000 	mov.w	r0, #0
 8003260:	f04f 0100 	mov.w	r1, #0
 8003264:	0299      	lsls	r1, r3, #10
 8003266:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800326a:	0290      	lsls	r0, r2, #10
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4610      	mov	r0, r2
 8003272:	4619      	mov	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	461a      	mov	r2, r3
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	f7fd fc40 	bl	8000b00 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	3301      	adds	r3, #1
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	60bb      	str	r3, [r7, #8]
      break;
 80032a2:	e002      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x164>)
 80032a6:	60bb      	str	r3, [r7, #8]
      break;
 80032a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032aa:	68bb      	ldr	r3, [r7, #8]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bdb0      	pop	{r4, r5, r7, pc}
 80032b4:	40023800 	.word	0x40023800
 80032b8:	00f42400 	.word	0x00f42400
 80032bc:	017d7840 	.word	0x017d7840

080032c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c6:	681b      	ldr	r3, [r3, #0]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000000 	.word	0x20000000

080032d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032dc:	f7ff fff0 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0a9b      	lsrs	r3, r3, #10
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	08006ea8 	.word	0x08006ea8

08003300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003304:	f7ff ffdc 	bl	80032c0 <HAL_RCC_GetHCLKFreq>
 8003308:	4602      	mov	r2, r0
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	0b5b      	lsrs	r3, r3, #13
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	4903      	ldr	r1, [pc, #12]	; (8003324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003316:	5ccb      	ldrb	r3, [r1, r3]
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40023800 	.word	0x40023800
 8003324:	08006ea8 	.word	0x08006ea8

08003328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07b      	b.n	8003432 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	2b00      	cmp	r3, #0
 8003340:	d108      	bne.n	8003354 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800334a:	d009      	beq.n	8003360 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	61da      	str	r2, [r3, #28]
 8003352:	e005      	b.n	8003360 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fe f806 	bl	800138c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003396:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e4:	ea42 0103 	orr.w	r1, r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	f003 0104 	and.w	r1, r3, #4
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f003 0210 	and.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003420:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b088      	sub	sp, #32
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_SPI_Transmit+0x22>
 8003458:	2302      	movs	r3, #2
 800345a:	e126      	b.n	80036aa <HAL_SPI_Transmit+0x270>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003464:	f7fe fcb0 	bl	8001dc8 <HAL_GetTick>
 8003468:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d002      	beq.n	8003480 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800347e:	e10b      	b.n	8003698 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_SPI_Transmit+0x52>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003490:	e102      	b.n	8003698 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2203      	movs	r2, #3
 8003496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d8:	d10f      	bne.n	80034fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b40      	cmp	r3, #64	; 0x40
 8003506:	d007      	beq.n	8003518 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003520:	d14b      	bne.n	80035ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_SPI_Transmit+0xf6>
 800352a:	8afb      	ldrh	r3, [r7, #22]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d13e      	bne.n	80035ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	881a      	ldrh	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	1c9a      	adds	r2, r3, #2
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003554:	e02b      	b.n	80035ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b02      	cmp	r3, #2
 8003562:	d112      	bne.n	800358a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	881a      	ldrh	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	1c9a      	adds	r2, r3, #2
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	86da      	strh	r2, [r3, #54]	; 0x36
 8003588:	e011      	b.n	80035ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800358a:	f7fe fc1d 	bl	8001dc8 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d803      	bhi.n	80035a2 <HAL_SPI_Transmit+0x168>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d102      	bne.n	80035a8 <HAL_SPI_Transmit+0x16e>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035ac:	e074      	b.n	8003698 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ce      	bne.n	8003556 <HAL_SPI_Transmit+0x11c>
 80035b8:	e04c      	b.n	8003654 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_SPI_Transmit+0x18e>
 80035c2:	8afb      	ldrh	r3, [r7, #22]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d140      	bne.n	800364a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	7812      	ldrb	r2, [r2, #0]
 80035d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80035ee:	e02c      	b.n	800364a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d113      	bne.n	8003626 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	86da      	strh	r2, [r3, #54]	; 0x36
 8003624:	e011      	b.n	800364a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003626:	f7fe fbcf 	bl	8001dc8 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d803      	bhi.n	800363e <HAL_SPI_Transmit+0x204>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d102      	bne.n	8003644 <HAL_SPI_Transmit+0x20a>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003648:	e026      	b.n	8003698 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1cd      	bne.n	80035f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	6839      	ldr	r1, [r7, #0]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fbcb 	bl	8003df4 <SPI_EndRxTxTransaction>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e000      	b.n	8003698 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003696:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b088      	sub	sp, #32
 80036b6:	af02      	add	r7, sp, #8
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	603b      	str	r3, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ce:	d112      	bne.n	80036f6 <HAL_SPI_Receive+0x44>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10e      	bne.n	80036f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2204      	movs	r2, #4
 80036dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036e0:	88fa      	ldrh	r2, [r7, #6]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f8f1 	bl	80038d4 <HAL_SPI_TransmitReceive>
 80036f2:	4603      	mov	r3, r0
 80036f4:	e0ea      	b.n	80038cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_SPI_Receive+0x52>
 8003700:	2302      	movs	r3, #2
 8003702:	e0e3      	b.n	80038cc <HAL_SPI_Receive+0x21a>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800370c:	f7fe fb5c 	bl	8001dc8 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d002      	beq.n	8003724 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800371e:	2302      	movs	r3, #2
 8003720:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003722:	e0ca      	b.n	80038ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_SPI_Receive+0x7e>
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003734:	e0c1      	b.n	80038ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2204      	movs	r2, #4
 800373a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	88fa      	ldrh	r2, [r7, #6]
 8003754:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377c:	d10f      	bne.n	800379e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d007      	beq.n	80037bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d162      	bne.n	800388a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037c4:	e02e      	b.n	8003824 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d115      	bne.n	8003800 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f103 020c 	add.w	r2, r3, #12
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037fe:	e011      	b.n	8003824 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003800:	f7fe fae2 	bl	8001dc8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d803      	bhi.n	8003818 <HAL_SPI_Receive+0x166>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d102      	bne.n	800381e <HAL_SPI_Receive+0x16c>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003822:	e04a      	b.n	80038ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1cb      	bne.n	80037c6 <HAL_SPI_Receive+0x114>
 800382e:	e031      	b.n	8003894 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d113      	bne.n	8003866 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	b292      	uxth	r2, r2
 800384a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	1c9a      	adds	r2, r3, #2
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003864:	e011      	b.n	800388a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003866:	f7fe faaf 	bl	8001dc8 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d803      	bhi.n	800387e <HAL_SPI_Receive+0x1cc>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d102      	bne.n	8003884 <HAL_SPI_Receive+0x1d2>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003888:	e017      	b.n	80038ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1cd      	bne.n	8003830 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	6839      	ldr	r1, [r7, #0]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fa45 	bl	8003d28 <SPI_EndRxTransaction>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
 80038b6:	e000      	b.n	80038ba <HAL_SPI_Receive+0x208>
  }

error :
 80038b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	; 0x30
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038e2:	2301      	movs	r3, #1
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_SPI_TransmitReceive+0x26>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e18a      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x33c>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003902:	f7fe fa61 	bl	8001dc8 <HAL_GetTick>
 8003906:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003918:	887b      	ldrh	r3, [r7, #2]
 800391a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800391c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003920:	2b01      	cmp	r3, #1
 8003922:	d00f      	beq.n	8003944 <HAL_SPI_TransmitReceive+0x70>
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392a:	d107      	bne.n	800393c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <HAL_SPI_TransmitReceive+0x68>
 8003934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003938:	2b04      	cmp	r3, #4
 800393a:	d003      	beq.n	8003944 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800393c:	2302      	movs	r3, #2
 800393e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003942:	e15b      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_SPI_TransmitReceive+0x82>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_SPI_TransmitReceive+0x82>
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800395c:	e14e      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b04      	cmp	r3, #4
 8003968:	d003      	beq.n	8003972 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2205      	movs	r2, #5
 800396e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	887a      	ldrh	r2, [r7, #2]
 8003982:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	887a      	ldrh	r2, [r7, #2]
 8003994:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	887a      	ldrh	r2, [r7, #2]
 800399a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d007      	beq.n	80039c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ce:	d178      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_SPI_TransmitReceive+0x10a>
 80039d8:	8b7b      	ldrh	r3, [r7, #26]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d166      	bne.n	8003aac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	1c9a      	adds	r2, r3, #2
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a02:	e053      	b.n	8003aac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d11b      	bne.n	8003a4a <HAL_SPI_TransmitReceive+0x176>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d016      	beq.n	8003a4a <HAL_SPI_TransmitReceive+0x176>
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d113      	bne.n	8003a4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	1c9a      	adds	r2, r3, #2
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d119      	bne.n	8003a8c <HAL_SPI_TransmitReceive+0x1b8>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d014      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	b292      	uxth	r2, r2
 8003a6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a8c:	f7fe f99c 	bl	8001dc8 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d807      	bhi.n	8003aac <HAL_SPI_TransmitReceive+0x1d8>
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d003      	beq.n	8003aac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003aaa:	e0a7      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1a6      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x130>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1a1      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x130>
 8003ac0:	e07c      	b.n	8003bbc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x1fc>
 8003aca:	8b7b      	ldrh	r3, [r7, #26]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d16b      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	7812      	ldrb	r2, [r2, #0]
 8003adc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af6:	e057      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d11c      	bne.n	8003b40 <HAL_SPI_TransmitReceive+0x26c>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d017      	beq.n	8003b40 <HAL_SPI_TransmitReceive+0x26c>
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d114      	bne.n	8003b40 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	330c      	adds	r3, #12
 8003b20:	7812      	ldrb	r2, [r2, #0]
 8003b22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d119      	bne.n	8003b82 <HAL_SPI_TransmitReceive+0x2ae>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d014      	beq.n	8003b82 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b82:	f7fe f921 	bl	8001dc8 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d803      	bhi.n	8003b9a <HAL_SPI_TransmitReceive+0x2c6>
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d102      	bne.n	8003ba0 <HAL_SPI_TransmitReceive+0x2cc>
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ba6:	e029      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1a2      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x224>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d19d      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f917 	bl	8003df4 <SPI_EndRxTxTransaction>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d006      	beq.n	8003bda <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003bd8:	e010      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	e000      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003bfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3730      	adds	r7, #48	; 0x30
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c28:	f7fe f8ce 	bl	8001dc8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	4413      	add	r3, r2
 8003c36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c38:	f7fe f8c6 	bl	8001dc8 <HAL_GetTick>
 8003c3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c3e:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	015b      	lsls	r3, r3, #5
 8003c44:	0d1b      	lsrs	r3, r3, #20
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c4e:	e054      	b.n	8003cfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d050      	beq.n	8003cfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c58:	f7fe f8b6 	bl	8001dc8 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d902      	bls.n	8003c6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d13d      	bne.n	8003cea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c86:	d111      	bne.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c90:	d004      	beq.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9a:	d107      	bne.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003caa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb4:	d10f      	bne.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e017      	b.n	8003d1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	bf0c      	ite	eq
 8003d0a:	2301      	moveq	r3, #1
 8003d0c:	2300      	movne	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d19b      	bne.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000000 	.word	0x20000000

08003d28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3c:	d111      	bne.n	8003d62 <SPI_EndRxTransaction+0x3a>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d46:	d004      	beq.n	8003d52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d50:	d107      	bne.n	8003d62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6a:	d12a      	bne.n	8003dc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d74:	d012      	beq.n	8003d9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff ff49 	bl	8003c18 <SPI_WaitFlagStateUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d02d      	beq.n	8003de8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e026      	b.n	8003dea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	2101      	movs	r1, #1
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff ff36 	bl	8003c18 <SPI_WaitFlagStateUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01a      	beq.n	8003de8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	f043 0220 	orr.w	r2, r3, #32
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e013      	b.n	8003dea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2101      	movs	r1, #1
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ff23 	bl	8003c18 <SPI_WaitFlagStateUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	f043 0220 	orr.w	r2, r3, #32
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e000      	b.n	8003dea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <SPI_EndRxTxTransaction+0x7c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <SPI_EndRxTxTransaction+0x80>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	0d5b      	lsrs	r3, r3, #21
 8003e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e10:	fb02 f303 	mul.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1e:	d112      	bne.n	8003e46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff fef4 	bl	8003c18 <SPI_WaitFlagStateUntilTimeout>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d016      	beq.n	8003e64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	f043 0220 	orr.w	r2, r3, #32
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e00f      	b.n	8003e66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b80      	cmp	r3, #128	; 0x80
 8003e5e:	d0f2      	beq.n	8003e46 <SPI_EndRxTxTransaction+0x52>
 8003e60:	e000      	b.n	8003e64 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e62:	bf00      	nop
  }

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000000 	.word	0x20000000
 8003e74:	165e9f81 	.word	0x165e9f81

08003e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e041      	b.n	8003f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fd fdbc 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f000 fa46 	bl	8004348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d001      	beq.n	8003f30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e03c      	b.n	8003faa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <HAL_TIM_Base_Start+0xa0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <HAL_TIM_Base_Start+0x5c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d013      	beq.n	8003f74 <HAL_TIM_Base_Start+0x5c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_TIM_Base_Start+0xa4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_TIM_Base_Start+0x5c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <HAL_TIM_Base_Start+0xa8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_TIM_Base_Start+0x5c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <HAL_TIM_Base_Start+0xac>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_TIM_Base_Start+0x5c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <HAL_TIM_Base_Start+0xb0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d111      	bne.n	8003f98 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d010      	beq.n	8003fa8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f96:	e007      	b.n	8003fa8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40014000 	.word	0x40014000

08003fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e041      	b.n	8004062 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fbd8 	bl	80017a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f000 f99c 	bl	8004348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_TIM_PWM_Start+0x24>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	bf14      	ite	ne
 8004088:	2301      	movne	r3, #1
 800408a:	2300      	moveq	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e022      	b.n	80040d6 <HAL_TIM_PWM_Start+0x6a>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b04      	cmp	r3, #4
 8004094:	d109      	bne.n	80040aa <HAL_TIM_PWM_Start+0x3e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	bf14      	ite	ne
 80040a2:	2301      	movne	r3, #1
 80040a4:	2300      	moveq	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	e015      	b.n	80040d6 <HAL_TIM_PWM_Start+0x6a>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d109      	bne.n	80040c4 <HAL_TIM_PWM_Start+0x58>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e008      	b.n	80040d6 <HAL_TIM_PWM_Start+0x6a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e068      	b.n	80041b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start+0x82>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ec:	e013      	b.n	8004116 <HAL_TIM_PWM_Start+0xaa>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_PWM_Start+0x92>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040fc:	e00b      	b.n	8004116 <HAL_TIM_PWM_Start+0xaa>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start+0xa2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	e003      	b.n	8004116 <HAL_TIM_PWM_Start+0xaa>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fb1e 	bl	8004760 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <HAL_TIM_PWM_Start+0x14c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d107      	bne.n	800413e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_TIM_PWM_Start+0x14c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d018      	beq.n	800417a <HAL_TIM_PWM_Start+0x10e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d013      	beq.n	800417a <HAL_TIM_PWM_Start+0x10e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a19      	ldr	r2, [pc, #100]	; (80041bc <HAL_TIM_PWM_Start+0x150>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_TIM_PWM_Start+0x10e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a17      	ldr	r2, [pc, #92]	; (80041c0 <HAL_TIM_PWM_Start+0x154>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_TIM_PWM_Start+0x10e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <HAL_TIM_PWM_Start+0x158>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_TIM_PWM_Start+0x10e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <HAL_TIM_PWM_Start+0x15c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d111      	bne.n	800419e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b06      	cmp	r3, #6
 800418a:	d010      	beq.n	80041ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419c:	e007      	b.n	80041ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800
 80041c4:	40000c00 	.word	0x40000c00
 80041c8:	40014000 	.word	0x40014000

080041cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e0ac      	b.n	8004340 <HAL_TIM_PWM_ConfigChannel+0x174>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	f200 809f 	bhi.w	8004334 <HAL_TIM_PWM_ConfigChannel+0x168>
 80041f6:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004231 	.word	0x08004231
 8004200:	08004335 	.word	0x08004335
 8004204:	08004335 	.word	0x08004335
 8004208:	08004335 	.word	0x08004335
 800420c:	08004271 	.word	0x08004271
 8004210:	08004335 	.word	0x08004335
 8004214:	08004335 	.word	0x08004335
 8004218:	08004335 	.word	0x08004335
 800421c:	080042b3 	.word	0x080042b3
 8004220:	08004335 	.word	0x08004335
 8004224:	08004335 	.word	0x08004335
 8004228:	08004335 	.word	0x08004335
 800422c:	080042f3 	.word	0x080042f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f906 	bl	8004448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0208 	orr.w	r2, r2, #8
 800424a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0204 	bic.w	r2, r2, #4
 800425a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6999      	ldr	r1, [r3, #24]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	619a      	str	r2, [r3, #24]
      break;
 800426e:	e062      	b.n	8004336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f94c 	bl	8004514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800428a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6999      	ldr	r1, [r3, #24]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	021a      	lsls	r2, r3, #8
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	619a      	str	r2, [r3, #24]
      break;
 80042b0:	e041      	b.n	8004336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 f997 	bl	80045ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0208 	orr.w	r2, r2, #8
 80042cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0204 	bic.w	r2, r2, #4
 80042dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69d9      	ldr	r1, [r3, #28]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	61da      	str	r2, [r3, #28]
      break;
 80042f0:	e021      	b.n	8004336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 f9e1 	bl	80046c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800430c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69d9      	ldr	r1, [r3, #28]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	021a      	lsls	r2, r3, #8
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	61da      	str	r2, [r3, #28]
      break;
 8004332:	e000      	b.n	8004336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a34      	ldr	r2, [pc, #208]	; (800442c <TIM_Base_SetConfig+0xe4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00f      	beq.n	8004380 <TIM_Base_SetConfig+0x38>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004366:	d00b      	beq.n	8004380 <TIM_Base_SetConfig+0x38>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a31      	ldr	r2, [pc, #196]	; (8004430 <TIM_Base_SetConfig+0xe8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d007      	beq.n	8004380 <TIM_Base_SetConfig+0x38>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a30      	ldr	r2, [pc, #192]	; (8004434 <TIM_Base_SetConfig+0xec>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_Base_SetConfig+0x38>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a2f      	ldr	r2, [pc, #188]	; (8004438 <TIM_Base_SetConfig+0xf0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d108      	bne.n	8004392 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a25      	ldr	r2, [pc, #148]	; (800442c <TIM_Base_SetConfig+0xe4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01b      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d017      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a22      	ldr	r2, [pc, #136]	; (8004430 <TIM_Base_SetConfig+0xe8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a21      	ldr	r2, [pc, #132]	; (8004434 <TIM_Base_SetConfig+0xec>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00f      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a20      	ldr	r2, [pc, #128]	; (8004438 <TIM_Base_SetConfig+0xf0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <TIM_Base_SetConfig+0xf4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <TIM_Base_SetConfig+0xf8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_Base_SetConfig+0x8a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <TIM_Base_SetConfig+0xfc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a08      	ldr	r2, [pc, #32]	; (800442c <TIM_Base_SetConfig+0xe4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d103      	bne.n	8004418 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	615a      	str	r2, [r3, #20]
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40010000 	.word	0x40010000
 8004430:	40000400 	.word	0x40000400
 8004434:	40000800 	.word	0x40000800
 8004438:	40000c00 	.word	0x40000c00
 800443c:	40014000 	.word	0x40014000
 8004440:	40014400 	.word	0x40014400
 8004444:	40014800 	.word	0x40014800

08004448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f023 0201 	bic.w	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 0302 	bic.w	r3, r3, #2
 8004490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <TIM_OC1_SetConfig+0xc8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d10c      	bne.n	80044be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f023 0308 	bic.w	r3, r3, #8
 80044aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a13      	ldr	r2, [pc, #76]	; (8004510 <TIM_OC1_SetConfig+0xc8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d111      	bne.n	80044ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40010000 	.word	0x40010000

08004514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0210 	bic.w	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0320 	bic.w	r3, r3, #32
 800455e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <TIM_OC2_SetConfig+0xd4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10d      	bne.n	8004590 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <TIM_OC2_SetConfig+0xd4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d113      	bne.n	80045c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800459e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000

080045ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <TIM_OC3_SetConfig+0xd0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d10d      	bne.n	8004666 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <TIM_OC3_SetConfig+0xd0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d113      	bne.n	8004696 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	621a      	str	r2, [r3, #32]
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40010000 	.word	0x40010000

080046c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800470a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	031b      	lsls	r3, r3, #12
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a10      	ldr	r2, [pc, #64]	; (800475c <TIM_OC4_SetConfig+0x9c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d109      	bne.n	8004734 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000

08004760 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	2201      	movs	r2, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1a      	ldr	r2, [r3, #32]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	43db      	mvns	r3, r3
 8004782:	401a      	ands	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	fa01 f303 	lsl.w	r3, r1, r3
 8004798:	431a      	orrs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e050      	b.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004810:	d013      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a18      	ldr	r2, [pc, #96]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a16      	ldr	r2, [pc, #88]	; (800487c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a15      	ldr	r2, [pc, #84]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a13      	ldr	r2, [pc, #76]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d10c      	bne.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	4313      	orrs	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40010000 	.word	0x40010000
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00
 8004884:	40014000 	.word	0x40014000

08004888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e03f      	b.n	800491a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fd f95e 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2224      	movs	r2, #36	; 0x24
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f9d1 	bl	8004c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	4613      	mov	r3, r2
 800492e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b20      	cmp	r3, #32
 800493a:	d11d      	bne.n	8004978 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_UART_Receive_DMA+0x26>
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e016      	b.n	800497a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_UART_Receive_DMA+0x38>
 8004956:	2302      	movs	r3, #2
 8004958:	e00f      	b.n	800497a <HAL_UART_Receive_DMA+0x58>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	461a      	mov	r2, r3
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f8d8 	bl	8004b24 <UART_Start_Receive_DMA>
 8004974:	4603      	mov	r3, r0
 8004976:	e000      	b.n	800497a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004978:	2302      	movs	r3, #2
  }
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d12a      	bne.n	8004a34 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049f2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a12:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d107      	bne.n	8004a34 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0210 	bic.w	r2, r2, #16
 8004a32:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d106      	bne.n	8004a4a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a40:	4619      	mov	r1, r3
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff ffb1 	bl	80049aa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a48:	e002      	b.n	8004a50 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f7fc fbf4 	bl	8001238 <HAL_UART_RxCpltCallback>
}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d108      	bne.n	8004a80 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4619      	mov	r1, r3
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff ff96 	bl	80049aa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a7e:	e002      	b.n	8004a86 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7ff ff7e 	bl	8004982 <HAL_UART_RxHalfCpltCallback>
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b80      	cmp	r3, #128	; 0x80
 8004aac:	bf0c      	ite	eq
 8004aae:	2301      	moveq	r3, #1
 8004ab0:	2300      	movne	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b21      	cmp	r3, #33	; 0x21
 8004ac0:	d108      	bne.n	8004ad4 <UART_DMAError+0x46>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ace:	68b8      	ldr	r0, [r7, #8]
 8004ad0:	f000 f88c 	bl	8004bec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	2300      	movne	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b22      	cmp	r3, #34	; 0x22
 8004af4:	d108      	bne.n	8004b08 <UART_DMAError+0x7a>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2200      	movs	r2, #0
 8004b00:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b02:	68b8      	ldr	r0, [r7, #8]
 8004b04:	f000 f888 	bl	8004c18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	f043 0210 	orr.w	r2, r3, #16
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b14:	68b8      	ldr	r0, [r7, #8]
 8004b16:	f7ff ff3e 	bl	8004996 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2222      	movs	r2, #34	; 0x22
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	4a23      	ldr	r2, [pc, #140]	; (8004be0 <UART_Start_Receive_DMA+0xbc>)
 8004b52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <UART_Start_Receive_DMA+0xc0>)
 8004b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <UART_Start_Receive_DMA+0xc4>)
 8004b62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	2200      	movs	r2, #0
 8004b6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004b6c:	f107 0308 	add.w	r3, r7, #8
 8004b70:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	f7fd fb10 	bl	80021a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695a      	ldr	r2, [r3, #20]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bd4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	080049c3 	.word	0x080049c3
 8004be4:	08004a59 	.word	0x08004a59
 8004be8:	08004a8f 	.word	0x08004a8f

08004bec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c02:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0201 	bic.w	r2, r2, #1
 8004c3e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d107      	bne.n	8004c58 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0210 	bic.w	r2, r2, #16
 8004c56:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c78:	b09f      	sub	sp, #124	; 0x7c
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8a:	68d9      	ldr	r1, [r3, #12]
 8004c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	ea40 0301 	orr.w	r3, r0, r1
 8004c94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cb8:	f021 010c 	bic.w	r1, r1, #12
 8004cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd2:	6999      	ldr	r1, [r3, #24]
 8004cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	ea40 0301 	orr.w	r3, r0, r1
 8004cdc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4bc5      	ldr	r3, [pc, #788]	; (8004ff8 <UART_SetConfig+0x384>)
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d004      	beq.n	8004cf2 <UART_SetConfig+0x7e>
 8004ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4bc3      	ldr	r3, [pc, #780]	; (8004ffc <UART_SetConfig+0x388>)
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d103      	bne.n	8004cfa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cf2:	f7fe fb05 	bl	8003300 <HAL_RCC_GetPCLK2Freq>
 8004cf6:	6778      	str	r0, [r7, #116]	; 0x74
 8004cf8:	e002      	b.n	8004d00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cfa:	f7fe faed 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 8004cfe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d08:	f040 80b6 	bne.w	8004e78 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d0e:	461c      	mov	r4, r3
 8004d10:	f04f 0500 	mov.w	r5, #0
 8004d14:	4622      	mov	r2, r4
 8004d16:	462b      	mov	r3, r5
 8004d18:	1891      	adds	r1, r2, r2
 8004d1a:	6439      	str	r1, [r7, #64]	; 0x40
 8004d1c:	415b      	adcs	r3, r3
 8004d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d24:	1912      	adds	r2, r2, r4
 8004d26:	eb45 0303 	adc.w	r3, r5, r3
 8004d2a:	f04f 0000 	mov.w	r0, #0
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	00d9      	lsls	r1, r3, #3
 8004d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d38:	00d0      	lsls	r0, r2, #3
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	1911      	adds	r1, r2, r4
 8004d40:	6639      	str	r1, [r7, #96]	; 0x60
 8004d42:	416b      	adcs	r3, r5
 8004d44:	667b      	str	r3, [r7, #100]	; 0x64
 8004d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	1891      	adds	r1, r2, r2
 8004d52:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d54:	415b      	adcs	r3, r3
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004d60:	f7fb fece 	bl	8000b00 <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4ba5      	ldr	r3, [pc, #660]	; (8005000 <UART_SetConfig+0x38c>)
 8004d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	011e      	lsls	r6, r3, #4
 8004d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d74:	461c      	mov	r4, r3
 8004d76:	f04f 0500 	mov.w	r5, #0
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	462b      	mov	r3, r5
 8004d7e:	1891      	adds	r1, r2, r2
 8004d80:	6339      	str	r1, [r7, #48]	; 0x30
 8004d82:	415b      	adcs	r3, r3
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
 8004d86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d8a:	1912      	adds	r2, r2, r4
 8004d8c:	eb45 0303 	adc.w	r3, r5, r3
 8004d90:	f04f 0000 	mov.w	r0, #0
 8004d94:	f04f 0100 	mov.w	r1, #0
 8004d98:	00d9      	lsls	r1, r3, #3
 8004d9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d9e:	00d0      	lsls	r0, r2, #3
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	1911      	adds	r1, r2, r4
 8004da6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004da8:	416b      	adcs	r3, r5
 8004daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	461a      	mov	r2, r3
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	1891      	adds	r1, r2, r2
 8004db8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dba:	415b      	adcs	r3, r3
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004dc6:	f7fb fe9b 	bl	8000b00 <__aeabi_uldivmod>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4b8c      	ldr	r3, [pc, #560]	; (8005000 <UART_SetConfig+0x38c>)
 8004dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	2164      	movs	r1, #100	; 0x64
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	3332      	adds	r3, #50	; 0x32
 8004de2:	4a87      	ldr	r2, [pc, #540]	; (8005000 <UART_SetConfig+0x38c>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004df0:	441e      	add	r6, r3
 8004df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df4:	4618      	mov	r0, r3
 8004df6:	f04f 0100 	mov.w	r1, #0
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	1894      	adds	r4, r2, r2
 8004e00:	623c      	str	r4, [r7, #32]
 8004e02:	415b      	adcs	r3, r3
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
 8004e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e0a:	1812      	adds	r2, r2, r0
 8004e0c:	eb41 0303 	adc.w	r3, r1, r3
 8004e10:	f04f 0400 	mov.w	r4, #0
 8004e14:	f04f 0500 	mov.w	r5, #0
 8004e18:	00dd      	lsls	r5, r3, #3
 8004e1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e1e:	00d4      	lsls	r4, r2, #3
 8004e20:	4622      	mov	r2, r4
 8004e22:	462b      	mov	r3, r5
 8004e24:	1814      	adds	r4, r2, r0
 8004e26:	653c      	str	r4, [r7, #80]	; 0x50
 8004e28:	414b      	adcs	r3, r1
 8004e2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	461a      	mov	r2, r3
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	1891      	adds	r1, r2, r2
 8004e38:	61b9      	str	r1, [r7, #24]
 8004e3a:	415b      	adcs	r3, r3
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e46:	f7fb fe5b 	bl	8000b00 <__aeabi_uldivmod>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4b6c      	ldr	r3, [pc, #432]	; (8005000 <UART_SetConfig+0x38c>)
 8004e50:	fba3 1302 	umull	r1, r3, r3, r2
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	2164      	movs	r1, #100	; 0x64
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	3332      	adds	r3, #50	; 0x32
 8004e62:	4a67      	ldr	r2, [pc, #412]	; (8005000 <UART_SetConfig+0x38c>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	f003 0207 	and.w	r2, r3, #7
 8004e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4432      	add	r2, r6
 8004e74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e76:	e0b9      	b.n	8004fec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7a:	461c      	mov	r4, r3
 8004e7c:	f04f 0500 	mov.w	r5, #0
 8004e80:	4622      	mov	r2, r4
 8004e82:	462b      	mov	r3, r5
 8004e84:	1891      	adds	r1, r2, r2
 8004e86:	6139      	str	r1, [r7, #16]
 8004e88:	415b      	adcs	r3, r3
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e90:	1912      	adds	r2, r2, r4
 8004e92:	eb45 0303 	adc.w	r3, r5, r3
 8004e96:	f04f 0000 	mov.w	r0, #0
 8004e9a:	f04f 0100 	mov.w	r1, #0
 8004e9e:	00d9      	lsls	r1, r3, #3
 8004ea0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ea4:	00d0      	lsls	r0, r2, #3
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	eb12 0804 	adds.w	r8, r2, r4
 8004eae:	eb43 0905 	adc.w	r9, r3, r5
 8004eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f04f 0100 	mov.w	r1, #0
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	008b      	lsls	r3, r1, #2
 8004ec6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004eca:	0082      	lsls	r2, r0, #2
 8004ecc:	4640      	mov	r0, r8
 8004ece:	4649      	mov	r1, r9
 8004ed0:	f7fb fe16 	bl	8000b00 <__aeabi_uldivmod>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4b49      	ldr	r3, [pc, #292]	; (8005000 <UART_SetConfig+0x38c>)
 8004eda:	fba3 2302 	umull	r2, r3, r3, r2
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	011e      	lsls	r6, r3, #4
 8004ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f04f 0100 	mov.w	r1, #0
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	1894      	adds	r4, r2, r2
 8004ef0:	60bc      	str	r4, [r7, #8]
 8004ef2:	415b      	adcs	r3, r3
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004efa:	1812      	adds	r2, r2, r0
 8004efc:	eb41 0303 	adc.w	r3, r1, r3
 8004f00:	f04f 0400 	mov.w	r4, #0
 8004f04:	f04f 0500 	mov.w	r5, #0
 8004f08:	00dd      	lsls	r5, r3, #3
 8004f0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f0e:	00d4      	lsls	r4, r2, #3
 8004f10:	4622      	mov	r2, r4
 8004f12:	462b      	mov	r3, r5
 8004f14:	1814      	adds	r4, r2, r0
 8004f16:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f18:	414b      	adcs	r3, r1
 8004f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f04f 0100 	mov.w	r1, #0
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	008b      	lsls	r3, r1, #2
 8004f30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f34:	0082      	lsls	r2, r0, #2
 8004f36:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f3a:	f7fb fde1 	bl	8000b00 <__aeabi_uldivmod>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4b2f      	ldr	r3, [pc, #188]	; (8005000 <UART_SetConfig+0x38c>)
 8004f44:	fba3 1302 	umull	r1, r3, r3, r2
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	2164      	movs	r1, #100	; 0x64
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	3332      	adds	r3, #50	; 0x32
 8004f56:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <UART_SetConfig+0x38c>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f62:	441e      	add	r6, r3
 8004f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f66:	4618      	mov	r0, r3
 8004f68:	f04f 0100 	mov.w	r1, #0
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	1894      	adds	r4, r2, r2
 8004f72:	603c      	str	r4, [r7, #0]
 8004f74:	415b      	adcs	r3, r3
 8004f76:	607b      	str	r3, [r7, #4]
 8004f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f7c:	1812      	adds	r2, r2, r0
 8004f7e:	eb41 0303 	adc.w	r3, r1, r3
 8004f82:	f04f 0400 	mov.w	r4, #0
 8004f86:	f04f 0500 	mov.w	r5, #0
 8004f8a:	00dd      	lsls	r5, r3, #3
 8004f8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f90:	00d4      	lsls	r4, r2, #3
 8004f92:	4622      	mov	r2, r4
 8004f94:	462b      	mov	r3, r5
 8004f96:	eb12 0a00 	adds.w	sl, r2, r0
 8004f9a:	eb43 0b01 	adc.w	fp, r3, r1
 8004f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f04f 0100 	mov.w	r1, #0
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	008b      	lsls	r3, r1, #2
 8004fb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fb6:	0082      	lsls	r2, r0, #2
 8004fb8:	4650      	mov	r0, sl
 8004fba:	4659      	mov	r1, fp
 8004fbc:	f7fb fda0 	bl	8000b00 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	; (8005000 <UART_SetConfig+0x38c>)
 8004fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2164      	movs	r1, #100	; 0x64
 8004fce:	fb01 f303 	mul.w	r3, r1, r3
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	3332      	adds	r3, #50	; 0x32
 8004fd8:	4a09      	ldr	r2, [pc, #36]	; (8005000 <UART_SetConfig+0x38c>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	f003 020f 	and.w	r2, r3, #15
 8004fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4432      	add	r2, r6
 8004fea:	609a      	str	r2, [r3, #8]
}
 8004fec:	bf00      	nop
 8004fee:	377c      	adds	r7, #124	; 0x7c
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40011000 	.word	0x40011000
 8004ffc:	40011400 	.word	0x40011400
 8005000:	51eb851f 	.word	0x51eb851f
 8005004:	00000000 	.word	0x00000000

08005008 <get_angle_from_accel>:

#include "angle.h"


void get_angle_from_accel(accel_t accel, angle_t* angle)
{
 8005008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800500c:	b08e      	sub	sp, #56	; 0x38
 800500e:	af00      	add	r7, sp, #0
 8005010:	eeb0 5a40 	vmov.f32	s10, s0
 8005014:	eef0 5a60 	vmov.f32	s11, s1
 8005018:	eeb0 6a41 	vmov.f32	s12, s2
 800501c:	eef0 6a61 	vmov.f32	s13, s3
 8005020:	eeb0 7a42 	vmov.f32	s14, s4
 8005024:	eef0 7a62 	vmov.f32	s15, s5
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	ed87 5b02 	vstr	d5, [r7, #8]
 800502e:	ed87 6b04 	vstr	d6, [r7, #16]
 8005032:	ed87 7b06 	vstr	d7, [r7, #24]
    angle_t temp_angle;

    // atan gives angle value between -90 and 90
    temp_angle.roll  = atan(accel.y / accel.z);
 8005036:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800503a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800503e:	f7fb fbb1 	bl	80007a4 <__aeabi_ddiv>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	ec43 2b17 	vmov	d7, r2, r3
 800504a:	eeb0 0a47 	vmov.f32	s0, s14
 800504e:	eef0 0a67 	vmov.f32	s1, s15
 8005052:	f001 fc39 	bl	80068c8 <atan>
 8005056:	eeb0 7a40 	vmov.f32	s14, s0
 800505a:	eef0 7a60 	vmov.f32	s15, s1
 800505e:	ed87 7b08 	vstr	d7, [r7, #32]
    temp_angle.pitch = atan(accel.x / sqrt(accel.y*accel.y + accel.z*accel.z));
 8005062:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8005066:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800506a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800506e:	f7fb fa6f 	bl	8000550 <__aeabi_dmul>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4692      	mov	sl, r2
 8005078:	469b      	mov	fp, r3
 800507a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800507e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005082:	f7fb fa65 	bl	8000550 <__aeabi_dmul>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4650      	mov	r0, sl
 800508c:	4659      	mov	r1, fp
 800508e:	f7fb f8a9 	bl	80001e4 <__adddf3>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	ec43 2b17 	vmov	d7, r2, r3
 800509a:	eeb0 0a47 	vmov.f32	s0, s14
 800509e:	eef0 0a67 	vmov.f32	s1, s15
 80050a2:	f001 fdfb 	bl	8006c9c <sqrt>
 80050a6:	ec53 2b10 	vmov	r2, r3, d0
 80050aa:	4640      	mov	r0, r8
 80050ac:	4649      	mov	r1, r9
 80050ae:	f7fb fb79 	bl	80007a4 <__aeabi_ddiv>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	ec43 2b17 	vmov	d7, r2, r3
 80050ba:	eeb0 0a47 	vmov.f32	s0, s14
 80050be:	eef0 0a67 	vmov.f32	s1, s15
 80050c2:	f001 fc01 	bl	80068c8 <atan>
 80050c6:	eeb0 7a40 	vmov.f32	s14, s0
 80050ca:	eef0 7a60 	vmov.f32	s15, s1
 80050ce:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

    // convert radian to degree
    temp_angle.roll  *= RADIAN_TO_DEGREE;
 80050d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80050d6:	a314      	add	r3, pc, #80	; (adr r3, 8005128 <get_angle_from_accel+0x120>)
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f7fb fa38 	bl	8000550 <__aeabi_dmul>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    temp_angle.pitch *= RADIAN_TO_DEGREE;
 80050e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80050ec:	a30e      	add	r3, pc, #56	; (adr r3, 8005128 <get_angle_from_accel+0x120>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f7fb fa2d 	bl	8000550 <__aeabi_dmul>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    angle->roll  =  temp_angle.roll;
 80050fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	e9c1 2300 	strd	r2, r3, [r1]
    angle->pitch = -temp_angle.pitch;
 8005108:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800510c:	4614      	mov	r4, r2
 800510e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	e9c3 4502 	strd	r4, r5, [r3, #8]
}
 8005118:	bf00      	nop
 800511a:	3738      	adds	r7, #56	; 0x38
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005122:	bf00      	nop
 8005124:	f3af 8000 	nop.w
 8005128:	1a63c1f8 	.word	0x1a63c1f8
 800512c:	404ca5dc 	.word	0x404ca5dc

08005130 <get_angle_from_gyro>:

void get_angle_from_gyro(gyro_t gyro, angle_t prev_angle, double dt, angle_t* angle)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b096      	sub	sp, #88	; 0x58
 8005134:	af00      	add	r7, sp, #0
 8005136:	eeb0 7a45 	vmov.f32	s14, s10
 800513a:	eef0 7a65 	vmov.f32	s15, s11
 800513e:	ed87 6b02 	vstr	d6, [r7, #8]
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8005148:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 800514c:	ed87 2b0e 	vstr	d2, [r7, #56]	; 0x38
 8005150:	ed87 3b04 	vstr	d3, [r7, #16]
 8005154:	ed87 4b06 	vstr	d4, [r7, #24]
 8005158:	ed87 7b08 	vstr	d7, [r7, #32]
    angle_t temp_angle;

    temp_angle.roll  = gyro.x * dt;
 800515c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005164:	f7fb f9f4 	bl	8000550 <__aeabi_dmul>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    temp_angle.pitch = gyro.y * dt;
 8005170:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005178:	f7fb f9ea 	bl	8000550 <__aeabi_dmul>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    temp_angle.yaw   = gyro.z * dt;
 8005184:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800518c:	f7fb f9e0 	bl	8000550 <__aeabi_dmul>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    angle->roll  = prev_angle.roll + temp_angle.roll;
 8005198:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800519c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051a0:	f7fb f820 	bl	80001e4 <__adddf3>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	e9c1 2300 	strd	r2, r3, [r1]
    angle->pitch = prev_angle.pitch + temp_angle.pitch;
 80051ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80051b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051b6:	f7fb f815 	bl	80001e4 <__adddf3>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80051c4:	bf00      	nop
 80051c6:	3758      	adds	r7, #88	; 0x58
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <complementary_filter>:

void complementary_filter(gyro_t gyro, accel_t accel, sec dt, double alpha, angle_t* filtered_angle)
{
 80051cc:	b5b0      	push	{r4, r5, r7, lr}
 80051ce:	b09e      	sub	sp, #120	; 0x78
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	ed87 6b04 	vstr	d6, [r7, #16]
 80051d6:	ed87 7b02 	vstr	d7, [r7, #8]
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 80051e0:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
 80051e4:	ed87 2b10 	vstr	d2, [r7, #64]	; 0x40
 80051e8:	ed87 3b06 	vstr	d3, [r7, #24]
 80051ec:	ed87 4b08 	vstr	d4, [r7, #32]
 80051f0:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
    angle_t accel_angle;
    get_angle_from_accel(accel, &accel_angle);
 80051f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80051f8:	ed97 5b06 	vldr	d5, [r7, #24]
 80051fc:	ed97 6b08 	vldr	d6, [r7, #32]
 8005200:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005204:	4618      	mov	r0, r3
 8005206:	eeb0 0a45 	vmov.f32	s0, s10
 800520a:	eef0 0a65 	vmov.f32	s1, s11
 800520e:	eeb0 1a46 	vmov.f32	s2, s12
 8005212:	eef0 1a66 	vmov.f32	s3, s13
 8005216:	eeb0 2a47 	vmov.f32	s4, s14
 800521a:	eef0 2a67 	vmov.f32	s5, s15
 800521e:	f7ff fef3 	bl	8005008 <get_angle_from_accel>

    angle_t gyro_angle;
    get_angle_from_gyro(gyro, *filtered_angle, dt, &gyro_angle);
 8005222:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	ed93 3b00 	vldr	d3, [r3]
 800522c:	ed93 4b02 	vldr	d4, [r3, #8]
 8005230:	ed93 5b04 	vldr	d5, [r3, #16]
 8005234:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8005238:	ed97 2b0e 	vldr	d2, [r7, #56]	; 0x38
 800523c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8005240:	4610      	mov	r0, r2
 8005242:	ed97 6b04 	vldr	d6, [r7, #16]
 8005246:	eeb0 0a41 	vmov.f32	s0, s2
 800524a:	eef0 0a61 	vmov.f32	s1, s3
 800524e:	eeb0 1a42 	vmov.f32	s2, s4
 8005252:	eef0 1a62 	vmov.f32	s3, s5
 8005256:	eeb0 2a47 	vmov.f32	s4, s14
 800525a:	eef0 2a67 	vmov.f32	s5, s15
 800525e:	f7ff ff67 	bl	8005130 <get_angle_from_gyro>

    filtered_angle->roll  = alpha*gyro_angle.roll  + (1-alpha)*accel_angle.roll;
 8005262:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800526a:	f7fb f971 	bl	8000550 <__aeabi_dmul>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4614      	mov	r4, r2
 8005274:	461d      	mov	r5, r3
 8005276:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800527a:	f04f 0000 	mov.w	r0, #0
 800527e:	491f      	ldr	r1, [pc, #124]	; (80052fc <complementary_filter+0x130>)
 8005280:	f7fa ffae 	bl	80001e0 <__aeabi_dsub>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005290:	f7fb f95e 	bl	8000550 <__aeabi_dmul>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	f7fa ffa2 	bl	80001e4 <__adddf3>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	e9c1 2300 	strd	r2, r3, [r1]
    filtered_angle->pitch = alpha*gyro_angle.pitch + (1-alpha)*accel_angle.pitch;   
 80052aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80052ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b2:	f7fb f94d 	bl	8000550 <__aeabi_dmul>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4614      	mov	r4, r2
 80052bc:	461d      	mov	r5, r3
 80052be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	490d      	ldr	r1, [pc, #52]	; (80052fc <complementary_filter+0x130>)
 80052c8:	f7fa ff8a 	bl	80001e0 <__aeabi_dsub>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80052d8:	f7fb f93a 	bl	8000550 <__aeabi_dmul>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4620      	mov	r0, r4
 80052e2:	4629      	mov	r1, r5
 80052e4:	f7fa ff7e 	bl	80001e4 <__adddf3>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80052f2:	bf00      	nop
 80052f4:	3778      	adds	r7, #120	; 0x78
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bdb0      	pop	{r4, r5, r7, pc}
 80052fa:	bf00      	nop
 80052fc:	3ff00000 	.word	0x3ff00000

08005300 <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	4603      	mov	r3, r0
 8005308:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 f825 	bl	800535c <dshot_set_timer>
	dshot_put_tc_callback_function();
 8005312:	f000 f8c5 	bl	80054a0 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8005316:	f000 f8e1 	bl	80054dc <dshot_start_pwm>
}
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <dshot_choose_type>:
}


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d003      	beq.n	800533c <dshot_choose_type+0x18>
 8005334:	2b02      	cmp	r3, #2
 8005336:	d103      	bne.n	8005340 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 8005338:	4b05      	ldr	r3, [pc, #20]	; (8005350 <dshot_choose_type+0x2c>)
 800533a:	e002      	b.n	8005342 <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 800533c:	4b05      	ldr	r3, [pc, #20]	; (8005354 <dshot_choose_type+0x30>)
 800533e:	e000      	b.n	8005342 <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <dshot_choose_type+0x34>)
	}
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	00b71b00 	.word	0x00b71b00
 8005354:	005b8d80 	.word	0x005b8d80
 8005358:	002dc6c0 	.word	0x002dc6c0

0800535c <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	ed2d 8b02 	vpush	{d8}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 800536a:	4b27      	ldr	r3, [pc, #156]	; (8005408 <dshot_set_timer+0xac>)
 800536c:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff ffd2 	bl	8005324 <dshot_choose_type>
 8005380:	ee07 0a90 	vmov	s15, r0
 8005384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005388:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800538c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800540c <dshot_set_timer+0xb0>
 8005390:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005394:	eeb0 0a67 	vmov.f32	s0, s15
 8005398:	f001 fc40 	bl	8006c1c <lrintf>
 800539c:	4603      	mov	r3, r0
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 80053a4:	4b1a      	ldr	r3, [pc, #104]	; (8005410 <dshot_set_timer+0xb4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	897a      	ldrh	r2, [r7, #10]
 80053aa:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 80053ac:	4b18      	ldr	r3, [pc, #96]	; (8005410 <dshot_set_timer+0xb4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2214      	movs	r2, #20
 80053b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80053b4:	4b16      	ldr	r3, [pc, #88]	; (8005410 <dshot_set_timer+0xb4>)
 80053b6:	2214      	movs	r2, #20
 80053b8:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 80053ba:	4b16      	ldr	r3, [pc, #88]	; (8005414 <dshot_set_timer+0xb8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	897a      	ldrh	r2, [r7, #10]
 80053c0:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 80053c2:	4b14      	ldr	r3, [pc, #80]	; (8005414 <dshot_set_timer+0xb8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2214      	movs	r2, #20
 80053c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80053ca:	4b12      	ldr	r3, [pc, #72]	; (8005414 <dshot_set_timer+0xb8>)
 80053cc:	2214      	movs	r2, #20
 80053ce:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 80053d0:	4b10      	ldr	r3, [pc, #64]	; (8005414 <dshot_set_timer+0xb8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	897a      	ldrh	r2, [r7, #10]
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <dshot_set_timer+0xb8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2214      	movs	r2, #20
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <dshot_set_timer+0xb8>)
 80053e2:	2214      	movs	r2, #20
 80053e4:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <dshot_set_timer+0xb4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	897a      	ldrh	r2, [r7, #10]
 80053ec:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 80053ee:	4b08      	ldr	r3, [pc, #32]	; (8005410 <dshot_set_timer+0xb4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2214      	movs	r2, #20
 80053f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80053f6:	4b06      	ldr	r3, [pc, #24]	; (8005410 <dshot_set_timer+0xb4>)
 80053f8:	2214      	movs	r2, #20
 80053fa:	60da      	str	r2, [r3, #12]
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	ecbd 8b02 	vpop	{d8}
 8005406:	bd80      	pop	{r7, pc}
 8005408:	05f5e100 	.word	0x05f5e100
 800540c:	3c23d70a 	.word	0x3c23d70a
 8005410:	200002e4 	.word	0x200002e4
 8005414:	20000434 	.word	0x20000434

08005418 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	d108      	bne.n	8005442 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800543e:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8005440:	e028      	b.n	8005494 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d108      	bne.n	800545e <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545a:	60da      	str	r2, [r3, #12]
}
 800545c:	e01a      	b.n	8005494 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d108      	bne.n	800547a <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005476:	60da      	str	r2, [r3, #12]
}
 8005478:	e00c      	b.n	8005494 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d107      	bne.n	8005494 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005492:	60da      	str	r2, [r3, #12]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <dshot_put_tc_callback_function+0x30>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <dshot_put_tc_callback_function+0x34>)
 80054aa:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 80054ac:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <dshot_put_tc_callback_function+0x38>)
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <dshot_put_tc_callback_function+0x34>)
 80054b2:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 80054b4:	4b08      	ldr	r3, [pc, #32]	; (80054d8 <dshot_put_tc_callback_function+0x38>)
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	4a06      	ldr	r2, [pc, #24]	; (80054d4 <dshot_put_tc_callback_function+0x34>)
 80054ba:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <dshot_put_tc_callback_function+0x30>)
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <dshot_put_tc_callback_function+0x34>)
 80054c2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	200002e4 	.word	0x200002e4
 80054d4:	08005419 	.word	0x08005419
 80054d8:	20000434 	.word	0x20000434

080054dc <dshot_start_pwm>:

static void dshot_start_pwm()
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 80054e0:	210c      	movs	r1, #12
 80054e2:	4808      	ldr	r0, [pc, #32]	; (8005504 <dshot_start_pwm+0x28>)
 80054e4:	f7fe fdc2 	bl	800406c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 80054e8:	2108      	movs	r1, #8
 80054ea:	4807      	ldr	r0, [pc, #28]	; (8005508 <dshot_start_pwm+0x2c>)
 80054ec:	f7fe fdbe 	bl	800406c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 80054f0:	2100      	movs	r1, #0
 80054f2:	4805      	ldr	r0, [pc, #20]	; (8005508 <dshot_start_pwm+0x2c>)
 80054f4:	f7fe fdba 	bl	800406c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 80054f8:	2104      	movs	r1, #4
 80054fa:	4802      	ldr	r0, [pc, #8]	; (8005504 <dshot_start_pwm+0x28>)
 80054fc:	f7fe fdb6 	bl	800406c <HAL_TIM_PWM_Start>
}
 8005500:	bf00      	nop
 8005502:	bd80      	pop	{r7, pc}
 8005504:	200002e4 	.word	0x200002e4
 8005508:	20000434 	.word	0x20000434

0800550c <ibus_init>:
static uint8_t fail_safe_flag = 0;


/* Main Functions */
void ibus_init()
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 8005510:	2220      	movs	r2, #32
 8005512:	4903      	ldr	r1, [pc, #12]	; (8005520 <ibus_init+0x14>)
 8005514:	4803      	ldr	r0, [pc, #12]	; (8005524 <ibus_init+0x18>)
 8005516:	f7ff fa04 	bl	8004922 <HAL_UART_Receive_DMA>
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000094 	.word	0x20000094
 8005524:	200004dc 	.word	0x200004dc

08005528 <ibus_reset_failsafe>:

/**
 * @note This function is located in HAL_UART_RxCpltCallback.
 */
void ibus_reset_failsafe()
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
		fail_safe_flag = 0; // flag reset
 800552c:	4b03      	ldr	r3, [pc, #12]	; (800553c <ibus_reset_failsafe+0x14>)
 800552e:	2200      	movs	r2, #0
 8005530:	701a      	strb	r2, [r3, #0]
}
 8005532:	bf00      	nop
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	200000b4 	.word	0x200000b4

08005540 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8005544:	bf00      	nop
 8005546:	f000 f96d 	bl	8005824 <icm20948_who_am_i>
 800554a:	4603      	mov	r3, r0
 800554c:	f083 0301 	eor.w	r3, r3, #1
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f7      	bne.n	8005546 <icm20948_init+0x6>

	icm20948_device_reset();
 8005556:	f000 f98a 	bl	800586e <icm20948_device_reset>
	icm20948_wakeup();
 800555a:	f000 f99f 	bl	800589c <icm20948_wakeup>

	icm20948_clock_source(1);
 800555e:	2001      	movs	r0, #1
 8005560:	f000 fa17 	bl	8005992 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8005564:	f000 fa2e 	bl	80059c4 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 8005568:	f000 f9b2 	bl	80058d0 <icm20948_spi_slave_enable>

	icm20948_int_pin_active_low();
 800556c:	f000 fa33 	bl	80059d6 <icm20948_int_pin_active_low>
	icm20948_int_pulse();
 8005570:	f000 fa48 	bl	8005a04 <icm20948_int_pulse>
	icm20948_int_enable_raw_data_rdy();
 8005574:	f000 fa5d 	bl	8005a32 <icm20948_int_enable_raw_data_rdy>

	icm20948_gyro_low_pass_filter(0);
 8005578:	2000      	movs	r0, #0
 800557a:	f000 fa63 	bl	8005a44 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 800557e:	2000      	movs	r0, #0
 8005580:	f000 fa7d 	bl	8005a7e <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8005584:	2000      	movs	r0, #0
 8005586:	f000 fa97 	bl	8005ab8 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 800558a:	2000      	movs	r0, #0
 800558c:	f000 faa3 	bl	8005ad6 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8005590:	f000 fad0 	bl	8005b34 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8005594:	f000 fb70 	bl	8005c78 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8005598:	2003      	movs	r0, #3
 800559a:	f000 fc85 	bl	8005ea8 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 800559e:	2003      	movs	r0, #3
 80055a0:	f000 fccc 	bl	8005f3c <icm20948_accel_full_scale_select>
}
 80055a4:	bf00      	nop
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <ak09916_init>:

void ak09916_init()
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 80055ac:	f000 f9a7 	bl	80058fe <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 80055b0:	f000 f9bc 	bl	800592c <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 80055b4:	2007      	movs	r0, #7
 80055b6:	f000 f9d3 	bl	8005960 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 80055ba:	bf00      	nop
 80055bc:	f000 f945 	bl	800584a <ak09916_who_am_i>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f083 0301 	eor.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f7      	bne.n	80055bc <ak09916_init+0x14>

	ak09916_soft_reset();
 80055cc:	f000 f95b 	bl	8005886 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 80055d0:	2008      	movs	r0, #8
 80055d2:	f000 fa9e 	bl	8005b12 <ak09916_operation_mode_setting>
}
 80055d6:	bf00      	nop
 80055d8:	bd80      	pop	{r7, pc}

080055da <icm20948_gyro_read>:

void icm20948_gyro_read(gyro_t* data)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 80055e2:	2206      	movs	r2, #6
 80055e4:	2133      	movs	r1, #51	; 0x33
 80055e6:	2000      	movs	r0, #0
 80055e8:	f000 fd70 	bl	80060cc <read_multiple_icm20948_reg>
 80055ec:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	b21a      	sxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3301      	adds	r3, #1
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	b21b      	sxth	r3, r3
 80055fe:	4313      	orrs	r3, r2
 8005600:	b21b      	sxth	r3, r3
 8005602:	4618      	mov	r0, r3
 8005604:	f7fa ff3a 	bl	800047c <__aeabi_i2d>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3302      	adds	r3, #2
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	b21a      	sxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3303      	adds	r3, #3
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	b21b      	sxth	r3, r3
 8005624:	4313      	orrs	r3, r2
 8005626:	b21b      	sxth	r3, r3
 8005628:	4618      	mov	r0, r3
 800562a:	f7fa ff27 	bl	800047c <__aeabi_i2d>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3304      	adds	r3, #4
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	021b      	lsls	r3, r3, #8
 8005640:	b21a      	sxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3305      	adds	r3, #5
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	b21b      	sxth	r3, r3
 800564a:	4313      	orrs	r3, r2
 800564c:	b21b      	sxth	r3, r3
 800564e:	4618      	mov	r0, r3
 8005650:	f7fa ff14 	bl	800047c <__aeabi_i2d>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <icm20948_accel_read>:

void icm20948_accel_read(accel_t* data)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8005670:	2206      	movs	r2, #6
 8005672:	212d      	movs	r1, #45	; 0x2d
 8005674:	2000      	movs	r0, #0
 8005676:	f000 fd29 	bl	80060cc <read_multiple_icm20948_reg>
 800567a:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	b21a      	sxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	b21b      	sxth	r3, r3
 800568c:	4313      	orrs	r3, r2
 800568e:	b21b      	sxth	r3, r3
 8005690:	4618      	mov	r0, r3
 8005692:	f7fa fef3 	bl	800047c <__aeabi_i2d>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3302      	adds	r3, #2
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	b21a      	sxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3303      	adds	r3, #3
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	b21b      	sxth	r3, r3
 80056b2:	4313      	orrs	r3, r2
 80056b4:	b21b      	sxth	r3, r3
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fa fee0 	bl	800047c <__aeabi_i2d>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3304      	adds	r3, #4
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	b21a      	sxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3305      	adds	r3, #5
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	b21b      	sxth	r3, r3
 80056d8:	4313      	orrs	r3, r2
 80056da:	b21b      	sxth	r3, r3
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056e4:	4b08      	ldr	r3, [pc, #32]	; (8005708 <icm20948_accel_read+0xa0>)
 80056e6:	edd3 7a00 	vldr	s15, [r3]
 80056ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ee:	ee17 0a90 	vmov	r0, s15
 80056f2:	f7fa fed5 	bl	80004a0 <__aeabi_f2d>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	200000bc 	.word	0x200000bc

0800570c <icm20948_gyro_read_dps>:

	return true;
}

void icm20948_gyro_read_dps(gyro_t* data)
{
 800570c:	b5b0      	push	{r4, r5, r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	gyro_t temp_gyro;
	icm20948_gyro_read(&temp_gyro);
 8005714:	f107 0308 	add.w	r3, r7, #8
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ff5e 	bl	80055da <icm20948_gyro_read>

	data->x = temp_gyro.x / gyro_scale_factor;
 800571e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005722:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <icm20948_gyro_read_dps+0x88>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f7fa feba 	bl	80004a0 <__aeabi_f2d>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4620      	mov	r0, r4
 8005732:	4629      	mov	r1, r5
 8005734:	f7fb f836 	bl	80007a4 <__aeabi_ddiv>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = temp_gyro.y / gyro_scale_factor;
 8005742:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005746:	4b13      	ldr	r3, [pc, #76]	; (8005794 <icm20948_gyro_read_dps+0x88>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f7fa fea8 	bl	80004a0 <__aeabi_f2d>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4620      	mov	r0, r4
 8005756:	4629      	mov	r1, r5
 8005758:	f7fb f824 	bl	80007a4 <__aeabi_ddiv>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = temp_gyro.z / gyro_scale_factor;
 8005766:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <icm20948_gyro_read_dps+0x88>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fa fe96 	bl	80004a0 <__aeabi_f2d>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4620      	mov	r0, r4
 800577a:	4629      	mov	r1, r5
 800577c:	f7fb f812 	bl	80007a4 <__aeabi_ddiv>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800578a:	bf00      	nop
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bdb0      	pop	{r4, r5, r7, pc}
 8005792:	bf00      	nop
 8005794:	200000b8 	.word	0x200000b8

08005798 <icm20948_accel_read_g>:

void icm20948_accel_read_g(accel_t* data)
{
 8005798:	b5b0      	push	{r4, r5, r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
	accel_t temp_accel;
	icm20948_accel_read(&temp_accel);
 80057a0:	f107 0308 	add.w	r3, r7, #8
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ff5f 	bl	8005668 <icm20948_accel_read>

	data->x = temp_accel.x / accel_scale_factor;
 80057aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057ae:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <icm20948_accel_read_g+0x88>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fa fe74 	bl	80004a0 <__aeabi_f2d>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f7fa fff0 	bl	80007a4 <__aeabi_ddiv>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = temp_accel.y / accel_scale_factor;
 80057ce:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <icm20948_accel_read_g+0x88>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fa fe62 	bl	80004a0 <__aeabi_f2d>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4620      	mov	r0, r4
 80057e2:	4629      	mov	r1, r5
 80057e4:	f7fa ffde 	bl	80007a4 <__aeabi_ddiv>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = temp_accel.z / accel_scale_factor;
 80057f2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80057f6:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <icm20948_accel_read_g+0x88>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fa fe50 	bl	80004a0 <__aeabi_f2d>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4620      	mov	r0, r4
 8005806:	4629      	mov	r1, r5
 8005808:	f7fa ffcc 	bl	80007a4 <__aeabi_ddiv>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8005816:	bf00      	nop
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bdb0      	pop	{r4, r5, r7, pc}
 800581e:	bf00      	nop
 8005820:	200000bc 	.word	0x200000bc

08005824 <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 800582a:	2100      	movs	r1, #0
 800582c:	2000      	movs	r0, #0
 800582e:	f000 fbfd 	bl	800602c <read_single_icm20948_reg>
 8005832:	4603      	mov	r3, r0
 8005834:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	2bea      	cmp	r3, #234	; 0xea
 800583a:	d101      	bne.n	8005840 <icm20948_who_am_i+0x1c>
		return true;
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <icm20948_who_am_i+0x1e>
	else
		return false;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8005850:	2001      	movs	r0, #1
 8005852:	f000 fc97 	bl	8006184 <read_single_ak09916_reg>
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	2b09      	cmp	r3, #9
 800585e:	d101      	bne.n	8005864 <ak09916_who_am_i+0x1a>
		return true;
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <ak09916_who_am_i+0x1c>
	else
		return false;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <icm20948_device_reset>:

void icm20948_device_reset()
{
 800586e:	b580      	push	{r7, lr}
 8005870:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8005872:	22c1      	movs	r2, #193	; 0xc1
 8005874:	2106      	movs	r1, #6
 8005876:	2000      	movs	r0, #0
 8005878:	f000 fc04 	bl	8006084 <write_single_icm20948_reg>
	HAL_Delay(100);
 800587c:	2064      	movs	r0, #100	; 0x64
 800587e:	f7fc faaf 	bl	8001de0 <HAL_Delay>
}
 8005882:	bf00      	nop
 8005884:	bd80      	pop	{r7, pc}

08005886 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8005886:	b580      	push	{r7, lr}
 8005888:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 800588a:	2101      	movs	r1, #1
 800588c:	2032      	movs	r0, #50	; 0x32
 800588e:	f000 fc9a 	bl	80061c6 <write_single_ak09916_reg>
	HAL_Delay(100);
 8005892:	2064      	movs	r0, #100	; 0x64
 8005894:	f7fc faa4 	bl	8001de0 <HAL_Delay>
}
 8005898:	bf00      	nop
 800589a:	bd80      	pop	{r7, pc}

0800589c <icm20948_wakeup>:

void icm20948_wakeup()
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80058a2:	2106      	movs	r1, #6
 80058a4:	2000      	movs	r0, #0
 80058a6:	f000 fbc1 	bl	800602c <read_single_icm20948_reg>
 80058aa:	4603      	mov	r3, r0
 80058ac:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b4:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	461a      	mov	r2, r3
 80058ba:	2106      	movs	r1, #6
 80058bc:	2000      	movs	r0, #0
 80058be:	f000 fbe1 	bl	8006084 <write_single_icm20948_reg>
	HAL_Delay(100);
 80058c2:	2064      	movs	r0, #100	; 0x64
 80058c4:	f7fc fa8c 	bl	8001de0 <HAL_Delay>
}
 80058c8:	bf00      	nop
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80058d6:	2103      	movs	r1, #3
 80058d8:	2000      	movs	r0, #0
 80058da:	f000 fba7 	bl	800602c <read_single_icm20948_reg>
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	f043 0310 	orr.w	r3, r3, #16
 80058e8:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	461a      	mov	r2, r3
 80058ee:	2103      	movs	r1, #3
 80058f0:	2000      	movs	r0, #0
 80058f2:	f000 fbc7 	bl	8006084 <write_single_icm20948_reg>
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8005904:	2103      	movs	r1, #3
 8005906:	2000      	movs	r0, #0
 8005908:	f000 fb90 	bl	800602c <read_single_icm20948_reg>
 800590c:	4603      	mov	r3, r0
 800590e:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	f043 0302 	orr.w	r3, r3, #2
 8005916:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	461a      	mov	r2, r3
 800591c:	2103      	movs	r1, #3
 800591e:	2000      	movs	r0, #0
 8005920:	f000 fbb0 	bl	8006084 <write_single_icm20948_reg>
}
 8005924:	bf00      	nop
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8005932:	2103      	movs	r1, #3
 8005934:	2000      	movs	r0, #0
 8005936:	f000 fb79 	bl	800602c <read_single_icm20948_reg>
 800593a:	4603      	mov	r3, r0
 800593c:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	f043 0320 	orr.w	r3, r3, #32
 8005944:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	461a      	mov	r2, r3
 800594a:	2103      	movs	r1, #3
 800594c:	2000      	movs	r0, #0
 800594e:	f000 fb99 	bl	8006084 <write_single_icm20948_reg>
	HAL_Delay(100);
 8005952:	2064      	movs	r0, #100	; 0x64
 8005954:	f7fc fa44 	bl	8001de0 <HAL_Delay>
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 800596a:	2101      	movs	r1, #1
 800596c:	2030      	movs	r0, #48	; 0x30
 800596e:	f000 fb5d 	bl	800602c <read_single_icm20948_reg>
 8005972:	4603      	mov	r3, r0
 8005974:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8005976:	7bfa      	ldrb	r2, [r7, #15]
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	4313      	orrs	r3, r2
 800597c:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	461a      	mov	r2, r3
 8005982:	2101      	movs	r1, #1
 8005984:	2030      	movs	r0, #48	; 0x30
 8005986:	f000 fb7d 	bl	8006084 <write_single_icm20948_reg>
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	4603      	mov	r3, r0
 800599a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800599c:	2106      	movs	r1, #6
 800599e:	2000      	movs	r0, #0
 80059a0:	f000 fb44 	bl	800602c <read_single_icm20948_reg>
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 80059a8:	7bfa      	ldrb	r2, [r7, #15]
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	461a      	mov	r2, r3
 80059b4:	2106      	movs	r1, #6
 80059b6:	2000      	movs	r0, #0
 80059b8:	f000 fb64 	bl	8006084 <write_single_icm20948_reg>
}
 80059bc:	bf00      	nop
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 80059c8:	2201      	movs	r2, #1
 80059ca:	2109      	movs	r1, #9
 80059cc:	2020      	movs	r0, #32
 80059ce:	f000 fb59 	bl	8006084 <write_single_icm20948_reg>
}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <icm20948_int_pin_active_low>:

void icm20948_int_pin_active_low()
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_INT_PIN_CFG);
 80059dc:	210f      	movs	r1, #15
 80059de:	2000      	movs	r0, #0
 80059e0:	f000 fb24 	bl	800602c <read_single_icm20948_reg>
 80059e4:	4603      	mov	r3, r0
 80059e6:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x80;
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059ee:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_INT_PIN_CFG, new_val);
 80059f0:	79fb      	ldrb	r3, [r7, #7]
 80059f2:	461a      	mov	r2, r3
 80059f4:	210f      	movs	r1, #15
 80059f6:	2000      	movs	r0, #0
 80059f8:	f000 fb44 	bl	8006084 <write_single_icm20948_reg>
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <icm20948_int_pulse>:

	write_single_icm20948_reg(ub_0, B0_INT_PIN_CFG, new_val);
}

void icm20948_int_pulse()
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_INT_PIN_CFG);
 8005a0a:	210f      	movs	r1, #15
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	f000 fb0d 	bl	800602c <read_single_icm20948_reg>
 8005a12:	4603      	mov	r3, r0
 8005a14:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xDF;
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	f023 0320 	bic.w	r3, r3, #32
 8005a1c:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_INT_PIN_CFG, new_val);
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	461a      	mov	r2, r3
 8005a22:	210f      	movs	r1, #15
 8005a24:	2000      	movs	r0, #0
 8005a26:	f000 fb2d 	bl	8006084 <write_single_icm20948_reg>
}
 8005a2a:	bf00      	nop
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <icm20948_int_enable_raw_data_rdy>:

void icm20948_int_enable_raw_data_rdy()
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_INT_ENABLE_1, 0x01);
 8005a36:	2201      	movs	r2, #1
 8005a38:	2111      	movs	r1, #17
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	f000 fb22 	bl	8006084 <write_single_icm20948_reg>
}
 8005a40:	bf00      	nop
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8005a4e:	2101      	movs	r1, #1
 8005a50:	2020      	movs	r0, #32
 8005a52:	f000 faeb 	bl	800602c <read_single_icm20948_reg>
 8005a56:	4603      	mov	r3, r0
 8005a58:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	b25a      	sxtb	r2, r3
 8005a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	b25b      	sxtb	r3, r3
 8005a68:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2101      	movs	r1, #1
 8005a70:	2020      	movs	r0, #32
 8005a72:	f000 fb07 	bl	8006084 <write_single_icm20948_reg>
}
 8005a76:	bf00      	nop
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	4603      	mov	r3, r0
 8005a86:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8005a88:	2114      	movs	r1, #20
 8005a8a:	2020      	movs	r0, #32
 8005a8c:	f000 face 	bl	800602c <read_single_icm20948_reg>
 8005a90:	4603      	mov	r3, r0
 8005a92:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	b25a      	sxtb	r2, r3
 8005a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	b25b      	sxtb	r3, r3
 8005aa2:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	2020      	movs	r0, #32
 8005aac:	f000 faea 	bl	8006084 <write_single_icm20948_reg>
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	2020      	movs	r0, #32
 8005aca:	f000 fadb 	bl	8006084 <write_single_icm20948_reg>
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	4603      	mov	r3, r0
 8005ade:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8005ae8:	88fb      	ldrh	r3, [r7, #6]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	461a      	mov	r2, r3
 8005af6:	2110      	movs	r1, #16
 8005af8:	2020      	movs	r0, #32
 8005afa:	f000 fac3 	bl	8006084 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	461a      	mov	r2, r3
 8005b02:	2111      	movs	r1, #17
 8005b04:	2020      	movs	r0, #32
 8005b06:	f000 fabd 	bl	8006084 <write_single_icm20948_reg>
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	4603      	mov	r3, r0
 8005b1a:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	2031      	movs	r0, #49	; 0x31
 8005b22:	f000 fb50 	bl	80061c6 <write_single_ak09916_reg>
	HAL_Delay(100);
 8005b26:	2064      	movs	r0, #100	; 0x64
 8005b28:	f7fc f95a 	bl	8001de0 <HAL_Delay>
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08e      	sub	sp, #56	; 0x38
 8005b38:	af00      	add	r7, sp, #0
	gyro_t temp;
	int32_t gyro_bias[3] = {0};
 8005b3a:	f107 030c 	add.w	r3, r7, #12
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	605a      	str	r2, [r3, #4]
 8005b44:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8005b46:	2300      	movs	r3, #0
 8005b48:	607b      	str	r3, [r7, #4]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	637b      	str	r3, [r7, #52]	; 0x34
 8005b52:	e037      	b.n	8005bc4 <icm20948_gyro_calibration+0x90>
	{
		icm20948_gyro_read(&temp);
 8005b54:	f107 0318 	add.w	r3, r7, #24
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff fd3e 	bl	80055da <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fa fc8b 	bl	800047c <__aeabi_i2d>
 8005b66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b6a:	f7fa fb3b 	bl	80001e4 <__adddf3>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	f7fa ff9b 	bl	8000ab0 <__aeabi_d2iz>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fa fc7b 	bl	800047c <__aeabi_i2d>
 8005b86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b8a:	f7fa fb2b 	bl	80001e4 <__adddf3>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4610      	mov	r0, r2
 8005b94:	4619      	mov	r1, r3
 8005b96:	f7fa ff8b 	bl	8000ab0 <__aeabi_d2iz>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fa fc6b 	bl	800047c <__aeabi_i2d>
 8005ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005baa:	f7fa fb1b 	bl	80001e4 <__adddf3>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	f7fa ff7b 	bl	8000ab0 <__aeabi_d2iz>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8005bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc6:	2b63      	cmp	r3, #99	; 0x63
 8005bc8:	ddc4      	ble.n	8005b54 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a29      	ldr	r2, [pc, #164]	; (8005c74 <icm20948_gyro_calibration+0x140>)
 8005bce:	fb82 1203 	smull	r1, r2, r2, r3
 8005bd2:	1152      	asrs	r2, r2, #5
 8005bd4:	17db      	asrs	r3, r3, #31
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4a25      	ldr	r2, [pc, #148]	; (8005c74 <icm20948_gyro_calibration+0x140>)
 8005bde:	fb82 1203 	smull	r1, r2, r2, r3
 8005be2:	1152      	asrs	r2, r2, #5
 8005be4:	17db      	asrs	r3, r3, #31
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <icm20948_gyro_calibration+0x140>)
 8005bee:	fb82 1203 	smull	r1, r2, r2, r3
 8005bf2:	1152      	asrs	r2, r2, #5
 8005bf4:	17db      	asrs	r3, r3, #31
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	425b      	negs	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	da00      	bge.n	8005c04 <icm20948_gyro_calibration+0xd0>
 8005c02:	3303      	adds	r3, #3
 8005c04:	109b      	asrs	r3, r3, #2
 8005c06:	121b      	asrs	r3, r3, #8
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	425b      	negs	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	da00      	bge.n	8005c16 <icm20948_gyro_calibration+0xe2>
 8005c14:	3303      	adds	r3, #3
 8005c16:	109b      	asrs	r3, r3, #2
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	425b      	negs	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	da00      	bge.n	8005c26 <icm20948_gyro_calibration+0xf2>
 8005c24:	3303      	adds	r3, #3
 8005c26:	109b      	asrs	r3, r3, #2
 8005c28:	121b      	asrs	r3, r3, #8
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	425b      	negs	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	da00      	bge.n	8005c38 <icm20948_gyro_calibration+0x104>
 8005c36:	3303      	adds	r3, #3
 8005c38:	109b      	asrs	r3, r3, #2
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	425b      	negs	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	da00      	bge.n	8005c48 <icm20948_gyro_calibration+0x114>
 8005c46:	3303      	adds	r3, #3
 8005c48:	109b      	asrs	r3, r3, #2
 8005c4a:	121b      	asrs	r3, r3, #8
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	425b      	negs	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	da00      	bge.n	8005c5a <icm20948_gyro_calibration+0x126>
 8005c58:	3303      	adds	r3, #3
 8005c5a:	109b      	asrs	r3, r3, #2
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8005c60:	1d3a      	adds	r2, r7, #4
 8005c62:	2306      	movs	r3, #6
 8005c64:	2103      	movs	r1, #3
 8005c66:	2020      	movs	r0, #32
 8005c68:	f000 fa60 	bl	800612c <write_multiple_icm20948_reg>
}
 8005c6c:	bf00      	nop
 8005c6e:	3738      	adds	r7, #56	; 0x38
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	51eb851f 	.word	0x51eb851f

08005c78 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b094      	sub	sp, #80	; 0x50
 8005c7c:	af00      	add	r7, sp, #0
	accel_t temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8005c7e:	f107 031c 	add.w	r3, r7, #28
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	605a      	str	r2, [r3, #4]
 8005c88:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8005c8a:	f107 0310 	add.w	r3, r7, #16
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	605a      	str	r2, [r3, #4]
 8005c94:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	81bb      	strh	r3, [r7, #12]

	for(int i = 0; i < 100; i++)
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca2:	e037      	b.n	8005d14 <icm20948_accel_calibration+0x9c>
	{
		icm20948_accel_read(&temp);
 8005ca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fcdd 	bl	8005668 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fa fbe3 	bl	800047c <__aeabi_i2d>
 8005cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cba:	f7fa fa93 	bl	80001e4 <__adddf3>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f7fa fef3 	bl	8000ab0 <__aeabi_d2iz>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	61fb      	str	r3, [r7, #28]
		accel_bias[1] += temp.y;
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fa fbd3 	bl	800047c <__aeabi_i2d>
 8005cd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005cda:	f7fa fa83 	bl	80001e4 <__adddf3>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	f7fa fee3 	bl	8000ab0 <__aeabi_d2iz>
 8005cea:	4603      	mov	r3, r0
 8005cec:	623b      	str	r3, [r7, #32]
		accel_bias[2] += temp.z;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fa fbc3 	bl	800047c <__aeabi_i2d>
 8005cf6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cfa:	f7fa fa73 	bl	80001e4 <__adddf3>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4610      	mov	r0, r2
 8005d04:	4619      	mov	r1, r3
 8005d06:	f7fa fed3 	bl	8000ab0 <__aeabi_d2iz>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 100; i++)
 8005d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d10:	3301      	adds	r3, #1
 8005d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d16:	2b63      	cmp	r3, #99	; 0x63
 8005d18:	ddc4      	ble.n	8005ca4 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4a60      	ldr	r2, [pc, #384]	; (8005ea0 <icm20948_accel_calibration+0x228>)
 8005d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8005d22:	1152      	asrs	r2, r2, #5
 8005d24:	17db      	asrs	r3, r3, #31
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	61fb      	str	r3, [r7, #28]
	accel_bias[1] /= 100;
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	4a5c      	ldr	r2, [pc, #368]	; (8005ea0 <icm20948_accel_calibration+0x228>)
 8005d2e:	fb82 1203 	smull	r1, r2, r2, r3
 8005d32:	1152      	asrs	r2, r2, #5
 8005d34:	17db      	asrs	r3, r3, #31
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	623b      	str	r3, [r7, #32]
	accel_bias[2] /= 100;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	4a58      	ldr	r2, [pc, #352]	; (8005ea0 <icm20948_accel_calibration+0x228>)
 8005d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8005d42:	1152      	asrs	r2, r2, #5
 8005d44:	17db      	asrs	r3, r3, #31
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t mask_bit[3] = {0, 0, 0};
 8005d4a:	4a56      	ldr	r2, [pc, #344]	; (8005ea4 <icm20948_accel_calibration+0x22c>)
 8005d4c:	1d3b      	adds	r3, r7, #4
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	4611      	mov	r1, r2
 8005d52:	8019      	strh	r1, [r3, #0]
 8005d54:	3302      	adds	r3, #2
 8005d56:	0c12      	lsrs	r2, r2, #16
 8005d58:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	2114      	movs	r1, #20
 8005d5e:	2010      	movs	r0, #16
 8005d60:	f000 f9b4 	bl	80060cc <read_multiple_icm20948_reg>
 8005d64:	64b8      	str	r0, [r7, #72]	; 0x48
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8005d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d6e:	3201      	adds	r2, #1
 8005d70:	7812      	ldrb	r2, [r2, #0]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
	mask_bit[0] = temp2[1] & 0x01;
 8005d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d78:	3301      	adds	r3, #1
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	713b      	strb	r3, [r7, #4]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8005d84:	2202      	movs	r2, #2
 8005d86:	2117      	movs	r1, #23
 8005d88:	2010      	movs	r0, #16
 8005d8a:	f000 f99f 	bl	80060cc <read_multiple_icm20948_reg>
 8005d8e:	6478      	str	r0, [r7, #68]	; 0x44
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8005d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d98:	3201      	adds	r2, #1
 8005d9a:	7812      	ldrb	r2, [r2, #0]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
	mask_bit[1] = temp3[1] & 0x01;
 8005da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005da2:	3301      	adds	r3, #1
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	717b      	strb	r3, [r7, #5]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8005dae:	2202      	movs	r2, #2
 8005db0:	211a      	movs	r1, #26
 8005db2:	2010      	movs	r0, #16
 8005db4:	f000 f98a 	bl	80060cc <read_multiple_icm20948_reg>
 8005db8:	6438      	str	r0, [r7, #64]	; 0x40
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8005dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dc2:	3201      	adds	r2, #1
 8005dc4:	7812      	ldrb	r2, [r2, #0]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
	mask_bit[2] = temp4[1] & 0x01;
 8005dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dcc:	3301      	adds	r3, #1
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	71bb      	strb	r3, [r7, #6]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	da00      	bge.n	8005de2 <icm20948_accel_calibration+0x16a>
 8005de0:	3307      	adds	r3, #7
 8005de2:	10db      	asrs	r3, r3, #3
 8005de4:	425b      	negs	r3, r3
 8005de6:	4413      	add	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da00      	bge.n	8005df4 <icm20948_accel_calibration+0x17c>
 8005df2:	3307      	adds	r3, #7
 8005df4:	10db      	asrs	r3, r3, #3
 8005df6:	425b      	negs	r3, r3
 8005df8:	4413      	add	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	da00      	bge.n	8005e06 <icm20948_accel_calibration+0x18e>
 8005e04:	3307      	adds	r3, #7
 8005e06:	10db      	asrs	r3, r3, #3
 8005e08:	425b      	negs	r3, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	121b      	asrs	r3, r3, #8
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	723b      	strb	r3, [r7, #8]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	727b      	strb	r3, [r7, #9]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8005e22:	7a7a      	ldrb	r2, [r7, #9]
 8005e24:	793b      	ldrb	r3, [r7, #4]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	727b      	strb	r3, [r7, #9]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	121b      	asrs	r3, r3, #8
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	72bb      	strb	r3, [r7, #10]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f023 0301 	bic.w	r3, r3, #1
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	72fb      	strb	r3, [r7, #11]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8005e40:	7afa      	ldrb	r2, [r7, #11]
 8005e42:	797b      	ldrb	r3, [r7, #5]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	72fb      	strb	r3, [r7, #11]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	121b      	asrs	r3, r3, #8
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	733b      	strb	r3, [r7, #12]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	737b      	strb	r3, [r7, #13]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8005e5e:	7b7a      	ldrb	r2, [r7, #13]
 8005e60:	79bb      	ldrb	r3, [r7, #6]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	737b      	strb	r3, [r7, #13]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8005e68:	f107 0208 	add.w	r2, r7, #8
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	2114      	movs	r1, #20
 8005e70:	2010      	movs	r0, #16
 8005e72:	f000 f95b 	bl	800612c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8005e76:	f107 0308 	add.w	r3, r7, #8
 8005e7a:	1c9a      	adds	r2, r3, #2
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	2117      	movs	r1, #23
 8005e80:	2010      	movs	r0, #16
 8005e82:	f000 f953 	bl	800612c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8005e86:	f107 0308 	add.w	r3, r7, #8
 8005e8a:	1d1a      	adds	r2, r3, #4
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	211a      	movs	r1, #26
 8005e90:	2010      	movs	r0, #16
 8005e92:	f000 f94b 	bl	800612c <write_multiple_icm20948_reg>
}
 8005e96:	bf00      	nop
 8005e98:	3750      	adds	r7, #80	; 0x50
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	51eb851f 	.word	0x51eb851f
 8005ea4:	08006e90 	.word	0x08006e90

08005ea8 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	2020      	movs	r0, #32
 8005eb6:	f000 f8b9 	bl	800602c <read_single_icm20948_reg>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d827      	bhi.n	8005f14 <icm20948_gyro_full_scale_select+0x6c>
 8005ec4:	a201      	add	r2, pc, #4	; (adr r2, 8005ecc <icm20948_gyro_full_scale_select+0x24>)
 8005ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eca:	bf00      	nop
 8005ecc:	08005edd 	.word	0x08005edd
 8005ed0:	08005ee5 	.word	0x08005ee5
 8005ed4:	08005ef5 	.word	0x08005ef5
 8005ed8:	08005f05 	.word	0x08005f05
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8005edc:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <icm20948_gyro_full_scale_select+0x80>)
 8005ede:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <icm20948_gyro_full_scale_select+0x84>)
 8005ee0:	601a      	str	r2, [r3, #0]
			break;
 8005ee2:	e017      	b.n	8005f14 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	f043 0302 	orr.w	r3, r3, #2
 8005eea:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8005eec:	4b0e      	ldr	r3, [pc, #56]	; (8005f28 <icm20948_gyro_full_scale_select+0x80>)
 8005eee:	4a10      	ldr	r2, [pc, #64]	; (8005f30 <icm20948_gyro_full_scale_select+0x88>)
 8005ef0:	601a      	str	r2, [r3, #0]
			break;
 8005ef2:	e00f      	b.n	8005f14 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	f043 0304 	orr.w	r3, r3, #4
 8005efa:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <icm20948_gyro_full_scale_select+0x80>)
 8005efe:	4a0d      	ldr	r2, [pc, #52]	; (8005f34 <icm20948_gyro_full_scale_select+0x8c>)
 8005f00:	601a      	str	r2, [r3, #0]
			break;
 8005f02:	e007      	b.n	8005f14 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	f043 0306 	orr.w	r3, r3, #6
 8005f0a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <icm20948_gyro_full_scale_select+0x80>)
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <icm20948_gyro_full_scale_select+0x90>)
 8005f10:	601a      	str	r2, [r3, #0]
			break;
 8005f12:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	461a      	mov	r2, r3
 8005f18:	2101      	movs	r1, #1
 8005f1a:	2020      	movs	r0, #32
 8005f1c:	f000 f8b2 	bl	8006084 <write_single_icm20948_reg>
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	200000b8 	.word	0x200000b8
 8005f2c:	43030000 	.word	0x43030000
 8005f30:	42830000 	.word	0x42830000
 8005f34:	42033333 	.word	0x42033333
 8005f38:	41833333 	.word	0x41833333

08005f3c <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8005f46:	2114      	movs	r1, #20
 8005f48:	2020      	movs	r0, #32
 8005f4a:	f000 f86f 	bl	800602c <read_single_icm20948_reg>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d82b      	bhi.n	8005fb0 <icm20948_accel_full_scale_select+0x74>
 8005f58:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <icm20948_accel_full_scale_select+0x24>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f71 	.word	0x08005f71
 8005f64:	08005f7b 	.word	0x08005f7b
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005f9f 	.word	0x08005f9f
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8005f70:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <icm20948_accel_full_scale_select+0x88>)
 8005f72:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005f76:	601a      	str	r2, [r3, #0]
			break;
 8005f78:	e01a      	b.n	8005fb0 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	f043 0302 	orr.w	r3, r3, #2
 8005f80:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8005f82:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <icm20948_accel_full_scale_select+0x88>)
 8005f84:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8005f88:	601a      	str	r2, [r3, #0]
			break;
 8005f8a:	e011      	b.n	8005fb0 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	f043 0304 	orr.w	r3, r3, #4
 8005f92:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8005f94:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <icm20948_accel_full_scale_select+0x88>)
 8005f96:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8005f9a:	601a      	str	r2, [r3, #0]
			break;
 8005f9c:	e008      	b.n	8005fb0 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	f043 0306 	orr.w	r3, r3, #6
 8005fa4:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8005fa6:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <icm20948_accel_full_scale_select+0x88>)
 8005fa8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8005fac:	601a      	str	r2, [r3, #0]
			break;
 8005fae:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	2114      	movs	r1, #20
 8005fb6:	2020      	movs	r0, #32
 8005fb8:	f000 f864 	bl	8006084 <write_single_icm20948_reg>
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	200000bc 	.word	0x200000bc

08005fc8 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8005fcc:	2201      	movs	r2, #1
 8005fce:	2110      	movs	r1, #16
 8005fd0:	4802      	ldr	r0, [pc, #8]	; (8005fdc <cs_high+0x14>)
 8005fd2:	f7fc fd2f 	bl	8002a34 <HAL_GPIO_WritePin>
}
 8005fd6:	bf00      	nop
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40020000 	.word	0x40020000

08005fe0 <cs_low>:

static void cs_low()
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2110      	movs	r1, #16
 8005fe8:	4802      	ldr	r0, [pc, #8]	; (8005ff4 <cs_low+0x14>)
 8005fea:	f7fc fd23 	bl	8002a34 <HAL_GPIO_WritePin>
}
 8005fee:	bf00      	nop
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40020000 	.word	0x40020000

08005ff8 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8006002:	237f      	movs	r3, #127	; 0x7f
 8006004:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	737b      	strb	r3, [r7, #13]

	cs_low();
 800600a:	f7ff ffe9 	bl	8005fe0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 800600e:	f107 010c 	add.w	r1, r7, #12
 8006012:	230a      	movs	r3, #10
 8006014:	2202      	movs	r2, #2
 8006016:	4804      	ldr	r0, [pc, #16]	; (8006028 <select_user_bank+0x30>)
 8006018:	f7fd fa0f 	bl	800343a <HAL_SPI_Transmit>
	cs_high();
 800601c:	f7ff ffd4 	bl	8005fc8 <cs_high>
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	200001cc 	.word	0x200001cc

0800602c <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	460a      	mov	r2, r1
 8006036:	71fb      	strb	r3, [r7, #7]
 8006038:	4613      	mov	r3, r2
 800603a:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 800603c:	79bb      	ldrb	r3, [r7, #6]
 800603e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006042:	b2db      	uxtb	r3, r3
 8006044:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ffd5 	bl	8005ff8 <select_user_bank>

	cs_low();
 800604e:	f7ff ffc7 	bl	8005fe0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8006052:	f107 010f 	add.w	r1, r7, #15
 8006056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800605a:	2201      	movs	r2, #1
 800605c:	4808      	ldr	r0, [pc, #32]	; (8006080 <read_single_icm20948_reg+0x54>)
 800605e:	f7fd f9ec 	bl	800343a <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8006062:	f107 010e 	add.w	r1, r7, #14
 8006066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800606a:	2201      	movs	r2, #1
 800606c:	4804      	ldr	r0, [pc, #16]	; (8006080 <read_single_icm20948_reg+0x54>)
 800606e:	f7fd fb20 	bl	80036b2 <HAL_SPI_Receive>
	cs_high();
 8006072:	f7ff ffa9 	bl	8005fc8 <cs_high>

	return reg_val;
 8006076:	7bbb      	ldrb	r3, [r7, #14]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	200001cc 	.word	0x200001cc

08006084 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	71fb      	strb	r3, [r7, #7]
 800608e:	460b      	mov	r3, r1
 8006090:	71bb      	strb	r3, [r7, #6]
 8006092:	4613      	mov	r3, r2
 8006094:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8006096:	79bb      	ldrb	r3, [r7, #6]
 8006098:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 800609a:	797b      	ldrb	r3, [r7, #5]
 800609c:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff ffa9 	bl	8005ff8 <select_user_bank>

	cs_low();
 80060a6:	f7ff ff9b 	bl	8005fe0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 80060aa:	f107 010c 	add.w	r1, r7, #12
 80060ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060b2:	2202      	movs	r2, #2
 80060b4:	4804      	ldr	r0, [pc, #16]	; (80060c8 <write_single_icm20948_reg+0x44>)
 80060b6:	f7fd f9c0 	bl	800343a <HAL_SPI_Transmit>
	cs_high();
 80060ba:	f7ff ff85 	bl	8005fc8 <cs_high>
}
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200001cc 	.word	0x200001cc

080060cc <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	4603      	mov	r3, r0
 80060d4:	71fb      	strb	r3, [r7, #7]
 80060d6:	460b      	mov	r3, r1
 80060d8:	71bb      	strb	r3, [r7, #6]
 80060da:	4613      	mov	r3, r2
 80060dc:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 80060de:	79bb      	ldrb	r3, [r7, #6]
 80060e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff ff84 	bl	8005ff8 <select_user_bank>

	cs_low();
 80060f0:	f7ff ff76 	bl	8005fe0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80060f4:	f107 010f 	add.w	r1, r7, #15
 80060f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060fc:	2201      	movs	r2, #1
 80060fe:	4809      	ldr	r0, [pc, #36]	; (8006124 <read_multiple_icm20948_reg+0x58>)
 8006100:	f7fd f99b 	bl	800343a <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8006104:	797b      	ldrb	r3, [r7, #5]
 8006106:	b29a      	uxth	r2, r3
 8006108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800610c:	4906      	ldr	r1, [pc, #24]	; (8006128 <read_multiple_icm20948_reg+0x5c>)
 800610e:	4805      	ldr	r0, [pc, #20]	; (8006124 <read_multiple_icm20948_reg+0x58>)
 8006110:	f7fd facf 	bl	80036b2 <HAL_SPI_Receive>
	cs_high();
 8006114:	f7ff ff58 	bl	8005fc8 <cs_high>

	return reg_val;
 8006118:	4b03      	ldr	r3, [pc, #12]	; (8006128 <read_multiple_icm20948_reg+0x5c>)
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	200001cc 	.word	0x200001cc
 8006128:	200000c0 	.word	0x200000c0

0800612c <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	603a      	str	r2, [r7, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	4603      	mov	r3, r0
 8006138:	71fb      	strb	r3, [r7, #7]
 800613a:	460b      	mov	r3, r1
 800613c:	71bb      	strb	r3, [r7, #6]
 800613e:	4613      	mov	r3, r2
 8006140:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 8006142:	79bb      	ldrb	r3, [r7, #6]
 8006144:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff ff55 	bl	8005ff8 <select_user_bank>

	cs_low();
 800614e:	f7ff ff47 	bl	8005fe0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8006152:	f107 010f 	add.w	r1, r7, #15
 8006156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800615a:	2201      	movs	r2, #1
 800615c:	4808      	ldr	r0, [pc, #32]	; (8006180 <write_multiple_icm20948_reg+0x54>)
 800615e:	f7fd f96c 	bl	800343a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8006162:	797b      	ldrb	r3, [r7, #5]
 8006164:	b29a      	uxth	r2, r3
 8006166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	4804      	ldr	r0, [pc, #16]	; (8006180 <write_multiple_icm20948_reg+0x54>)
 800616e:	f7fd f964 	bl	800343a <HAL_SPI_Transmit>
	cs_high();
 8006172:	f7ff ff29 	bl	8005fc8 <cs_high>
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200001cc 	.word	0x200001cc

08006184 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 800618e:	228c      	movs	r2, #140	; 0x8c
 8006190:	2103      	movs	r1, #3
 8006192:	2030      	movs	r0, #48	; 0x30
 8006194:	f7ff ff76 	bl	8006084 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	461a      	mov	r2, r3
 800619c:	2104      	movs	r1, #4
 800619e:	2030      	movs	r0, #48	; 0x30
 80061a0:	f7ff ff70 	bl	8006084 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80061a4:	2281      	movs	r2, #129	; 0x81
 80061a6:	2105      	movs	r1, #5
 80061a8:	2030      	movs	r0, #48	; 0x30
 80061aa:	f7ff ff6b 	bl	8006084 <write_single_icm20948_reg>

	HAL_Delay(1); // 1ms 딜레이가 아니라 us 단위로 바꿔야 될 듯.
 80061ae:	2001      	movs	r0, #1
 80061b0:	f7fb fe16 	bl	8001de0 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 80061b4:	213b      	movs	r1, #59	; 0x3b
 80061b6:	2000      	movs	r0, #0
 80061b8:	f7ff ff38 	bl	800602c <read_single_icm20948_reg>
 80061bc:	4603      	mov	r3, r0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	4603      	mov	r3, r0
 80061ce:	460a      	mov	r2, r1
 80061d0:	71fb      	strb	r3, [r7, #7]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 80061d6:	220c      	movs	r2, #12
 80061d8:	2103      	movs	r1, #3
 80061da:	2030      	movs	r0, #48	; 0x30
 80061dc:	f7ff ff52 	bl	8006084 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	461a      	mov	r2, r3
 80061e4:	2104      	movs	r1, #4
 80061e6:	2030      	movs	r0, #48	; 0x30
 80061e8:	f7ff ff4c 	bl	8006084 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 80061ec:	79bb      	ldrb	r3, [r7, #6]
 80061ee:	461a      	mov	r2, r3
 80061f0:	2106      	movs	r1, #6
 80061f2:	2030      	movs	r0, #48	; 0x30
 80061f4:	f7ff ff46 	bl	8006084 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80061f8:	2281      	movs	r2, #129	; 0x81
 80061fa:	2105      	movs	r1, #5
 80061fc:	2030      	movs	r0, #48	; 0x30
 80061fe:	f7ff ff41 	bl	8006084 <write_single_icm20948_reg>
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <led2_on>:
}


// LED2
void led2_on()
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED2_PIN_PORT, LED2_PIN_NUMBER, SET);
 8006210:	2201      	movs	r2, #1
 8006212:	2102      	movs	r1, #2
 8006214:	4802      	ldr	r0, [pc, #8]	; (8006220 <led2_on+0x14>)
 8006216:	f7fc fc0d 	bl	8002a34 <HAL_GPIO_WritePin>
}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40020400 	.word	0x40020400

08006224 <led2_off>:

void led2_off()
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED2_PIN_PORT, LED2_PIN_NUMBER, RESET);
 8006228:	2200      	movs	r2, #0
 800622a:	2102      	movs	r1, #2
 800622c:	4802      	ldr	r0, [pc, #8]	; (8006238 <led2_off+0x14>)
 800622e:	f7fc fc01 	bl	8002a34 <HAL_GPIO_WritePin>
}
 8006232:	bf00      	nop
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40020400 	.word	0x40020400

0800623c <led3_on>:
}


// LED3
void led3_on()
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED3_PIN_PORT, LED3_PIN_NUMBER, SET);
 8006240:	2201      	movs	r2, #1
 8006242:	2104      	movs	r1, #4
 8006244:	4802      	ldr	r0, [pc, #8]	; (8006250 <led3_on+0x14>)
 8006246:	f7fc fbf5 	bl	8002a34 <HAL_GPIO_WritePin>
}
 800624a:	bf00      	nop
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	40020400 	.word	0x40020400

08006254 <led3_off>:

void led3_off()
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED3_PIN_PORT, LED3_PIN_NUMBER, RESET);
 8006258:	2200      	movs	r2, #0
 800625a:	2104      	movs	r1, #4
 800625c:	4802      	ldr	r0, [pc, #8]	; (8006268 <led3_off+0x14>)
 800625e:	f7fc fbe9 	bl	8002a34 <HAL_GPIO_WritePin>
}
 8006262:	bf00      	nop
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40020400 	.word	0x40020400

0800626c <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	460a      	mov	r2, r1
 8006276:	80fb      	strh	r3, [r7, #6]
 8006278:	4613      	mov	r3, r2
 800627a:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 800627c:	f000 f847 	bl	800630e <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8006280:	f000 f899 	bl	80063b6 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8006284:	f000 f944 	bl	8006510 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 f9cc 	bl	8006628 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8006290:	797b      	ldrb	r3, [r7, #5]
 8006292:	4618      	mov	r0, r3
 8006294:	f000 f9f8 	bl	8006688 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8006298:	2003      	movs	r0, #3
 800629a:	f000 f9d8 	bl	800664e <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 800629e:	2001      	movs	r0, #1
 80062a0:	f000 f94b 	bl	800653a <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 80062a4:	2005      	movs	r0, #5
 80062a6:	f000 f96b 	bl	8006580 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 80062aa:	2003      	movs	r0, #3
 80062ac:	f000 f978 	bl	80065a0 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 80062b0:	20fa      	movs	r0, #250	; 0xfa
 80062b2:	f000 f991 	bl	80065d8 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 80062b6:	f000 fa29 	bl	800670c <ce_high>
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <nrf24l01p_tx_transmit>:
    nrf24l01p_read_rx_fifo(rx_payload, length);
    nrf24l01p_clear_rx_dr();
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload, payload_length length)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
    nrf24l01p_write_tx_fifo(tx_payload, length);
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f884 	bl	80063e0 <nrf24l01p_write_tx_fifo>
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 80062e6:	f000 f8d1 	bl	800648c <nrf24l01p_get_status>
 80062ea:	4603      	mov	r3, r0
 80062ec:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <nrf24l01p_tx_irq+0x22>
        nrf24l01p_clear_tx_ds();
 80062fc:	f000 f8e0 	bl	80064c0 <nrf24l01p_clear_tx_ds>
    else
        nrf24l01p_clear_max_rt();
}
 8006300:	e001      	b.n	8006306 <nrf24l01p_tx_irq+0x26>
        nrf24l01p_clear_max_rt();
 8006302:	f000 f8f1 	bl	80064e8 <nrf24l01p_clear_max_rt>
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <nrf24l01p_reset>:

/* Sub Functions */
void nrf24l01p_reset()
{
 800630e:	b580      	push	{r7, lr}
 8006310:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8006312:	f000 f9e3 	bl	80066dc <cs_high>
    ce_low();
 8006316:	f000 fa05 	bl	8006724 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 800631a:	2108      	movs	r1, #8
 800631c:	2000      	movs	r0, #0
 800631e:	f000 fa33 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8006322:	213f      	movs	r1, #63	; 0x3f
 8006324:	2001      	movs	r0, #1
 8006326:	f000 fa2f 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 800632a:	2103      	movs	r1, #3
 800632c:	2002      	movs	r0, #2
 800632e:	f000 fa2b 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8006332:	2103      	movs	r1, #3
 8006334:	2003      	movs	r0, #3
 8006336:	f000 fa27 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 800633a:	2103      	movs	r1, #3
 800633c:	2004      	movs	r0, #4
 800633e:	f000 fa23 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8006342:	2102      	movs	r1, #2
 8006344:	2005      	movs	r0, #5
 8006346:	f000 fa1f 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 800634a:	2107      	movs	r1, #7
 800634c:	2006      	movs	r0, #6
 800634e:	f000 fa1b 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8006352:	217e      	movs	r1, #126	; 0x7e
 8006354:	2007      	movs	r0, #7
 8006356:	f000 fa17 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800635a:	2100      	movs	r1, #0
 800635c:	2011      	movs	r0, #17
 800635e:	f000 fa13 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8006362:	2100      	movs	r1, #0
 8006364:	2011      	movs	r0, #17
 8006366:	f000 fa0f 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 800636a:	2100      	movs	r1, #0
 800636c:	2012      	movs	r0, #18
 800636e:	f000 fa0b 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8006372:	2100      	movs	r1, #0
 8006374:	2013      	movs	r0, #19
 8006376:	f000 fa07 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 800637a:	2100      	movs	r1, #0
 800637c:	2014      	movs	r0, #20
 800637e:	f000 fa03 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8006382:	2100      	movs	r1, #0
 8006384:	2015      	movs	r0, #21
 8006386:	f000 f9ff 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 800638a:	2100      	movs	r1, #0
 800638c:	2016      	movs	r0, #22
 800638e:	f000 f9fb 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8006392:	2111      	movs	r1, #17
 8006394:	2017      	movs	r0, #23
 8006396:	f000 f9f7 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 800639a:	2100      	movs	r1, #0
 800639c:	201c      	movs	r0, #28
 800639e:	f000 f9f3 	bl	8006788 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 80063a2:	2100      	movs	r1, #0
 80063a4:	201d      	movs	r0, #29
 80063a6:	f000 f9ef 	bl	8006788 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 80063aa:	f000 f83f 	bl	800642c <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 80063ae:	f000 f855 	bl	800645c <nrf24l01p_flush_tx_fifo>
}
 80063b2:	bf00      	nop
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80063bc:	2000      	movs	r0, #0
 80063be:	f000 f9bd 	bl	800673c <read_register>
 80063c2:	4603      	mov	r3, r0
 80063c4:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	4619      	mov	r1, r3
 80063d2:	2000      	movs	r0, #0
 80063d4:	f000 f9d8 	bl	8006788 <write_register>
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload, payload_length length)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 80063ec:	23a0      	movs	r3, #160	; 0xa0
 80063ee:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 80063f0:	f000 f980 	bl	80066f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80063f4:	f107 020e 	add.w	r2, r7, #14
 80063f8:	f107 010f 	add.w	r1, r7, #15
 80063fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	2301      	movs	r3, #1
 8006404:	4808      	ldr	r0, [pc, #32]	; (8006428 <nrf24l01p_write_tx_fifo+0x48>)
 8006406:	f7fd fa65 	bl	80038d4 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, length, 2000);
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	b29a      	uxth	r2, r3
 800640e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4804      	ldr	r0, [pc, #16]	; (8006428 <nrf24l01p_write_tx_fifo+0x48>)
 8006416:	f7fd f810 	bl	800343a <HAL_SPI_Transmit>
    cs_high(); 
 800641a:	f000 f95f 	bl	80066dc <cs_high>

    return status;
 800641e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000174 	.word	0x20000174

0800642c <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8006432:	23e2      	movs	r3, #226	; 0xe2
 8006434:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8006436:	f000 f95d 	bl	80066f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800643a:	1dba      	adds	r2, r7, #6
 800643c:	1df9      	adds	r1, r7, #7
 800643e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	2301      	movs	r3, #1
 8006446:	4804      	ldr	r0, [pc, #16]	; (8006458 <nrf24l01p_flush_rx_fifo+0x2c>)
 8006448:	f7fd fa44 	bl	80038d4 <HAL_SPI_TransmitReceive>
    cs_high();
 800644c:	f000 f946 	bl	80066dc <cs_high>
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20000174 	.word	0x20000174

0800645c <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8006462:	23e1      	movs	r3, #225	; 0xe1
 8006464:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8006466:	f000 f945 	bl	80066f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800646a:	1dba      	adds	r2, r7, #6
 800646c:	1df9      	adds	r1, r7, #7
 800646e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	2301      	movs	r3, #1
 8006476:	4804      	ldr	r0, [pc, #16]	; (8006488 <nrf24l01p_flush_tx_fifo+0x2c>)
 8006478:	f7fd fa2c 	bl	80038d4 <HAL_SPI_TransmitReceive>
    cs_high();
 800647c:	f000 f92e 	bl	80066dc <cs_high>
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000174 	.word	0x20000174

0800648c <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8006492:	23ff      	movs	r3, #255	; 0xff
 8006494:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8006496:	f000 f92d 	bl	80066f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800649a:	1dba      	adds	r2, r7, #6
 800649c:	1df9      	adds	r1, r7, #7
 800649e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	2301      	movs	r3, #1
 80064a6:	4805      	ldr	r0, [pc, #20]	; (80064bc <nrf24l01p_get_status+0x30>)
 80064a8:	f7fd fa14 	bl	80038d4 <HAL_SPI_TransmitReceive>
    cs_high(); 
 80064ac:	f000 f916 	bl	80066dc <cs_high>

    return status;
 80064b0:	79bb      	ldrb	r3, [r7, #6]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000174 	.word	0x20000174

080064c0 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80064c6:	f7ff ffe1 	bl	800648c <nrf24l01p_get_status>
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	f043 0320 	orr.w	r3, r3, #32
 80064d4:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	4619      	mov	r1, r3
 80064da:	2007      	movs	r0, #7
 80064dc:	f000 f954 	bl	8006788 <write_register>
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80064ee:	f7ff ffcd 	bl	800648c <nrf24l01p_get_status>
 80064f2:	4603      	mov	r3, r0
 80064f4:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	f043 0310 	orr.w	r3, r3, #16
 80064fc:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	4619      	mov	r1, r3
 8006502:	2007      	movs	r0, #7
 8006504:	f000 f940 	bl	8006788 <write_register>
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8006516:	2000      	movs	r0, #0
 8006518:	f000 f910 	bl	800673c <read_register>
 800651c:	4603      	mov	r3, r0
 800651e:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	f043 0302 	orr.w	r3, r3, #2
 8006526:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	4619      	mov	r1, r3
 800652c:	2000      	movs	r0, #0
 800652e:	f000 f92b 	bl	8006788 <write_register>
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	4603      	mov	r3, r0
 8006542:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8006544:	2000      	movs	r0, #0
 8006546:	f000 f8f9 	bl	800673c <read_register>
 800654a:	4603      	mov	r3, r0
 800654c:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d002      	beq.n	800655a <nrf24l01p_set_crc_length+0x20>
 8006554:	2b02      	cmp	r3, #2
 8006556:	d005      	beq.n	8006564 <nrf24l01p_set_crc_length+0x2a>
 8006558:	e009      	b.n	800656e <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	f023 0304 	bic.w	r3, r3, #4
 8006560:	73fb      	strb	r3, [r7, #15]
            break;
 8006562:	e004      	b.n	800656e <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	f043 0304 	orr.w	r3, r3, #4
 800656a:	73fb      	strb	r3, [r7, #15]
            break;
 800656c:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	4619      	mov	r1, r3
 8006572:	2000      	movs	r0, #0
 8006574:	f000 f908 	bl	8006788 <write_register>
}
 8006578:	bf00      	nop
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	3b02      	subs	r3, #2
 800658e:	b2db      	uxtb	r3, r3
 8006590:	4619      	mov	r1, r3
 8006592:	2003      	movs	r0, #3
 8006594:	f000 f8f8 	bl	8006788 <write_register>
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4603      	mov	r3, r0
 80065a8:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80065aa:	2004      	movs	r0, #4
 80065ac:	f000 f8c6 	bl	800673c <read_register>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	f063 030f 	orn	r3, r3, #15
 80065ba:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 80065bc:	7bfa      	ldrb	r2, [r7, #15]
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	4619      	mov	r1, r3
 80065c8:	2004      	movs	r0, #4
 80065ca:	f000 f8dd 	bl	8006788 <write_register>
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80065e2:	2004      	movs	r0, #4
 80065e4:	f000 f8aa 	bl	800673c <read_register>
 80065e8:	4603      	mov	r3, r0
 80065ea:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	f043 030f 	orr.w	r3, r3, #15
 80065f2:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	4a0b      	ldr	r2, [pc, #44]	; (8006624 <nrf24l01p_auto_retransmit_delay+0x4c>)
 80065f8:	fba2 2303 	umull	r2, r3, r2, r3
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	b25a      	sxtb	r2, r3
 8006606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800660a:	4313      	orrs	r3, r2
 800660c:	b25b      	sxtb	r3, r3
 800660e:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	4619      	mov	r1, r3
 8006614:	2004      	movs	r0, #4
 8006616:	f000 f8b7 	bl	8006788 <write_register>
}
 800661a:	bf00      	nop
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	10624dd3 	.word	0x10624dd3

08006628 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8006638:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 800663a:	89fb      	ldrh	r3, [r7, #14]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	4619      	mov	r1, r3
 8006640:	2005      	movs	r0, #5
 8006642:	f000 f8a1 	bl	8006788 <write_register>
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	4603      	mov	r3, r0
 8006656:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8006658:	2006      	movs	r0, #6
 800665a:	f000 f86f 	bl	800673c <read_register>
 800665e:	4603      	mov	r3, r0
 8006660:	f023 0306 	bic.w	r3, r3, #6
 8006664:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	b25a      	sxtb	r2, r3
 800666c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006670:	4313      	orrs	r3, r2
 8006672:	b25b      	sxtb	r3, r3
 8006674:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	4619      	mov	r1, r3
 800667a:	2006      	movs	r0, #6
 800667c:	f000 f884 	bl	8006788 <write_register>
}
 8006680:	bf00      	nop
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8006692:	2006      	movs	r0, #6
 8006694:	f000 f852 	bl	800673c <read_register>
 8006698:	4603      	mov	r3, r0
 800669a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800669e:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d00a      	beq.n	80066bc <nrf24l01p_set_rf_air_data_rate+0x34>
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	dc0e      	bgt.n	80066c8 <nrf24l01p_set_rf_air_data_rate+0x40>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <nrf24l01p_set_rf_air_data_rate+0x3e>
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d10a      	bne.n	80066c8 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	f043 0308 	orr.w	r3, r3, #8
 80066b8:	73fb      	strb	r3, [r7, #15]
            break;
 80066ba:	e005      	b.n	80066c8 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	f043 0320 	orr.w	r3, r3, #32
 80066c2:	73fb      	strb	r3, [r7, #15]
            break;
 80066c4:	e000      	b.n	80066c8 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 80066c6:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	4619      	mov	r1, r3
 80066cc:	2006      	movs	r0, #6
 80066ce:	f000 f85b 	bl	8006788 <write_register>
}
 80066d2:	bf00      	nop
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <cs_high>:


/* Static Functions */
static void cs_high()
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 80066e0:	2201      	movs	r2, #1
 80066e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066e6:	4802      	ldr	r0, [pc, #8]	; (80066f0 <cs_high+0x14>)
 80066e8:	f7fc f9a4 	bl	8002a34 <HAL_GPIO_WritePin>
}
 80066ec:	bf00      	nop
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40020400 	.word	0x40020400

080066f4 <cs_low>:

static void cs_low()
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066fe:	4802      	ldr	r0, [pc, #8]	; (8006708 <cs_low+0x14>)
 8006700:	f7fc f998 	bl	8002a34 <HAL_GPIO_WritePin>
}
 8006704:	bf00      	nop
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40020400 	.word	0x40020400

0800670c <ce_high>:

static void ce_high()
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8006710:	2201      	movs	r2, #1
 8006712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006716:	4802      	ldr	r0, [pc, #8]	; (8006720 <ce_high+0x14>)
 8006718:	f7fc f98c 	bl	8002a34 <HAL_GPIO_WritePin>
}
 800671c:	bf00      	nop
 800671e:	bd80      	pop	{r7, pc}
 8006720:	40020400 	.word	0x40020400

08006724 <ce_low>:

static void ce_low()
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8006728:	2200      	movs	r2, #0
 800672a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800672e:	4802      	ldr	r0, [pc, #8]	; (8006738 <ce_low+0x14>)
 8006730:	f7fc f980 	bl	8002a34 <HAL_GPIO_WritePin>
}
 8006734:	bf00      	nop
 8006736:	bd80      	pop	{r7, pc}
 8006738:	40020400 	.word	0x40020400

0800673c <read_register>:

static uint8_t read_register(uint8_t reg)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af02      	add	r7, sp, #8
 8006742:	4603      	mov	r3, r0
 8006744:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 800674a:	f7ff ffd3 	bl	80066f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800674e:	f107 020e 	add.w	r2, r7, #14
 8006752:	f107 010f 	add.w	r1, r7, #15
 8006756:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	2301      	movs	r3, #1
 800675e:	4809      	ldr	r0, [pc, #36]	; (8006784 <read_register+0x48>)
 8006760:	f7fd f8b8 	bl	80038d4 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8006764:	f107 010d 	add.w	r1, r7, #13
 8006768:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800676c:	2201      	movs	r2, #1
 800676e:	4805      	ldr	r0, [pc, #20]	; (8006784 <read_register+0x48>)
 8006770:	f7fc ff9f 	bl	80036b2 <HAL_SPI_Receive>
    cs_high();
 8006774:	f7ff ffb2 	bl	80066dc <cs_high>

    return read_val;
 8006778:	7b7b      	ldrb	r3, [r7, #13]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000174 	.word	0x20000174

08006788 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af02      	add	r7, sp, #8
 800678e:	4603      	mov	r3, r0
 8006790:	460a      	mov	r2, r1
 8006792:	71fb      	strb	r3, [r7, #7]
 8006794:	4613      	mov	r3, r2
 8006796:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	f043 0320 	orr.w	r3, r3, #32
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80067a2:	79bb      	ldrb	r3, [r7, #6]
 80067a4:	737b      	strb	r3, [r7, #13]

    cs_low();
 80067a6:	f7ff ffa5 	bl	80066f4 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80067aa:	f107 020e 	add.w	r2, r7, #14
 80067ae:	f107 010f 	add.w	r1, r7, #15
 80067b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	2301      	movs	r3, #1
 80067ba:	4809      	ldr	r0, [pc, #36]	; (80067e0 <write_register+0x58>)
 80067bc:	f7fd f88a 	bl	80038d4 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 80067c0:	f107 010d 	add.w	r1, r7, #13
 80067c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80067c8:	2201      	movs	r2, #1
 80067ca:	4805      	ldr	r0, [pc, #20]	; (80067e0 <write_register+0x58>)
 80067cc:	f7fc fe35 	bl	800343a <HAL_SPI_Transmit>
    cs_high();
 80067d0:	f7ff ff84 	bl	80066dc <cs_high>

    return write_val;
 80067d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000174 	.word	0x20000174

080067e4 <transmit_angle>:

#include "telemetry.h"


void transmit_angle(angle_t current_angle)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	eeb0 5a40 	vmov.f32	s10, s0
 80067ee:	eef0 5a60 	vmov.f32	s11, s1
 80067f2:	eeb0 6a41 	vmov.f32	s12, s2
 80067f6:	eef0 6a61 	vmov.f32	s13, s3
 80067fa:	eeb0 7a42 	vmov.f32	s14, s4
 80067fe:	eef0 7a62 	vmov.f32	s15, s5
 8006802:	ed87 5b00 	vstr	d5, [r7]
 8006806:	ed87 6b02 	vstr	d6, [r7, #8]
 800680a:	ed87 7b04 	vstr	d7, [r7, #16]
    int8_t angle[3] = { 0, 0, 0 };
 800680e:	4a17      	ldr	r2, [pc, #92]	; (800686c <transmit_angle+0x88>)
 8006810:	f107 031c 	add.w	r3, r7, #28
 8006814:	6812      	ldr	r2, [r2, #0]
 8006816:	4611      	mov	r1, r2
 8006818:	8019      	strh	r1, [r3, #0]
 800681a:	3302      	adds	r3, #2
 800681c:	0c12      	lsrs	r2, r2, #16
 800681e:	701a      	strb	r2, [r3, #0]
    
    angle[0] = (int8_t)(current_angle.roll);
 8006820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006824:	4610      	mov	r0, r2
 8006826:	4619      	mov	r1, r3
 8006828:	f7fa f942 	bl	8000ab0 <__aeabi_d2iz>
 800682c:	4603      	mov	r3, r0
 800682e:	b25b      	sxtb	r3, r3
 8006830:	773b      	strb	r3, [r7, #28]
    angle[1] = (int8_t)(current_angle.pitch);
 8006832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006836:	4610      	mov	r0, r2
 8006838:	4619      	mov	r1, r3
 800683a:	f7fa f939 	bl	8000ab0 <__aeabi_d2iz>
 800683e:	4603      	mov	r3, r0
 8006840:	b25b      	sxtb	r3, r3
 8006842:	777b      	strb	r3, [r7, #29]
    angle[2] = (int8_t)(current_angle.yaw);
 8006844:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006848:	4610      	mov	r0, r2
 800684a:	4619      	mov	r1, r3
 800684c:	f7fa f930 	bl	8000ab0 <__aeabi_d2iz>
 8006850:	4603      	mov	r3, r0
 8006852:	b25b      	sxtb	r3, r3
 8006854:	77bb      	strb	r3, [r7, #30]

    nrf24l01p_tx_transmit(angle, 3);
 8006856:	f107 031c 	add.w	r3, r7, #28
 800685a:	2103      	movs	r1, #3
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff fd30 	bl	80062c2 <nrf24l01p_tx_transmit>
}
 8006862:	bf00      	nop
 8006864:	3720      	adds	r7, #32
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	08006e94 	.word	0x08006e94

08006870 <__libc_init_array>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	4d0d      	ldr	r5, [pc, #52]	; (80068a8 <__libc_init_array+0x38>)
 8006874:	4c0d      	ldr	r4, [pc, #52]	; (80068ac <__libc_init_array+0x3c>)
 8006876:	1b64      	subs	r4, r4, r5
 8006878:	10a4      	asrs	r4, r4, #2
 800687a:	2600      	movs	r6, #0
 800687c:	42a6      	cmp	r6, r4
 800687e:	d109      	bne.n	8006894 <__libc_init_array+0x24>
 8006880:	4d0b      	ldr	r5, [pc, #44]	; (80068b0 <__libc_init_array+0x40>)
 8006882:	4c0c      	ldr	r4, [pc, #48]	; (80068b4 <__libc_init_array+0x44>)
 8006884:	f000 faf8 	bl	8006e78 <_init>
 8006888:	1b64      	subs	r4, r4, r5
 800688a:	10a4      	asrs	r4, r4, #2
 800688c:	2600      	movs	r6, #0
 800688e:	42a6      	cmp	r6, r4
 8006890:	d105      	bne.n	800689e <__libc_init_array+0x2e>
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	f855 3b04 	ldr.w	r3, [r5], #4
 8006898:	4798      	blx	r3
 800689a:	3601      	adds	r6, #1
 800689c:	e7ee      	b.n	800687c <__libc_init_array+0xc>
 800689e:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a2:	4798      	blx	r3
 80068a4:	3601      	adds	r6, #1
 80068a6:	e7f2      	b.n	800688e <__libc_init_array+0x1e>
 80068a8:	08006f08 	.word	0x08006f08
 80068ac:	08006f08 	.word	0x08006f08
 80068b0:	08006f08 	.word	0x08006f08
 80068b4:	08006f0c 	.word	0x08006f0c

080068b8 <memset>:
 80068b8:	4402      	add	r2, r0
 80068ba:	4603      	mov	r3, r0
 80068bc:	4293      	cmp	r3, r2
 80068be:	d100      	bne.n	80068c2 <memset+0xa>
 80068c0:	4770      	bx	lr
 80068c2:	f803 1b01 	strb.w	r1, [r3], #1
 80068c6:	e7f9      	b.n	80068bc <memset+0x4>

080068c8 <atan>:
 80068c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	ec55 4b10 	vmov	r4, r5, d0
 80068d0:	4bc3      	ldr	r3, [pc, #780]	; (8006be0 <atan+0x318>)
 80068d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80068d6:	429e      	cmp	r6, r3
 80068d8:	46ab      	mov	fp, r5
 80068da:	dd18      	ble.n	800690e <atan+0x46>
 80068dc:	4bc1      	ldr	r3, [pc, #772]	; (8006be4 <atan+0x31c>)
 80068de:	429e      	cmp	r6, r3
 80068e0:	dc01      	bgt.n	80068e6 <atan+0x1e>
 80068e2:	d109      	bne.n	80068f8 <atan+0x30>
 80068e4:	b144      	cbz	r4, 80068f8 <atan+0x30>
 80068e6:	4622      	mov	r2, r4
 80068e8:	462b      	mov	r3, r5
 80068ea:	4620      	mov	r0, r4
 80068ec:	4629      	mov	r1, r5
 80068ee:	f7f9 fc79 	bl	80001e4 <__adddf3>
 80068f2:	4604      	mov	r4, r0
 80068f4:	460d      	mov	r5, r1
 80068f6:	e006      	b.n	8006906 <atan+0x3e>
 80068f8:	f1bb 0f00 	cmp.w	fp, #0
 80068fc:	f300 8131 	bgt.w	8006b62 <atan+0x29a>
 8006900:	a59b      	add	r5, pc, #620	; (adr r5, 8006b70 <atan+0x2a8>)
 8006902:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006906:	ec45 4b10 	vmov	d0, r4, r5
 800690a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690e:	4bb6      	ldr	r3, [pc, #728]	; (8006be8 <atan+0x320>)
 8006910:	429e      	cmp	r6, r3
 8006912:	dc14      	bgt.n	800693e <atan+0x76>
 8006914:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006918:	429e      	cmp	r6, r3
 800691a:	dc0d      	bgt.n	8006938 <atan+0x70>
 800691c:	a396      	add	r3, pc, #600	; (adr r3, 8006b78 <atan+0x2b0>)
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	ee10 0a10 	vmov	r0, s0
 8006926:	4629      	mov	r1, r5
 8006928:	f7f9 fc5c 	bl	80001e4 <__adddf3>
 800692c:	4baf      	ldr	r3, [pc, #700]	; (8006bec <atan+0x324>)
 800692e:	2200      	movs	r2, #0
 8006930:	f7fa f89e 	bl	8000a70 <__aeabi_dcmpgt>
 8006934:	2800      	cmp	r0, #0
 8006936:	d1e6      	bne.n	8006906 <atan+0x3e>
 8006938:	f04f 3aff 	mov.w	sl, #4294967295
 800693c:	e02b      	b.n	8006996 <atan+0xce>
 800693e:	f000 f963 	bl	8006c08 <fabs>
 8006942:	4bab      	ldr	r3, [pc, #684]	; (8006bf0 <atan+0x328>)
 8006944:	429e      	cmp	r6, r3
 8006946:	ec55 4b10 	vmov	r4, r5, d0
 800694a:	f300 80bf 	bgt.w	8006acc <atan+0x204>
 800694e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006952:	429e      	cmp	r6, r3
 8006954:	f300 80a0 	bgt.w	8006a98 <atan+0x1d0>
 8006958:	ee10 2a10 	vmov	r2, s0
 800695c:	ee10 0a10 	vmov	r0, s0
 8006960:	462b      	mov	r3, r5
 8006962:	4629      	mov	r1, r5
 8006964:	f7f9 fc3e 	bl	80001e4 <__adddf3>
 8006968:	4ba0      	ldr	r3, [pc, #640]	; (8006bec <atan+0x324>)
 800696a:	2200      	movs	r2, #0
 800696c:	f7f9 fc38 	bl	80001e0 <__aeabi_dsub>
 8006970:	2200      	movs	r2, #0
 8006972:	4606      	mov	r6, r0
 8006974:	460f      	mov	r7, r1
 8006976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800697a:	4620      	mov	r0, r4
 800697c:	4629      	mov	r1, r5
 800697e:	f7f9 fc31 	bl	80001e4 <__adddf3>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4630      	mov	r0, r6
 8006988:	4639      	mov	r1, r7
 800698a:	f7f9 ff0b 	bl	80007a4 <__aeabi_ddiv>
 800698e:	f04f 0a00 	mov.w	sl, #0
 8006992:	4604      	mov	r4, r0
 8006994:	460d      	mov	r5, r1
 8006996:	4622      	mov	r2, r4
 8006998:	462b      	mov	r3, r5
 800699a:	4620      	mov	r0, r4
 800699c:	4629      	mov	r1, r5
 800699e:	f7f9 fdd7 	bl	8000550 <__aeabi_dmul>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4680      	mov	r8, r0
 80069a8:	4689      	mov	r9, r1
 80069aa:	f7f9 fdd1 	bl	8000550 <__aeabi_dmul>
 80069ae:	a374      	add	r3, pc, #464	; (adr r3, 8006b80 <atan+0x2b8>)
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	4606      	mov	r6, r0
 80069b6:	460f      	mov	r7, r1
 80069b8:	f7f9 fdca 	bl	8000550 <__aeabi_dmul>
 80069bc:	a372      	add	r3, pc, #456	; (adr r3, 8006b88 <atan+0x2c0>)
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	f7f9 fc0f 	bl	80001e4 <__adddf3>
 80069c6:	4632      	mov	r2, r6
 80069c8:	463b      	mov	r3, r7
 80069ca:	f7f9 fdc1 	bl	8000550 <__aeabi_dmul>
 80069ce:	a370      	add	r3, pc, #448	; (adr r3, 8006b90 <atan+0x2c8>)
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f7f9 fc06 	bl	80001e4 <__adddf3>
 80069d8:	4632      	mov	r2, r6
 80069da:	463b      	mov	r3, r7
 80069dc:	f7f9 fdb8 	bl	8000550 <__aeabi_dmul>
 80069e0:	a36d      	add	r3, pc, #436	; (adr r3, 8006b98 <atan+0x2d0>)
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f7f9 fbfd 	bl	80001e4 <__adddf3>
 80069ea:	4632      	mov	r2, r6
 80069ec:	463b      	mov	r3, r7
 80069ee:	f7f9 fdaf 	bl	8000550 <__aeabi_dmul>
 80069f2:	a36b      	add	r3, pc, #428	; (adr r3, 8006ba0 <atan+0x2d8>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f7f9 fbf4 	bl	80001e4 <__adddf3>
 80069fc:	4632      	mov	r2, r6
 80069fe:	463b      	mov	r3, r7
 8006a00:	f7f9 fda6 	bl	8000550 <__aeabi_dmul>
 8006a04:	a368      	add	r3, pc, #416	; (adr r3, 8006ba8 <atan+0x2e0>)
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	f7f9 fbeb 	bl	80001e4 <__adddf3>
 8006a0e:	4642      	mov	r2, r8
 8006a10:	464b      	mov	r3, r9
 8006a12:	f7f9 fd9d 	bl	8000550 <__aeabi_dmul>
 8006a16:	a366      	add	r3, pc, #408	; (adr r3, 8006bb0 <atan+0x2e8>)
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	4689      	mov	r9, r1
 8006a20:	4630      	mov	r0, r6
 8006a22:	4639      	mov	r1, r7
 8006a24:	f7f9 fd94 	bl	8000550 <__aeabi_dmul>
 8006a28:	a363      	add	r3, pc, #396	; (adr r3, 8006bb8 <atan+0x2f0>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f7f9 fbd7 	bl	80001e0 <__aeabi_dsub>
 8006a32:	4632      	mov	r2, r6
 8006a34:	463b      	mov	r3, r7
 8006a36:	f7f9 fd8b 	bl	8000550 <__aeabi_dmul>
 8006a3a:	a361      	add	r3, pc, #388	; (adr r3, 8006bc0 <atan+0x2f8>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 fbce 	bl	80001e0 <__aeabi_dsub>
 8006a44:	4632      	mov	r2, r6
 8006a46:	463b      	mov	r3, r7
 8006a48:	f7f9 fd82 	bl	8000550 <__aeabi_dmul>
 8006a4c:	a35e      	add	r3, pc, #376	; (adr r3, 8006bc8 <atan+0x300>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f7f9 fbc5 	bl	80001e0 <__aeabi_dsub>
 8006a56:	4632      	mov	r2, r6
 8006a58:	463b      	mov	r3, r7
 8006a5a:	f7f9 fd79 	bl	8000550 <__aeabi_dmul>
 8006a5e:	a35c      	add	r3, pc, #368	; (adr r3, 8006bd0 <atan+0x308>)
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f7f9 fbbc 	bl	80001e0 <__aeabi_dsub>
 8006a68:	4632      	mov	r2, r6
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	f7f9 fd70 	bl	8000550 <__aeabi_dmul>
 8006a70:	4602      	mov	r2, r0
 8006a72:	460b      	mov	r3, r1
 8006a74:	4640      	mov	r0, r8
 8006a76:	4649      	mov	r1, r9
 8006a78:	f7f9 fbb4 	bl	80001e4 <__adddf3>
 8006a7c:	4622      	mov	r2, r4
 8006a7e:	462b      	mov	r3, r5
 8006a80:	f7f9 fd66 	bl	8000550 <__aeabi_dmul>
 8006a84:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	d14b      	bne.n	8006b26 <atan+0x25e>
 8006a8e:	4620      	mov	r0, r4
 8006a90:	4629      	mov	r1, r5
 8006a92:	f7f9 fba5 	bl	80001e0 <__aeabi_dsub>
 8006a96:	e72c      	b.n	80068f2 <atan+0x2a>
 8006a98:	ee10 0a10 	vmov	r0, s0
 8006a9c:	4b53      	ldr	r3, [pc, #332]	; (8006bec <atan+0x324>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f7f9 fb9d 	bl	80001e0 <__aeabi_dsub>
 8006aa6:	4b51      	ldr	r3, [pc, #324]	; (8006bec <atan+0x324>)
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	460f      	mov	r7, r1
 8006aac:	2200      	movs	r2, #0
 8006aae:	4620      	mov	r0, r4
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	f7f9 fb97 	bl	80001e4 <__adddf3>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4630      	mov	r0, r6
 8006abc:	4639      	mov	r1, r7
 8006abe:	f7f9 fe71 	bl	80007a4 <__aeabi_ddiv>
 8006ac2:	f04f 0a01 	mov.w	sl, #1
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	460d      	mov	r5, r1
 8006aca:	e764      	b.n	8006996 <atan+0xce>
 8006acc:	4b49      	ldr	r3, [pc, #292]	; (8006bf4 <atan+0x32c>)
 8006ace:	429e      	cmp	r6, r3
 8006ad0:	da1d      	bge.n	8006b0e <atan+0x246>
 8006ad2:	ee10 0a10 	vmov	r0, s0
 8006ad6:	4b48      	ldr	r3, [pc, #288]	; (8006bf8 <atan+0x330>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4629      	mov	r1, r5
 8006adc:	f7f9 fb80 	bl	80001e0 <__aeabi_dsub>
 8006ae0:	4b45      	ldr	r3, [pc, #276]	; (8006bf8 <atan+0x330>)
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460f      	mov	r7, r1
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4620      	mov	r0, r4
 8006aea:	4629      	mov	r1, r5
 8006aec:	f7f9 fd30 	bl	8000550 <__aeabi_dmul>
 8006af0:	4b3e      	ldr	r3, [pc, #248]	; (8006bec <atan+0x324>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	f7f9 fb76 	bl	80001e4 <__adddf3>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4630      	mov	r0, r6
 8006afe:	4639      	mov	r1, r7
 8006b00:	f7f9 fe50 	bl	80007a4 <__aeabi_ddiv>
 8006b04:	f04f 0a02 	mov.w	sl, #2
 8006b08:	4604      	mov	r4, r0
 8006b0a:	460d      	mov	r5, r1
 8006b0c:	e743      	b.n	8006996 <atan+0xce>
 8006b0e:	462b      	mov	r3, r5
 8006b10:	ee10 2a10 	vmov	r2, s0
 8006b14:	4939      	ldr	r1, [pc, #228]	; (8006bfc <atan+0x334>)
 8006b16:	2000      	movs	r0, #0
 8006b18:	f7f9 fe44 	bl	80007a4 <__aeabi_ddiv>
 8006b1c:	f04f 0a03 	mov.w	sl, #3
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	e737      	b.n	8006996 <atan+0xce>
 8006b26:	4b36      	ldr	r3, [pc, #216]	; (8006c00 <atan+0x338>)
 8006b28:	4e36      	ldr	r6, [pc, #216]	; (8006c04 <atan+0x33c>)
 8006b2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006b2e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006b32:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b36:	f7f9 fb53 	bl	80001e0 <__aeabi_dsub>
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	462b      	mov	r3, r5
 8006b3e:	f7f9 fb4f 	bl	80001e0 <__aeabi_dsub>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006b4a:	f7f9 fb49 	bl	80001e0 <__aeabi_dsub>
 8006b4e:	f1bb 0f00 	cmp.w	fp, #0
 8006b52:	4604      	mov	r4, r0
 8006b54:	460d      	mov	r5, r1
 8006b56:	f6bf aed6 	bge.w	8006906 <atan+0x3e>
 8006b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b5e:	461d      	mov	r5, r3
 8006b60:	e6d1      	b.n	8006906 <atan+0x3e>
 8006b62:	a51d      	add	r5, pc, #116	; (adr r5, 8006bd8 <atan+0x310>)
 8006b64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b68:	e6cd      	b.n	8006906 <atan+0x3e>
 8006b6a:	bf00      	nop
 8006b6c:	f3af 8000 	nop.w
 8006b70:	54442d18 	.word	0x54442d18
 8006b74:	bff921fb 	.word	0xbff921fb
 8006b78:	8800759c 	.word	0x8800759c
 8006b7c:	7e37e43c 	.word	0x7e37e43c
 8006b80:	e322da11 	.word	0xe322da11
 8006b84:	3f90ad3a 	.word	0x3f90ad3a
 8006b88:	24760deb 	.word	0x24760deb
 8006b8c:	3fa97b4b 	.word	0x3fa97b4b
 8006b90:	a0d03d51 	.word	0xa0d03d51
 8006b94:	3fb10d66 	.word	0x3fb10d66
 8006b98:	c54c206e 	.word	0xc54c206e
 8006b9c:	3fb745cd 	.word	0x3fb745cd
 8006ba0:	920083ff 	.word	0x920083ff
 8006ba4:	3fc24924 	.word	0x3fc24924
 8006ba8:	5555550d 	.word	0x5555550d
 8006bac:	3fd55555 	.word	0x3fd55555
 8006bb0:	2c6a6c2f 	.word	0x2c6a6c2f
 8006bb4:	bfa2b444 	.word	0xbfa2b444
 8006bb8:	52defd9a 	.word	0x52defd9a
 8006bbc:	3fadde2d 	.word	0x3fadde2d
 8006bc0:	af749a6d 	.word	0xaf749a6d
 8006bc4:	3fb3b0f2 	.word	0x3fb3b0f2
 8006bc8:	fe231671 	.word	0xfe231671
 8006bcc:	3fbc71c6 	.word	0x3fbc71c6
 8006bd0:	9998ebc4 	.word	0x9998ebc4
 8006bd4:	3fc99999 	.word	0x3fc99999
 8006bd8:	54442d18 	.word	0x54442d18
 8006bdc:	3ff921fb 	.word	0x3ff921fb
 8006be0:	440fffff 	.word	0x440fffff
 8006be4:	7ff00000 	.word	0x7ff00000
 8006be8:	3fdbffff 	.word	0x3fdbffff
 8006bec:	3ff00000 	.word	0x3ff00000
 8006bf0:	3ff2ffff 	.word	0x3ff2ffff
 8006bf4:	40038000 	.word	0x40038000
 8006bf8:	3ff80000 	.word	0x3ff80000
 8006bfc:	bff00000 	.word	0xbff00000
 8006c00:	08006ed8 	.word	0x08006ed8
 8006c04:	08006eb8 	.word	0x08006eb8

08006c08 <fabs>:
 8006c08:	ec51 0b10 	vmov	r0, r1, d0
 8006c0c:	ee10 2a10 	vmov	r2, s0
 8006c10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c14:	ec43 2b10 	vmov	d0, r2, r3
 8006c18:	4770      	bx	lr
	...

08006c1c <lrintf>:
 8006c1c:	ee10 3a10 	vmov	r3, s0
 8006c20:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006c24:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8006c28:	281e      	cmp	r0, #30
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	dc2e      	bgt.n	8006c8c <lrintf+0x70>
 8006c2e:	1c41      	adds	r1, r0, #1
 8006c30:	da02      	bge.n	8006c38 <lrintf+0x1c>
 8006c32:	2000      	movs	r0, #0
 8006c34:	b002      	add	sp, #8
 8006c36:	4770      	bx	lr
 8006c38:	2816      	cmp	r0, #22
 8006c3a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8006c3e:	dd09      	ble.n	8006c54 <lrintf+0x38>
 8006c40:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006c48:	3a96      	subs	r2, #150	; 0x96
 8006c4a:	4090      	lsls	r0, r2
 8006c4c:	2900      	cmp	r1, #0
 8006c4e:	d0f1      	beq.n	8006c34 <lrintf+0x18>
 8006c50:	4240      	negs	r0, r0
 8006c52:	e7ef      	b.n	8006c34 <lrintf+0x18>
 8006c54:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <lrintf+0x7c>)
 8006c56:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006c5a:	ed93 7a00 	vldr	s14, [r3]
 8006c5e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8006c62:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006c66:	eddd 7a01 	vldr	s15, [sp, #4]
 8006c6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c6e:	ee17 3a90 	vmov	r3, s15
 8006c72:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006c76:	d0dc      	beq.n	8006c32 <lrintf+0x16>
 8006c78:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006c7c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8006c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006c84:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006c88:	40d8      	lsrs	r0, r3
 8006c8a:	e7df      	b.n	8006c4c <lrintf+0x30>
 8006c8c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006c90:	ee17 0a90 	vmov	r0, s15
 8006c94:	e7ce      	b.n	8006c34 <lrintf+0x18>
 8006c96:	bf00      	nop
 8006c98:	08006ef8 	.word	0x08006ef8

08006c9c <sqrt>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	ed2d 8b02 	vpush	{d8}
 8006ca2:	ec55 4b10 	vmov	r4, r5, d0
 8006ca6:	f000 f82d 	bl	8006d04 <__ieee754_sqrt>
 8006caa:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <sqrt+0x64>)
 8006cac:	eeb0 8a40 	vmov.f32	s16, s0
 8006cb0:	eef0 8a60 	vmov.f32	s17, s1
 8006cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	d019      	beq.n	8006cf0 <sqrt+0x54>
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	f7f9 fede 	bl	8000a84 <__aeabi_dcmpun>
 8006cc8:	b990      	cbnz	r0, 8006cf0 <sqrt+0x54>
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7f9 feaf 	bl	8000a34 <__aeabi_dcmplt>
 8006cd6:	b158      	cbz	r0, 8006cf0 <sqrt+0x54>
 8006cd8:	f000 f8c8 	bl	8006e6c <__errno>
 8006cdc:	2321      	movs	r3, #33	; 0x21
 8006cde:	6003      	str	r3, [r0, #0]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f7f9 fd5c 	bl	80007a4 <__aeabi_ddiv>
 8006cec:	ec41 0b18 	vmov	d8, r0, r1
 8006cf0:	eeb0 0a48 	vmov.f32	s0, s16
 8006cf4:	eef0 0a68 	vmov.f32	s1, s17
 8006cf8:	ecbd 8b02 	vpop	{d8}
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000070 	.word	0x20000070

08006d04 <__ieee754_sqrt>:
 8006d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d08:	ec55 4b10 	vmov	r4, r5, d0
 8006d0c:	4e56      	ldr	r6, [pc, #344]	; (8006e68 <__ieee754_sqrt+0x164>)
 8006d0e:	43ae      	bics	r6, r5
 8006d10:	ee10 0a10 	vmov	r0, s0
 8006d14:	ee10 3a10 	vmov	r3, s0
 8006d18:	4629      	mov	r1, r5
 8006d1a:	462a      	mov	r2, r5
 8006d1c:	d110      	bne.n	8006d40 <__ieee754_sqrt+0x3c>
 8006d1e:	ee10 2a10 	vmov	r2, s0
 8006d22:	462b      	mov	r3, r5
 8006d24:	f7f9 fc14 	bl	8000550 <__aeabi_dmul>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	4629      	mov	r1, r5
 8006d30:	f7f9 fa58 	bl	80001e4 <__adddf3>
 8006d34:	4604      	mov	r4, r0
 8006d36:	460d      	mov	r5, r1
 8006d38:	ec45 4b10 	vmov	d0, r4, r5
 8006d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d40:	2d00      	cmp	r5, #0
 8006d42:	dc10      	bgt.n	8006d66 <__ieee754_sqrt+0x62>
 8006d44:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006d48:	4330      	orrs	r0, r6
 8006d4a:	d0f5      	beq.n	8006d38 <__ieee754_sqrt+0x34>
 8006d4c:	b15d      	cbz	r5, 8006d66 <__ieee754_sqrt+0x62>
 8006d4e:	ee10 2a10 	vmov	r2, s0
 8006d52:	462b      	mov	r3, r5
 8006d54:	ee10 0a10 	vmov	r0, s0
 8006d58:	f7f9 fa42 	bl	80001e0 <__aeabi_dsub>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	f7f9 fd20 	bl	80007a4 <__aeabi_ddiv>
 8006d64:	e7e6      	b.n	8006d34 <__ieee754_sqrt+0x30>
 8006d66:	1509      	asrs	r1, r1, #20
 8006d68:	d076      	beq.n	8006e58 <__ieee754_sqrt+0x154>
 8006d6a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006d6e:	07ce      	lsls	r6, r1, #31
 8006d70:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006d74:	bf5e      	ittt	pl
 8006d76:	0fda      	lsrpl	r2, r3, #31
 8006d78:	005b      	lslpl	r3, r3, #1
 8006d7a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006d7e:	0fda      	lsrs	r2, r3, #31
 8006d80:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006d84:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006d88:	2000      	movs	r0, #0
 8006d8a:	106d      	asrs	r5, r5, #1
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	f04f 0e16 	mov.w	lr, #22
 8006d92:	4684      	mov	ip, r0
 8006d94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d98:	eb0c 0401 	add.w	r4, ip, r1
 8006d9c:	4294      	cmp	r4, r2
 8006d9e:	bfde      	ittt	le
 8006da0:	1b12      	suble	r2, r2, r4
 8006da2:	eb04 0c01 	addle.w	ip, r4, r1
 8006da6:	1840      	addle	r0, r0, r1
 8006da8:	0052      	lsls	r2, r2, #1
 8006daa:	f1be 0e01 	subs.w	lr, lr, #1
 8006dae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006db2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006db6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006dba:	d1ed      	bne.n	8006d98 <__ieee754_sqrt+0x94>
 8006dbc:	4671      	mov	r1, lr
 8006dbe:	2720      	movs	r7, #32
 8006dc0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006dc4:	4562      	cmp	r2, ip
 8006dc6:	eb04 060e 	add.w	r6, r4, lr
 8006dca:	dc02      	bgt.n	8006dd2 <__ieee754_sqrt+0xce>
 8006dcc:	d113      	bne.n	8006df6 <__ieee754_sqrt+0xf2>
 8006dce:	429e      	cmp	r6, r3
 8006dd0:	d811      	bhi.n	8006df6 <__ieee754_sqrt+0xf2>
 8006dd2:	2e00      	cmp	r6, #0
 8006dd4:	eb06 0e04 	add.w	lr, r6, r4
 8006dd8:	da43      	bge.n	8006e62 <__ieee754_sqrt+0x15e>
 8006dda:	f1be 0f00 	cmp.w	lr, #0
 8006dde:	db40      	blt.n	8006e62 <__ieee754_sqrt+0x15e>
 8006de0:	f10c 0801 	add.w	r8, ip, #1
 8006de4:	eba2 020c 	sub.w	r2, r2, ip
 8006de8:	429e      	cmp	r6, r3
 8006dea:	bf88      	it	hi
 8006dec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006df0:	1b9b      	subs	r3, r3, r6
 8006df2:	4421      	add	r1, r4
 8006df4:	46c4      	mov	ip, r8
 8006df6:	0052      	lsls	r2, r2, #1
 8006df8:	3f01      	subs	r7, #1
 8006dfa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006dfe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006e02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006e06:	d1dd      	bne.n	8006dc4 <__ieee754_sqrt+0xc0>
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	d006      	beq.n	8006e1a <__ieee754_sqrt+0x116>
 8006e0c:	1c4c      	adds	r4, r1, #1
 8006e0e:	bf13      	iteet	ne
 8006e10:	3101      	addne	r1, #1
 8006e12:	3001      	addeq	r0, #1
 8006e14:	4639      	moveq	r1, r7
 8006e16:	f021 0101 	bicne.w	r1, r1, #1
 8006e1a:	1043      	asrs	r3, r0, #1
 8006e1c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006e20:	0849      	lsrs	r1, r1, #1
 8006e22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006e26:	07c2      	lsls	r2, r0, #31
 8006e28:	bf48      	it	mi
 8006e2a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006e2e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006e32:	460c      	mov	r4, r1
 8006e34:	463d      	mov	r5, r7
 8006e36:	e77f      	b.n	8006d38 <__ieee754_sqrt+0x34>
 8006e38:	0ada      	lsrs	r2, r3, #11
 8006e3a:	3815      	subs	r0, #21
 8006e3c:	055b      	lsls	r3, r3, #21
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	d0fa      	beq.n	8006e38 <__ieee754_sqrt+0x134>
 8006e42:	02d7      	lsls	r7, r2, #11
 8006e44:	d50a      	bpl.n	8006e5c <__ieee754_sqrt+0x158>
 8006e46:	f1c1 0420 	rsb	r4, r1, #32
 8006e4a:	fa23 f404 	lsr.w	r4, r3, r4
 8006e4e:	1e4d      	subs	r5, r1, #1
 8006e50:	408b      	lsls	r3, r1
 8006e52:	4322      	orrs	r2, r4
 8006e54:	1b41      	subs	r1, r0, r5
 8006e56:	e788      	b.n	8006d6a <__ieee754_sqrt+0x66>
 8006e58:	4608      	mov	r0, r1
 8006e5a:	e7f0      	b.n	8006e3e <__ieee754_sqrt+0x13a>
 8006e5c:	0052      	lsls	r2, r2, #1
 8006e5e:	3101      	adds	r1, #1
 8006e60:	e7ef      	b.n	8006e42 <__ieee754_sqrt+0x13e>
 8006e62:	46e0      	mov	r8, ip
 8006e64:	e7be      	b.n	8006de4 <__ieee754_sqrt+0xe0>
 8006e66:	bf00      	nop
 8006e68:	7ff00000 	.word	0x7ff00000

08006e6c <__errno>:
 8006e6c:	4b01      	ldr	r3, [pc, #4]	; (8006e74 <__errno+0x8>)
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	2000000c 	.word	0x2000000c

08006e78 <_init>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr

08006e84 <_fini>:
 8006e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e86:	bf00      	nop
 8006e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8a:	bc08      	pop	{r3}
 8006e8c:	469e      	mov	lr, r3
 8006e8e:	4770      	bx	lr
