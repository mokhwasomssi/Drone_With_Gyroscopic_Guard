
quadcopter_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007490  08007490  00017490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007500  08007500  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007508  08007508  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000078  08007584  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08007584  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6d9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e47  00000000  00000000  0003a77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  0003e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d61  00000000  00000000  00040bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c5c  00000000  00000000  0005a951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000928ac  00000000  00000000  000725ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104e59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005238  00000000  00000000  00104eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007478 	.word	0x08007478

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08007478 	.word	0x08007478

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b96e 	b.w	8000df4 <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9d08      	ldr	r5, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	468c      	mov	ip, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f040 8083 	bne.w	8000c46 <__udivmoddi4+0x116>
 8000b40:	428a      	cmp	r2, r1
 8000b42:	4617      	mov	r7, r2
 8000b44:	d947      	bls.n	8000bd6 <__udivmoddi4+0xa6>
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	b142      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4c:	f1c2 0020 	rsb	r0, r2, #32
 8000b50:	fa24 f000 	lsr.w	r0, r4, r0
 8000b54:	4091      	lsls	r1, r2
 8000b56:	4097      	lsls	r7, r2
 8000b58:	ea40 0c01 	orr.w	ip, r0, r1
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbbc f6f8 	udiv	r6, ip, r8
 8000b68:	fa1f fe87 	uxth.w	lr, r7
 8000b6c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b74:	fb06 f10e 	mul.w	r1, r6, lr
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 8119 	bcs.w	8000db8 <__udivmoddi4+0x288>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8116 	bls.w	8000db8 <__udivmoddi4+0x288>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	443b      	add	r3, r7
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba4:	45a6      	cmp	lr, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8105 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000bb2:	45a6      	cmp	lr, r4
 8000bb4:	f240 8102 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	443c      	add	r4, r7
 8000bbc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc0:	eba4 040e 	sub.w	r4, r4, lr
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	b902      	cbnz	r2, 8000bda <__udivmoddi4+0xaa>
 8000bd8:	deff      	udf	#255	; 0xff
 8000bda:	fab2 f282 	clz	r2, r2
 8000bde:	2a00      	cmp	r2, #0
 8000be0:	d150      	bne.n	8000c84 <__udivmoddi4+0x154>
 8000be2:	1bcb      	subs	r3, r1, r7
 8000be4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be8:	fa1f f887 	uxth.w	r8, r7
 8000bec:	2601      	movs	r6, #1
 8000bee:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf2:	0c21      	lsrs	r1, r4, #16
 8000bf4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bfc:	fb08 f30c 	mul.w	r3, r8, ip
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d907      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000c04:	1879      	adds	r1, r7, r1
 8000c06:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0xe2>
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	f200 80e9 	bhi.w	8000de4 <__udivmoddi4+0x2b4>
 8000c12:	4684      	mov	ip, r0
 8000c14:	1ac9      	subs	r1, r1, r3
 8000c16:	b2a3      	uxth	r3, r4
 8000c18:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c1c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c20:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c24:	fb08 f800 	mul.w	r8, r8, r0
 8000c28:	45a0      	cmp	r8, r4
 8000c2a:	d907      	bls.n	8000c3c <__udivmoddi4+0x10c>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x10a>
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	f200 80d9 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	eba4 0408 	sub.w	r4, r4, r8
 8000c40:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c44:	e7bf      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0x12e>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	f000 80b1 	beq.w	8000db2 <__udivmoddi4+0x282>
 8000c50:	2600      	movs	r6, #0
 8000c52:	e9c5 0100 	strd	r0, r1, [r5]
 8000c56:	4630      	mov	r0, r6
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	fab3 f683 	clz	r6, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d14a      	bne.n	8000cfc <__udivmoddi4+0x1cc>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0x140>
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	f200 80b8 	bhi.w	8000de0 <__udivmoddi4+0x2b0>
 8000c70:	1a84      	subs	r4, r0, r2
 8000c72:	eb61 0103 	sbc.w	r1, r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	468c      	mov	ip, r1
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0a8      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c7e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c82:	e7a5      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c84:	f1c2 0320 	rsb	r3, r2, #32
 8000c88:	fa20 f603 	lsr.w	r6, r0, r3
 8000c8c:	4097      	lsls	r7, r2
 8000c8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c92:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c96:	40d9      	lsrs	r1, r3
 8000c98:	4330      	orrs	r0, r6
 8000c9a:	0c03      	lsrs	r3, r0, #16
 8000c9c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f108 	mul.w	r1, r6, r8
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x19c>
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cbe:	f080 808d 	bcs.w	8000ddc <__udivmoddi4+0x2ac>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 808a 	bls.w	8000ddc <__udivmoddi4+0x2ac>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	443b      	add	r3, r7
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b281      	uxth	r1, r0
 8000cd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cdc:	fb00 f308 	mul.w	r3, r0, r8
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x1c4>
 8000ce4:	1879      	adds	r1, r7, r1
 8000ce6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cea:	d273      	bcs.n	8000dd4 <__udivmoddi4+0x2a4>
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d971      	bls.n	8000dd4 <__udivmoddi4+0x2a4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4439      	add	r1, r7
 8000cf4:	1acb      	subs	r3, r1, r3
 8000cf6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfa:	e778      	b.n	8000bee <__udivmoddi4+0xbe>
 8000cfc:	f1c6 0c20 	rsb	ip, r6, #32
 8000d00:	fa03 f406 	lsl.w	r4, r3, r6
 8000d04:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d08:	431c      	orrs	r4, r3
 8000d0a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d12:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d16:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	0c3b      	lsrs	r3, r7, #16
 8000d1e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d22:	fa1f f884 	uxth.w	r8, r4
 8000d26:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d2e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d32:	458a      	cmp	sl, r1
 8000d34:	fa02 f206 	lsl.w	r2, r2, r6
 8000d38:	fa00 f306 	lsl.w	r3, r0, r6
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x220>
 8000d3e:	1861      	adds	r1, r4, r1
 8000d40:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d44:	d248      	bcs.n	8000dd8 <__udivmoddi4+0x2a8>
 8000d46:	458a      	cmp	sl, r1
 8000d48:	d946      	bls.n	8000dd8 <__udivmoddi4+0x2a8>
 8000d4a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d4e:	4421      	add	r1, r4
 8000d50:	eba1 010a 	sub.w	r1, r1, sl
 8000d54:	b2bf      	uxth	r7, r7
 8000d56:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d5e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d62:	fb00 f808 	mul.w	r8, r0, r8
 8000d66:	45b8      	cmp	r8, r7
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x24a>
 8000d6a:	19e7      	adds	r7, r4, r7
 8000d6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d70:	d22e      	bcs.n	8000dd0 <__udivmoddi4+0x2a0>
 8000d72:	45b8      	cmp	r8, r7
 8000d74:	d92c      	bls.n	8000dd0 <__udivmoddi4+0x2a0>
 8000d76:	3802      	subs	r0, #2
 8000d78:	4427      	add	r7, r4
 8000d7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d7e:	eba7 0708 	sub.w	r7, r7, r8
 8000d82:	fba0 8902 	umull	r8, r9, r0, r2
 8000d86:	454f      	cmp	r7, r9
 8000d88:	46c6      	mov	lr, r8
 8000d8a:	4649      	mov	r1, r9
 8000d8c:	d31a      	bcc.n	8000dc4 <__udivmoddi4+0x294>
 8000d8e:	d017      	beq.n	8000dc0 <__udivmoddi4+0x290>
 8000d90:	b15d      	cbz	r5, 8000daa <__udivmoddi4+0x27a>
 8000d92:	ebb3 020e 	subs.w	r2, r3, lr
 8000d96:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d9e:	40f2      	lsrs	r2, r6
 8000da0:	ea4c 0202 	orr.w	r2, ip, r2
 8000da4:	40f7      	lsrs	r7, r6
 8000da6:	e9c5 2700 	strd	r2, r7, [r5]
 8000daa:	2600      	movs	r6, #0
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	462e      	mov	r6, r5
 8000db4:	4628      	mov	r0, r5
 8000db6:	e70b      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000db8:	4606      	mov	r6, r0
 8000dba:	e6e9      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fd      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc0:	4543      	cmp	r3, r8
 8000dc2:	d2e5      	bcs.n	8000d90 <__udivmoddi4+0x260>
 8000dc4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dcc:	3801      	subs	r0, #1
 8000dce:	e7df      	b.n	8000d90 <__udivmoddi4+0x260>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e7d2      	b.n	8000d7a <__udivmoddi4+0x24a>
 8000dd4:	4660      	mov	r0, ip
 8000dd6:	e78d      	b.n	8000cf4 <__udivmoddi4+0x1c4>
 8000dd8:	4681      	mov	r9, r0
 8000dda:	e7b9      	b.n	8000d50 <__udivmoddi4+0x220>
 8000ddc:	4666      	mov	r6, ip
 8000dde:	e775      	b.n	8000ccc <__udivmoddi4+0x19c>
 8000de0:	4630      	mov	r0, r6
 8000de2:	e74a      	b.n	8000c7a <__udivmoddi4+0x14a>
 8000de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de8:	4439      	add	r1, r7
 8000dea:	e713      	b.n	8000c14 <__udivmoddi4+0xe4>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	e724      	b.n	8000c3c <__udivmoddi4+0x10c>
 8000df2:	bf00      	nop

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <MX_DMA_Init+0x98>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	200c      	movs	r0, #12
 8000e3c:	f001 f883 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e40:	200c      	movs	r0, #12
 8000e42:	f001 f89c 	bl	8001f7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200e      	movs	r0, #14
 8000e4c:	f001 f87b 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e50:	200e      	movs	r0, #14
 8000e52:	f001 f894 	bl	8001f7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f001 f873 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e60:	200f      	movs	r0, #15
 8000e62:	f001 f88c 	bl	8001f7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2010      	movs	r0, #16
 8000e6c:	f001 f86b 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e70:	2010      	movs	r0, #16
 8000e72:	f001 f884 	bl	8001f7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	203a      	movs	r0, #58	; 0x3a
 8000e7c:	f001 f863 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e80:	203a      	movs	r0, #58	; 0x3a
 8000e82:	f001 f87c 	bl	8001f7e <HAL_NVIC_EnableIRQ>

}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b64      	ldr	r3, [pc, #400]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a63      	ldr	r2, [pc, #396]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b61      	ldr	r3, [pc, #388]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b5d      	ldr	r3, [pc, #372]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a5c      	ldr	r2, [pc, #368]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4b56      	ldr	r3, [pc, #344]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a55      	ldr	r2, [pc, #340]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b53      	ldr	r3, [pc, #332]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <MX_GPIO_Init+0x1ac>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f20:	4848      	ldr	r0, [pc, #288]	; (8001044 <MX_GPIO_Init+0x1b0>)
 8000f22:	f001 fd3b 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2110      	movs	r1, #16
 8000f2a:	4847      	ldr	r0, [pc, #284]	; (8001048 <MX_GPIO_Init+0x1b4>)
 8000f2c:	f001 fd36 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|CE_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f241 0106 	movw	r1, #4102	; 0x1006
 8000f36:	4845      	ldr	r0, [pc, #276]	; (800104c <MX_GPIO_Init+0x1b8>)
 8000f38:	f001 fd30 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	4842      	ldr	r0, [pc, #264]	; (800104c <MX_GPIO_Init+0x1b8>)
 8000f44:	f001 fd2a 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4e:	483e      	ldr	r0, [pc, #248]	; (8001048 <MX_GPIO_Init+0x1b4>)
 8000f50:	f001 fd24 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4835      	ldr	r0, [pc, #212]	; (8001044 <MX_GPIO_Init+0x1b0>)
 8000f6e:	f001 fb91 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000f72:	2310      	movs	r3, #16
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	482f      	ldr	r0, [pc, #188]	; (8001048 <MX_GPIO_Init+0x1b4>)
 8000f8a:	f001 fb83 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IRQ_Pin;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <MX_GPIO_Init+0x1bc>)
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	482a      	ldr	r0, [pc, #168]	; (800104c <MX_GPIO_Init+0x1b8>)
 8000fa2:	f001 fb77 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4823      	ldr	r0, [pc, #140]	; (800104c <MX_GPIO_Init+0x1b8>)
 8000fbe:	f001 fb69 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|SPI2_CSN_Pin;
 8000fc2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481c      	ldr	r0, [pc, #112]	; (800104c <MX_GPIO_Init+0x1b8>)
 8000fdc:	f001 fb5a 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_GPIO_Init+0x1bc>)
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_GPIO_Init+0x1b4>)
 8000ff6:	f001 fb4d 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_GPIO_Init+0x1b4>)
 8001014:	f001 fb3e 	bl	8002694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2006      	movs	r0, #6
 800101e:	f000 ff92 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001022:	2006      	movs	r0, #6
 8001024:	f000 ffab 	bl	8001f7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2017      	movs	r0, #23
 800102e:	f000 ff8a 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001032:	2017      	movs	r0, #23
 8001034:	f000 ffa3 	bl	8001f7e <HAL_NVIC_EnableIRQ>

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020800 	.word	0x40020800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020400 	.word	0x40020400
 8001050:	10210000 	.word	0x10210000

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f000 fe04 	bl	8001c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f836 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f7ff ff18 	bl	8000e94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001064:	f7ff fec8 	bl	8000df8 <MX_DMA_Init>
  MX_SPI1_Init();
 8001068:	f000 f89e 	bl	80011a8 <MX_SPI1_Init>
  MX_TIM2_Init();
 800106c:	f000 fa2c 	bl	80014c8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001070:	f000 fa8c 	bl	800158c <MX_TIM5_Init>
  MX_TIM11_Init();
 8001074:	f000 fb12 	bl	800169c <MX_TIM11_Init>
  MX_SPI2_Init();
 8001078:	f000 f8cc 	bl	8001214 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800107c:	f000 fd02 	bl	8001a84 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8001080:	f000 fae8 	bl	8001654 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  //while(!is_quadcopter_ready());

  timer_init();
 8001084:	f005 fec8 	bl	8006e18 <timer_init>

  rc_init();
 8001088:	f005 fd80 	bl	8006b8c <rc_init>
  imu_init();
 800108c:	f005 f9d8 	bl	8006440 <imu_init>
  motor_init();
 8001090:	f005 fa7e 	bl	8006590 <motor_init>
  telemetry_init();
 8001094:	f005 fe51 	bl	8006d3a <telemetry_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(imu_ready) // run control loop depending on imu sampling time
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <main+0x70>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00d      	beq.n	80010bc <main+0x68>
	  {				// ex) imu sampling time = 1.125khz, control loop cycle = 1.125khz

		led_green_on(); //control loop indicator
 80010a0:	f005 fa5e 	bl	8006560 <led_green_on>

		rc_update();
 80010a4:	f005 fd78 	bl	8006b98 <rc_update>
		imu_update();
 80010a8:	f005 f9d2 	bl	8006450 <imu_update>
		motor_update(my_motor_value);
 80010ac:	4806      	ldr	r0, [pc, #24]	; (80010c8 <main+0x74>)
 80010ae:	f005 fa76 	bl	800659e <motor_update>
		telemetry_update();
 80010b2:	f005 fe4b 	bl	8006d4c <telemetry_update>


		imu_ready = false;
 80010b6:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <main+0x70>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
	  }

	  led_green_off(); //control loop indicator
 80010bc:	f005 fa5c 	bl	8006578 <led_green_off>
	  if(imu_ready) // run control loop depending on imu sampling time
 80010c0:	e7ea      	b.n	8001098 <main+0x44>
 80010c2:	bf00      	nop
 80010c4:	2000061c 	.word	0x2000061c
 80010c8:	20000094 	.word	0x20000094

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	; 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	2230      	movs	r2, #48	; 0x30
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f005 feea 	bl	8006eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <SystemClock_Config+0xc8>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	4a26      	ldr	r2, [pc, #152]	; (8001194 <SystemClock_Config+0xc8>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <SystemClock_Config+0xc8>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <SystemClock_Config+0xcc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a20      	ldr	r2, [pc, #128]	; (8001198 <SystemClock_Config+0xcc>)
 8001116:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <SystemClock_Config+0xcc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001128:	2301      	movs	r3, #1
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001132:	2302      	movs	r3, #2
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800113c:	230c      	movs	r3, #12
 800113e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001140:	2360      	movs	r3, #96	; 0x60
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001148:	2304      	movs	r3, #4
 800114a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fc55 	bl	8002a00 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800115c:	f000 f81e 	bl	800119c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2302      	movs	r3, #2
 8001166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2103      	movs	r1, #3
 800117c:	4618      	mov	r0, r3
 800117e:	f001 feb7 	bl	8002ef0 <HAL_RCC_ClockConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001188:	f000 f808 	bl	800119c <Error_Handler>
  }
}
 800118c:	bf00      	nop
 800118e:	3750      	adds	r7, #80	; 0x50
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800
 8001198:	40007000 	.word	0x40007000

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_SPI1_Init+0x64>)
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <MX_SPI1_Init+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_SPI1_Init+0x64>)
 80011b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_SPI1_Init+0x64>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_SPI1_Init+0x64>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_SPI1_Init+0x64>)
 80011d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_SPI1_Init+0x64>)
 80011dc:	2218      	movs	r2, #24
 80011de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_SPI1_Init+0x64>)
 80011f4:	220a      	movs	r2, #10
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_SPI1_Init+0x64>)
 80011fa:	f002 f849 	bl	8003290 <HAL_SPI_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001204:	f7ff ffca 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000025c 	.word	0x2000025c
 8001210:	40013000 	.word	0x40013000

08001214 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_SPI2_Init+0x64>)
 800121a:	4a18      	ldr	r2, [pc, #96]	; (800127c <MX_SPI2_Init+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_SPI2_Init+0x64>)
 8001220:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001224:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_SPI2_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_SPI2_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_SPI2_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_SPI2_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_SPI2_Init+0x64>)
 8001240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001244:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_SPI2_Init+0x64>)
 8001248:	2210      	movs	r2, #16
 800124a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_SPI2_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_SPI2_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <MX_SPI2_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_SPI2_Init+0x64>)
 8001260:	220a      	movs	r2, #10
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_SPI2_Init+0x64>)
 8001266:	f002 f813 	bl	8003290 <HAL_SPI_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001270:	f7ff ff94 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000204 	.word	0x20000204
 800127c:	40003800 	.word	0x40003800

08001280 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a32      	ldr	r2, [pc, #200]	; (8001368 <HAL_SPI_MspInit+0xe8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d12c      	bne.n	80012fc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <HAL_SPI_MspInit+0xec>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a30      	ldr	r2, [pc, #192]	; (800136c <HAL_SPI_MspInit+0xec>)
 80012ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_SPI_MspInit+0xec>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_SPI_MspInit+0xec>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a29      	ldr	r2, [pc, #164]	; (800136c <HAL_SPI_MspInit+0xec>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_SPI_MspInit+0xec>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012da:	23e0      	movs	r3, #224	; 0xe0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ea:	2305      	movs	r3, #5
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	481e      	ldr	r0, [pc, #120]	; (8001370 <HAL_SPI_MspInit+0xf0>)
 80012f6:	f001 f9cd 	bl	8002694 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012fa:	e031      	b.n	8001360 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <HAL_SPI_MspInit+0xf4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12c      	bne.n	8001360 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_SPI_MspInit+0xec>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_SPI_MspInit+0xec>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_SPI_MspInit+0xec>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_SPI_MspInit+0xec>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a10      	ldr	r2, [pc, #64]	; (800136c <HAL_SPI_MspInit+0xec>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_SPI_MspInit+0xec>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 800133e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001350:	2305      	movs	r3, #5
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <HAL_SPI_MspInit+0xf8>)
 800135c:	f001 f99a 	bl	8002694 <HAL_GPIO_Init>
}
 8001360:	bf00      	nop
 8001362:	3730      	adds	r7, #48	; 0x30
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40013000 	.word	0x40013000
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000
 8001374:	40003800 	.word	0x40003800
 8001378:	40020400 	.word	0x40020400

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_MspInit+0x4c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 fc76 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001424:	2001      	movs	r0, #1
 8001426:	f001 fad3 	bl	80029d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <DMA1_Stream1_IRQHandler+0x10>)
 8001436:	f000 fec3 	bl	80021c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */


  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200004ac 	.word	0x200004ac

08001444 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <DMA1_Stream3_IRQHandler+0x10>)
 800144a:	f000 feb9 	bl	80021c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000035c 	.word	0x2000035c

08001458 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA1_Stream4_IRQHandler+0x10>)
 800145e:	f000 feaf 	bl	80021c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000044c 	.word	0x2000044c

0800146c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <DMA1_Stream5_IRQHandler+0x10>)
 8001472:	f000 fea5 	bl	80021c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200002b4 	.word	0x200002b4

08001480 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001484:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001488:	f001 faa2 	bl	80029d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <DMA2_Stream2_IRQHandler+0x10>)
 8001496:	f000 fe93 	bl	80021c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000554 	.word	0x20000554

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <MX_TIM2_Init+0xc0>)
 80014ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014f2:	4b25      	ldr	r3, [pc, #148]	; (8001588 <MX_TIM2_Init+0xc0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <MX_TIM2_Init+0xc0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_TIM2_Init+0xc0>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <MX_TIM2_Init+0xc0>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MX_TIM2_Init+0xc0>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001510:	481d      	ldr	r0, [pc, #116]	; (8001588 <MX_TIM2_Init+0xc0>)
 8001512:	f002 fd0f 	bl	8003f34 <HAL_TIM_PWM_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800151c:	f7ff fe3e 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	4619      	mov	r1, r3
 800152e:	4816      	ldr	r0, [pc, #88]	; (8001588 <MX_TIM2_Init+0xc0>)
 8001530:	f003 f8f0 	bl	8004714 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800153a:	f7ff fe2f 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153e:	2360      	movs	r3, #96	; 0x60
 8001540:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_TIM2_Init+0xc0>)
 8001556:	f002 fded 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001560:	f7ff fe1c 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2208      	movs	r2, #8
 8001568:	4619      	mov	r1, r3
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_TIM2_Init+0xc0>)
 800156c:	f002 fde2 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001576:	f7ff fe11 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_TIM2_Init+0xc0>)
 800157c:	f000 fa24 	bl	80019c8 <HAL_TIM_MspPostInit>

}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000050c 	.word	0x2000050c

0800158c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001592:	f107 0320 	add.w	r3, r7, #32
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <MX_TIM5_Init+0xc0>)
 80015b0:	4a27      	ldr	r2, [pc, #156]	; (8001650 <MX_TIM5_Init+0xc4>)
 80015b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <MX_TIM5_Init+0xc0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <MX_TIM5_Init+0xc0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <MX_TIM5_Init+0xc0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <MX_TIM5_Init+0xc0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_TIM5_Init+0xc0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015d2:	481e      	ldr	r0, [pc, #120]	; (800164c <MX_TIM5_Init+0xc0>)
 80015d4:	f002 fcae 	bl	8003f34 <HAL_TIM_PWM_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80015de:	f7ff fddd 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	4619      	mov	r1, r3
 80015f0:	4816      	ldr	r0, [pc, #88]	; (800164c <MX_TIM5_Init+0xc0>)
 80015f2:	f003 f88f 	bl	8004714 <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80015fc:	f7ff fdce 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001600:	2360      	movs	r3, #96	; 0x60
 8001602:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2204      	movs	r2, #4
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_TIM5_Init+0xc0>)
 8001618:	f002 fd8c 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001622:	f7ff fdbb 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	220c      	movs	r2, #12
 800162a:	4619      	mov	r1, r3
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <MX_TIM5_Init+0xc0>)
 800162e:	f002 fd81 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001638:	f7ff fdb0 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <MX_TIM5_Init+0xc0>)
 800163e:	f000 f9c3 	bl	80019c8 <HAL_TIM_MspPostInit>

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200003bc 	.word	0x200003bc
 8001650:	40000c00 	.word	0x40000c00

08001654 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_TIM10_Init+0x40>)
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <MX_TIM10_Init+0x44>)
 800165c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <MX_TIM10_Init+0x40>)
 8001660:	2263      	movs	r2, #99	; 0x63
 8001662:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_TIM10_Init+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1999;
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_TIM10_Init+0x40>)
 800166c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001670:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_TIM10_Init+0x40>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_TIM10_Init+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_TIM10_Init+0x40>)
 8001680:	f002 fbae 	bl	8003de0 <HAL_TIM_Base_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800168a:	f7ff fd87 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000314 	.word	0x20000314
 8001698:	40014400 	.word	0x40014400

0800169c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_TIM11_Init+0x40>)
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <MX_TIM11_Init+0x44>)
 80016a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <MX_TIM11_Init+0x40>)
 80016a8:	2263      	movs	r2, #99	; 0x63
 80016aa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_TIM11_Init+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_TIM11_Init+0x40>)
 80016b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80016b8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_TIM11_Init+0x40>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_TIM11_Init+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_TIM11_Init+0x40>)
 80016c8:	f002 fb8a 	bl	8003de0 <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80016d2:	f7ff fd63 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000404 	.word	0x20000404
 80016e0:	40014800 	.word	0x40014800

080016e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f4:	f040 8089 	bne.w	800180a <HAL_TIM_PWM_MspInit+0x126>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	4b8c      	ldr	r3, [pc, #560]	; (8001930 <HAL_TIM_PWM_MspInit+0x24c>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a8b      	ldr	r2, [pc, #556]	; (8001930 <HAL_TIM_PWM_MspInit+0x24c>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b89      	ldr	r3, [pc, #548]	; (8001930 <HAL_TIM_PWM_MspInit+0x24c>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001714:	4b87      	ldr	r3, [pc, #540]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 8001716:	4a88      	ldr	r2, [pc, #544]	; (8001938 <HAL_TIM_PWM_MspInit+0x254>)
 8001718:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 800171a:	4b86      	ldr	r3, [pc, #536]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 800171c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001720:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001722:	4b84      	ldr	r3, [pc, #528]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 8001724:	2240      	movs	r2, #64	; 0x40
 8001726:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001728:	4b82      	ldr	r3, [pc, #520]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800172e:	4b81      	ldr	r3, [pc, #516]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 8001730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001734:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001736:	4b7f      	ldr	r3, [pc, #508]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 8001738:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800173c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800173e:	4b7d      	ldr	r3, [pc, #500]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 8001740:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001744:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001746:	4b7b      	ldr	r3, [pc, #492]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800174c:	4b79      	ldr	r3, [pc, #484]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 800174e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001752:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001754:	4b77      	ldr	r3, [pc, #476]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 8001756:	2204      	movs	r2, #4
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800175a:	4b76      	ldr	r3, [pc, #472]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 800175c:	2200      	movs	r2, #0
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001760:	4b74      	ldr	r3, [pc, #464]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 8001762:	2200      	movs	r2, #0
 8001764:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001766:	4b73      	ldr	r3, [pc, #460]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 8001768:	2200      	movs	r2, #0
 800176a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800176c:	4871      	ldr	r0, [pc, #452]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 800176e:	f000 fc21 	bl	8001fb4 <HAL_DMA_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 8001778:	f7ff fd10 	bl	800119c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a6d      	ldr	r2, [pc, #436]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
 8001782:	4a6c      	ldr	r2, [pc, #432]	; (8001934 <HAL_TIM_PWM_MspInit+0x250>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8001788:	4b6c      	ldr	r3, [pc, #432]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 800178a:	4a6d      	ldr	r2, [pc, #436]	; (8001940 <HAL_TIM_PWM_MspInit+0x25c>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 800178e:	4b6b      	ldr	r3, [pc, #428]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 8001790:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001794:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001796:	4b69      	ldr	r3, [pc, #420]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800179c:	4b67      	ldr	r3, [pc, #412]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 80017a2:	4b66      	ldr	r3, [pc, #408]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017aa:	4b64      	ldr	r3, [pc, #400]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017b2:	4b62      	ldr	r3, [pc, #392]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 80017ba:	4b60      	ldr	r3, [pc, #384]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017c0:	4b5e      	ldr	r3, [pc, #376]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017c6:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017c8:	4b5c      	ldr	r3, [pc, #368]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017ca:	2204      	movs	r2, #4
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80017ce:	4b5b      	ldr	r3, [pc, #364]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017da:	4b58      	ldr	r3, [pc, #352]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017dc:	2200      	movs	r2, #0
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 80017e0:	4856      	ldr	r0, [pc, #344]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017e2:	f000 fbe7 	bl	8001fb4 <HAL_DMA_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_TIM_PWM_MspInit+0x10c>
    {
      Error_Handler();
 80017ec:	f7ff fcd6 	bl	800119c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017f6:	4a51      	ldr	r2, [pc, #324]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a4f      	ldr	r2, [pc, #316]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 8001800:	621a      	str	r2, [r3, #32]
 8001802:	4a4e      	ldr	r2, [pc, #312]	; (800193c <HAL_TIM_PWM_MspInit+0x258>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001808:	e08d      	b.n	8001926 <HAL_TIM_PWM_MspInit+0x242>
  else if(tim_pwmHandle->Instance==TIM5)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <HAL_TIM_PWM_MspInit+0x260>)
 8001810:	4293      	cmp	r3, r2
 8001812:	f040 8088 	bne.w	8001926 <HAL_TIM_PWM_MspInit+0x242>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b45      	ldr	r3, [pc, #276]	; (8001930 <HAL_TIM_PWM_MspInit+0x24c>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a44      	ldr	r2, [pc, #272]	; (8001930 <HAL_TIM_PWM_MspInit+0x24c>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b42      	ldr	r3, [pc, #264]	; (8001930 <HAL_TIM_PWM_MspInit+0x24c>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001832:	4b45      	ldr	r3, [pc, #276]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 8001834:	4a45      	ldr	r2, [pc, #276]	; (800194c <HAL_TIM_PWM_MspInit+0x268>)
 8001836:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 800183a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800183e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001840:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001846:	4b40      	ldr	r3, [pc, #256]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800184c:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 800184e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001852:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001854:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 8001856:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800185a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800185c:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 800185e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001862:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800186a:	4b37      	ldr	r3, [pc, #220]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 800186c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001870:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001872:	4b35      	ldr	r3, [pc, #212]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 8001874:	2204      	movs	r2, #4
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001878:	4b33      	ldr	r3, [pc, #204]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 800187e:	4b32      	ldr	r3, [pc, #200]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 8001880:	2200      	movs	r2, #0
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 8001886:	2200      	movs	r2, #0
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 800188a:	482f      	ldr	r0, [pc, #188]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 800188c:	f000 fb92 	bl	8001fb4 <HAL_DMA_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8001896:	f7ff fc81 	bl	800119c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
 80018a0:	4a29      	ldr	r2, [pc, #164]	; (8001948 <HAL_TIM_PWM_MspInit+0x264>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 80018a6:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018a8:	4a2a      	ldr	r2, [pc, #168]	; (8001954 <HAL_TIM_PWM_MspInit+0x270>)
 80018aa:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018ae:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80018b2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018b6:	2240      	movs	r2, #64	; 0x40
 80018b8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ba:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ce:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018d0:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018e4:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018e8:	2204      	movs	r2, #4
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 80018fe:	4814      	ldr	r0, [pc, #80]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 8001900:	f000 fb58 	bl	8001fb4 <HAL_DMA_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_TIM_PWM_MspInit+0x22a>
      Error_Handler();
 800190a:	f7ff fc47 	bl	800119c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 800191e:	639a      	str	r2, [r3, #56]	; 0x38
 8001920:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_TIM_PWM_MspInit+0x26c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	200002b4 	.word	0x200002b4
 8001938:	40026088 	.word	0x40026088
 800193c:	200004ac 	.word	0x200004ac
 8001940:	40026028 	.word	0x40026028
 8001944:	40000c00 	.word	0x40000c00
 8001948:	2000044c 	.word	0x2000044c
 800194c:	40026070 	.word	0x40026070
 8001950:	2000035c 	.word	0x2000035c
 8001954:	40026058 	.word	0x40026058

08001958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a15      	ldr	r2, [pc, #84]	; (80019bc <HAL_TIM_Base_MspInit+0x64>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d10e      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_TIM_Base_MspInit+0x68>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <HAL_TIM_Base_MspInit+0x68>)
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_TIM_Base_MspInit+0x68>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001986:	e012      	b.n	80019ae <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM11)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <HAL_TIM_Base_MspInit+0x6c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10d      	bne.n	80019ae <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_TIM_Base_MspInit+0x68>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <HAL_TIM_Base_MspInit+0x68>)
 800199c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_TIM_Base_MspInit+0x68>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40014400 	.word	0x40014400
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40014800 	.word	0x40014800

080019c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e8:	d11e      	bne.n	8001a28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_TIM_MspPostInit+0xb0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a21      	ldr	r2, [pc, #132]	; (8001a78 <HAL_TIM_MspPostInit+0xb0>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_TIM_MspPostInit+0xb0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR4_Pin|MOTOR2_Pin;
 8001a06:	2305      	movs	r3, #5
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a16:	2301      	movs	r3, #1
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4816      	ldr	r0, [pc, #88]	; (8001a7c <HAL_TIM_MspPostInit+0xb4>)
 8001a22:	f000 fe37 	bl	8002694 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001a26:	e022      	b.n	8001a6e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_TIM_MspPostInit+0xb8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d11d      	bne.n	8001a6e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_TIM_MspPostInit+0xb0>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <HAL_TIM_MspPostInit+0xb0>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_TIM_MspPostInit+0xb0>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR3_Pin|MOTOR1_Pin;
 8001a4e:	230a      	movs	r3, #10
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <HAL_TIM_MspPostInit+0xb4>)
 8001a6a:	f000 fe13 	bl	8002694 <HAL_GPIO_Init>
}
 8001a6e:	bf00      	nop
 8001a70:	3728      	adds	r7, #40	; 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40000c00 	.word	0x40000c00

08001a84 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <MX_USART1_UART_Init+0x50>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001abc:	f002 fe98 	bl	80047f0 <HAL_UART_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ac6:	f7ff fb69 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200005b4 	.word	0x200005b4
 8001ad4:	40011000 	.word	0x40011000

08001ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a40      	ldr	r2, [pc, #256]	; (8001bf8 <HAL_UART_MspInit+0x120>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d179      	bne.n	8001bee <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <HAL_UART_MspInit+0x124>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a3e      	ldr	r2, [pc, #248]	; (8001bfc <HAL_UART_MspInit+0x124>)
 8001b04:	f043 0310 	orr.w	r3, r3, #16
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b3c      	ldr	r3, [pc, #240]	; (8001bfc <HAL_UART_MspInit+0x124>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_UART_MspInit+0x124>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a37      	ldr	r2, [pc, #220]	; (8001bfc <HAL_UART_MspInit+0x124>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <HAL_UART_MspInit+0x124>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_UART_MspInit+0x124>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a30      	ldr	r2, [pc, #192]	; (8001bfc <HAL_UART_MspInit+0x124>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_UART_MspInit+0x124>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b60:	2307      	movs	r3, #7
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4825      	ldr	r0, [pc, #148]	; (8001c00 <HAL_UART_MspInit+0x128>)
 8001b6c:	f000 fd92 	bl	8002694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b80:	2307      	movs	r3, #7
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481e      	ldr	r0, [pc, #120]	; (8001c04 <HAL_UART_MspInit+0x12c>)
 8001b8c:	f000 fd82 	bl	8002694 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001b92:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <HAL_UART_MspInit+0x134>)
 8001b94:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001b98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b9c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001bd2:	480d      	ldr	r0, [pc, #52]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001bd4:	f000 f9ee 	bl	8001fb4 <HAL_DMA_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001bde:	f7ff fadd 	bl	800119c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001be6:	639a      	str	r2, [r3, #56]	; 0x38
 8001be8:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <HAL_UART_MspInit+0x130>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	; 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020400 	.word	0x40020400
 8001c08:	20000554 	.word	0x20000554
 8001c0c:	40026440 	.word	0x40026440

08001c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c16:	e003      	b.n	8001c20 <LoopCopyDataInit>

08001c18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c1e:	3104      	adds	r1, #4

08001c20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c20:	480b      	ldr	r0, [pc, #44]	; (8001c50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c28:	d3f6      	bcc.n	8001c18 <CopyDataInit>
  ldr  r2, =_sbss
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c2c:	e002      	b.n	8001c34 <LoopFillZerobss>

08001c2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c30:	f842 3b04 	str.w	r3, [r2], #4

08001c34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c38:	d3f9      	bcc.n	8001c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c3a:	f7ff fc33 	bl	80014a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f005 f915 	bl	8006e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c42:	f7ff fa07 	bl	8001054 <main>
  bx  lr    
 8001c46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c4c:	08007510 	.word	0x08007510
  ldr  r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c54:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001c58:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001c5c:	2000062c 	.word	0x2000062c

08001c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c68:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <HAL_Init+0x40>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_Init+0x40>)
 8001c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_Init+0x40>)
 8001c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 f94f 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f000 f808 	bl	8001ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c98:	f7ff fb70 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_InitTick+0x54>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_InitTick+0x58>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f967 	bl	8001f9a <HAL_SYSTICK_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00e      	b.n	8001cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b0f      	cmp	r3, #15
 8001cda:	d80a      	bhi.n	8001cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f000 f92f 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce8:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <HAL_InitTick+0x5c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	200005f8 	.word	0x200005f8

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	200005f8 	.word	0x200005f8

08001d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff ffee 	bl	8001d30 <HAL_GetTick>
 8001d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d005      	beq.n	8001d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_Delay+0x44>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d6e:	bf00      	nop
 8001d70:	f7ff ffde 	bl	8001d30 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d8f7      	bhi.n	8001d70 <HAL_Delay+0x28>
  {
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4907      	ldr	r1, [pc, #28]	; (8001e2c <__NVIC_EnableIRQ+0x38>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff29 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff3e 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff31 	bl	8001df4 <__NVIC_EnableIRQ>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffa2 	bl	8001eec <SysTick_Config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff feb6 	bl	8001d30 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e099      	b.n	8002104 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff0:	e00f      	b.n	8002012 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ff2:	f7ff fe9d 	bl	8001d30 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d908      	bls.n	8002012 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2203      	movs	r2, #3
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e078      	b.n	8002104 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e8      	bne.n	8001ff2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <HAL_DMA_Init+0x158>)
 800202c:	4013      	ands	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800203e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	2b04      	cmp	r3, #4
 800206a:	d107      	bne.n	800207c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	4313      	orrs	r3, r2
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f023 0307 	bic.w	r3, r3, #7
 8002092:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d117      	bne.n	80020d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00e      	beq.n	80020d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fa6f 	bl	800259c <DMA_CheckFifoParam>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2240      	movs	r2, #64	; 0x40
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020d2:	2301      	movs	r3, #1
 80020d4:	e016      	b.n	8002104 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fa26 	bl	8002530 <DMA_CalcBaseAndBitshift>
 80020e4:	4603      	mov	r3, r0
 80020e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	223f      	movs	r2, #63	; 0x3f
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	f010803f 	.word	0xf010803f

08002110 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_DMA_Start_IT+0x26>
 8002132:	2302      	movs	r3, #2
 8002134:	e040      	b.n	80021b8 <HAL_DMA_Start_IT+0xa8>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d12f      	bne.n	80021aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2202      	movs	r2, #2
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f9b8 	bl	80024d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	223f      	movs	r2, #63	; 0x3f
 800216a:	409a      	lsls	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0216 	orr.w	r2, r2, #22
 800217e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0208 	orr.w	r2, r2, #8
 8002196:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e005      	b.n	80021b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021b2:	2302      	movs	r3, #2
 80021b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021cc:	4b92      	ldr	r3, [pc, #584]	; (8002418 <HAL_DMA_IRQHandler+0x258>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a92      	ldr	r2, [pc, #584]	; (800241c <HAL_DMA_IRQHandler+0x25c>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0a9b      	lsrs	r3, r3, #10
 80021d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	2208      	movs	r2, #8
 80021ec:	409a      	lsls	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d01a      	beq.n	800222c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0204 	bic.w	r2, r2, #4
 8002212:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	2208      	movs	r2, #8
 800221a:	409a      	lsls	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	2201      	movs	r2, #1
 8002232:	409a      	lsls	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d012      	beq.n	8002262 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	2201      	movs	r2, #1
 8002250:	409a      	lsls	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	f043 0202 	orr.w	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	2204      	movs	r2, #4
 8002268:	409a      	lsls	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d012      	beq.n	8002298 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	2204      	movs	r2, #4
 8002286:	409a      	lsls	r2, r3
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	f043 0204 	orr.w	r2, r3, #4
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	2210      	movs	r2, #16
 800229e:	409a      	lsls	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d043      	beq.n	8002330 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d03c      	beq.n	8002330 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	2210      	movs	r2, #16
 80022bc:	409a      	lsls	r2, r3
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d018      	beq.n	8002302 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d108      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d024      	beq.n	8002330 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
 80022ee:	e01f      	b.n	8002330 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01b      	beq.n	8002330 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
 8002300:	e016      	b.n	8002330 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d107      	bne.n	8002320 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0208 	bic.w	r2, r2, #8
 800231e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	2220      	movs	r2, #32
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 808e 	beq.w	800245e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 8086 	beq.w	800245e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002356:	2220      	movs	r2, #32
 8002358:	409a      	lsls	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b05      	cmp	r3, #5
 8002368:	d136      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0216 	bic.w	r2, r2, #22
 8002378:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002388:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <HAL_DMA_IRQHandler+0x1da>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002396:	2b00      	cmp	r3, #0
 8002398:	d007      	beq.n	80023aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0208 	bic.w	r2, r2, #8
 80023a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	223f      	movs	r2, #63	; 0x3f
 80023b0:	409a      	lsls	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d07d      	beq.n	80024ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	4798      	blx	r3
        }
        return;
 80023d6:	e078      	b.n	80024ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d01c      	beq.n	8002420 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d108      	bne.n	8002406 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d030      	beq.n	800245e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
 8002404:	e02b      	b.n	800245e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d027      	beq.n	800245e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	4798      	blx	r3
 8002416:	e022      	b.n	800245e <HAL_DMA_IRQHandler+0x29e>
 8002418:	20000000 	.word	0x20000000
 800241c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10f      	bne.n	800244e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0210 	bic.w	r2, r2, #16
 800243c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	2b00      	cmp	r3, #0
 8002464:	d032      	beq.n	80024cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d022      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2205      	movs	r2, #5
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3301      	adds	r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	429a      	cmp	r2, r3
 8002494:	d307      	bcc.n	80024a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f2      	bne.n	800248a <HAL_DMA_IRQHandler+0x2ca>
 80024a4:	e000      	b.n	80024a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80024a6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
 80024c8:	e000      	b.n	80024cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80024ca:	bf00      	nop
    }
  }
}
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop

080024d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d108      	bne.n	8002514 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002512:	e007      	b.n	8002524 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	60da      	str	r2, [r3, #12]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3b10      	subs	r3, #16
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <DMA_CalcBaseAndBitshift+0x64>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800254a:	4a13      	ldr	r2, [pc, #76]	; (8002598 <DMA_CalcBaseAndBitshift+0x68>)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d909      	bls.n	8002572 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	1d1a      	adds	r2, r3, #4
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	659a      	str	r2, [r3, #88]	; 0x58
 8002570:	e007      	b.n	8002582 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	aaaaaaab 	.word	0xaaaaaaab
 8002598:	080074ac 	.word	0x080074ac

0800259c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11f      	bne.n	80025f6 <DMA_CheckFifoParam+0x5a>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d856      	bhi.n	800266a <DMA_CheckFifoParam+0xce>
 80025bc:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <DMA_CheckFifoParam+0x28>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025e7 	.word	0x080025e7
 80025cc:	080025d5 	.word	0x080025d5
 80025d0:	0800266b 	.word	0x0800266b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d046      	beq.n	800266e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e4:	e043      	b.n	800266e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025ee:	d140      	bne.n	8002672 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f4:	e03d      	b.n	8002672 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fe:	d121      	bne.n	8002644 <DMA_CheckFifoParam+0xa8>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d837      	bhi.n	8002676 <DMA_CheckFifoParam+0xda>
 8002606:	a201      	add	r2, pc, #4	; (adr r2, 800260c <DMA_CheckFifoParam+0x70>)
 8002608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260c:	0800261d 	.word	0x0800261d
 8002610:	08002623 	.word	0x08002623
 8002614:	0800261d 	.word	0x0800261d
 8002618:	08002635 	.word	0x08002635
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e030      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d025      	beq.n	800267a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002632:	e022      	b.n	800267a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800263c:	d11f      	bne.n	800267e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002642:	e01c      	b.n	800267e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d903      	bls.n	8002652 <DMA_CheckFifoParam+0xb6>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d003      	beq.n	8002658 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002650:	e018      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      break;
 8002656:	e015      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00e      	beq.n	8002682 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	e00b      	b.n	8002682 <DMA_CheckFifoParam+0xe6>
      break;
 800266a:	bf00      	nop
 800266c:	e00a      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 800266e:	bf00      	nop
 8002670:	e008      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 8002672:	bf00      	nop
 8002674:	e006      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 8002676:	bf00      	nop
 8002678:	e004      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 800267a:	bf00      	nop
 800267c:	e002      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;   
 800267e:	bf00      	nop
 8002680:	e000      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 8002682:	bf00      	nop
    }
  } 
  
  return status; 
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e159      	b.n	8002964 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f040 8148 	bne.w	800295e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d005      	beq.n	80026e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d130      	bne.n	8002748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2203      	movs	r2, #3
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0201 	and.w	r2, r3, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b03      	cmp	r3, #3
 8002752:	d017      	beq.n	8002784 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d123      	bne.n	80027d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	08da      	lsrs	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3208      	adds	r2, #8
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80a2 	beq.w	800295e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b57      	ldr	r3, [pc, #348]	; (800297c <HAL_GPIO_Init+0x2e8>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a56      	ldr	r2, [pc, #344]	; (800297c <HAL_GPIO_Init+0x2e8>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b54      	ldr	r3, [pc, #336]	; (800297c <HAL_GPIO_Init+0x2e8>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002836:	4a52      	ldr	r2, [pc, #328]	; (8002980 <HAL_GPIO_Init+0x2ec>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a49      	ldr	r2, [pc, #292]	; (8002984 <HAL_GPIO_Init+0x2f0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d019      	beq.n	8002896 <HAL_GPIO_Init+0x202>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a48      	ldr	r2, [pc, #288]	; (8002988 <HAL_GPIO_Init+0x2f4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_GPIO_Init+0x1fe>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a47      	ldr	r2, [pc, #284]	; (800298c <HAL_GPIO_Init+0x2f8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00d      	beq.n	800288e <HAL_GPIO_Init+0x1fa>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a46      	ldr	r2, [pc, #280]	; (8002990 <HAL_GPIO_Init+0x2fc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d007      	beq.n	800288a <HAL_GPIO_Init+0x1f6>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a45      	ldr	r2, [pc, #276]	; (8002994 <HAL_GPIO_Init+0x300>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_GPIO_Init+0x1f2>
 8002882:	2304      	movs	r3, #4
 8002884:	e008      	b.n	8002898 <HAL_GPIO_Init+0x204>
 8002886:	2307      	movs	r3, #7
 8002888:	e006      	b.n	8002898 <HAL_GPIO_Init+0x204>
 800288a:	2303      	movs	r3, #3
 800288c:	e004      	b.n	8002898 <HAL_GPIO_Init+0x204>
 800288e:	2302      	movs	r3, #2
 8002890:	e002      	b.n	8002898 <HAL_GPIO_Init+0x204>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_GPIO_Init+0x204>
 8002896:	2300      	movs	r3, #0
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f002 0203 	and.w	r2, r2, #3
 800289e:	0092      	lsls	r2, r2, #2
 80028a0:	4093      	lsls	r3, r2
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a8:	4935      	ldr	r1, [pc, #212]	; (8002980 <HAL_GPIO_Init+0x2ec>)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	3302      	adds	r3, #2
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b6:	4b38      	ldr	r3, [pc, #224]	; (8002998 <HAL_GPIO_Init+0x304>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028da:	4a2f      	ldr	r2, [pc, #188]	; (8002998 <HAL_GPIO_Init+0x304>)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028e0:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <HAL_GPIO_Init+0x304>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002904:	4a24      	ldr	r2, [pc, #144]	; (8002998 <HAL_GPIO_Init+0x304>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290a:	4b23      	ldr	r3, [pc, #140]	; (8002998 <HAL_GPIO_Init+0x304>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800292e:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <HAL_GPIO_Init+0x304>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002934:	4b18      	ldr	r3, [pc, #96]	; (8002998 <HAL_GPIO_Init+0x304>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002958:	4a0f      	ldr	r2, [pc, #60]	; (8002998 <HAL_GPIO_Init+0x304>)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3301      	adds	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b0f      	cmp	r3, #15
 8002968:	f67f aea2 	bls.w	80026b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	40013800 	.word	0x40013800
 8002984:	40020000 	.word	0x40020000
 8002988:	40020400 	.word	0x40020400
 800298c:	40020800 	.word	0x40020800
 8002990:	40020c00 	.word	0x40020c00
 8002994:	40021000 	.word	0x40021000
 8002998:	40013c00 	.word	0x40013c00

0800299c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
 80029a8:	4613      	mov	r3, r2
 80029aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b8:	e003      	b.n	80029c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ba:	887b      	ldrh	r3, [r7, #2]
 80029bc:	041a      	lsls	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 fd7a 	bl	80064e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40013c00 	.word	0x40013c00

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e264      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d075      	beq.n	8002b0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a1e:	4ba3      	ldr	r3, [pc, #652]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d00c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2a:	4ba0      	ldr	r3, [pc, #640]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d112      	bne.n	8002a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a36:	4b9d      	ldr	r3, [pc, #628]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a42:	d10b      	bne.n	8002a5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a44:	4b99      	ldr	r3, [pc, #612]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d05b      	beq.n	8002b08 <HAL_RCC_OscConfig+0x108>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d157      	bne.n	8002b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e23f      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a64:	d106      	bne.n	8002a74 <HAL_RCC_OscConfig+0x74>
 8002a66:	4b91      	ldr	r3, [pc, #580]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a90      	ldr	r2, [pc, #576]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e01d      	b.n	8002ab0 <HAL_RCC_OscConfig+0xb0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x98>
 8002a7e:	4b8b      	ldr	r3, [pc, #556]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a8a      	ldr	r2, [pc, #552]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b88      	ldr	r3, [pc, #544]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a87      	ldr	r2, [pc, #540]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0xb0>
 8002a98:	4b84      	ldr	r3, [pc, #528]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a83      	ldr	r2, [pc, #524]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b81      	ldr	r3, [pc, #516]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a80      	ldr	r2, [pc, #512]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7ff f93a 	bl	8001d30 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7ff f936 	bl	8001d30 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e204      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b76      	ldr	r3, [pc, #472]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xc0>
 8002ade:	e014      	b.n	8002b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7ff f926 	bl	8001d30 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7ff f922 	bl	8001d30 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1f0      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xe8>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d063      	beq.n	8002bde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b16:	4b65      	ldr	r3, [pc, #404]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b22:	4b62      	ldr	r3, [pc, #392]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d11c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	4b5c      	ldr	r3, [pc, #368]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_RCC_OscConfig+0x152>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e1c4      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b56      	ldr	r3, [pc, #344]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4952      	ldr	r1, [pc, #328]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	e03a      	b.n	8002bde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d020      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <HAL_RCC_OscConfig+0x2b0>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7ff f8db 	bl	8001d30 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7ff f8d7 	bl	8001d30 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e1a5      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	4b46      	ldr	r3, [pc, #280]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4940      	ldr	r1, [pc, #256]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCC_OscConfig+0x2b0>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7ff f8ba 	bl	8001d30 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7ff f8b6 	bl	8001d30 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e184      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	4b36      	ldr	r3, [pc, #216]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d030      	beq.n	8002c4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d016      	beq.n	8002c20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf2:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_RCC_OscConfig+0x2b4>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7ff f89a 	bl	8001d30 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c00:	f7ff f896 	bl	8001d30 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e164      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	4b26      	ldr	r3, [pc, #152]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x200>
 8002c1e:	e015      	b.n	8002c4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCC_OscConfig+0x2b4>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7ff f883 	bl	8001d30 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7ff f87f 	bl	8001d30 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e14d      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a0 	beq.w	8002d9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a0e      	ldr	r2, [pc, #56]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_OscConfig+0x2b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d121      	bne.n	8002cda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_RCC_OscConfig+0x2b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_RCC_OscConfig+0x2b8>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca2:	f7ff f845 	bl	8001d30 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	e011      	b.n	8002cce <HAL_RCC_OscConfig+0x2ce>
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	42470000 	.word	0x42470000
 8002cb4:	42470e80 	.word	0x42470e80
 8002cb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbc:	f7ff f838 	bl	8001d30 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e106      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b85      	ldr	r3, [pc, #532]	; (8002ee4 <HAL_RCC_OscConfig+0x4e4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d106      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
 8002ce2:	4b81      	ldr	r3, [pc, #516]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	4a80      	ldr	r2, [pc, #512]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6713      	str	r3, [r2, #112]	; 0x70
 8002cee:	e01c      	b.n	8002d2a <HAL_RCC_OscConfig+0x32a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d10c      	bne.n	8002d12 <HAL_RCC_OscConfig+0x312>
 8002cf8:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	4a7a      	ldr	r2, [pc, #488]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
 8002d04:	4b78      	ldr	r3, [pc, #480]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	4a77      	ldr	r2, [pc, #476]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d10:	e00b      	b.n	8002d2a <HAL_RCC_OscConfig+0x32a>
 8002d12:	4b75      	ldr	r3, [pc, #468]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a74      	ldr	r2, [pc, #464]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1e:	4b72      	ldr	r3, [pc, #456]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a71      	ldr	r2, [pc, #452]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d015      	beq.n	8002d5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d32:	f7fe fffd 	bl	8001d30 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7fe fff9 	bl	8001d30 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e0c5      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d50:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ee      	beq.n	8002d3a <HAL_RCC_OscConfig+0x33a>
 8002d5c:	e014      	b.n	8002d88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe ffe7 	bl	8001d30 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe ffe3 	bl	8001d30 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0af      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7c:	4b5a      	ldr	r3, [pc, #360]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ee      	bne.n	8002d66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d105      	bne.n	8002d9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8e:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a55      	ldr	r2, [pc, #340]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 809b 	beq.w	8002eda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d05c      	beq.n	8002e6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d141      	bne.n	8002e3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db8:	4b4c      	ldr	r3, [pc, #304]	; (8002eec <HAL_RCC_OscConfig+0x4ec>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbe:	f7fe ffb7 	bl	8001d30 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fe ffb3 	bl	8001d30 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e081      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd8:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	019b      	lsls	r3, r3, #6
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	041b      	lsls	r3, r3, #16
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	061b      	lsls	r3, r3, #24
 8002e08:	4937      	ldr	r1, [pc, #220]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0e:	4b37      	ldr	r3, [pc, #220]	; (8002eec <HAL_RCC_OscConfig+0x4ec>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe ff8c 	bl	8001d30 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe ff88 	bl	8001d30 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e056      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x41c>
 8002e3a:	e04e      	b.n	8002eda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <HAL_RCC_OscConfig+0x4ec>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe ff75 	bl	8001d30 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7fe ff71 	bl	8001d30 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e03f      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5c:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCC_OscConfig+0x44a>
 8002e68:	e037      	b.n	8002eda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e032      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <HAL_RCC_OscConfig+0x4e8>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d028      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d121      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d11a      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d111      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	42470060 	.word	0x42470060

08002ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0cc      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f04:	4b68      	ldr	r3, [pc, #416]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d90c      	bls.n	8002f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b65      	ldr	r3, [pc, #404]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b63      	ldr	r3, [pc, #396]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0b8      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f44:	4b59      	ldr	r3, [pc, #356]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a58      	ldr	r2, [pc, #352]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f5c:	4b53      	ldr	r3, [pc, #332]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a52      	ldr	r2, [pc, #328]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f68:	4b50      	ldr	r3, [pc, #320]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	494d      	ldr	r1, [pc, #308]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d044      	beq.n	8003010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d119      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e07f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fae:	4b3f      	ldr	r3, [pc, #252]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e067      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f023 0203 	bic.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4934      	ldr	r1, [pc, #208]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe0:	f7fe fea6 	bl	8001d30 <HAL_GetTick>
 8002fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe8:	f7fe fea2 	bl	8001d30 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e04f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 020c 	and.w	r2, r3, #12
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	429a      	cmp	r2, r3
 800300e:	d1eb      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d20c      	bcs.n	8003038 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e032      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4916      	ldr	r1, [pc, #88]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	490e      	ldr	r1, [pc, #56]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003076:	f000 f821 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 800307a:	4602      	mov	r2, r0
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	490a      	ldr	r1, [pc, #40]	; (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	5ccb      	ldrb	r3, [r1, r3]
 800308a:	fa22 f303 	lsr.w	r3, r2, r3
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fe06 	bl	8001ca8 <HAL_InitTick>

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023c00 	.word	0x40023c00
 80030ac:	40023800 	.word	0x40023800
 80030b0:	08007494 	.word	0x08007494
 80030b4:	20000000 	.word	0x20000000
 80030b8:	20000004 	.word	0x20000004

080030bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030bc:	b5b0      	push	{r4, r5, r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030c2:	2100      	movs	r1, #0
 80030c4:	6079      	str	r1, [r7, #4]
 80030c6:	2100      	movs	r1, #0
 80030c8:	60f9      	str	r1, [r7, #12]
 80030ca:	2100      	movs	r1, #0
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030ce:	2100      	movs	r1, #0
 80030d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d2:	4952      	ldr	r1, [pc, #328]	; (800321c <HAL_RCC_GetSysClockFreq+0x160>)
 80030d4:	6889      	ldr	r1, [r1, #8]
 80030d6:	f001 010c 	and.w	r1, r1, #12
 80030da:	2908      	cmp	r1, #8
 80030dc:	d00d      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x3e>
 80030de:	2908      	cmp	r1, #8
 80030e0:	f200 8094 	bhi.w	800320c <HAL_RCC_GetSysClockFreq+0x150>
 80030e4:	2900      	cmp	r1, #0
 80030e6:	d002      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x32>
 80030e8:	2904      	cmp	r1, #4
 80030ea:	d003      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x38>
 80030ec:	e08e      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030ee:	4b4c      	ldr	r3, [pc, #304]	; (8003220 <HAL_RCC_GetSysClockFreq+0x164>)
 80030f0:	60bb      	str	r3, [r7, #8]
       break;
 80030f2:	e08e      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030f4:	4b4b      	ldr	r3, [pc, #300]	; (8003224 <HAL_RCC_GetSysClockFreq+0x168>)
 80030f6:	60bb      	str	r3, [r7, #8]
      break;
 80030f8:	e08b      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030fa:	4948      	ldr	r1, [pc, #288]	; (800321c <HAL_RCC_GetSysClockFreq+0x160>)
 80030fc:	6849      	ldr	r1, [r1, #4]
 80030fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003102:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003104:	4945      	ldr	r1, [pc, #276]	; (800321c <HAL_RCC_GetSysClockFreq+0x160>)
 8003106:	6849      	ldr	r1, [r1, #4]
 8003108:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800310c:	2900      	cmp	r1, #0
 800310e:	d024      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003110:	4942      	ldr	r1, [pc, #264]	; (800321c <HAL_RCC_GetSysClockFreq+0x160>)
 8003112:	6849      	ldr	r1, [r1, #4]
 8003114:	0989      	lsrs	r1, r1, #6
 8003116:	4608      	mov	r0, r1
 8003118:	f04f 0100 	mov.w	r1, #0
 800311c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003120:	f04f 0500 	mov.w	r5, #0
 8003124:	ea00 0204 	and.w	r2, r0, r4
 8003128:	ea01 0305 	and.w	r3, r1, r5
 800312c:	493d      	ldr	r1, [pc, #244]	; (8003224 <HAL_RCC_GetSysClockFreq+0x168>)
 800312e:	fb01 f003 	mul.w	r0, r1, r3
 8003132:	2100      	movs	r1, #0
 8003134:	fb01 f102 	mul.w	r1, r1, r2
 8003138:	1844      	adds	r4, r0, r1
 800313a:	493a      	ldr	r1, [pc, #232]	; (8003224 <HAL_RCC_GetSysClockFreq+0x168>)
 800313c:	fba2 0101 	umull	r0, r1, r2, r1
 8003140:	1863      	adds	r3, r4, r1
 8003142:	4619      	mov	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	461a      	mov	r2, r3
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	f7fd fcd8 	bl	8000b00 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	e04a      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315a:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_RCC_GetSysClockFreq+0x160>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	099b      	lsrs	r3, r3, #6
 8003160:	461a      	mov	r2, r3
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	f240 10ff 	movw	r0, #511	; 0x1ff
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	ea02 0400 	and.w	r4, r2, r0
 8003172:	ea03 0501 	and.w	r5, r3, r1
 8003176:	4620      	mov	r0, r4
 8003178:	4629      	mov	r1, r5
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	014b      	lsls	r3, r1, #5
 8003184:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003188:	0142      	lsls	r2, r0, #5
 800318a:	4610      	mov	r0, r2
 800318c:	4619      	mov	r1, r3
 800318e:	1b00      	subs	r0, r0, r4
 8003190:	eb61 0105 	sbc.w	r1, r1, r5
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	018b      	lsls	r3, r1, #6
 800319e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031a2:	0182      	lsls	r2, r0, #6
 80031a4:	1a12      	subs	r2, r2, r0
 80031a6:	eb63 0301 	sbc.w	r3, r3, r1
 80031aa:	f04f 0000 	mov.w	r0, #0
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	00d9      	lsls	r1, r3, #3
 80031b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031b8:	00d0      	lsls	r0, r2, #3
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	1912      	adds	r2, r2, r4
 80031c0:	eb45 0303 	adc.w	r3, r5, r3
 80031c4:	f04f 0000 	mov.w	r0, #0
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	0299      	lsls	r1, r3, #10
 80031ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031d2:	0290      	lsls	r0, r2, #10
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4610      	mov	r0, r2
 80031da:	4619      	mov	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	461a      	mov	r2, r3
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	f7fd fc8c 	bl	8000b00 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4613      	mov	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_RCC_GetSysClockFreq+0x160>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	3301      	adds	r3, #1
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	60bb      	str	r3, [r7, #8]
      break;
 800320a:	e002      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <HAL_RCC_GetSysClockFreq+0x164>)
 800320e:	60bb      	str	r3, [r7, #8]
      break;
 8003210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003212:	68bb      	ldr	r3, [r7, #8]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bdb0      	pop	{r4, r5, r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	00f42400 	.word	0x00f42400
 8003224:	017d7840 	.word	0x017d7840

08003228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <HAL_RCC_GetHCLKFreq+0x14>)
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000000 	.word	0x20000000

08003240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003244:	f7ff fff0 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0a9b      	lsrs	r3, r3, #10
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40023800 	.word	0x40023800
 8003264:	080074a4 	.word	0x080074a4

08003268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800326c:	f7ff ffdc 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0b5b      	lsrs	r3, r3, #13
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4903      	ldr	r1, [pc, #12]	; (800328c <HAL_RCC_GetPCLK2Freq+0x24>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40023800 	.word	0x40023800
 800328c:	080074a4 	.word	0x080074a4

08003290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07b      	b.n	800339a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d108      	bne.n	80032bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b2:	d009      	beq.n	80032c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	61da      	str	r2, [r3, #28]
 80032ba:	e005      	b.n	80032c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd ffcc 	bl	8001280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	ea42 0103 	orr.w	r1, r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	f003 0104 	and.w	r1, r3, #4
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f003 0210 	and.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003388:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b088      	sub	sp, #32
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_SPI_Transmit+0x22>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e126      	b.n	8003612 <HAL_SPI_Transmit+0x270>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033cc:	f7fe fcb0 	bl	8001d30 <HAL_GetTick>
 80033d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
 80033e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033e6:	e10b      	b.n	8003600 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_SPI_Transmit+0x52>
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033f8:	e102      	b.n	8003600 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2203      	movs	r2, #3
 80033fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	88fa      	ldrh	r2, [r7, #6]
 8003412:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	88fa      	ldrh	r2, [r7, #6]
 8003418:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003440:	d10f      	bne.n	8003462 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003450:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003460:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d007      	beq.n	8003480 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800347e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003488:	d14b      	bne.n	8003522 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Transmit+0xf6>
 8003492:	8afb      	ldrh	r3, [r7, #22]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d13e      	bne.n	8003516 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	881a      	ldrh	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	1c9a      	adds	r2, r3, #2
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034bc:	e02b      	b.n	8003516 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d112      	bne.n	80034f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	881a      	ldrh	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	1c9a      	adds	r2, r3, #2
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80034f0:	e011      	b.n	8003516 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034f2:	f7fe fc1d 	bl	8001d30 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d803      	bhi.n	800350a <HAL_SPI_Transmit+0x168>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d102      	bne.n	8003510 <HAL_SPI_Transmit+0x16e>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003514:	e074      	b.n	8003600 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ce      	bne.n	80034be <HAL_SPI_Transmit+0x11c>
 8003520:	e04c      	b.n	80035bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_SPI_Transmit+0x18e>
 800352a:	8afb      	ldrh	r3, [r7, #22]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d140      	bne.n	80035b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	330c      	adds	r3, #12
 800353a:	7812      	ldrb	r2, [r2, #0]
 800353c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003556:	e02c      	b.n	80035b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d113      	bne.n	800358e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	7812      	ldrb	r2, [r2, #0]
 8003572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	86da      	strh	r2, [r3, #54]	; 0x36
 800358c:	e011      	b.n	80035b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800358e:	f7fe fbcf 	bl	8001d30 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d803      	bhi.n	80035a6 <HAL_SPI_Transmit+0x204>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d102      	bne.n	80035ac <HAL_SPI_Transmit+0x20a>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035b0:	e026      	b.n	8003600 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1cd      	bne.n	8003558 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	6839      	ldr	r1, [r7, #0]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 fbcb 	bl	8003d5c <SPI_EndRxTxTransaction>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035da:	2300      	movs	r3, #0
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e000      	b.n	8003600 <HAL_SPI_Transmit+0x25e>
  }

error:
 80035fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003610:	7ffb      	ldrb	r3, [r7, #31]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b088      	sub	sp, #32
 800361e:	af02      	add	r7, sp, #8
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003636:	d112      	bne.n	800365e <HAL_SPI_Receive+0x44>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10e      	bne.n	800365e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2204      	movs	r2, #4
 8003644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003648:	88fa      	ldrh	r2, [r7, #6]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	4613      	mov	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f8f1 	bl	800383c <HAL_SPI_TransmitReceive>
 800365a:	4603      	mov	r3, r0
 800365c:	e0ea      	b.n	8003834 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_SPI_Receive+0x52>
 8003668:	2302      	movs	r3, #2
 800366a:	e0e3      	b.n	8003834 <HAL_SPI_Receive+0x21a>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003674:	f7fe fb5c 	bl	8001d30 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d002      	beq.n	800368c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003686:	2302      	movs	r3, #2
 8003688:	75fb      	strb	r3, [r7, #23]
    goto error;
 800368a:	e0ca      	b.n	8003822 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_SPI_Receive+0x7e>
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d102      	bne.n	800369e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800369c:	e0c1      	b.n	8003822 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2204      	movs	r2, #4
 80036a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	88fa      	ldrh	r2, [r7, #6]
 80036b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	88fa      	ldrh	r2, [r7, #6]
 80036bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e4:	d10f      	bne.n	8003706 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d007      	beq.n	8003724 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003722:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d162      	bne.n	80037f2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800372c:	e02e      	b.n	800378c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d115      	bne.n	8003768 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f103 020c 	add.w	r2, r3, #12
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	7812      	ldrb	r2, [r2, #0]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003766:	e011      	b.n	800378c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003768:	f7fe fae2 	bl	8001d30 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d803      	bhi.n	8003780 <HAL_SPI_Receive+0x166>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d102      	bne.n	8003786 <HAL_SPI_Receive+0x16c>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	75fb      	strb	r3, [r7, #23]
          goto error;
 800378a:	e04a      	b.n	8003822 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1cb      	bne.n	800372e <HAL_SPI_Receive+0x114>
 8003796:	e031      	b.n	80037fc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d113      	bne.n	80037ce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	b292      	uxth	r2, r2
 80037b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037cc:	e011      	b.n	80037f2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ce:	f7fe faaf 	bl	8001d30 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d803      	bhi.n	80037e6 <HAL_SPI_Receive+0x1cc>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d102      	bne.n	80037ec <HAL_SPI_Receive+0x1d2>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d102      	bne.n	80037f2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037f0:	e017      	b.n	8003822 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1cd      	bne.n	8003798 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fa45 	bl	8003c90 <SPI_EndRxTransaction>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
 800381e:	e000      	b.n	8003822 <HAL_SPI_Receive+0x208>
  }

error :
 8003820:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	; 0x30
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800384a:	2301      	movs	r3, #1
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x26>
 800385e:	2302      	movs	r3, #2
 8003860:	e18a      	b.n	8003b78 <HAL_SPI_TransmitReceive+0x33c>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386a:	f7fe fa61 	bl	8001d30 <HAL_GetTick>
 800386e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003880:	887b      	ldrh	r3, [r7, #2]
 8003882:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003888:	2b01      	cmp	r3, #1
 800388a:	d00f      	beq.n	80038ac <HAL_SPI_TransmitReceive+0x70>
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003892:	d107      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x68>
 800389c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d003      	beq.n	80038ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
 80038a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038aa:	e15b      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_SPI_TransmitReceive+0x82>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_SPI_TransmitReceive+0x82>
 80038b8:	887b      	ldrh	r3, [r7, #2]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038c4:	e14e      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d003      	beq.n	80038da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2205      	movs	r2, #5
 80038d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	887a      	ldrh	r2, [r7, #2]
 80038ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	887a      	ldrh	r2, [r7, #2]
 80038f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	887a      	ldrh	r2, [r7, #2]
 80038fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	887a      	ldrh	r2, [r7, #2]
 8003902:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d007      	beq.n	800392e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800392c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003936:	d178      	bne.n	8003a2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x10a>
 8003940:	8b7b      	ldrh	r3, [r7, #26]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d166      	bne.n	8003a14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	881a      	ldrh	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	1c9a      	adds	r2, r3, #2
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800396a:	e053      	b.n	8003a14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b02      	cmp	r3, #2
 8003978:	d11b      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x176>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d016      	beq.n	80039b2 <HAL_SPI_TransmitReceive+0x176>
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003986:	2b01      	cmp	r3, #1
 8003988:	d113      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	881a      	ldrh	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	1c9a      	adds	r2, r3, #2
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d119      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x1b8>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d014      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	b292      	uxth	r2, r2
 80039d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	1c9a      	adds	r2, r3, #2
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039f0:	2301      	movs	r3, #1
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039f4:	f7fe f99c 	bl	8001d30 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d807      	bhi.n	8003a14 <HAL_SPI_TransmitReceive+0x1d8>
 8003a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0a:	d003      	beq.n	8003a14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a12:	e0a7      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1a6      	bne.n	800396c <HAL_SPI_TransmitReceive+0x130>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1a1      	bne.n	800396c <HAL_SPI_TransmitReceive+0x130>
 8003a28:	e07c      	b.n	8003b24 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x1fc>
 8003a32:	8b7b      	ldrh	r3, [r7, #26]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d16b      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	7812      	ldrb	r2, [r2, #0]
 8003a44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a5e:	e057      	b.n	8003b10 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d11c      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x26c>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d017      	beq.n	8003aa8 <HAL_SPI_TransmitReceive+0x26c>
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d114      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d119      	bne.n	8003aea <HAL_SPI_TransmitReceive+0x2ae>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d014      	beq.n	8003aea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003aea:	f7fe f921 	bl	8001d30 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d803      	bhi.n	8003b02 <HAL_SPI_TransmitReceive+0x2c6>
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d102      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x2cc>
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b0e:	e029      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1a2      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x224>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d19d      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f917 	bl	8003d5c <SPI_EndRxTxTransaction>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d006      	beq.n	8003b42 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b40:	e010      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10b      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	e000      	b.n	8003b64 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3730      	adds	r7, #48	; 0x30
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b90:	f7fe f8ce 	bl	8001d30 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ba0:	f7fe f8c6 	bl	8001d30 <HAL_GetTick>
 8003ba4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	015b      	lsls	r3, r3, #5
 8003bac:	0d1b      	lsrs	r3, r3, #20
 8003bae:	69fa      	ldr	r2, [r7, #28]
 8003bb0:	fb02 f303 	mul.w	r3, r2, r3
 8003bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bb6:	e054      	b.n	8003c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	d050      	beq.n	8003c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bc0:	f7fe f8b6 	bl	8001d30 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d902      	bls.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d13d      	bne.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003be4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bee:	d111      	bne.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf8:	d004      	beq.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c02:	d107      	bne.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1c:	d10f      	bne.n	8003c3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e017      	b.n	8003c82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	bf0c      	ite	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	2300      	movne	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d19b      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000000 	.word	0x20000000

08003c90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ca4:	d111      	bne.n	8003cca <SPI_EndRxTransaction+0x3a>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cae:	d004      	beq.n	8003cba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb8:	d107      	bne.n	8003cca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd2:	d12a      	bne.n	8003d2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cdc:	d012      	beq.n	8003d04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7ff ff49 	bl	8003b80 <SPI_WaitFlagStateUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d02d      	beq.n	8003d50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e026      	b.n	8003d52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7ff ff36 	bl	8003b80 <SPI_WaitFlagStateUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01a      	beq.n	8003d50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	f043 0220 	orr.w	r2, r3, #32
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e013      	b.n	8003d52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2101      	movs	r1, #1
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7ff ff23 	bl	8003b80 <SPI_WaitFlagStateUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e000      	b.n	8003d52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <SPI_EndRxTxTransaction+0x7c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <SPI_EndRxTxTransaction+0x80>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	0d5b      	lsrs	r3, r3, #21
 8003d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d86:	d112      	bne.n	8003dae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff fef4 	bl	8003b80 <SPI_WaitFlagStateUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da2:	f043 0220 	orr.w	r2, r3, #32
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e00f      	b.n	8003dce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b80      	cmp	r3, #128	; 0x80
 8003dc6:	d0f2      	beq.n	8003dae <SPI_EndRxTxTransaction+0x52>
 8003dc8:	e000      	b.n	8003dcc <SPI_EndRxTxTransaction+0x70>
        break;
 8003dca:	bf00      	nop
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	165e9f81 	.word	0x165e9f81

08003de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e041      	b.n	8003e76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd fda6 	bl	8001958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f000 fa46 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d001      	beq.n	8003e98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e03c      	b.n	8003f12 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <HAL_TIM_Base_Start+0xa0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d018      	beq.n	8003edc <HAL_TIM_Base_Start+0x5c>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb2:	d013      	beq.n	8003edc <HAL_TIM_Base_Start+0x5c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <HAL_TIM_Base_Start+0xa4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_TIM_Base_Start+0x5c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a19      	ldr	r2, [pc, #100]	; (8003f28 <HAL_TIM_Base_Start+0xa8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_TIM_Base_Start+0x5c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <HAL_TIM_Base_Start+0xac>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_TIM_Base_Start+0x5c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <HAL_TIM_Base_Start+0xb0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d111      	bne.n	8003f00 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d010      	beq.n	8003f10 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efe:	e007      	b.n	8003f10 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40014000 	.word	0x40014000

08003f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e041      	b.n	8003fca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd fbc2 	bl	80016e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f000 f99c 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <HAL_TIM_PWM_Start+0x24>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e022      	b.n	800403e <HAL_TIM_PWM_Start+0x6a>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d109      	bne.n	8004012 <HAL_TIM_PWM_Start+0x3e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e015      	b.n	800403e <HAL_TIM_PWM_Start+0x6a>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d109      	bne.n	800402c <HAL_TIM_PWM_Start+0x58>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	e008      	b.n	800403e <HAL_TIM_PWM_Start+0x6a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e068      	b.n	8004118 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <HAL_TIM_PWM_Start+0x82>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004054:	e013      	b.n	800407e <HAL_TIM_PWM_Start+0xaa>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b04      	cmp	r3, #4
 800405a:	d104      	bne.n	8004066 <HAL_TIM_PWM_Start+0x92>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004064:	e00b      	b.n	800407e <HAL_TIM_PWM_Start+0xaa>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d104      	bne.n	8004076 <HAL_TIM_PWM_Start+0xa2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004074:	e003      	b.n	800407e <HAL_TIM_PWM_Start+0xaa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2201      	movs	r2, #1
 8004084:	6839      	ldr	r1, [r7, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fb1e 	bl	80046c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a23      	ldr	r2, [pc, #140]	; (8004120 <HAL_TIM_PWM_Start+0x14c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d107      	bne.n	80040a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1d      	ldr	r2, [pc, #116]	; (8004120 <HAL_TIM_PWM_Start+0x14c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d018      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x10e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b8:	d013      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x10e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a19      	ldr	r2, [pc, #100]	; (8004124 <HAL_TIM_PWM_Start+0x150>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x10e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a17      	ldr	r2, [pc, #92]	; (8004128 <HAL_TIM_PWM_Start+0x154>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d009      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x10e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a16      	ldr	r2, [pc, #88]	; (800412c <HAL_TIM_PWM_Start+0x158>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x10e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a14      	ldr	r2, [pc, #80]	; (8004130 <HAL_TIM_PWM_Start+0x15c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d111      	bne.n	8004106 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b06      	cmp	r3, #6
 80040f2:	d010      	beq.n	8004116 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004104:	e007      	b.n	8004116 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40010000 	.word	0x40010000
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40014000 	.word	0x40014000

08004134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800414a:	2302      	movs	r3, #2
 800414c:	e0ac      	b.n	80042a8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b0c      	cmp	r3, #12
 800415a:	f200 809f 	bhi.w	800429c <HAL_TIM_PWM_ConfigChannel+0x168>
 800415e:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004199 	.word	0x08004199
 8004168:	0800429d 	.word	0x0800429d
 800416c:	0800429d 	.word	0x0800429d
 8004170:	0800429d 	.word	0x0800429d
 8004174:	080041d9 	.word	0x080041d9
 8004178:	0800429d 	.word	0x0800429d
 800417c:	0800429d 	.word	0x0800429d
 8004180:	0800429d 	.word	0x0800429d
 8004184:	0800421b 	.word	0x0800421b
 8004188:	0800429d 	.word	0x0800429d
 800418c:	0800429d 	.word	0x0800429d
 8004190:	0800429d 	.word	0x0800429d
 8004194:	0800425b 	.word	0x0800425b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f906 	bl	80043b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0208 	orr.w	r2, r2, #8
 80041b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0204 	bic.w	r2, r2, #4
 80041c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	619a      	str	r2, [r3, #24]
      break;
 80041d6:	e062      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f94c 	bl	800447c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6999      	ldr	r1, [r3, #24]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	021a      	lsls	r2, r3, #8
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	619a      	str	r2, [r3, #24]
      break;
 8004218:	e041      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f997 	bl	8004554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0208 	orr.w	r2, r2, #8
 8004234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0204 	bic.w	r2, r2, #4
 8004244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69d9      	ldr	r1, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	61da      	str	r2, [r3, #28]
      break;
 8004258:	e021      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f9e1 	bl	8004628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69d9      	ldr	r1, [r3, #28]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	021a      	lsls	r2, r3, #8
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	61da      	str	r2, [r3, #28]
      break;
 800429a:	e000      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800429c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a34      	ldr	r2, [pc, #208]	; (8004394 <TIM_Base_SetConfig+0xe4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00f      	beq.n	80042e8 <TIM_Base_SetConfig+0x38>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ce:	d00b      	beq.n	80042e8 <TIM_Base_SetConfig+0x38>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a31      	ldr	r2, [pc, #196]	; (8004398 <TIM_Base_SetConfig+0xe8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <TIM_Base_SetConfig+0x38>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a30      	ldr	r2, [pc, #192]	; (800439c <TIM_Base_SetConfig+0xec>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_Base_SetConfig+0x38>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <TIM_Base_SetConfig+0xf0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d108      	bne.n	80042fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a25      	ldr	r2, [pc, #148]	; (8004394 <TIM_Base_SetConfig+0xe4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d01b      	beq.n	800433a <TIM_Base_SetConfig+0x8a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004308:	d017      	beq.n	800433a <TIM_Base_SetConfig+0x8a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a22      	ldr	r2, [pc, #136]	; (8004398 <TIM_Base_SetConfig+0xe8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d013      	beq.n	800433a <TIM_Base_SetConfig+0x8a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a21      	ldr	r2, [pc, #132]	; (800439c <TIM_Base_SetConfig+0xec>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00f      	beq.n	800433a <TIM_Base_SetConfig+0x8a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a20      	ldr	r2, [pc, #128]	; (80043a0 <TIM_Base_SetConfig+0xf0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00b      	beq.n	800433a <TIM_Base_SetConfig+0x8a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a1f      	ldr	r2, [pc, #124]	; (80043a4 <TIM_Base_SetConfig+0xf4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d007      	beq.n	800433a <TIM_Base_SetConfig+0x8a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a1e      	ldr	r2, [pc, #120]	; (80043a8 <TIM_Base_SetConfig+0xf8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_Base_SetConfig+0x8a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <TIM_Base_SetConfig+0xfc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d108      	bne.n	800434c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a08      	ldr	r2, [pc, #32]	; (8004394 <TIM_Base_SetConfig+0xe4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d103      	bne.n	8004380 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	615a      	str	r2, [r3, #20]
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40014000 	.word	0x40014000
 80043a8:	40014400 	.word	0x40014400
 80043ac:	40014800 	.word	0x40014800

080043b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f023 0201 	bic.w	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 0302 	bic.w	r3, r3, #2
 80043f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a1c      	ldr	r2, [pc, #112]	; (8004478 <TIM_OC1_SetConfig+0xc8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d10c      	bne.n	8004426 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f023 0308 	bic.w	r3, r3, #8
 8004412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f023 0304 	bic.w	r3, r3, #4
 8004424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a13      	ldr	r2, [pc, #76]	; (8004478 <TIM_OC1_SetConfig+0xc8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d111      	bne.n	8004452 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800443c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	621a      	str	r2, [r3, #32]
}
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	40010000 	.word	0x40010000

0800447c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f023 0210 	bic.w	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f023 0320 	bic.w	r3, r3, #32
 80044c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <TIM_OC2_SetConfig+0xd4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10d      	bne.n	80044f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <TIM_OC2_SetConfig+0xd4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d113      	bne.n	8004528 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800450e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40010000 	.word	0x40010000

08004554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800459c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <TIM_OC3_SetConfig+0xd0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d10d      	bne.n	80045ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <TIM_OC3_SetConfig+0xd0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d113      	bne.n	80045fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	621a      	str	r2, [r3, #32]
}
 8004618:	bf00      	nop
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40010000 	.word	0x40010000

08004628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	031b      	lsls	r3, r3, #12
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <TIM_OC4_SetConfig+0x9c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d109      	bne.n	800469c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800468e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40010000 	.word	0x40010000

080046c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	2201      	movs	r2, #1
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1a      	ldr	r2, [r3, #32]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	43db      	mvns	r3, r3
 80046ea:	401a      	ands	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a1a      	ldr	r2, [r3, #32]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]
}
 8004706:	bf00      	nop
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004728:	2302      	movs	r3, #2
 800472a:	e050      	b.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d018      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004778:	d013      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00e      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d009      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a13      	ldr	r2, [pc, #76]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d10c      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40014000 	.word	0x40014000

080047f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e03f      	b.n	8004882 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fd f95e 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2224      	movs	r2, #36	; 0x24
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004832:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f9d1 	bl	8004bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004848:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004858:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004868:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	4613      	mov	r3, r2
 8004896:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d11d      	bne.n	80048e0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_UART_Receive_DMA+0x26>
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e016      	b.n	80048e2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Receive_DMA+0x38>
 80048be:	2302      	movs	r3, #2
 80048c0:	e00f      	b.n	80048e2 <HAL_UART_Receive_DMA+0x58>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80048d0:	88fb      	ldrh	r3, [r7, #6]
 80048d2:	461a      	mov	r2, r3
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f8d8 	bl	8004a8c <UART_Start_Receive_DMA>
 80048dc:	4603      	mov	r3, r0
 80048de:	e000      	b.n	80048e2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004942:	2b00      	cmp	r3, #0
 8004944:	d12a      	bne.n	800499c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800495a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800497a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	2b01      	cmp	r3, #1
 800498a:	d107      	bne.n	800499c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0210 	bic.w	r2, r2, #16
 800499a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d106      	bne.n	80049b2 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049a8:	4619      	mov	r1, r3
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff ffb1 	bl	8004912 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049b0:	e002      	b.n	80049b8 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f001 fd88 	bl	80064c8 <HAL_UART_RxCpltCallback>
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d108      	bne.n	80049e8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	b29b      	uxth	r3, r3
 80049de:	4619      	mov	r1, r3
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f7ff ff96 	bl	8004912 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049e6:	e002      	b.n	80049ee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7ff ff7e 	bl	80048ea <HAL_UART_RxHalfCpltCallback>
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	2b80      	cmp	r3, #128	; 0x80
 8004a14:	bf0c      	ite	eq
 8004a16:	2301      	moveq	r3, #1
 8004a18:	2300      	movne	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b21      	cmp	r3, #33	; 0x21
 8004a28:	d108      	bne.n	8004a3c <UART_DMAError+0x46>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2200      	movs	r2, #0
 8004a34:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a36:	68b8      	ldr	r0, [r7, #8]
 8004a38:	f000 f88c 	bl	8004b54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	bf0c      	ite	eq
 8004a4a:	2301      	moveq	r3, #1
 8004a4c:	2300      	movne	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b22      	cmp	r3, #34	; 0x22
 8004a5c:	d108      	bne.n	8004a70 <UART_DMAError+0x7a>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2200      	movs	r2, #0
 8004a68:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a6a:	68b8      	ldr	r0, [r7, #8]
 8004a6c:	f000 f888 	bl	8004b80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f043 0210 	orr.w	r2, r3, #16
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a7c:	68b8      	ldr	r0, [r7, #8]
 8004a7e:	f7ff ff3e 	bl	80048fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2222      	movs	r2, #34	; 0x22
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	4a23      	ldr	r2, [pc, #140]	; (8004b48 <UART_Start_Receive_DMA+0xbc>)
 8004aba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	4a22      	ldr	r2, [pc, #136]	; (8004b4c <UART_Start_Receive_DMA+0xc0>)
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	4a21      	ldr	r2, [pc, #132]	; (8004b50 <UART_Start_Receive_DMA+0xc4>)
 8004aca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	f7fd fb10 	bl	8002110 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004af0:	2300      	movs	r3, #0
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b3c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	0800492b 	.word	0x0800492b
 8004b4c:	080049c1 	.word	0x080049c1
 8004b50:	080049f7 	.word	0x080049f7

08004b54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b6a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d107      	bne.n	8004bc0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0210 	bic.w	r2, r2, #16
 8004bbe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be0:	b09f      	sub	sp, #124	; 0x7c
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf2:	68d9      	ldr	r1, [r3, #12]
 8004bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	ea40 0301 	orr.w	r3, r0, r1
 8004bfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c20:	f021 010c 	bic.w	r1, r1, #12
 8004c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3a:	6999      	ldr	r1, [r3, #24]
 8004c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	ea40 0301 	orr.w	r3, r0, r1
 8004c44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4bc5      	ldr	r3, [pc, #788]	; (8004f60 <UART_SetConfig+0x384>)
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d004      	beq.n	8004c5a <UART_SetConfig+0x7e>
 8004c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4bc3      	ldr	r3, [pc, #780]	; (8004f64 <UART_SetConfig+0x388>)
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d103      	bne.n	8004c62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c5a:	f7fe fb05 	bl	8003268 <HAL_RCC_GetPCLK2Freq>
 8004c5e:	6778      	str	r0, [r7, #116]	; 0x74
 8004c60:	e002      	b.n	8004c68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c62:	f7fe faed 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 8004c66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c70:	f040 80b6 	bne.w	8004de0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c76:	461c      	mov	r4, r3
 8004c78:	f04f 0500 	mov.w	r5, #0
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	462b      	mov	r3, r5
 8004c80:	1891      	adds	r1, r2, r2
 8004c82:	6439      	str	r1, [r7, #64]	; 0x40
 8004c84:	415b      	adcs	r3, r3
 8004c86:	647b      	str	r3, [r7, #68]	; 0x44
 8004c88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c8c:	1912      	adds	r2, r2, r4
 8004c8e:	eb45 0303 	adc.w	r3, r5, r3
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f04f 0100 	mov.w	r1, #0
 8004c9a:	00d9      	lsls	r1, r3, #3
 8004c9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ca0:	00d0      	lsls	r0, r2, #3
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	1911      	adds	r1, r2, r4
 8004ca8:	6639      	str	r1, [r7, #96]	; 0x60
 8004caa:	416b      	adcs	r3, r5
 8004cac:	667b      	str	r3, [r7, #100]	; 0x64
 8004cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	1891      	adds	r1, r2, r2
 8004cba:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cbc:	415b      	adcs	r3, r3
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004cc8:	f7fb ff1a 	bl	8000b00 <__aeabi_uldivmod>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4ba5      	ldr	r3, [pc, #660]	; (8004f68 <UART_SetConfig+0x38c>)
 8004cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	011e      	lsls	r6, r3, #4
 8004cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cdc:	461c      	mov	r4, r3
 8004cde:	f04f 0500 	mov.w	r5, #0
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	6339      	str	r1, [r7, #48]	; 0x30
 8004cea:	415b      	adcs	r3, r3
 8004cec:	637b      	str	r3, [r7, #52]	; 0x34
 8004cee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cf2:	1912      	adds	r2, r2, r4
 8004cf4:	eb45 0303 	adc.w	r3, r5, r3
 8004cf8:	f04f 0000 	mov.w	r0, #0
 8004cfc:	f04f 0100 	mov.w	r1, #0
 8004d00:	00d9      	lsls	r1, r3, #3
 8004d02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d06:	00d0      	lsls	r0, r2, #3
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	1911      	adds	r1, r2, r4
 8004d0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d10:	416b      	adcs	r3, r5
 8004d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	1891      	adds	r1, r2, r2
 8004d20:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d22:	415b      	adcs	r3, r3
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d2a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004d2e:	f7fb fee7 	bl	8000b00 <__aeabi_uldivmod>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4b8c      	ldr	r3, [pc, #560]	; (8004f68 <UART_SetConfig+0x38c>)
 8004d38:	fba3 1302 	umull	r1, r3, r3, r2
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	2164      	movs	r1, #100	; 0x64
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	3332      	adds	r3, #50	; 0x32
 8004d4a:	4a87      	ldr	r2, [pc, #540]	; (8004f68 <UART_SetConfig+0x38c>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d58:	441e      	add	r6, r3
 8004d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f04f 0100 	mov.w	r1, #0
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	1894      	adds	r4, r2, r2
 8004d68:	623c      	str	r4, [r7, #32]
 8004d6a:	415b      	adcs	r3, r3
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d72:	1812      	adds	r2, r2, r0
 8004d74:	eb41 0303 	adc.w	r3, r1, r3
 8004d78:	f04f 0400 	mov.w	r4, #0
 8004d7c:	f04f 0500 	mov.w	r5, #0
 8004d80:	00dd      	lsls	r5, r3, #3
 8004d82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d86:	00d4      	lsls	r4, r2, #3
 8004d88:	4622      	mov	r2, r4
 8004d8a:	462b      	mov	r3, r5
 8004d8c:	1814      	adds	r4, r2, r0
 8004d8e:	653c      	str	r4, [r7, #80]	; 0x50
 8004d90:	414b      	adcs	r3, r1
 8004d92:	657b      	str	r3, [r7, #84]	; 0x54
 8004d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	1891      	adds	r1, r2, r2
 8004da0:	61b9      	str	r1, [r7, #24]
 8004da2:	415b      	adcs	r3, r3
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004daa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004dae:	f7fb fea7 	bl	8000b00 <__aeabi_uldivmod>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4b6c      	ldr	r3, [pc, #432]	; (8004f68 <UART_SetConfig+0x38c>)
 8004db8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dbc:	095b      	lsrs	r3, r3, #5
 8004dbe:	2164      	movs	r1, #100	; 0x64
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	3332      	adds	r3, #50	; 0x32
 8004dca:	4a67      	ldr	r2, [pc, #412]	; (8004f68 <UART_SetConfig+0x38c>)
 8004dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	f003 0207 	and.w	r2, r3, #7
 8004dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4432      	add	r2, r6
 8004ddc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dde:	e0b9      	b.n	8004f54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de2:	461c      	mov	r4, r3
 8004de4:	f04f 0500 	mov.w	r5, #0
 8004de8:	4622      	mov	r2, r4
 8004dea:	462b      	mov	r3, r5
 8004dec:	1891      	adds	r1, r2, r2
 8004dee:	6139      	str	r1, [r7, #16]
 8004df0:	415b      	adcs	r3, r3
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004df8:	1912      	adds	r2, r2, r4
 8004dfa:	eb45 0303 	adc.w	r3, r5, r3
 8004dfe:	f04f 0000 	mov.w	r0, #0
 8004e02:	f04f 0100 	mov.w	r1, #0
 8004e06:	00d9      	lsls	r1, r3, #3
 8004e08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e0c:	00d0      	lsls	r0, r2, #3
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	eb12 0804 	adds.w	r8, r2, r4
 8004e16:	eb43 0905 	adc.w	r9, r3, r5
 8004e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	008b      	lsls	r3, r1, #2
 8004e2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e32:	0082      	lsls	r2, r0, #2
 8004e34:	4640      	mov	r0, r8
 8004e36:	4649      	mov	r1, r9
 8004e38:	f7fb fe62 	bl	8000b00 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4b49      	ldr	r3, [pc, #292]	; (8004f68 <UART_SetConfig+0x38c>)
 8004e42:	fba3 2302 	umull	r2, r3, r3, r2
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	011e      	lsls	r6, r3, #4
 8004e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f04f 0100 	mov.w	r1, #0
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	1894      	adds	r4, r2, r2
 8004e58:	60bc      	str	r4, [r7, #8]
 8004e5a:	415b      	adcs	r3, r3
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e62:	1812      	adds	r2, r2, r0
 8004e64:	eb41 0303 	adc.w	r3, r1, r3
 8004e68:	f04f 0400 	mov.w	r4, #0
 8004e6c:	f04f 0500 	mov.w	r5, #0
 8004e70:	00dd      	lsls	r5, r3, #3
 8004e72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e76:	00d4      	lsls	r4, r2, #3
 8004e78:	4622      	mov	r2, r4
 8004e7a:	462b      	mov	r3, r5
 8004e7c:	1814      	adds	r4, r2, r0
 8004e7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e80:	414b      	adcs	r3, r1
 8004e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f04f 0100 	mov.w	r1, #0
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	008b      	lsls	r3, r1, #2
 8004e98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e9c:	0082      	lsls	r2, r0, #2
 8004e9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ea2:	f7fb fe2d 	bl	8000b00 <__aeabi_uldivmod>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4b2f      	ldr	r3, [pc, #188]	; (8004f68 <UART_SetConfig+0x38c>)
 8004eac:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	2164      	movs	r1, #100	; 0x64
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	3332      	adds	r3, #50	; 0x32
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <UART_SetConfig+0x38c>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eca:	441e      	add	r6, r3
 8004ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	1894      	adds	r4, r2, r2
 8004eda:	603c      	str	r4, [r7, #0]
 8004edc:	415b      	adcs	r3, r3
 8004ede:	607b      	str	r3, [r7, #4]
 8004ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee4:	1812      	adds	r2, r2, r0
 8004ee6:	eb41 0303 	adc.w	r3, r1, r3
 8004eea:	f04f 0400 	mov.w	r4, #0
 8004eee:	f04f 0500 	mov.w	r5, #0
 8004ef2:	00dd      	lsls	r5, r3, #3
 8004ef4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ef8:	00d4      	lsls	r4, r2, #3
 8004efa:	4622      	mov	r2, r4
 8004efc:	462b      	mov	r3, r5
 8004efe:	eb12 0a00 	adds.w	sl, r2, r0
 8004f02:	eb43 0b01 	adc.w	fp, r3, r1
 8004f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f04f 0100 	mov.w	r1, #0
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	008b      	lsls	r3, r1, #2
 8004f1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f1e:	0082      	lsls	r2, r0, #2
 8004f20:	4650      	mov	r0, sl
 8004f22:	4659      	mov	r1, fp
 8004f24:	f7fb fdec 	bl	8000b00 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <UART_SetConfig+0x38c>)
 8004f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	2164      	movs	r1, #100	; 0x64
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	3332      	adds	r3, #50	; 0x32
 8004f40:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <UART_SetConfig+0x38c>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	f003 020f 	and.w	r2, r3, #15
 8004f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4432      	add	r2, r6
 8004f52:	609a      	str	r2, [r3, #8]
}
 8004f54:	bf00      	nop
 8004f56:	377c      	adds	r7, #124	; 0x7c
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5e:	bf00      	nop
 8004f60:	40011000 	.word	0x40011000
 8004f64:	40011400 	.word	0x40011400
 8004f68:	51eb851f 	.word	0x51eb851f
 8004f6c:	00000000 	.word	0x00000000

08004f70 <get_angle_from_accel>:

#include "angle.h"


void get_angle_from_accel(accel_t accel, angle_t* angle)
{
 8004f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f74:	b08e      	sub	sp, #56	; 0x38
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	eeb0 5a40 	vmov.f32	s10, s0
 8004f7c:	eef0 5a60 	vmov.f32	s11, s1
 8004f80:	eeb0 6a41 	vmov.f32	s12, s2
 8004f84:	eef0 6a61 	vmov.f32	s13, s3
 8004f88:	eeb0 7a42 	vmov.f32	s14, s4
 8004f8c:	eef0 7a62 	vmov.f32	s15, s5
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	ed87 5b02 	vstr	d5, [r7, #8]
 8004f96:	ed87 6b04 	vstr	d6, [r7, #16]
 8004f9a:	ed87 7b06 	vstr	d7, [r7, #24]
    angle_t temp_angle;

    // atan gives angle value between -90 and 90
    temp_angle.roll  = atan(accel.y / accel.z);
 8004f9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fa6:	f7fb fbfd 	bl	80007a4 <__aeabi_ddiv>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	ec43 2b17 	vmov	d7, r2, r3
 8004fb2:	eeb0 0a47 	vmov.f32	s0, s14
 8004fb6:	eef0 0a67 	vmov.f32	s1, s15
 8004fba:	f001 ff85 	bl	8006ec8 <atan>
 8004fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8004fc2:	eef0 7a60 	vmov.f32	s15, s1
 8004fc6:	ed87 7b08 	vstr	d7, [r7, #32]
    temp_angle.pitch = atan(accel.x / sqrt(accel.y*accel.y + accel.z*accel.z));
 8004fca:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004fce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fd6:	f7fb fabb 	bl	8000550 <__aeabi_dmul>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4692      	mov	sl, r2
 8004fe0:	469b      	mov	fp, r3
 8004fe2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004fe6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fea:	f7fb fab1 	bl	8000550 <__aeabi_dmul>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4650      	mov	r0, sl
 8004ff4:	4659      	mov	r1, fp
 8004ff6:	f7fb f8f5 	bl	80001e4 <__adddf3>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	ec43 2b17 	vmov	d7, r2, r3
 8005002:	eeb0 0a47 	vmov.f32	s0, s14
 8005006:	eef0 0a67 	vmov.f32	s1, s15
 800500a:	f002 f947 	bl	800729c <sqrt>
 800500e:	ec53 2b10 	vmov	r2, r3, d0
 8005012:	4640      	mov	r0, r8
 8005014:	4649      	mov	r1, r9
 8005016:	f7fb fbc5 	bl	80007a4 <__aeabi_ddiv>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	ec43 2b17 	vmov	d7, r2, r3
 8005022:	eeb0 0a47 	vmov.f32	s0, s14
 8005026:	eef0 0a67 	vmov.f32	s1, s15
 800502a:	f001 ff4d 	bl	8006ec8 <atan>
 800502e:	eeb0 7a40 	vmov.f32	s14, s0
 8005032:	eef0 7a60 	vmov.f32	s15, s1
 8005036:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

    // convert radian to degree
    temp_angle.roll  *= RADIAN_TO_DEGREE;
 800503a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800503e:	a314      	add	r3, pc, #80	; (adr r3, 8005090 <get_angle_from_accel+0x120>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb fa84 	bl	8000550 <__aeabi_dmul>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    temp_angle.pitch *= RADIAN_TO_DEGREE;
 8005050:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005054:	a30e      	add	r3, pc, #56	; (adr r3, 8005090 <get_angle_from_accel+0x120>)
 8005056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505a:	f7fb fa79 	bl	8000550 <__aeabi_dmul>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    angle->roll  =  temp_angle.roll;
 8005066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	e9c1 2300 	strd	r2, r3, [r1]
    angle->pitch = -temp_angle.pitch;
 8005070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005074:	4614      	mov	r4, r2
 8005076:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	e9c3 4502 	strd	r4, r5, [r3, #8]
}
 8005080:	bf00      	nop
 8005082:	3738      	adds	r7, #56	; 0x38
 8005084:	46bd      	mov	sp, r7
 8005086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800508a:	bf00      	nop
 800508c:	f3af 8000 	nop.w
 8005090:	1a63c1f8 	.word	0x1a63c1f8
 8005094:	404ca5dc 	.word	0x404ca5dc

08005098 <get_angle_from_gyro>:

void get_angle_from_gyro(gyro_t gyro, angle_t prev_angle, double dt, angle_t* angle)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b096      	sub	sp, #88	; 0x58
 800509c:	af00      	add	r7, sp, #0
 800509e:	eeb0 7a45 	vmov.f32	s14, s10
 80050a2:	eef0 7a65 	vmov.f32	s15, s11
 80050a6:	ed87 6b02 	vstr	d6, [r7, #8]
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80050b0:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80050b4:	ed87 2b0e 	vstr	d2, [r7, #56]	; 0x38
 80050b8:	ed87 3b04 	vstr	d3, [r7, #16]
 80050bc:	ed87 4b06 	vstr	d4, [r7, #24]
 80050c0:	ed87 7b08 	vstr	d7, [r7, #32]
    angle_t temp_angle;

    temp_angle.roll  = gyro.x * dt;
 80050c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80050c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050cc:	f7fb fa40 	bl	8000550 <__aeabi_dmul>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    temp_angle.pitch = gyro.y * dt;
 80050d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80050dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050e0:	f7fb fa36 	bl	8000550 <__aeabi_dmul>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    temp_angle.yaw   = gyro.z * dt;
 80050ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80050f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f4:	f7fb fa2c 	bl	8000550 <__aeabi_dmul>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

    angle->roll  = prev_angle.roll + temp_angle.roll;
 8005100:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005104:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005108:	f7fb f86c 	bl	80001e4 <__adddf3>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	e9c1 2300 	strd	r2, r3, [r1]
    angle->pitch = prev_angle.pitch + temp_angle.pitch;
 8005116:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800511a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800511e:	f7fb f861 	bl	80001e4 <__adddf3>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800512c:	bf00      	nop
 800512e:	3758      	adds	r7, #88	; 0x58
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <complementary_filter>:

void complementary_filter(gyro_t gyro, accel_t accel, sec dt, double alpha, angle_t* filtered_angle)
{
 8005134:	b5b0      	push	{r4, r5, r7, lr}
 8005136:	b09e      	sub	sp, #120	; 0x78
 8005138:	af00      	add	r7, sp, #0
 800513a:	ed87 6b04 	vstr	d6, [r7, #16]
 800513e:	ed87 7b02 	vstr	d7, [r7, #8]
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8005148:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
 800514c:	ed87 2b10 	vstr	d2, [r7, #64]	; 0x40
 8005150:	ed87 3b06 	vstr	d3, [r7, #24]
 8005154:	ed87 4b08 	vstr	d4, [r7, #32]
 8005158:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
    angle_t accel_angle;
    get_angle_from_accel(accel, &accel_angle);
 800515c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005160:	ed97 5b06 	vldr	d5, [r7, #24]
 8005164:	ed97 6b08 	vldr	d6, [r7, #32]
 8005168:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800516c:	4618      	mov	r0, r3
 800516e:	eeb0 0a45 	vmov.f32	s0, s10
 8005172:	eef0 0a65 	vmov.f32	s1, s11
 8005176:	eeb0 1a46 	vmov.f32	s2, s12
 800517a:	eef0 1a66 	vmov.f32	s3, s13
 800517e:	eeb0 2a47 	vmov.f32	s4, s14
 8005182:	eef0 2a67 	vmov.f32	s5, s15
 8005186:	f7ff fef3 	bl	8004f70 <get_angle_from_accel>

    angle_t gyro_angle;
    get_angle_from_gyro(gyro, *filtered_angle, dt, &gyro_angle);
 800518a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	ed93 3b00 	vldr	d3, [r3]
 8005194:	ed93 4b02 	vldr	d4, [r3, #8]
 8005198:	ed93 5b04 	vldr	d5, [r3, #16]
 800519c:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80051a0:	ed97 2b0e 	vldr	d2, [r7, #56]	; 0x38
 80051a4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80051a8:	4610      	mov	r0, r2
 80051aa:	ed97 6b04 	vldr	d6, [r7, #16]
 80051ae:	eeb0 0a41 	vmov.f32	s0, s2
 80051b2:	eef0 0a61 	vmov.f32	s1, s3
 80051b6:	eeb0 1a42 	vmov.f32	s2, s4
 80051ba:	eef0 1a62 	vmov.f32	s3, s5
 80051be:	eeb0 2a47 	vmov.f32	s4, s14
 80051c2:	eef0 2a67 	vmov.f32	s5, s15
 80051c6:	f7ff ff67 	bl	8005098 <get_angle_from_gyro>

    filtered_angle->roll  = alpha*gyro_angle.roll  + (1-alpha)*accel_angle.roll;
 80051ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80051ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051d2:	f7fb f9bd 	bl	8000550 <__aeabi_dmul>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4614      	mov	r4, r2
 80051dc:	461d      	mov	r5, r3
 80051de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	491f      	ldr	r1, [pc, #124]	; (8005264 <complementary_filter+0x130>)
 80051e8:	f7fa fffa 	bl	80001e0 <__aeabi_dsub>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4610      	mov	r0, r2
 80051f2:	4619      	mov	r1, r3
 80051f4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80051f8:	f7fb f9aa 	bl	8000550 <__aeabi_dmul>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4620      	mov	r0, r4
 8005202:	4629      	mov	r1, r5
 8005204:	f7fa ffee 	bl	80001e4 <__adddf3>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	e9c1 2300 	strd	r2, r3, [r1]
    filtered_angle->pitch = alpha*gyro_angle.pitch + (1-alpha)*accel_angle.pitch;   
 8005212:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800521a:	f7fb f999 	bl	8000550 <__aeabi_dmul>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4614      	mov	r4, r2
 8005224:	461d      	mov	r5, r3
 8005226:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800522a:	f04f 0000 	mov.w	r0, #0
 800522e:	490d      	ldr	r1, [pc, #52]	; (8005264 <complementary_filter+0x130>)
 8005230:	f7fa ffd6 	bl	80001e0 <__aeabi_dsub>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4610      	mov	r0, r2
 800523a:	4619      	mov	r1, r3
 800523c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005240:	f7fb f986 	bl	8000550 <__aeabi_dmul>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4620      	mov	r0, r4
 800524a:	4629      	mov	r1, r5
 800524c:	f7fa ffca 	bl	80001e4 <__adddf3>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800525a:	bf00      	nop
 800525c:	3778      	adds	r7, #120	; 0x78
 800525e:	46bd      	mov	sp, r7
 8005260:	bdb0      	pop	{r4, r5, r7, pc}
 8005262:	bf00      	nop
 8005264:	3ff00000 	.word	0x3ff00000

08005268 <dshot_init>:
static void dshot_enable_dma_request();


/* Main Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 f833 	bl	80052e0 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800527a:	f000 f8d3 	bl	8005424 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800527e:	f000 f8ef 	bl	8005460 <dshot_start_pwm>
}
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <dshot_write>:

/**
 * @param dshot_value 0 : disarmed, 48 to 2047 : active trottle control.
 */
void dshot_write(uint16_t dshot_value[])
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(dshot_value);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f962 	bl	800555c <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8005298:	f000 f98c 	bl	80055b4 <dshot_dma_start>
	dshot_enable_dma_request();
 800529c:	f000 f9c2 	bl	8005624 <dshot_enable_dma_request>
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d003      	beq.n	80052c0 <dshot_choose_type+0x18>
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d103      	bne.n	80052c4 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <dshot_choose_type+0x2c>)
 80052be:	e002      	b.n	80052c6 <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <dshot_choose_type+0x30>)
 80052c2:	e000      	b.n	80052c6 <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80052c4:	4b05      	ldr	r3, [pc, #20]	; (80052dc <dshot_choose_type+0x34>)
	}
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	00b71b00 	.word	0x00b71b00
 80052d8:	005b8d80 	.word	0x005b8d80
 80052dc:	002dc6c0 	.word	0x002dc6c0

080052e0 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	ed2d 8b02 	vpush	{d8}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80052ee:	4b27      	ldr	r3, [pc, #156]	; (800538c <dshot_set_timer+0xac>)
 80052f0:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	ee07 3a90 	vmov	s15, r3
 80052f8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff ffd2 	bl	80052a8 <dshot_choose_type>
 8005304:	ee07 0a90 	vmov	s15, r0
 8005308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800530c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005310:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005390 <dshot_set_timer+0xb0>
 8005314:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005318:	eeb0 0a67 	vmov.f32	s0, s15
 800531c:	f001 ff7e 	bl	800721c <lrintf>
 8005320:	4603      	mov	r3, r0
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8005328:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <dshot_set_timer+0xb4>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	897a      	ldrh	r2, [r7, #10]
 800532e:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8005330:	4b18      	ldr	r3, [pc, #96]	; (8005394 <dshot_set_timer+0xb4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2214      	movs	r2, #20
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c
 8005338:	4b16      	ldr	r3, [pc, #88]	; (8005394 <dshot_set_timer+0xb4>)
 800533a:	2214      	movs	r2, #20
 800533c:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 800533e:	4b16      	ldr	r3, [pc, #88]	; (8005398 <dshot_set_timer+0xb8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	897a      	ldrh	r2, [r7, #10]
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <dshot_set_timer+0xb8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2214      	movs	r2, #20
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c
 800534e:	4b12      	ldr	r3, [pc, #72]	; (8005398 <dshot_set_timer+0xb8>)
 8005350:	2214      	movs	r2, #20
 8005352:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8005354:	4b10      	ldr	r3, [pc, #64]	; (8005398 <dshot_set_timer+0xb8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	897a      	ldrh	r2, [r7, #10]
 800535a:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <dshot_set_timer+0xb8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2214      	movs	r2, #20
 8005362:	62da      	str	r2, [r3, #44]	; 0x2c
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <dshot_set_timer+0xb8>)
 8005366:	2214      	movs	r2, #20
 8005368:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800536a:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <dshot_set_timer+0xb4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	897a      	ldrh	r2, [r7, #10]
 8005370:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8005372:	4b08      	ldr	r3, [pc, #32]	; (8005394 <dshot_set_timer+0xb4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2214      	movs	r2, #20
 8005378:	62da      	str	r2, [r3, #44]	; 0x2c
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <dshot_set_timer+0xb4>)
 800537c:	2214      	movs	r2, #20
 800537e:	60da      	str	r2, [r3, #12]
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	ecbd 8b02 	vpop	{d8}
 800538a:	bd80      	pop	{r7, pc}
 800538c:	05f5e100 	.word	0x05f5e100
 8005390:	3c23d70a 	.word	0x3c23d70a
 8005394:	200003bc 	.word	0x200003bc
 8005398:	2000050c 	.word	0x2000050c

0800539c <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d108      	bne.n	80053c6 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053c2:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 80053c4:	e028      	b.n	8005418 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d108      	bne.n	80053e2 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053de:	60da      	str	r2, [r3, #12]
}
 80053e0:	e01a      	b.n	8005418 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d108      	bne.n	80053fe <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fa:	60da      	str	r2, [r3, #12]
}
 80053fc:	e00c      	b.n	8005418 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d107      	bne.n	8005418 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005416:	60da      	str	r2, [r3, #12]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <dshot_put_tc_callback_function+0x30>)
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <dshot_put_tc_callback_function+0x34>)
 800542e:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <dshot_put_tc_callback_function+0x38>)
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	4a08      	ldr	r2, [pc, #32]	; (8005458 <dshot_put_tc_callback_function+0x34>)
 8005436:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8005438:	4b08      	ldr	r3, [pc, #32]	; (800545c <dshot_put_tc_callback_function+0x38>)
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	4a06      	ldr	r2, [pc, #24]	; (8005458 <dshot_put_tc_callback_function+0x34>)
 800543e:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8005440:	4b04      	ldr	r3, [pc, #16]	; (8005454 <dshot_put_tc_callback_function+0x30>)
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	4a04      	ldr	r2, [pc, #16]	; (8005458 <dshot_put_tc_callback_function+0x34>)
 8005446:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	200003bc 	.word	0x200003bc
 8005458:	0800539d 	.word	0x0800539d
 800545c:	2000050c 	.word	0x2000050c

08005460 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8005464:	210c      	movs	r1, #12
 8005466:	4808      	ldr	r0, [pc, #32]	; (8005488 <dshot_start_pwm+0x28>)
 8005468:	f7fe fdb4 	bl	8003fd4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 800546c:	2108      	movs	r1, #8
 800546e:	4807      	ldr	r0, [pc, #28]	; (800548c <dshot_start_pwm+0x2c>)
 8005470:	f7fe fdb0 	bl	8003fd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8005474:	2100      	movs	r1, #0
 8005476:	4805      	ldr	r0, [pc, #20]	; (800548c <dshot_start_pwm+0x2c>)
 8005478:	f7fe fdac 	bl	8003fd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 800547c:	2104      	movs	r1, #4
 800547e:	4802      	ldr	r0, [pc, #8]	; (8005488 <dshot_start_pwm+0x28>)
 8005480:	f7fe fda8 	bl	8003fd4 <HAL_TIM_PWM_Start>
}
 8005484:	bf00      	nop
 8005486:	bd80      	pop	{r7, pc}
 8005488:	200003bc 	.word	0x200003bc
 800548c:	2000050c 	.word	0x2000050c

08005490 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 800549a:	2300      	movs	r3, #0
 800549c:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	b21a      	sxth	r2, r3
 80054a4:	7afb      	ldrb	r3, [r7, #11]
 80054a6:	b21b      	sxth	r3, r3
 80054a8:	4313      	orrs	r3, r2
 80054aa:	b21b      	sxth	r3, r3
 80054ac:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 80054b2:	893b      	ldrh	r3, [r7, #8]
 80054b4:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	e009      	b.n	80054d0 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4053      	eors	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3301      	adds	r3, #1
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	ddf2      	ble.n	80054bc <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 80054de:	893b      	ldrh	r3, [r7, #8]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	4313      	orrs	r3, r2
 80054ea:	813b      	strh	r3, [r7, #8]

	return packet;
 80054ec:	893b      	ldrh	r3, [r7, #8]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	460b      	mov	r3, r1
 8005504:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8005506:	887b      	ldrh	r3, [r7, #2]
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff ffc1 	bl	8005490 <dshot_prepare_packet>
 800550e:	4603      	mov	r3, r0
 8005510:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	e011      	b.n	800553c <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8005518:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800551c:	2b00      	cmp	r3, #0
 800551e:	da01      	bge.n	8005524 <dshot_prepare_dmabuffer+0x2a>
 8005520:	220e      	movs	r2, #14
 8005522:	e000      	b.n	8005526 <dshot_prepare_dmabuffer+0x2c>
 8005524:	2207      	movs	r2, #7
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	440b      	add	r3, r1
 800552e:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8005530:	89fb      	ldrh	r3, [r7, #14]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	3301      	adds	r3, #1
 800553a:	60bb      	str	r3, [r7, #8]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b0f      	cmp	r3, #15
 8005540:	ddea      	ble.n	8005518 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3340      	adds	r3, #64	; 0x40
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3344      	adds	r3, #68	; 0x44
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
}
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	4619      	mov	r1, r3
 800556a:	480e      	ldr	r0, [pc, #56]	; (80055a4 <dshot_prepare_dmabuffer_all+0x48>)
 800556c:	f7ff ffc5 	bl	80054fa <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3302      	adds	r3, #2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	4619      	mov	r1, r3
 8005578:	480b      	ldr	r0, [pc, #44]	; (80055a8 <dshot_prepare_dmabuffer_all+0x4c>)
 800557a:	f7ff ffbe 	bl	80054fa <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	4619      	mov	r1, r3
 8005586:	4809      	ldr	r0, [pc, #36]	; (80055ac <dshot_prepare_dmabuffer_all+0x50>)
 8005588:	f7ff ffb7 	bl	80054fa <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3306      	adds	r3, #6
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	4806      	ldr	r0, [pc, #24]	; (80055b0 <dshot_prepare_dmabuffer_all+0x54>)
 8005596:	f7ff ffb0 	bl	80054fa <dshot_prepare_dmabuffer>
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	2000009c 	.word	0x2000009c
 80055a8:	200000e4 	.word	0x200000e4
 80055ac:	2000012c 	.word	0x2000012c
 80055b0:	20000174 	.word	0x20000174

080055b4 <dshot_dma_start>:

static void dshot_dma_start()
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 80055b8:	4b14      	ldr	r3, [pc, #80]	; (800560c <dshot_dma_start+0x58>)
 80055ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055bc:	4914      	ldr	r1, [pc, #80]	; (8005610 <dshot_dma_start+0x5c>)
 80055be:	4b13      	ldr	r3, [pc, #76]	; (800560c <dshot_dma_start+0x58>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3340      	adds	r3, #64	; 0x40
 80055c4:	461a      	mov	r2, r3
 80055c6:	2312      	movs	r3, #18
 80055c8:	f7fc fda2 	bl	8002110 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 80055cc:	4b11      	ldr	r3, [pc, #68]	; (8005614 <dshot_dma_start+0x60>)
 80055ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80055d0:	4911      	ldr	r1, [pc, #68]	; (8005618 <dshot_dma_start+0x64>)
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <dshot_dma_start+0x60>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	333c      	adds	r3, #60	; 0x3c
 80055d8:	461a      	mov	r2, r3
 80055da:	2312      	movs	r3, #18
 80055dc:	f7fc fd98 	bl	8002110 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <dshot_dma_start+0x60>)
 80055e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80055e4:	490d      	ldr	r1, [pc, #52]	; (800561c <dshot_dma_start+0x68>)
 80055e6:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <dshot_dma_start+0x60>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3334      	adds	r3, #52	; 0x34
 80055ec:	461a      	mov	r2, r3
 80055ee:	2312      	movs	r3, #18
 80055f0:	f7fc fd8e 	bl	8002110 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <dshot_dma_start+0x58>)
 80055f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80055f8:	4909      	ldr	r1, [pc, #36]	; (8005620 <dshot_dma_start+0x6c>)
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <dshot_dma_start+0x58>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3338      	adds	r3, #56	; 0x38
 8005600:	461a      	mov	r2, r3
 8005602:	2312      	movs	r3, #18
 8005604:	f7fc fd84 	bl	8002110 <HAL_DMA_Start_IT>
}
 8005608:	bf00      	nop
 800560a:	bd80      	pop	{r7, pc}
 800560c:	200003bc 	.word	0x200003bc
 8005610:	2000009c 	.word	0x2000009c
 8005614:	2000050c 	.word	0x2000050c
 8005618:	200000e4 	.word	0x200000e4
 800561c:	2000012c 	.word	0x2000012c
 8005620:	20000174 	.word	0x20000174

08005624 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8005628:	4b12      	ldr	r3, [pc, #72]	; (8005674 <dshot_enable_dma_request+0x50>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	4b11      	ldr	r3, [pc, #68]	; (8005674 <dshot_enable_dma_request+0x50>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005636:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <dshot_enable_dma_request+0x54>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <dshot_enable_dma_request+0x54>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005646:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <dshot_enable_dma_request+0x54>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <dshot_enable_dma_request+0x54>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005656:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8005658:	4b06      	ldr	r3, [pc, #24]	; (8005674 <dshot_enable_dma_request+0x50>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <dshot_enable_dma_request+0x50>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005666:	60da      	str	r2, [r3, #12]
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	200003bc 	.word	0x200003bc
 8005678:	2000050c 	.word	0x2000050c

0800567c <ibus_init>:
static uint8_t ibus_lost_flag = 0;


/* Main Functions */
void ibus_init()
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 8005680:	2220      	movs	r2, #32
 8005682:	4903      	ldr	r1, [pc, #12]	; (8005690 <ibus_init+0x14>)
 8005684:	4803      	ldr	r0, [pc, #12]	; (8005694 <ibus_init+0x18>)
 8005686:	f7ff f900 	bl	800488a <HAL_UART_Receive_DMA>
}
 800568a:	bf00      	nop
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	200001bc 	.word	0x200001bc
 8005694:	200005b4 	.word	0x200005b4

08005698 <ibus_read>:

/**
 * @brief Check ibus is valid and parse ibus data from uart dma buffer
 */
bool ibus_read(uint16_t ibus_channel[], uint8_t ch_num)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	70fb      	strb	r3, [r7, #3]
	if(!ibus_is_valid()) 
 80056a4:	f000 f81c 	bl	80056e0 <ibus_is_valid>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f083 0301 	eor.w	r3, r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <ibus_read+0x20>
		return false;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e00f      	b.n	80056d8 <ibus_read+0x40>

	if(!ibus_checksum())
 80056b8:	f000 f82a 	bl	8005710 <ibus_checksum>
 80056bc:	4603      	mov	r3, r0
 80056be:	f083 0301 	eor.w	r3, r3, #1
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <ibus_read+0x34>
		return false;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e005      	b.n	80056d8 <ibus_read+0x40>

	ibus_update(ibus_channel, ch_num);
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f84d 	bl	8005770 <ibus_update>
	return true;
 80056d6:	2301      	movs	r3, #1
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <ibus_is_valid>:


/* Sub Functions */
bool ibus_is_valid()
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
	// is it ibus?
	return (uart_rx_buffer[0] == IBUS_LENGTH && uart_rx_buffer[1] == IBUS_COMMAND40);
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <ibus_is_valid+0x2c>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d105      	bne.n	80056f8 <ibus_is_valid+0x18>
 80056ec:	4b07      	ldr	r3, [pc, #28]	; (800570c <ibus_is_valid+0x2c>)
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	2b40      	cmp	r3, #64	; 0x40
 80056f2:	d101      	bne.n	80056f8 <ibus_is_valid+0x18>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <ibus_is_valid+0x1a>
 80056f8:	2300      	movs	r3, #0
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	b2db      	uxtb	r3, r3
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	200001bc 	.word	0x200001bc

08005710 <ibus_checksum>:

bool ibus_checksum()
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 	uint16_t checksum_cal = 0xffff;
 8005716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800571a:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i = 0; i < 30; i++)
 800571c:	2300      	movs	r3, #0
 800571e:	60bb      	str	r3, [r7, #8]
 8005720:	e00a      	b.n	8005738 <ibus_checksum+0x28>
		checksum_cal -= uart_rx_buffer[i];
 8005722:	4a12      	ldr	r2, [pc, #72]	; (800576c <ibus_checksum+0x5c>)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4413      	add	r3, r2
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	b29b      	uxth	r3, r3
 800572c:	89fa      	ldrh	r2, [r7, #14]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 30; i++)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	3301      	adds	r3, #1
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b1d      	cmp	r3, #29
 800573c:	ddf1      	ble.n	8005722 <ibus_checksum+0x12>

	checksum_ibus = uart_rx_buffer[31] << 8 | uart_rx_buffer[30]; // checksum value from ibus
 800573e:	4b0b      	ldr	r3, [pc, #44]	; (800576c <ibus_checksum+0x5c>)
 8005740:	7fdb      	ldrb	r3, [r3, #31]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	b21a      	sxth	r2, r3
 8005746:	4b09      	ldr	r3, [pc, #36]	; (800576c <ibus_checksum+0x5c>)
 8005748:	7f9b      	ldrb	r3, [r3, #30]
 800574a:	b21b      	sxth	r3, r3
 800574c:	4313      	orrs	r3, r2
 800574e:	b21b      	sxth	r3, r3
 8005750:	80fb      	strh	r3, [r7, #6]
	return (checksum_ibus == checksum_cal);
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	89fb      	ldrh	r3, [r7, #14]
 8005756:	429a      	cmp	r2, r3
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	b2db      	uxtb	r3, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	200001bc 	.word	0x200001bc

08005770 <ibus_update>:

void ibus_update(uint16_t ibus_channel[], uint8_t ch_num)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0, j = 2; i < ch_num; i++, j += 2)
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	2302      	movs	r3, #2
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	e018      	b.n	80057b8 <ibus_update+0x48>
	{
		ibus_channel[i] = uart_rx_buffer[j + 1] << 8 | uart_rx_buffer[j];
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	3301      	adds	r3, #1
 800578a:	4a11      	ldr	r2, [pc, #68]	; (80057d0 <ibus_update+0x60>)
 800578c:	5cd3      	ldrb	r3, [r2, r3]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	b21a      	sxth	r2, r3
 8005792:	490f      	ldr	r1, [pc, #60]	; (80057d0 <ibus_update+0x60>)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	440b      	add	r3, r1
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b21b      	sxth	r3, r3
 800579c:	4313      	orrs	r3, r2
 800579e:	b219      	sxth	r1, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	4413      	add	r3, r2
 80057a8:	b28a      	uxth	r2, r1
 80057aa:	801a      	strh	r2, [r3, #0]
	for(int i = 0, j = 2; i < ch_num; i++, j += 2)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	3302      	adds	r3, #2
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	429a      	cmp	r2, r3
 80057be:	dbe2      	blt.n	8005786 <ibus_update+0x16>
	}
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	200001bc 	.word	0x200001bc

080057d4 <is_ibus_lost>:

bool is_ibus_lost()
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
	uint8_t max_lost_flag = 20;
 80057da:	2314      	movs	r3, #20
 80057dc:	71fb      	strb	r3, [r7, #7]

	if(max_lost_flag > ibus_lost_flag)
 80057de:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <is_ibus_lost+0x34>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	79fa      	ldrb	r2, [r7, #7]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d907      	bls.n	80057f8 <is_ibus_lost+0x24>
	{
		ibus_lost_flag++;
 80057e8:	4b07      	ldr	r3, [pc, #28]	; (8005808 <is_ibus_lost+0x34>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	3301      	adds	r3, #1
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <is_ibus_lost+0x34>)
 80057f2:	701a      	strb	r2, [r3, #0]
		return false;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e000      	b.n	80057fa <is_ibus_lost+0x26>
	}

	else
		return true;
 80057f8:	2301      	movs	r3, #1
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	200001dc 	.word	0x200001dc

0800580c <ibus_lost_flag_clear>:

void ibus_lost_flag_clear()
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
	ibus_lost_flag = 0;
 8005810:	4b03      	ldr	r3, [pc, #12]	; (8005820 <ibus_lost_flag_clear+0x14>)
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	bf00      	nop
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	200001dc 	.word	0x200001dc

08005824 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
	//while(!icm20948_who_am_i());

	icm20948_device_reset();
 8005828:	f000 f95c 	bl	8005ae4 <icm20948_device_reset>
	icm20948_wakeup();
 800582c:	f000 f971 	bl	8005b12 <icm20948_wakeup>

	icm20948_clock_source(1);
 8005830:	2001      	movs	r0, #1
 8005832:	f000 f9e9 	bl	8005c08 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8005836:	f000 fa00 	bl	8005c3a <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 800583a:	f000 f984 	bl	8005b46 <icm20948_spi_slave_enable>

	icm20948_int_pin_active_low();
 800583e:	f000 fa05 	bl	8005c4c <icm20948_int_pin_active_low>
	icm20948_int_pulse();
 8005842:	f000 fa1a 	bl	8005c7a <icm20948_int_pulse>
	icm20948_int_enable_raw_data_rdy();
 8005846:	f000 fa2f 	bl	8005ca8 <icm20948_int_enable_raw_data_rdy>

	icm20948_gyro_low_pass_filter(0);
 800584a:	2000      	movs	r0, #0
 800584c:	f000 fa35 	bl	8005cba <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8005850:	2000      	movs	r0, #0
 8005852:	f000 fa4f 	bl	8005cf4 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8005856:	2000      	movs	r0, #0
 8005858:	f000 fa69 	bl	8005d2e <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 800585c:	2000      	movs	r0, #0
 800585e:	f000 fa75 	bl	8005d4c <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8005862:	f000 faa3 	bl	8005dac <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8005866:	f000 fb43 	bl	8005ef0 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 800586a:	2003      	movs	r0, #3
 800586c:	f000 fc58 	bl	8006120 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8005870:	2003      	movs	r0, #3
 8005872:	f000 fc9f 	bl	80061b4 <icm20948_accel_full_scale_select>
}
 8005876:	bf00      	nop
 8005878:	bd80      	pop	{r7, pc}

0800587a <ak09916_init>:

void ak09916_init()
{
 800587a:	b580      	push	{r7, lr}
 800587c:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 800587e:	f000 f979 	bl	8005b74 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8005882:	f000 f98e 	bl	8005ba2 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8005886:	2007      	movs	r0, #7
 8005888:	f000 f9a5 	bl	8005bd6 <icm20948_i2c_master_clk_frq>

	//while(!ak09916_who_am_i());

	ak09916_soft_reset();
 800588c:	f000 f936 	bl	8005afc <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8005890:	2008      	movs	r0, #8
 8005892:	f000 fa79 	bl	8005d88 <ak09916_operation_mode_setting>
}
 8005896:	bf00      	nop
 8005898:	bd80      	pop	{r7, pc}

0800589a <icm20948_gyro_read>:

void icm20948_gyro_read(gyro_t* data)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 80058a2:	2206      	movs	r2, #6
 80058a4:	2133      	movs	r1, #51	; 0x33
 80058a6:	2000      	movs	r0, #0
 80058a8:	f000 fd4c 	bl	8006344 <read_multiple_icm20948_reg>
 80058ac:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	b21a      	sxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b21b      	sxth	r3, r3
 80058be:	4313      	orrs	r3, r2
 80058c0:	b21b      	sxth	r3, r3
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fa fdda 	bl	800047c <__aeabi_i2d>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3302      	adds	r3, #2
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	b21a      	sxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3303      	adds	r3, #3
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	b21b      	sxth	r3, r3
 80058e4:	4313      	orrs	r3, r2
 80058e6:	b21b      	sxth	r3, r3
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fa fdc7 	bl	800047c <__aeabi_i2d>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3304      	adds	r3, #4
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	b21a      	sxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3305      	adds	r3, #5
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	b21b      	sxth	r3, r3
 800590a:	4313      	orrs	r3, r2
 800590c:	b21b      	sxth	r3, r3
 800590e:	4618      	mov	r0, r3
 8005910:	f7fa fdb4 	bl	800047c <__aeabi_i2d>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800591e:	bf00      	nop
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <icm20948_accel_read>:

void icm20948_accel_read(accel_t* data)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8005930:	2206      	movs	r2, #6
 8005932:	212d      	movs	r1, #45	; 0x2d
 8005934:	2000      	movs	r0, #0
 8005936:	f000 fd05 	bl	8006344 <read_multiple_icm20948_reg>
 800593a:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	b21a      	sxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3301      	adds	r3, #1
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	b21b      	sxth	r3, r3
 800594c:	4313      	orrs	r3, r2
 800594e:	b21b      	sxth	r3, r3
 8005950:	4618      	mov	r0, r3
 8005952:	f7fa fd93 	bl	800047c <__aeabi_i2d>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3302      	adds	r3, #2
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	b21a      	sxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3303      	adds	r3, #3
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	b21b      	sxth	r3, r3
 8005972:	4313      	orrs	r3, r2
 8005974:	b21b      	sxth	r3, r3
 8005976:	4618      	mov	r0, r3
 8005978:	f7fa fd80 	bl	800047c <__aeabi_i2d>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3304      	adds	r3, #4
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	b21a      	sxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3305      	adds	r3, #5
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	b21b      	sxth	r3, r3
 8005998:	4313      	orrs	r3, r2
 800599a:	b21b      	sxth	r3, r3
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059a4:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <icm20948_accel_read+0xa0>)
 80059a6:	edd3 7a00 	vldr	s15, [r3]
 80059aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ae:	ee17 0a90 	vmov	r0, s15
 80059b2:	f7fa fd75 	bl	80004a0 <__aeabi_f2d>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	200001e4 	.word	0x200001e4

080059cc <icm20948_gyro_read_dps>:

	return true;
}

void icm20948_gyro_read_dps(gyro_t* data)
{
 80059cc:	b5b0      	push	{r4, r5, r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	gyro_t temp_gyro;
	icm20948_gyro_read(&temp_gyro);
 80059d4:	f107 0308 	add.w	r3, r7, #8
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff ff5e 	bl	800589a <icm20948_gyro_read>

	data->x = temp_gyro.x / gyro_scale_factor;
 80059de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059e2:	4b1c      	ldr	r3, [pc, #112]	; (8005a54 <icm20948_gyro_read_dps+0x88>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fa fd5a 	bl	80004a0 <__aeabi_f2d>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4620      	mov	r0, r4
 80059f2:	4629      	mov	r1, r5
 80059f4:	f7fa fed6 	bl	80007a4 <__aeabi_ddiv>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = temp_gyro.y / gyro_scale_factor;
 8005a02:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005a06:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <icm20948_gyro_read_dps+0x88>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fa fd48 	bl	80004a0 <__aeabi_f2d>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4620      	mov	r0, r4
 8005a16:	4629      	mov	r1, r5
 8005a18:	f7fa fec4 	bl	80007a4 <__aeabi_ddiv>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = temp_gyro.z / gyro_scale_factor;
 8005a26:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <icm20948_gyro_read_dps+0x88>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fa fd36 	bl	80004a0 <__aeabi_f2d>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4620      	mov	r0, r4
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	f7fa feb2 	bl	80007a4 <__aeabi_ddiv>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8005a4a:	bf00      	nop
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bdb0      	pop	{r4, r5, r7, pc}
 8005a52:	bf00      	nop
 8005a54:	200001e0 	.word	0x200001e0

08005a58 <icm20948_accel_read_g>:

void icm20948_accel_read_g(accel_t* data)
{
 8005a58:	b5b0      	push	{r4, r5, r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	accel_t temp_accel;
	icm20948_accel_read(&temp_accel);
 8005a60:	f107 0308 	add.w	r3, r7, #8
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff ff5f 	bl	8005928 <icm20948_accel_read>

	data->x = temp_accel.x / accel_scale_factor;
 8005a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <icm20948_accel_read_g+0x88>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fa fd14 	bl	80004a0 <__aeabi_f2d>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	4629      	mov	r1, r5
 8005a80:	f7fa fe90 	bl	80007a4 <__aeabi_ddiv>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = temp_accel.y / accel_scale_factor;
 8005a8e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005a92:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <icm20948_accel_read_g+0x88>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fa fd02 	bl	80004a0 <__aeabi_f2d>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	f7fa fe7e 	bl	80007a4 <__aeabi_ddiv>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = temp_accel.z / accel_scale_factor;
 8005ab2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <icm20948_accel_read_g+0x88>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fa fcf0 	bl	80004a0 <__aeabi_f2d>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	f7fa fe6c 	bl	80007a4 <__aeabi_ddiv>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8005ad6:	bf00      	nop
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	200001e4 	.word	0x200001e4

08005ae4 <icm20948_device_reset>:
	else
		return false;
}

void icm20948_device_reset()
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8005ae8:	22c1      	movs	r2, #193	; 0xc1
 8005aea:	2106      	movs	r1, #6
 8005aec:	2000      	movs	r0, #0
 8005aee:	f000 fc05 	bl	80062fc <write_single_icm20948_reg>
	HAL_Delay(100);
 8005af2:	2064      	movs	r0, #100	; 0x64
 8005af4:	f7fc f928 	bl	8001d48 <HAL_Delay>
}
 8005af8:	bf00      	nop
 8005afa:	bd80      	pop	{r7, pc}

08005afc <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8005b00:	2101      	movs	r1, #1
 8005b02:	2032      	movs	r0, #50	; 0x32
 8005b04:	f000 fc7a 	bl	80063fc <write_single_ak09916_reg>
	HAL_Delay(100);
 8005b08:	2064      	movs	r0, #100	; 0x64
 8005b0a:	f7fc f91d 	bl	8001d48 <HAL_Delay>
}
 8005b0e:	bf00      	nop
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8005b18:	2106      	movs	r1, #6
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	f000 fbc2 	bl	80062a4 <read_single_icm20948_reg>
 8005b20:	4603      	mov	r3, r0
 8005b22:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2a:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2106      	movs	r1, #6
 8005b32:	2000      	movs	r0, #0
 8005b34:	f000 fbe2 	bl	80062fc <write_single_icm20948_reg>
	HAL_Delay(100);
 8005b38:	2064      	movs	r0, #100	; 0x64
 8005b3a:	f7fc f905 	bl	8001d48 <HAL_Delay>
}
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8005b4c:	2103      	movs	r1, #3
 8005b4e:	2000      	movs	r0, #0
 8005b50:	f000 fba8 	bl	80062a4 <read_single_icm20948_reg>
 8005b54:	4603      	mov	r3, r0
 8005b56:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	f043 0310 	orr.w	r3, r3, #16
 8005b5e:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	461a      	mov	r2, r3
 8005b64:	2103      	movs	r1, #3
 8005b66:	2000      	movs	r0, #0
 8005b68:	f000 fbc8 	bl	80062fc <write_single_icm20948_reg>
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8005b7a:	2103      	movs	r1, #3
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f000 fb91 	bl	80062a4 <read_single_icm20948_reg>
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	f043 0302 	orr.w	r3, r3, #2
 8005b8c:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	461a      	mov	r2, r3
 8005b92:	2103      	movs	r1, #3
 8005b94:	2000      	movs	r0, #0
 8005b96:	f000 fbb1 	bl	80062fc <write_single_icm20948_reg>
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8005ba8:	2103      	movs	r1, #3
 8005baa:	2000      	movs	r0, #0
 8005bac:	f000 fb7a 	bl	80062a4 <read_single_icm20948_reg>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	f043 0320 	orr.w	r3, r3, #32
 8005bba:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	2103      	movs	r1, #3
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	f000 fb9a 	bl	80062fc <write_single_icm20948_reg>
	HAL_Delay(100);
 8005bc8:	2064      	movs	r0, #100	; 0x64
 8005bca:	f7fc f8bd 	bl	8001d48 <HAL_Delay>
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	4603      	mov	r3, r0
 8005bde:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8005be0:	2101      	movs	r1, #1
 8005be2:	2030      	movs	r0, #48	; 0x30
 8005be4:	f000 fb5e 	bl	80062a4 <read_single_icm20948_reg>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8005bec:	7bfa      	ldrb	r2, [r7, #15]
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	2030      	movs	r0, #48	; 0x30
 8005bfc:	f000 fb7e 	bl	80062fc <write_single_icm20948_reg>
}
 8005c00:	bf00      	nop
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8005c12:	2106      	movs	r1, #6
 8005c14:	2000      	movs	r0, #0
 8005c16:	f000 fb45 	bl	80062a4 <read_single_icm20948_reg>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8005c1e:	7bfa      	ldrb	r2, [r7, #15]
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2106      	movs	r1, #6
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f000 fb65 	bl	80062fc <write_single_icm20948_reg>
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8005c3e:	2201      	movs	r2, #1
 8005c40:	2109      	movs	r1, #9
 8005c42:	2020      	movs	r0, #32
 8005c44:	f000 fb5a 	bl	80062fc <write_single_icm20948_reg>
}
 8005c48:	bf00      	nop
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <icm20948_int_pin_active_low>:

void icm20948_int_pin_active_low()
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_INT_PIN_CFG);
 8005c52:	210f      	movs	r1, #15
 8005c54:	2000      	movs	r0, #0
 8005c56:	f000 fb25 	bl	80062a4 <read_single_icm20948_reg>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x80;
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c64:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_INT_PIN_CFG, new_val);
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	210f      	movs	r1, #15
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	f000 fb45 	bl	80062fc <write_single_icm20948_reg>
}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <icm20948_int_pulse>:

	write_single_icm20948_reg(ub_0, B0_INT_PIN_CFG, new_val);
}

void icm20948_int_pulse()
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_INT_PIN_CFG);
 8005c80:	210f      	movs	r1, #15
 8005c82:	2000      	movs	r0, #0
 8005c84:	f000 fb0e 	bl	80062a4 <read_single_icm20948_reg>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xDF;
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	f023 0320 	bic.w	r3, r3, #32
 8005c92:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_INT_PIN_CFG, new_val);
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	461a      	mov	r2, r3
 8005c98:	210f      	movs	r1, #15
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f000 fb2e 	bl	80062fc <write_single_icm20948_reg>
}
 8005ca0:	bf00      	nop
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <icm20948_int_enable_raw_data_rdy>:

void icm20948_int_enable_raw_data_rdy()
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_INT_ENABLE_1, 0x01);
 8005cac:	2201      	movs	r2, #1
 8005cae:	2111      	movs	r1, #17
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f000 fb23 	bl	80062fc <write_single_icm20948_reg>
}
 8005cb6:	bf00      	nop
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	2020      	movs	r0, #32
 8005cc8:	f000 faec 	bl	80062a4 <read_single_icm20948_reg>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	b25a      	sxtb	r2, r3
 8005cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	b25b      	sxtb	r3, r3
 8005cde:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	2020      	movs	r0, #32
 8005ce8:	f000 fb08 	bl	80062fc <write_single_icm20948_reg>
}
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8005cfe:	2114      	movs	r1, #20
 8005d00:	2020      	movs	r0, #32
 8005d02:	f000 facf 	bl	80062a4 <read_single_icm20948_reg>
 8005d06:	4603      	mov	r3, r0
 8005d08:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	b25a      	sxtb	r2, r3
 8005d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	b25b      	sxtb	r3, r3
 8005d18:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2101      	movs	r1, #1
 8005d20:	2020      	movs	r0, #32
 8005d22:	f000 faeb 	bl	80062fc <write_single_icm20948_reg>
}
 8005d26:	bf00      	nop
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	4603      	mov	r3, r0
 8005d36:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	2020      	movs	r0, #32
 8005d40:	f000 fadc 	bl	80062fc <write_single_icm20948_reg>
}
 8005d44:	bf00      	nop
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	0a1b      	lsrs	r3, r3, #8
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8005d5e:	88fb      	ldrh	r3, [r7, #6]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2110      	movs	r1, #16
 8005d6e:	2020      	movs	r0, #32
 8005d70:	f000 fac4 	bl	80062fc <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8005d74:	7bbb      	ldrb	r3, [r7, #14]
 8005d76:	461a      	mov	r2, r3
 8005d78:	2111      	movs	r1, #17
 8005d7a:	2020      	movs	r0, #32
 8005d7c:	f000 fabe 	bl	80062fc <write_single_icm20948_reg>
}
 8005d80:	bf00      	nop
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	4619      	mov	r1, r3
 8005d96:	2031      	movs	r0, #49	; 0x31
 8005d98:	f000 fb30 	bl	80063fc <write_single_ak09916_reg>
	HAL_Delay(100);
 8005d9c:	2064      	movs	r0, #100	; 0x64
 8005d9e:	f7fb ffd3 	bl	8001d48 <HAL_Delay>
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08e      	sub	sp, #56	; 0x38
 8005db0:	af00      	add	r7, sp, #0
	gyro_t temp;
	int32_t gyro_bias[3] = {0};
 8005db2:	f107 030c 	add.w	r3, r7, #12
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	605a      	str	r2, [r3, #4]
 8005dbc:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dca:	e037      	b.n	8005e3c <icm20948_gyro_calibration+0x90>
	{
		icm20948_gyro_read(&temp);
 8005dcc:	f107 0318 	add.w	r3, r7, #24
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff fd62 	bl	800589a <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fa fb4f 	bl	800047c <__aeabi_i2d>
 8005dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005de2:	f7fa f9ff 	bl	80001e4 <__adddf3>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4610      	mov	r0, r2
 8005dec:	4619      	mov	r1, r3
 8005dee:	f7fa fe5f 	bl	8000ab0 <__aeabi_d2iz>
 8005df2:	4603      	mov	r3, r0
 8005df4:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fa fb3f 	bl	800047c <__aeabi_i2d>
 8005dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e02:	f7fa f9ef 	bl	80001e4 <__adddf3>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	f7fa fe4f 	bl	8000ab0 <__aeabi_d2iz>
 8005e12:	4603      	mov	r3, r0
 8005e14:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fa fb2f 	bl	800047c <__aeabi_i2d>
 8005e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e22:	f7fa f9df 	bl	80001e4 <__adddf3>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	f7fa fe3f 	bl	8000ab0 <__aeabi_d2iz>
 8005e32:	4603      	mov	r3, r0
 8005e34:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8005e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e38:	3301      	adds	r3, #1
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	2b63      	cmp	r3, #99	; 0x63
 8005e40:	ddc4      	ble.n	8005dcc <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a29      	ldr	r2, [pc, #164]	; (8005eec <icm20948_gyro_calibration+0x140>)
 8005e46:	fb82 1203 	smull	r1, r2, r2, r3
 8005e4a:	1152      	asrs	r2, r2, #5
 8005e4c:	17db      	asrs	r3, r3, #31
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4a25      	ldr	r2, [pc, #148]	; (8005eec <icm20948_gyro_calibration+0x140>)
 8005e56:	fb82 1203 	smull	r1, r2, r2, r3
 8005e5a:	1152      	asrs	r2, r2, #5
 8005e5c:	17db      	asrs	r3, r3, #31
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4a21      	ldr	r2, [pc, #132]	; (8005eec <icm20948_gyro_calibration+0x140>)
 8005e66:	fb82 1203 	smull	r1, r2, r2, r3
 8005e6a:	1152      	asrs	r2, r2, #5
 8005e6c:	17db      	asrs	r3, r3, #31
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	425b      	negs	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	da00      	bge.n	8005e7c <icm20948_gyro_calibration+0xd0>
 8005e7a:	3303      	adds	r3, #3
 8005e7c:	109b      	asrs	r3, r3, #2
 8005e7e:	121b      	asrs	r3, r3, #8
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	425b      	negs	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	da00      	bge.n	8005e8e <icm20948_gyro_calibration+0xe2>
 8005e8c:	3303      	adds	r3, #3
 8005e8e:	109b      	asrs	r3, r3, #2
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	425b      	negs	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	da00      	bge.n	8005e9e <icm20948_gyro_calibration+0xf2>
 8005e9c:	3303      	adds	r3, #3
 8005e9e:	109b      	asrs	r3, r3, #2
 8005ea0:	121b      	asrs	r3, r3, #8
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	425b      	negs	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da00      	bge.n	8005eb0 <icm20948_gyro_calibration+0x104>
 8005eae:	3303      	adds	r3, #3
 8005eb0:	109b      	asrs	r3, r3, #2
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	425b      	negs	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da00      	bge.n	8005ec0 <icm20948_gyro_calibration+0x114>
 8005ebe:	3303      	adds	r3, #3
 8005ec0:	109b      	asrs	r3, r3, #2
 8005ec2:	121b      	asrs	r3, r3, #8
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	425b      	negs	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	da00      	bge.n	8005ed2 <icm20948_gyro_calibration+0x126>
 8005ed0:	3303      	adds	r3, #3
 8005ed2:	109b      	asrs	r3, r3, #2
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8005ed8:	1d3a      	adds	r2, r7, #4
 8005eda:	2306      	movs	r3, #6
 8005edc:	2103      	movs	r1, #3
 8005ede:	2020      	movs	r0, #32
 8005ee0:	f000 fa60 	bl	80063a4 <write_multiple_icm20948_reg>
}
 8005ee4:	bf00      	nop
 8005ee6:	3738      	adds	r7, #56	; 0x38
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	51eb851f 	.word	0x51eb851f

08005ef0 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b094      	sub	sp, #80	; 0x50
 8005ef4:	af00      	add	r7, sp, #0
	accel_t temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8005ef6:	f107 031c 	add.w	r3, r7, #28
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	605a      	str	r2, [r3, #4]
 8005f00:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8005f02:	f107 0310 	add.w	r3, r7, #16
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	605a      	str	r2, [r3, #4]
 8005f0c:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	2300      	movs	r3, #0
 8005f14:	81bb      	strh	r3, [r7, #12]

	for(int i = 0; i < 100; i++)
 8005f16:	2300      	movs	r3, #0
 8005f18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f1a:	e037      	b.n	8005f8c <icm20948_accel_calibration+0x9c>
	{
		icm20948_accel_read(&temp);
 8005f1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fd01 	bl	8005928 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fa faa7 	bl	800047c <__aeabi_i2d>
 8005f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f32:	f7fa f957 	bl	80001e4 <__adddf3>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f7fa fdb7 	bl	8000ab0 <__aeabi_d2iz>
 8005f42:	4603      	mov	r3, r0
 8005f44:	61fb      	str	r3, [r7, #28]
		accel_bias[1] += temp.y;
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fa fa97 	bl	800047c <__aeabi_i2d>
 8005f4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f52:	f7fa f947 	bl	80001e4 <__adddf3>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	f7fa fda7 	bl	8000ab0 <__aeabi_d2iz>
 8005f62:	4603      	mov	r3, r0
 8005f64:	623b      	str	r3, [r7, #32]
		accel_bias[2] += temp.z;
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fa fa87 	bl	800047c <__aeabi_i2d>
 8005f6e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f72:	f7fa f937 	bl	80001e4 <__adddf3>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f7fa fd97 	bl	8000ab0 <__aeabi_d2iz>
 8005f82:	4603      	mov	r3, r0
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 100; i++)
 8005f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f88:	3301      	adds	r3, #1
 8005f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8e:	2b63      	cmp	r3, #99	; 0x63
 8005f90:	ddc4      	ble.n	8005f1c <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	4a60      	ldr	r2, [pc, #384]	; (8006118 <icm20948_accel_calibration+0x228>)
 8005f96:	fb82 1203 	smull	r1, r2, r2, r3
 8005f9a:	1152      	asrs	r2, r2, #5
 8005f9c:	17db      	asrs	r3, r3, #31
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	61fb      	str	r3, [r7, #28]
	accel_bias[1] /= 100;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	4a5c      	ldr	r2, [pc, #368]	; (8006118 <icm20948_accel_calibration+0x228>)
 8005fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8005faa:	1152      	asrs	r2, r2, #5
 8005fac:	17db      	asrs	r3, r3, #31
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	623b      	str	r3, [r7, #32]
	accel_bias[2] /= 100;
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	4a58      	ldr	r2, [pc, #352]	; (8006118 <icm20948_accel_calibration+0x228>)
 8005fb6:	fb82 1203 	smull	r1, r2, r2, r3
 8005fba:	1152      	asrs	r2, r2, #5
 8005fbc:	17db      	asrs	r3, r3, #31
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t mask_bit[3] = {0, 0, 0};
 8005fc2:	4a56      	ldr	r2, [pc, #344]	; (800611c <icm20948_accel_calibration+0x22c>)
 8005fc4:	1d3b      	adds	r3, r7, #4
 8005fc6:	6812      	ldr	r2, [r2, #0]
 8005fc8:	4611      	mov	r1, r2
 8005fca:	8019      	strh	r1, [r3, #0]
 8005fcc:	3302      	adds	r3, #2
 8005fce:	0c12      	lsrs	r2, r2, #16
 8005fd0:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	2114      	movs	r1, #20
 8005fd6:	2010      	movs	r0, #16
 8005fd8:	f000 f9b4 	bl	8006344 <read_multiple_icm20948_reg>
 8005fdc:	64b8      	str	r0, [r7, #72]	; 0x48
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8005fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe6:	3201      	adds	r2, #1
 8005fe8:	7812      	ldrb	r2, [r2, #0]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
	mask_bit[0] = temp2[1] & 0x01;
 8005fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	713b      	strb	r3, [r7, #4]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	2117      	movs	r1, #23
 8006000:	2010      	movs	r0, #16
 8006002:	f000 f99f 	bl	8006344 <read_multiple_icm20948_reg>
 8006006:	6478      	str	r0, [r7, #68]	; 0x44
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8006008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006010:	3201      	adds	r2, #1
 8006012:	7812      	ldrb	r2, [r2, #0]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]
	mask_bit[1] = temp3[1] & 0x01;
 8006018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601a:	3301      	adds	r3, #1
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	b2db      	uxtb	r3, r3
 8006024:	717b      	strb	r3, [r7, #5]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8006026:	2202      	movs	r2, #2
 8006028:	211a      	movs	r1, #26
 800602a:	2010      	movs	r0, #16
 800602c:	f000 f98a 	bl	8006344 <read_multiple_icm20948_reg>
 8006030:	6438      	str	r0, [r7, #64]	; 0x40
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8006032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800603a:	3201      	adds	r2, #1
 800603c:	7812      	ldrb	r2, [r2, #0]
 800603e:	4313      	orrs	r3, r2
 8006040:	61bb      	str	r3, [r7, #24]
	mask_bit[2] = temp4[1] & 0x01;
 8006042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006044:	3301      	adds	r3, #1
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	b2db      	uxtb	r3, r3
 800604e:	71bb      	strb	r3, [r7, #6]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	2b00      	cmp	r3, #0
 8006056:	da00      	bge.n	800605a <icm20948_accel_calibration+0x16a>
 8006058:	3307      	adds	r3, #7
 800605a:	10db      	asrs	r3, r3, #3
 800605c:	425b      	negs	r3, r3
 800605e:	4413      	add	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	2b00      	cmp	r3, #0
 8006068:	da00      	bge.n	800606c <icm20948_accel_calibration+0x17c>
 800606a:	3307      	adds	r3, #7
 800606c:	10db      	asrs	r3, r3, #3
 800606e:	425b      	negs	r3, r3
 8006070:	4413      	add	r3, r2
 8006072:	617b      	str	r3, [r7, #20]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	2b00      	cmp	r3, #0
 800607a:	da00      	bge.n	800607e <icm20948_accel_calibration+0x18e>
 800607c:	3307      	adds	r3, #7
 800607e:	10db      	asrs	r3, r3, #3
 8006080:	425b      	negs	r3, r3
 8006082:	4413      	add	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	121b      	asrs	r3, r3, #8
 800608a:	b2db      	uxtb	r3, r3
 800608c:	723b      	strb	r3, [r7, #8]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	b2db      	uxtb	r3, r3
 8006098:	727b      	strb	r3, [r7, #9]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 800609a:	7a7a      	ldrb	r2, [r7, #9]
 800609c:	793b      	ldrb	r3, [r7, #4]
 800609e:	4313      	orrs	r3, r2
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	727b      	strb	r3, [r7, #9]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	121b      	asrs	r3, r3, #8
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	72bb      	strb	r3, [r7, #10]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	72fb      	strb	r3, [r7, #11]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 80060b8:	7afa      	ldrb	r2, [r7, #11]
 80060ba:	797b      	ldrb	r3, [r7, #5]
 80060bc:	4313      	orrs	r3, r2
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	72fb      	strb	r3, [r7, #11]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	121b      	asrs	r3, r3, #8
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	733b      	strb	r3, [r7, #12]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	f023 0301 	bic.w	r3, r3, #1
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	737b      	strb	r3, [r7, #13]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 80060d6:	7b7a      	ldrb	r2, [r7, #13]
 80060d8:	79bb      	ldrb	r3, [r7, #6]
 80060da:	4313      	orrs	r3, r2
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	737b      	strb	r3, [r7, #13]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 80060e0:	f107 0208 	add.w	r2, r7, #8
 80060e4:	2302      	movs	r3, #2
 80060e6:	2114      	movs	r1, #20
 80060e8:	2010      	movs	r0, #16
 80060ea:	f000 f95b 	bl	80063a4 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 80060ee:	f107 0308 	add.w	r3, r7, #8
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	2302      	movs	r3, #2
 80060f6:	2117      	movs	r1, #23
 80060f8:	2010      	movs	r0, #16
 80060fa:	f000 f953 	bl	80063a4 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 80060fe:	f107 0308 	add.w	r3, r7, #8
 8006102:	1d1a      	adds	r2, r3, #4
 8006104:	2302      	movs	r3, #2
 8006106:	211a      	movs	r1, #26
 8006108:	2010      	movs	r0, #16
 800610a:	f000 f94b 	bl	80063a4 <write_multiple_icm20948_reg>
}
 800610e:	bf00      	nop
 8006110:	3750      	adds	r7, #80	; 0x50
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	51eb851f 	.word	0x51eb851f
 800611c:	08007490 	.word	0x08007490

08006120 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800612a:	2101      	movs	r1, #1
 800612c:	2020      	movs	r0, #32
 800612e:	f000 f8b9 	bl	80062a4 <read_single_icm20948_reg>
 8006132:	4603      	mov	r3, r0
 8006134:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8006136:	79fb      	ldrb	r3, [r7, #7]
 8006138:	2b03      	cmp	r3, #3
 800613a:	d827      	bhi.n	800618c <icm20948_gyro_full_scale_select+0x6c>
 800613c:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <icm20948_gyro_full_scale_select+0x24>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006155 	.word	0x08006155
 8006148:	0800615d 	.word	0x0800615d
 800614c:	0800616d 	.word	0x0800616d
 8006150:	0800617d 	.word	0x0800617d
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8006154:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <icm20948_gyro_full_scale_select+0x80>)
 8006156:	4a13      	ldr	r2, [pc, #76]	; (80061a4 <icm20948_gyro_full_scale_select+0x84>)
 8006158:	601a      	str	r2, [r3, #0]
			break;
 800615a:	e017      	b.n	800618c <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	f043 0302 	orr.w	r3, r3, #2
 8006162:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8006164:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <icm20948_gyro_full_scale_select+0x80>)
 8006166:	4a10      	ldr	r2, [pc, #64]	; (80061a8 <icm20948_gyro_full_scale_select+0x88>)
 8006168:	601a      	str	r2, [r3, #0]
			break;
 800616a:	e00f      	b.n	800618c <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	f043 0304 	orr.w	r3, r3, #4
 8006172:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8006174:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <icm20948_gyro_full_scale_select+0x80>)
 8006176:	4a0d      	ldr	r2, [pc, #52]	; (80061ac <icm20948_gyro_full_scale_select+0x8c>)
 8006178:	601a      	str	r2, [r3, #0]
			break;
 800617a:	e007      	b.n	800618c <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	f043 0306 	orr.w	r3, r3, #6
 8006182:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <icm20948_gyro_full_scale_select+0x80>)
 8006186:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <icm20948_gyro_full_scale_select+0x90>)
 8006188:	601a      	str	r2, [r3, #0]
			break;
 800618a:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	461a      	mov	r2, r3
 8006190:	2101      	movs	r1, #1
 8006192:	2020      	movs	r0, #32
 8006194:	f000 f8b2 	bl	80062fc <write_single_icm20948_reg>
}
 8006198:	bf00      	nop
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	200001e0 	.word	0x200001e0
 80061a4:	43030000 	.word	0x43030000
 80061a8:	42830000 	.word	0x42830000
 80061ac:	42033333 	.word	0x42033333
 80061b0:	41833333 	.word	0x41833333

080061b4 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80061be:	2114      	movs	r1, #20
 80061c0:	2020      	movs	r0, #32
 80061c2:	f000 f86f 	bl	80062a4 <read_single_icm20948_reg>
 80061c6:	4603      	mov	r3, r0
 80061c8:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d82b      	bhi.n	8006228 <icm20948_accel_full_scale_select+0x74>
 80061d0:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <icm20948_accel_full_scale_select+0x24>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	080061e9 	.word	0x080061e9
 80061dc:	080061f3 	.word	0x080061f3
 80061e0:	08006205 	.word	0x08006205
 80061e4:	08006217 	.word	0x08006217
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 80061e8:	4b14      	ldr	r3, [pc, #80]	; (800623c <icm20948_accel_full_scale_select+0x88>)
 80061ea:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80061ee:	601a      	str	r2, [r3, #0]
			break;
 80061f0:	e01a      	b.n	8006228 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	f043 0302 	orr.w	r3, r3, #2
 80061f8:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 80061fa:	4b10      	ldr	r3, [pc, #64]	; (800623c <icm20948_accel_full_scale_select+0x88>)
 80061fc:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8006200:	601a      	str	r2, [r3, #0]
			break;
 8006202:	e011      	b.n	8006228 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	f043 0304 	orr.w	r3, r3, #4
 800620a:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 800620c:	4b0b      	ldr	r3, [pc, #44]	; (800623c <icm20948_accel_full_scale_select+0x88>)
 800620e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8006212:	601a      	str	r2, [r3, #0]
			break;
 8006214:	e008      	b.n	8006228 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	f043 0306 	orr.w	r3, r3, #6
 800621c:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 800621e:	4b07      	ldr	r3, [pc, #28]	; (800623c <icm20948_accel_full_scale_select+0x88>)
 8006220:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8006224:	601a      	str	r2, [r3, #0]
			break;
 8006226:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	461a      	mov	r2, r3
 800622c:	2114      	movs	r1, #20
 800622e:	2020      	movs	r0, #32
 8006230:	f000 f864 	bl	80062fc <write_single_icm20948_reg>
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	200001e4 	.word	0x200001e4

08006240 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8006244:	2201      	movs	r2, #1
 8006246:	2110      	movs	r1, #16
 8006248:	4802      	ldr	r0, [pc, #8]	; (8006254 <cs_high+0x14>)
 800624a:	f7fc fba7 	bl	800299c <HAL_GPIO_WritePin>
}
 800624e:	bf00      	nop
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40020000 	.word	0x40020000

08006258 <cs_low>:

static void cs_low()
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 800625c:	2200      	movs	r2, #0
 800625e:	2110      	movs	r1, #16
 8006260:	4802      	ldr	r0, [pc, #8]	; (800626c <cs_low+0x14>)
 8006262:	f7fc fb9b 	bl	800299c <HAL_GPIO_WritePin>
}
 8006266:	bf00      	nop
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40020000 	.word	0x40020000

08006270 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 800627a:	237f      	movs	r3, #127	; 0x7f
 800627c:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	737b      	strb	r3, [r7, #13]

	cs_low();
 8006282:	f7ff ffe9 	bl	8006258 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8006286:	f107 010c 	add.w	r1, r7, #12
 800628a:	230a      	movs	r3, #10
 800628c:	2202      	movs	r2, #2
 800628e:	4804      	ldr	r0, [pc, #16]	; (80062a0 <select_user_bank+0x30>)
 8006290:	f7fd f887 	bl	80033a2 <HAL_SPI_Transmit>
	cs_high();
 8006294:	f7ff ffd4 	bl	8006240 <cs_high>
}
 8006298:	bf00      	nop
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	2000025c 	.word	0x2000025c

080062a4 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	460a      	mov	r2, r1
 80062ae:	71fb      	strb	r3, [r7, #7]
 80062b0:	4613      	mov	r3, r2
 80062b2:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 80062b4:	79bb      	ldrb	r3, [r7, #6]
 80062b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff ffd5 	bl	8006270 <select_user_bank>

	cs_low();
 80062c6:	f7ff ffc7 	bl	8006258 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80062ca:	f107 010f 	add.w	r1, r7, #15
 80062ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062d2:	2201      	movs	r2, #1
 80062d4:	4808      	ldr	r0, [pc, #32]	; (80062f8 <read_single_icm20948_reg+0x54>)
 80062d6:	f7fd f864 	bl	80033a2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80062da:	f107 010e 	add.w	r1, r7, #14
 80062de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062e2:	2201      	movs	r2, #1
 80062e4:	4804      	ldr	r0, [pc, #16]	; (80062f8 <read_single_icm20948_reg+0x54>)
 80062e6:	f7fd f998 	bl	800361a <HAL_SPI_Receive>
	cs_high();
 80062ea:	f7ff ffa9 	bl	8006240 <cs_high>

	return reg_val;
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	2000025c 	.word	0x2000025c

080062fc <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	71fb      	strb	r3, [r7, #7]
 8006306:	460b      	mov	r3, r1
 8006308:	71bb      	strb	r3, [r7, #6]
 800630a:	4613      	mov	r3, r2
 800630c:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 800630e:	79bb      	ldrb	r3, [r7, #6]
 8006310:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8006312:	797b      	ldrb	r3, [r7, #5]
 8006314:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff ffa9 	bl	8006270 <select_user_bank>

	cs_low();
 800631e:	f7ff ff9b 	bl	8006258 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8006322:	f107 010c 	add.w	r1, r7, #12
 8006326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800632a:	2202      	movs	r2, #2
 800632c:	4804      	ldr	r0, [pc, #16]	; (8006340 <write_single_icm20948_reg+0x44>)
 800632e:	f7fd f838 	bl	80033a2 <HAL_SPI_Transmit>
	cs_high();
 8006332:	f7ff ff85 	bl	8006240 <cs_high>
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	2000025c 	.word	0x2000025c

08006344 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	71fb      	strb	r3, [r7, #7]
 800634e:	460b      	mov	r3, r1
 8006350:	71bb      	strb	r3, [r7, #6]
 8006352:	4613      	mov	r3, r2
 8006354:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 8006356:	79bb      	ldrb	r3, [r7, #6]
 8006358:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800635c:	b2db      	uxtb	r3, r3
 800635e:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff ff84 	bl	8006270 <select_user_bank>

	cs_low();
 8006368:	f7ff ff76 	bl	8006258 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800636c:	f107 010f 	add.w	r1, r7, #15
 8006370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006374:	2201      	movs	r2, #1
 8006376:	4809      	ldr	r0, [pc, #36]	; (800639c <read_multiple_icm20948_reg+0x58>)
 8006378:	f7fd f813 	bl	80033a2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 800637c:	797b      	ldrb	r3, [r7, #5]
 800637e:	b29a      	uxth	r2, r3
 8006380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006384:	4906      	ldr	r1, [pc, #24]	; (80063a0 <read_multiple_icm20948_reg+0x5c>)
 8006386:	4805      	ldr	r0, [pc, #20]	; (800639c <read_multiple_icm20948_reg+0x58>)
 8006388:	f7fd f947 	bl	800361a <HAL_SPI_Receive>
	cs_high();
 800638c:	f7ff ff58 	bl	8006240 <cs_high>

	return reg_val;
 8006390:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <read_multiple_icm20948_reg+0x5c>)
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	2000025c 	.word	0x2000025c
 80063a0:	200001e8 	.word	0x200001e8

080063a4 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	603a      	str	r2, [r7, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	71fb      	strb	r3, [r7, #7]
 80063b2:	460b      	mov	r3, r1
 80063b4:	71bb      	strb	r3, [r7, #6]
 80063b6:	4613      	mov	r3, r2
 80063b8:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 80063ba:	79bb      	ldrb	r3, [r7, #6]
 80063bc:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff ff55 	bl	8006270 <select_user_bank>

	cs_low();
 80063c6:	f7ff ff47 	bl	8006258 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 80063ca:	f107 010f 	add.w	r1, r7, #15
 80063ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063d2:	2201      	movs	r2, #1
 80063d4:	4808      	ldr	r0, [pc, #32]	; (80063f8 <write_multiple_icm20948_reg+0x54>)
 80063d6:	f7fc ffe4 	bl	80033a2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 80063da:	797b      	ldrb	r3, [r7, #5]
 80063dc:	b29a      	uxth	r2, r3
 80063de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	4804      	ldr	r0, [pc, #16]	; (80063f8 <write_multiple_icm20948_reg+0x54>)
 80063e6:	f7fc ffdc 	bl	80033a2 <HAL_SPI_Transmit>
	cs_high();
 80063ea:	f7ff ff29 	bl	8006240 <cs_high>
}
 80063ee:	bf00      	nop
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	2000025c 	.word	0x2000025c

080063fc <write_single_ak09916_reg>:
	HAL_Delay(1); // 1ms 딜레이가 아니라 us 단위로 바꿔야 될 듯.
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
}

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	460a      	mov	r2, r1
 8006406:	71fb      	strb	r3, [r7, #7]
 8006408:	4613      	mov	r3, r2
 800640a:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 800640c:	220c      	movs	r2, #12
 800640e:	2103      	movs	r1, #3
 8006410:	2030      	movs	r0, #48	; 0x30
 8006412:	f7ff ff73 	bl	80062fc <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	461a      	mov	r2, r3
 800641a:	2104      	movs	r1, #4
 800641c:	2030      	movs	r0, #48	; 0x30
 800641e:	f7ff ff6d 	bl	80062fc <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8006422:	79bb      	ldrb	r3, [r7, #6]
 8006424:	461a      	mov	r2, r3
 8006426:	2106      	movs	r1, #6
 8006428:	2030      	movs	r0, #48	; 0x30
 800642a:	f7ff ff67 	bl	80062fc <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 800642e:	2281      	movs	r2, #129	; 0x81
 8006430:	2105      	movs	r1, #5
 8006432:	2030      	movs	r0, #48	; 0x30
 8006434:	f7ff ff62 	bl	80062fc <write_single_icm20948_reg>
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <imu_init>:

angle_t my_angle;


void imu_init()
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
    icm20948_init();
 8006444:	f7ff f9ee 	bl	8005824 <icm20948_init>
    ak09916_init();
 8006448:	f7ff fa17 	bl	800587a <ak09916_init>
}
 800644c:	bf00      	nop
 800644e:	bd80      	pop	{r7, pc}

08006450 <imu_update>:

/**
 * @brief calculate and update current angle
 */
void imu_update()
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08c      	sub	sp, #48	; 0x30
 8006454:	af00      	add	r7, sp, #0
    gyro_t temp_gyro;
    accel_t temp_accel;

    icm20948_gyro_read_dps(&temp_gyro);
 8006456:	f107 0318 	add.w	r3, r7, #24
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff fab6 	bl	80059cc <icm20948_gyro_read_dps>
    icm20948_accel_read_g(&temp_accel);
 8006460:	463b      	mov	r3, r7
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff faf8 	bl	8005a58 <icm20948_accel_read_g>
    complementary_filter(temp_gyro, temp_accel, imu_sampling_time*0.000001, 0.99, &my_angle);
 8006468:	4b15      	ldr	r3, [pc, #84]	; (80064c0 <imu_update+0x70>)
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f7fa f805 	bl	800047c <__aeabi_i2d>
 8006472:	a30f      	add	r3, pc, #60	; (adr r3, 80064b0 <imu_update+0x60>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f7fa f86a 	bl	8000550 <__aeabi_dmul>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	ec43 2b16 	vmov	d6, r2, r3
 8006484:	ed97 3b00 	vldr	d3, [r7]
 8006488:	ed97 4b02 	vldr	d4, [r7, #8]
 800648c:	ed97 5b04 	vldr	d5, [r7, #16]
 8006490:	ed97 0b06 	vldr	d0, [r7, #24]
 8006494:	ed97 1b08 	vldr	d1, [r7, #32]
 8006498:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800649c:	4809      	ldr	r0, [pc, #36]	; (80064c4 <imu_update+0x74>)
 800649e:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80064b8 <imu_update+0x68>
 80064a2:	f7fe fe47 	bl	8005134 <complementary_filter>
}
 80064a6:	bf00      	nop
 80064a8:	3730      	adds	r7, #48	; 0x30
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	a0b5ed8d 	.word	0xa0b5ed8d
 80064b4:	3eb0c6f7 	.word	0x3eb0c6f7
 80064b8:	7ae147ae 	.word	0x7ae147ae
 80064bc:	3fefae14 	.word	0x3fefae14
 80064c0:	2000061a 	.word	0x2000061a
 80064c4:	20000600 	.word	0x20000600

080064c8 <HAL_UART_RxCpltCallback>:

/**
 * @brief ibus receive complete interrupt
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	if(huart == IBUS_UART)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a04      	ldr	r2, [pc, #16]	; (80064e4 <HAL_UART_RxCpltCallback+0x1c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d101      	bne.n	80064dc <HAL_UART_RxCpltCallback+0x14>
		ibus_lost_flag_clear();
 80064d8:	f7ff f998 	bl	800580c <ibus_lost_flag_clear>
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	200005b4 	.word	0x200005b4

080064e8 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief rf transmitter data sent interrupt
 *        and imu data ready interrupt
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f8:	d103      	bne.n	8006502 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		led_blue_off(); //telemetry indicator
 80064fa:	f000 f825 	bl	8006548 <led_blue_off>
		nrf24l01p_tx_irq(); // clear interrupt flag
 80064fe:	f000 f8c3 	bl	8006688 <nrf24l01p_tx_irq>
	}

	if(GPIO_Pin == ICM20948_IRQ_PIN_NUMBER)
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d10a      	bne.n	800651e <HAL_GPIO_EXTI_Callback+0x36>
	{
		imu_ready = true;
 8006508:	4b07      	ldr	r3, [pc, #28]	; (8006528 <HAL_GPIO_EXTI_Callback+0x40>)
 800650a:	2201      	movs	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
		imu_sampling_time = timer2_end();
 800650e:	f000 fc9f 	bl	8006e50 <timer2_end>
 8006512:	4603      	mov	r3, r0
 8006514:	461a      	mov	r2, r3
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_GPIO_EXTI_Callback+0x44>)
 8006518:	801a      	strh	r2, [r3, #0]
		tiemr2_start();
 800651a:	f000 fc8b 	bl	8006e34 <tiemr2_start>
	}
 800651e:	bf00      	nop
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	2000061c 	.word	0x2000061c
 800652c:	2000061a 	.word	0x2000061a

08006530 <led_blue_on>:
#include "led.h"


// LED BLUE
void led_blue_on()
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_BLUE_PIN_PORT, LED_BLUE_PIN_NUMBER, RESET);
 8006534:	2200      	movs	r2, #0
 8006536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800653a:	4802      	ldr	r0, [pc, #8]	; (8006544 <led_blue_on+0x14>)
 800653c:	f7fc fa2e 	bl	800299c <HAL_GPIO_WritePin>
}
 8006540:	bf00      	nop
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40020800 	.word	0x40020800

08006548 <led_blue_off>:

void led_blue_off()
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_BLUE_PIN_PORT, LED_BLUE_PIN_NUMBER, SET);
 800654c:	2201      	movs	r2, #1
 800654e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006552:	4802      	ldr	r0, [pc, #8]	; (800655c <led_blue_off+0x14>)
 8006554:	f7fc fa22 	bl	800299c <HAL_GPIO_WritePin>
}
 8006558:	bf00      	nop
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40020800 	.word	0x40020800

08006560 <led_green_on>:
}


// LED GREEN
void led_green_on()
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_GREEN_PIN_PORT, LED_GREEN_PIN_NUMBER, SET);
 8006564:	2201      	movs	r2, #1
 8006566:	2102      	movs	r1, #2
 8006568:	4802      	ldr	r0, [pc, #8]	; (8006574 <led_green_on+0x14>)
 800656a:	f7fc fa17 	bl	800299c <HAL_GPIO_WritePin>
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40020400 	.word	0x40020400

08006578 <led_green_off>:

void led_green_off()
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_GREEN_PIN_PORT, LED_GREEN_PIN_NUMBER, RESET);
 800657c:	2200      	movs	r2, #0
 800657e:	2102      	movs	r1, #2
 8006580:	4802      	ldr	r0, [pc, #8]	; (800658c <led_green_off+0x14>)
 8006582:	f7fc fa0b 	bl	800299c <HAL_GPIO_WritePin>
}
 8006586:	bf00      	nop
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40020400 	.word	0x40020400

08006590 <motor_init>:

#include "motor.h"


void motor_init()
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
    dshot_init(DSHOT600); // use dshot as drone esc protocol
 8006594:	2002      	movs	r0, #2
 8006596:	f7fe fe67 	bl	8005268 <dshot_init>
}
 800659a:	bf00      	nop
 800659c:	bd80      	pop	{r7, pc}

0800659e <motor_update>:


void motor_update(uint16_t motor_value[]) // 매개변수에 각도 추가
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b086      	sub	sp, #24
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
    uint16_t dshot_value[4] = { 0, 0, 0, 0 };
 80065a6:	f107 030c 	add.w	r3, r7, #12
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	605a      	str	r2, [r3, #4]

    // convert motor value to dshot value
    for(int i = 0; i < 4; i++)
 80065b0:	2300      	movs	r3, #0
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e022      	b.n	80065fc <motor_update+0x5e>
    {
        if(motor_value[i] == 0) // dshot trottle : 0 (0)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d108      	bne.n	80065d6 <motor_update+0x38>
            dshot_value[i] = 0;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	f107 0218 	add.w	r2, r7, #24
 80065cc:	4413      	add	r3, r2
 80065ce:	2200      	movs	r2, #0
 80065d0:	f823 2c0c 	strh.w	r2, [r3, #-12]
 80065d4:	e00f      	b.n	80065f6 <motor_update+0x58>
        
        else // dshot throttle : 48 - 2047 (1 - 2000)
            dshot_value[i] = 47 + (motor_value[i] * 2);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	4413      	add	r3, r2
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	332f      	adds	r3, #47	; 0x2f
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	f107 0118 	add.w	r1, r7, #24
 80065f0:	440b      	add	r3, r1
 80065f2:	f823 2c0c 	strh.w	r2, [r3, #-12]
    for(int i = 0; i < 4; i++)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	3301      	adds	r3, #1
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2b03      	cmp	r3, #3
 8006600:	ddd9      	ble.n	80065b6 <motor_update+0x18>
    }

    dshot_write(dshot_value);
 8006602:	f107 030c 	add.w	r3, r7, #12
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe fe3f 	bl	800528a <dshot_write>
}
 800660c:	bf00      	nop
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	460a      	mov	r2, r1
 800661e:	80fb      	strh	r3, [r7, #6]
 8006620:	4613      	mov	r3, r2
 8006622:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8006624:	f000 f847 	bl	80066b6 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8006628:	f000 f899 	bl	800675e <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 800662c:	f000 f944 	bl	80068b8 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	4618      	mov	r0, r3
 8006634:	f000 f9cc 	bl	80069d0 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8006638:	797b      	ldrb	r3, [r7, #5]
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f9f8 	bl	8006a30 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8006640:	2003      	movs	r0, #3
 8006642:	f000 f9d8 	bl	80069f6 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8006646:	2001      	movs	r0, #1
 8006648:	f000 f94b 	bl	80068e2 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 800664c:	2005      	movs	r0, #5
 800664e:	f000 f96b 	bl	8006928 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8006652:	2003      	movs	r0, #3
 8006654:	f000 f978 	bl	8006948 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8006658:	20fa      	movs	r0, #250	; 0xfa
 800665a:	f000 f991 	bl	8006980 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 800665e:	f000 fa29 	bl	8006ab4 <ce_high>
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <nrf24l01p_tx_transmit>:
    nrf24l01p_read_rx_fifo(rx_payload, length);
    nrf24l01p_clear_rx_dr();
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload, payload_length length)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
    nrf24l01p_write_tx_fifo(tx_payload, length);
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f884 	bl	8006788 <nrf24l01p_write_tx_fifo>
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 800668e:	f000 f8d1 	bl	8006834 <nrf24l01p_get_status>
 8006692:	4603      	mov	r3, r0
 8006694:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <nrf24l01p_tx_irq+0x22>
        nrf24l01p_clear_tx_ds();
 80066a4:	f000 f8e0 	bl	8006868 <nrf24l01p_clear_tx_ds>
    else
        nrf24l01p_clear_max_rt();
}
 80066a8:	e001      	b.n	80066ae <nrf24l01p_tx_irq+0x26>
        nrf24l01p_clear_max_rt();
 80066aa:	f000 f8f1 	bl	8006890 <nrf24l01p_clear_max_rt>
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <nrf24l01p_reset>:

/* Sub Functions */
void nrf24l01p_reset()
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80066ba:	f000 f9e3 	bl	8006a84 <cs_high>
    ce_low();
 80066be:	f000 fa05 	bl	8006acc <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 80066c2:	2108      	movs	r1, #8
 80066c4:	2000      	movs	r0, #0
 80066c6:	f000 fa33 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80066ca:	213f      	movs	r1, #63	; 0x3f
 80066cc:	2001      	movs	r0, #1
 80066ce:	f000 fa2f 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80066d2:	2103      	movs	r1, #3
 80066d4:	2002      	movs	r0, #2
 80066d6:	f000 fa2b 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80066da:	2103      	movs	r1, #3
 80066dc:	2003      	movs	r0, #3
 80066de:	f000 fa27 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80066e2:	2103      	movs	r1, #3
 80066e4:	2004      	movs	r0, #4
 80066e6:	f000 fa23 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 80066ea:	2102      	movs	r1, #2
 80066ec:	2005      	movs	r0, #5
 80066ee:	f000 fa1f 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80066f2:	2107      	movs	r1, #7
 80066f4:	2006      	movs	r0, #6
 80066f6:	f000 fa1b 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 80066fa:	217e      	movs	r1, #126	; 0x7e
 80066fc:	2007      	movs	r0, #7
 80066fe:	f000 fa17 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8006702:	2100      	movs	r1, #0
 8006704:	2011      	movs	r0, #17
 8006706:	f000 fa13 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800670a:	2100      	movs	r1, #0
 800670c:	2011      	movs	r0, #17
 800670e:	f000 fa0f 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8006712:	2100      	movs	r1, #0
 8006714:	2012      	movs	r0, #18
 8006716:	f000 fa0b 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800671a:	2100      	movs	r1, #0
 800671c:	2013      	movs	r0, #19
 800671e:	f000 fa07 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8006722:	2100      	movs	r1, #0
 8006724:	2014      	movs	r0, #20
 8006726:	f000 fa03 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800672a:	2100      	movs	r1, #0
 800672c:	2015      	movs	r0, #21
 800672e:	f000 f9ff 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8006732:	2100      	movs	r1, #0
 8006734:	2016      	movs	r0, #22
 8006736:	f000 f9fb 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800673a:	2111      	movs	r1, #17
 800673c:	2017      	movs	r0, #23
 800673e:	f000 f9f7 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8006742:	2100      	movs	r1, #0
 8006744:	201c      	movs	r0, #28
 8006746:	f000 f9f3 	bl	8006b30 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 800674a:	2100      	movs	r1, #0
 800674c:	201d      	movs	r0, #29
 800674e:	f000 f9ef 	bl	8006b30 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8006752:	f000 f83f 	bl	80067d4 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8006756:	f000 f855 	bl	8006804 <nrf24l01p_flush_tx_fifo>
}
 800675a:	bf00      	nop
 800675c:	bd80      	pop	{r7, pc}

0800675e <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8006764:	2000      	movs	r0, #0
 8006766:	f000 f9bd 	bl	8006ae4 <read_register>
 800676a:	4603      	mov	r3, r0
 800676c:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	f023 0301 	bic.w	r3, r3, #1
 8006774:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	4619      	mov	r1, r3
 800677a:	2000      	movs	r0, #0
 800677c:	f000 f9d8 	bl	8006b30 <write_register>
}
 8006780:	bf00      	nop
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload, payload_length length)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af02      	add	r7, sp, #8
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	70fb      	strb	r3, [r7, #3]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8006794:	23a0      	movs	r3, #160	; 0xa0
 8006796:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8006798:	f000 f980 	bl	8006a9c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800679c:	f107 020e 	add.w	r2, r7, #14
 80067a0:	f107 010f 	add.w	r1, r7, #15
 80067a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	2301      	movs	r3, #1
 80067ac:	4808      	ldr	r0, [pc, #32]	; (80067d0 <nrf24l01p_write_tx_fifo+0x48>)
 80067ae:	f7fd f845 	bl	800383c <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, length, 2000);
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	4804      	ldr	r0, [pc, #16]	; (80067d0 <nrf24l01p_write_tx_fifo+0x48>)
 80067be:	f7fc fdf0 	bl	80033a2 <HAL_SPI_Transmit>
    cs_high(); 
 80067c2:	f000 f95f 	bl	8006a84 <cs_high>

    return status;
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20000204 	.word	0x20000204

080067d4 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 80067da:	23e2      	movs	r3, #226	; 0xe2
 80067dc:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80067de:	f000 f95d 	bl	8006a9c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80067e2:	1dba      	adds	r2, r7, #6
 80067e4:	1df9      	adds	r1, r7, #7
 80067e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2301      	movs	r3, #1
 80067ee:	4804      	ldr	r0, [pc, #16]	; (8006800 <nrf24l01p_flush_rx_fifo+0x2c>)
 80067f0:	f7fd f824 	bl	800383c <HAL_SPI_TransmitReceive>
    cs_high();
 80067f4:	f000 f946 	bl	8006a84 <cs_high>
}
 80067f8:	bf00      	nop
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000204 	.word	0x20000204

08006804 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800680a:	23e1      	movs	r3, #225	; 0xe1
 800680c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800680e:	f000 f945 	bl	8006a9c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8006812:	1dba      	adds	r2, r7, #6
 8006814:	1df9      	adds	r1, r7, #7
 8006816:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	2301      	movs	r3, #1
 800681e:	4804      	ldr	r0, [pc, #16]	; (8006830 <nrf24l01p_flush_tx_fifo+0x2c>)
 8006820:	f7fd f80c 	bl	800383c <HAL_SPI_TransmitReceive>
    cs_high();
 8006824:	f000 f92e 	bl	8006a84 <cs_high>
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20000204 	.word	0x20000204

08006834 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 800683a:	23ff      	movs	r3, #255	; 0xff
 800683c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800683e:	f000 f92d 	bl	8006a9c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8006842:	1dba      	adds	r2, r7, #6
 8006844:	1df9      	adds	r1, r7, #7
 8006846:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	2301      	movs	r3, #1
 800684e:	4805      	ldr	r0, [pc, #20]	; (8006864 <nrf24l01p_get_status+0x30>)
 8006850:	f7fc fff4 	bl	800383c <HAL_SPI_TransmitReceive>
    cs_high(); 
 8006854:	f000 f916 	bl	8006a84 <cs_high>

    return status;
 8006858:	79bb      	ldrb	r3, [r7, #6]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20000204 	.word	0x20000204

08006868 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 800686e:	f7ff ffe1 	bl	8006834 <nrf24l01p_get_status>
 8006872:	4603      	mov	r3, r0
 8006874:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	f043 0320 	orr.w	r3, r3, #32
 800687c:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	4619      	mov	r1, r3
 8006882:	2007      	movs	r0, #7
 8006884:	f000 f954 	bl	8006b30 <write_register>
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8006896:	f7ff ffcd 	bl	8006834 <nrf24l01p_get_status>
 800689a:	4603      	mov	r3, r0
 800689c:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	f043 0310 	orr.w	r3, r3, #16
 80068a4:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	4619      	mov	r1, r3
 80068aa:	2007      	movs	r0, #7
 80068ac:	f000 f940 	bl	8006b30 <write_register>
}
 80068b0:	bf00      	nop
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80068be:	2000      	movs	r0, #0
 80068c0:	f000 f910 	bl	8006ae4 <read_register>
 80068c4:	4603      	mov	r3, r0
 80068c6:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	f043 0302 	orr.w	r3, r3, #2
 80068ce:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	4619      	mov	r1, r3
 80068d4:	2000      	movs	r0, #0
 80068d6:	f000 f92b 	bl	8006b30 <write_register>
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	4603      	mov	r3, r0
 80068ea:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80068ec:	2000      	movs	r0, #0
 80068ee:	f000 f8f9 	bl	8006ae4 <read_register>
 80068f2:	4603      	mov	r3, r0
 80068f4:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d002      	beq.n	8006902 <nrf24l01p_set_crc_length+0x20>
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d005      	beq.n	800690c <nrf24l01p_set_crc_length+0x2a>
 8006900:	e009      	b.n	8006916 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	f023 0304 	bic.w	r3, r3, #4
 8006908:	73fb      	strb	r3, [r7, #15]
            break;
 800690a:	e004      	b.n	8006916 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	f043 0304 	orr.w	r3, r3, #4
 8006912:	73fb      	strb	r3, [r7, #15]
            break;
 8006914:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	4619      	mov	r1, r3
 800691a:	2000      	movs	r0, #0
 800691c:	f000 f908 	bl	8006b30 <write_register>
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	3b02      	subs	r3, #2
 8006936:	b2db      	uxtb	r3, r3
 8006938:	4619      	mov	r1, r3
 800693a:	2003      	movs	r0, #3
 800693c:	f000 f8f8 	bl	8006b30 <write_register>
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8006952:	2004      	movs	r0, #4
 8006954:	f000 f8c6 	bl	8006ae4 <read_register>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	f063 030f 	orn	r3, r3, #15
 8006962:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8006964:	7bfa      	ldrb	r2, [r7, #15]
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	4313      	orrs	r3, r2
 800696a:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	4619      	mov	r1, r3
 8006970:	2004      	movs	r0, #4
 8006972:	f000 f8dd 	bl	8006b30 <write_register>
}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 800698a:	2004      	movs	r0, #4
 800698c:	f000 f8aa 	bl	8006ae4 <read_register>
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	f043 030f 	orr.w	r3, r3, #15
 800699a:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 800699c:	88fb      	ldrh	r3, [r7, #6]
 800699e:	4a0b      	ldr	r2, [pc, #44]	; (80069cc <nrf24l01p_auto_retransmit_delay+0x4c>)
 80069a0:	fba2 2303 	umull	r2, r3, r2, r3
 80069a4:	091b      	lsrs	r3, r3, #4
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	b25a      	sxtb	r2, r3
 80069ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	b25b      	sxtb	r3, r3
 80069b6:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	4619      	mov	r1, r3
 80069bc:	2004      	movs	r0, #4
 80069be:	f000 f8b7 	bl	8006b30 <write_register>
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	10624dd3 	.word	0x10624dd3

080069d0 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 80069e0:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 80069e2:	89fb      	ldrh	r3, [r7, #14]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	4619      	mov	r1, r3
 80069e8:	2005      	movs	r0, #5
 80069ea:	f000 f8a1 	bl	8006b30 <write_register>
}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	4603      	mov	r3, r0
 80069fe:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8006a00:	2006      	movs	r0, #6
 8006a02:	f000 f86f 	bl	8006ae4 <read_register>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f023 0306 	bic.w	r3, r3, #6
 8006a0c:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	b25a      	sxtb	r2, r3
 8006a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	b25b      	sxtb	r3, r3
 8006a1c:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	4619      	mov	r1, r3
 8006a22:	2006      	movs	r0, #6
 8006a24:	f000 f884 	bl	8006b30 <write_register>
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8006a3a:	2006      	movs	r0, #6
 8006a3c:	f000 f852 	bl	8006ae4 <read_register>
 8006a40:	4603      	mov	r3, r0
 8006a42:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006a46:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8006a48:	79fb      	ldrb	r3, [r7, #7]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d00a      	beq.n	8006a64 <nrf24l01p_set_rf_air_data_rate+0x34>
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	dc0e      	bgt.n	8006a70 <nrf24l01p_set_rf_air_data_rate+0x40>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <nrf24l01p_set_rf_air_data_rate+0x3e>
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d10a      	bne.n	8006a70 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	f043 0308 	orr.w	r3, r3, #8
 8006a60:	73fb      	strb	r3, [r7, #15]
            break;
 8006a62:	e005      	b.n	8006a70 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	f043 0320 	orr.w	r3, r3, #32
 8006a6a:	73fb      	strb	r3, [r7, #15]
            break;
 8006a6c:	e000      	b.n	8006a70 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8006a6e:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	4619      	mov	r1, r3
 8006a74:	2006      	movs	r0, #6
 8006a76:	f000 f85b 	bl	8006b30 <write_register>
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a8e:	4802      	ldr	r0, [pc, #8]	; (8006a98 <cs_high+0x14>)
 8006a90:	f7fb ff84 	bl	800299c <HAL_GPIO_WritePin>
}
 8006a94:	bf00      	nop
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40020400 	.word	0x40020400

08006a9c <cs_low>:

static void cs_low()
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006aa6:	4802      	ldr	r0, [pc, #8]	; (8006ab0 <cs_low+0x14>)
 8006aa8:	f7fb ff78 	bl	800299c <HAL_GPIO_WritePin>
}
 8006aac:	bf00      	nop
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40020400 	.word	0x40020400

08006ab4 <ce_high>:

static void ce_high()
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006abe:	4802      	ldr	r0, [pc, #8]	; (8006ac8 <ce_high+0x14>)
 8006ac0:	f7fb ff6c 	bl	800299c <HAL_GPIO_WritePin>
}
 8006ac4:	bf00      	nop
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40020400 	.word	0x40020400

08006acc <ce_low>:

static void ce_low()
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ad6:	4802      	ldr	r0, [pc, #8]	; (8006ae0 <ce_low+0x14>)
 8006ad8:	f7fb ff60 	bl	800299c <HAL_GPIO_WritePin>
}
 8006adc:	bf00      	nop
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40020400 	.word	0x40020400

08006ae4 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af02      	add	r7, sp, #8
 8006aea:	4603      	mov	r3, r0
 8006aec:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8006af2:	f7ff ffd3 	bl	8006a9c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8006af6:	f107 020e 	add.w	r2, r7, #14
 8006afa:	f107 010f 	add.w	r1, r7, #15
 8006afe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	2301      	movs	r3, #1
 8006b06:	4809      	ldr	r0, [pc, #36]	; (8006b2c <read_register+0x48>)
 8006b08:	f7fc fe98 	bl	800383c <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8006b0c:	f107 010d 	add.w	r1, r7, #13
 8006b10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006b14:	2201      	movs	r2, #1
 8006b16:	4805      	ldr	r0, [pc, #20]	; (8006b2c <read_register+0x48>)
 8006b18:	f7fc fd7f 	bl	800361a <HAL_SPI_Receive>
    cs_high();
 8006b1c:	f7ff ffb2 	bl	8006a84 <cs_high>

    return read_val;
 8006b20:	7b7b      	ldrb	r3, [r7, #13]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000204 	.word	0x20000204

08006b30 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	4603      	mov	r3, r0
 8006b38:	460a      	mov	r2, r1
 8006b3a:	71fb      	strb	r3, [r7, #7]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	f043 0320 	orr.w	r3, r3, #32
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8006b4a:	79bb      	ldrb	r3, [r7, #6]
 8006b4c:	737b      	strb	r3, [r7, #13]

    cs_low();
 8006b4e:	f7ff ffa5 	bl	8006a9c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8006b52:	f107 020e 	add.w	r2, r7, #14
 8006b56:	f107 010f 	add.w	r1, r7, #15
 8006b5a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	2301      	movs	r3, #1
 8006b62:	4809      	ldr	r0, [pc, #36]	; (8006b88 <write_register+0x58>)
 8006b64:	f7fc fe6a 	bl	800383c <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8006b68:	f107 010d 	add.w	r1, r7, #13
 8006b6c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006b70:	2201      	movs	r2, #1
 8006b72:	4805      	ldr	r0, [pc, #20]	; (8006b88 <write_register+0x58>)
 8006b74:	f7fc fc15 	bl	80033a2 <HAL_SPI_Transmit>
    cs_high();
 8006b78:	f7ff ff84 	bl	8006a84 <cs_high>

    return write_val;
 8006b7c:	7b7b      	ldrb	r3, [r7, #13]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000204 	.word	0x20000204

08006b8c <rc_init>:
rc_command_t my_rc_command;


/* Main Functions */
void rc_init()
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
    ibus_init();
 8006b90:	f7fe fd74 	bl	800567c <ibus_init>
}
 8006b94:	bf00      	nop
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <rc_update>:

bool rc_update()
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
    static uint16_t ibus_channel[6] = { 0, 0, 0, 0, 0, 0 };
    rc_raw_command_t rc_raw_command = { 0 };
 8006b9e:	1d3b      	adds	r3, r7, #4
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	605a      	str	r2, [r3, #4]
 8006ba6:	609a      	str	r2, [r3, #8]

    if(!ibus_read(ibus_channel, 6))
 8006ba8:	2106      	movs	r1, #6
 8006baa:	4812      	ldr	r0, [pc, #72]	; (8006bf4 <rc_update+0x5c>)
 8006bac:	f7fe fd74 	bl	8005698 <ibus_read>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f083 0301 	eor.w	r3, r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <rc_update+0x28>
        return false;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e014      	b.n	8006bea <rc_update+0x52>

    if(is_ibus_lost())   
 8006bc0:	f7fe fe08 	bl	80057d4 <is_ibus_lost>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d004      	beq.n	8006bd4 <rc_update+0x3c>
    {
        rc_command_clear(&my_rc_command);
 8006bca:	480b      	ldr	r0, [pc, #44]	; (8006bf8 <rc_update+0x60>)
 8006bcc:	f000 f816 	bl	8006bfc <rc_command_clear>
        return false;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e00a      	b.n	8006bea <rc_update+0x52>
    }

    rc_channel_mapping(ibus_channel, &rc_raw_command);
 8006bd4:	1d3b      	adds	r3, r7, #4
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4806      	ldr	r0, [pc, #24]	; (8006bf4 <rc_update+0x5c>)
 8006bda:	f000 f82b 	bl	8006c34 <rc_channel_mapping>
    rc_get_command(rc_raw_command, &my_rc_command);
 8006bde:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <rc_update+0x60>)
 8006be0:	1d3a      	adds	r2, r7, #4
 8006be2:	ca07      	ldmia	r2, {r0, r1, r2}
 8006be4:	f000 f864 	bl	8006cb0 <rc_get_command>
    return true;
 8006be8:	2301      	movs	r3, #1
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	200001f0 	.word	0x200001f0
 8006bf8:	20000620 	.word	0x20000620

08006bfc <rc_command_clear>:


/* Sub Functions */
void rc_command_clear(rc_command_t* rc_command)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
    rc_command->start = false;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	701a      	strb	r2, [r3, #0]
    rc_command->arming = false;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	705a      	strb	r2, [r3, #1]
    
    rc_command->throttle = 0;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	805a      	strh	r2, [r3, #2]

    rc_command->roll = 0;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	809a      	strh	r2, [r3, #4]
    rc_command->pitch = 0;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	80da      	strh	r2, [r3, #6]
    rc_command->yaw = 0;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	811a      	strh	r2, [r3, #8]
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <rc_channel_mapping>:

void rc_channel_mapping(uint16_t ibus_channel[], rc_raw_command_t* rc_raw_command)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
    rc_raw_command->start = ibus_channel[4];
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	891a      	ldrh	r2, [r3, #8]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	801a      	strh	r2, [r3, #0]
    rc_raw_command->arming = ibus_channel[5];
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	895a      	ldrh	r2, [r3, #10]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	805a      	strh	r2, [r3, #2]

    rc_raw_command->throttle = ibus_channel[2];
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	889a      	ldrh	r2, [r3, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	809a      	strh	r2, [r3, #4]

    rc_raw_command->roll = ibus_channel[0];
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	881a      	ldrh	r2, [r3, #0]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	80da      	strh	r2, [r3, #6]
    rc_raw_command->pitch = ibus_channel[1];
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	885a      	ldrh	r2, [r3, #2]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	811a      	strh	r2, [r3, #8]
    rc_raw_command->yaw = ibus_channel[3];
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	88da      	ldrh	r2, [r3, #6]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	815a      	strh	r2, [r3, #10]
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <rc_set_angle_range>:

/**
 * @brief set angle command range
 */
static uint8_t rc_set_angle_range(int8_t max_angle, int8_t min_angle)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	4603      	mov	r3, r0
 8006c82:	460a      	mov	r2, r1
 8006c84:	71fb      	strb	r3, [r7, #7]
 8006c86:	4613      	mov	r3, r2
 8006c88:	71bb      	strb	r3, [r7, #6]
    int8_t angle_range = max_angle - min_angle;
 8006c8a:	79fa      	ldrb	r2, [r7, #7]
 8006c8c:	79bb      	ldrb	r3, [r7, #6]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	73fb      	strb	r3, [r7, #15]
    uint8_t scale_factor = 1000 / angle_range;
 8006c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006ca0:	73bb      	strb	r3, [r7, #14]

    return scale_factor;
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <rc_get_command>:

void rc_get_command(rc_raw_command_t rc_raw_command, rc_command_t* rc_command)
{
 8006cb0:	b590      	push	{r4, r7, lr}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	1d3c      	adds	r4, r7, #4
 8006cb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006cbc:	603b      	str	r3, [r7, #0]
    rc_command->start  = (rc_raw_command.start == 2000) ? true : false;
 8006cbe:	88bb      	ldrh	r3, [r7, #4]
 8006cc0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006cc4:	bf0c      	ite	eq
 8006cc6:	2301      	moveq	r3, #1
 8006cc8:	2300      	movne	r3, #0
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	701a      	strb	r2, [r3, #0]
    rc_command->arming = (rc_raw_command.arming == 2000) ? true : false;
 8006cd0:	88fb      	ldrh	r3, [r7, #6]
 8006cd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006cd6:	bf0c      	ite	eq
 8006cd8:	2301      	moveq	r3, #1
 8006cda:	2300      	movne	r3, #0
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	705a      	strb	r2, [r3, #1]

    rc_command->throttle = rc_raw_command.throttle - 1000;
 8006ce2:	893b      	ldrh	r3, [r7, #8]
 8006ce4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	805a      	strh	r2, [r3, #2]

    uint8_t scale_factor = rc_set_angle_range(20, -20); // send angle command upto ±20 degree
 8006cee:	f06f 0113 	mvn.w	r1, #19
 8006cf2:	2014      	movs	r0, #20
 8006cf4:	f7ff ffc1 	bl	8006c7a <rc_set_angle_range>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	75fb      	strb	r3, [r7, #23]
    rc_command->roll  = (int16_t)((rc_raw_command.roll  - 1500) / scale_factor);
 8006cfc:	897b      	ldrh	r3, [r7, #10]
 8006cfe:	f2a3 52dc 	subw	r2, r3, #1500	; 0x5dc
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
 8006d04:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d08:	b21a      	sxth	r2, r3
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	809a      	strh	r2, [r3, #4]
    rc_command->pitch = (int16_t)((rc_raw_command.pitch - 1500) / scale_factor);
 8006d0e:	89bb      	ldrh	r3, [r7, #12]
 8006d10:	f2a3 52dc 	subw	r2, r3, #1500	; 0x5dc
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d1a:	b21a      	sxth	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	80da      	strh	r2, [r3, #6]
    rc_command->yaw   = (int16_t)((rc_raw_command.yaw   - 1500) / scale_factor);
 8006d20:	89fb      	ldrh	r3, [r7, #14]
 8006d22:	f2a3 52dc 	subw	r2, r3, #1500	; 0x5dc
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d2c:	b21a      	sxth	r2, r3
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	811a      	strh	r2, [r3, #8]
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd90      	pop	{r4, r7, pc}

08006d3a <telemetry_init>:
static uint8_t telemetry_tx_buffer[8];


/* Main Functions */
void telemetry_init()
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	af00      	add	r7, sp, #0
    nrf24l01p_tx_init(2500, _1Mbps);
 8006d3e:	2100      	movs	r1, #0
 8006d40:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006d44:	f7ff fc66 	bl	8006614 <nrf24l01p_tx_init>
}
 8006d48:	bf00      	nop
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <telemetry_update>:

void telemetry_update()
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
    led_blue_on(); //telemetry indicator
 8006d50:	f7ff fbee 	bl	8006530 <led_blue_on>
    
    telemetry_tx_angle();
 8006d54:	f000 f80a 	bl	8006d6c <telemetry_tx_angle>
    telemetry_tx_rc_command();
 8006d58:	f000 f834 	bl	8006dc4 <telemetry_tx_rc_command>

    nrf24l01p_tx_transmit(telemetry_tx_buffer, 8);
 8006d5c:	2108      	movs	r1, #8
 8006d5e:	4802      	ldr	r0, [pc, #8]	; (8006d68 <telemetry_update+0x1c>)
 8006d60:	f7ff fc83 	bl	800666a <nrf24l01p_tx_transmit>

    // pid 게인 값 수신 (게인 값 변경 용이)
}
 8006d64:	bf00      	nop
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	200001fc 	.word	0x200001fc

08006d6c <telemetry_tx_angle>:


/* Sub Functions */
void telemetry_tx_angle()
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
    telemetry_tx_buffer[0] = (int8_t)(my_angle.roll);
 8006d70:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <telemetry_tx_angle+0x50>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	4610      	mov	r0, r2
 8006d78:	4619      	mov	r1, r3
 8006d7a:	f7f9 fe99 	bl	8000ab0 <__aeabi_d2iz>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	b25b      	sxtb	r3, r3
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <telemetry_tx_angle+0x54>)
 8006d86:	701a      	strb	r2, [r3, #0]
    telemetry_tx_buffer[1] = (int8_t)(my_angle.pitch);
 8006d88:	4b0c      	ldr	r3, [pc, #48]	; (8006dbc <telemetry_tx_angle+0x50>)
 8006d8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006d8e:	4610      	mov	r0, r2
 8006d90:	4619      	mov	r1, r3
 8006d92:	f7f9 fe8d 	bl	8000ab0 <__aeabi_d2iz>
 8006d96:	4603      	mov	r3, r0
 8006d98:	b25b      	sxtb	r3, r3
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	4b08      	ldr	r3, [pc, #32]	; (8006dc0 <telemetry_tx_angle+0x54>)
 8006d9e:	705a      	strb	r2, [r3, #1]
    telemetry_tx_buffer[2] = (int8_t)(my_angle.yaw);
 8006da0:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <telemetry_tx_angle+0x50>)
 8006da2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006da6:	4610      	mov	r0, r2
 8006da8:	4619      	mov	r1, r3
 8006daa:	f7f9 fe81 	bl	8000ab0 <__aeabi_d2iz>
 8006dae:	4603      	mov	r3, r0
 8006db0:	b25b      	sxtb	r3, r3
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	4b02      	ldr	r3, [pc, #8]	; (8006dc0 <telemetry_tx_angle+0x54>)
 8006db6:	709a      	strb	r2, [r3, #2]
}
 8006db8:	bf00      	nop
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20000600 	.word	0x20000600
 8006dc0:	200001fc 	.word	0x200001fc

08006dc4 <telemetry_tx_rc_command>:

void telemetry_tx_rc_command()
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
    telemetry_tx_buffer[3] = (int8_t)(my_rc_command.throttle >> 8);
 8006dc8:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <telemetry_tx_rc_command+0x4c>)
 8006dca:	885b      	ldrh	r3, [r3, #2]
 8006dcc:	0a1b      	lsrs	r3, r3, #8
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <telemetry_tx_rc_command+0x50>)
 8006dd4:	70da      	strb	r2, [r3, #3]
    telemetry_tx_buffer[4] = (int8_t)(my_rc_command.throttle);
 8006dd6:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <telemetry_tx_rc_command+0x4c>)
 8006dd8:	885b      	ldrh	r3, [r3, #2]
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <telemetry_tx_rc_command+0x50>)
 8006dde:	711a      	strb	r2, [r3, #4]

    telemetry_tx_buffer[5] = (int8_t)(my_rc_command.roll);
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <telemetry_tx_rc_command+0x4c>)
 8006de2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <telemetry_tx_rc_command+0x50>)
 8006dea:	715a      	strb	r2, [r3, #5]
    telemetry_tx_buffer[6] = (int8_t)(my_rc_command.pitch);
 8006dec:	4b08      	ldr	r3, [pc, #32]	; (8006e10 <telemetry_tx_rc_command+0x4c>)
 8006dee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	4b07      	ldr	r3, [pc, #28]	; (8006e14 <telemetry_tx_rc_command+0x50>)
 8006df6:	719a      	strb	r2, [r3, #6]
    telemetry_tx_buffer[7] = (int8_t)(my_rc_command.yaw);
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <telemetry_tx_rc_command+0x4c>)
 8006dfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	4b04      	ldr	r3, [pc, #16]	; (8006e14 <telemetry_tx_rc_command+0x50>)
 8006e02:	71da      	strb	r2, [r3, #7]
}
 8006e04:	bf00      	nop
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	20000620 	.word	0x20000620
 8006e14:	200001fc 	.word	0x200001fc

08006e18 <timer_init>:

#include "timer.h"


void timer_init()
{   
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(TIMER1);
 8006e1c:	4803      	ldr	r0, [pc, #12]	; (8006e2c <timer_init+0x14>)
 8006e1e:	f7fd f82f 	bl	8003e80 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(TIMER2);
 8006e22:	4803      	ldr	r0, [pc, #12]	; (8006e30 <timer_init+0x18>)
 8006e24:	f7fd f82c 	bl	8003e80 <HAL_TIM_Base_Start>
}
 8006e28:	bf00      	nop
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000314 	.word	0x20000314
 8006e30:	20000404 	.word	0x20000404

08006e34 <tiemr2_start>:
{
    return __HAL_TIM_GET_COUNTER(TIMER1);
}

void tiemr2_start()
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(TIMER2, 0);
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <tiemr2_start+0x18>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006e40:	bf00      	nop
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20000404 	.word	0x20000404

08006e50 <timer2_end>:

uint16_t timer2_end()
{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(TIMER2);
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <timer2_end+0x18>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	b29b      	uxth	r3, r3
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000404 	.word	0x20000404

08006e6c <__libc_init_array>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4d0d      	ldr	r5, [pc, #52]	; (8006ea4 <__libc_init_array+0x38>)
 8006e70:	4c0d      	ldr	r4, [pc, #52]	; (8006ea8 <__libc_init_array+0x3c>)
 8006e72:	1b64      	subs	r4, r4, r5
 8006e74:	10a4      	asrs	r4, r4, #2
 8006e76:	2600      	movs	r6, #0
 8006e78:	42a6      	cmp	r6, r4
 8006e7a:	d109      	bne.n	8006e90 <__libc_init_array+0x24>
 8006e7c:	4d0b      	ldr	r5, [pc, #44]	; (8006eac <__libc_init_array+0x40>)
 8006e7e:	4c0c      	ldr	r4, [pc, #48]	; (8006eb0 <__libc_init_array+0x44>)
 8006e80:	f000 fafa 	bl	8007478 <_init>
 8006e84:	1b64      	subs	r4, r4, r5
 8006e86:	10a4      	asrs	r4, r4, #2
 8006e88:	2600      	movs	r6, #0
 8006e8a:	42a6      	cmp	r6, r4
 8006e8c:	d105      	bne.n	8006e9a <__libc_init_array+0x2e>
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e94:	4798      	blx	r3
 8006e96:	3601      	adds	r6, #1
 8006e98:	e7ee      	b.n	8006e78 <__libc_init_array+0xc>
 8006e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9e:	4798      	blx	r3
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	e7f2      	b.n	8006e8a <__libc_init_array+0x1e>
 8006ea4:	08007508 	.word	0x08007508
 8006ea8:	08007508 	.word	0x08007508
 8006eac:	08007508 	.word	0x08007508
 8006eb0:	0800750c 	.word	0x0800750c

08006eb4 <memset>:
 8006eb4:	4402      	add	r2, r0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d100      	bne.n	8006ebe <memset+0xa>
 8006ebc:	4770      	bx	lr
 8006ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8006ec2:	e7f9      	b.n	8006eb8 <memset+0x4>
 8006ec4:	0000      	movs	r0, r0
	...

08006ec8 <atan>:
 8006ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	ec55 4b10 	vmov	r4, r5, d0
 8006ed0:	4bc3      	ldr	r3, [pc, #780]	; (80071e0 <atan+0x318>)
 8006ed2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006ed6:	429e      	cmp	r6, r3
 8006ed8:	46ab      	mov	fp, r5
 8006eda:	dd18      	ble.n	8006f0e <atan+0x46>
 8006edc:	4bc1      	ldr	r3, [pc, #772]	; (80071e4 <atan+0x31c>)
 8006ede:	429e      	cmp	r6, r3
 8006ee0:	dc01      	bgt.n	8006ee6 <atan+0x1e>
 8006ee2:	d109      	bne.n	8006ef8 <atan+0x30>
 8006ee4:	b144      	cbz	r4, 8006ef8 <atan+0x30>
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	462b      	mov	r3, r5
 8006eea:	4620      	mov	r0, r4
 8006eec:	4629      	mov	r1, r5
 8006eee:	f7f9 f979 	bl	80001e4 <__adddf3>
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	460d      	mov	r5, r1
 8006ef6:	e006      	b.n	8006f06 <atan+0x3e>
 8006ef8:	f1bb 0f00 	cmp.w	fp, #0
 8006efc:	f300 8131 	bgt.w	8007162 <atan+0x29a>
 8006f00:	a59b      	add	r5, pc, #620	; (adr r5, 8007170 <atan+0x2a8>)
 8006f02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f06:	ec45 4b10 	vmov	d0, r4, r5
 8006f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0e:	4bb6      	ldr	r3, [pc, #728]	; (80071e8 <atan+0x320>)
 8006f10:	429e      	cmp	r6, r3
 8006f12:	dc14      	bgt.n	8006f3e <atan+0x76>
 8006f14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006f18:	429e      	cmp	r6, r3
 8006f1a:	dc0d      	bgt.n	8006f38 <atan+0x70>
 8006f1c:	a396      	add	r3, pc, #600	; (adr r3, 8007178 <atan+0x2b0>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	ee10 0a10 	vmov	r0, s0
 8006f26:	4629      	mov	r1, r5
 8006f28:	f7f9 f95c 	bl	80001e4 <__adddf3>
 8006f2c:	4baf      	ldr	r3, [pc, #700]	; (80071ec <atan+0x324>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f7f9 fd9e 	bl	8000a70 <__aeabi_dcmpgt>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d1e6      	bne.n	8006f06 <atan+0x3e>
 8006f38:	f04f 3aff 	mov.w	sl, #4294967295
 8006f3c:	e02b      	b.n	8006f96 <atan+0xce>
 8006f3e:	f000 f963 	bl	8007208 <fabs>
 8006f42:	4bab      	ldr	r3, [pc, #684]	; (80071f0 <atan+0x328>)
 8006f44:	429e      	cmp	r6, r3
 8006f46:	ec55 4b10 	vmov	r4, r5, d0
 8006f4a:	f300 80bf 	bgt.w	80070cc <atan+0x204>
 8006f4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006f52:	429e      	cmp	r6, r3
 8006f54:	f300 80a0 	bgt.w	8007098 <atan+0x1d0>
 8006f58:	ee10 2a10 	vmov	r2, s0
 8006f5c:	ee10 0a10 	vmov	r0, s0
 8006f60:	462b      	mov	r3, r5
 8006f62:	4629      	mov	r1, r5
 8006f64:	f7f9 f93e 	bl	80001e4 <__adddf3>
 8006f68:	4ba0      	ldr	r3, [pc, #640]	; (80071ec <atan+0x324>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f7f9 f938 	bl	80001e0 <__aeabi_dsub>
 8006f70:	2200      	movs	r2, #0
 8006f72:	4606      	mov	r6, r0
 8006f74:	460f      	mov	r7, r1
 8006f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7f9 f931 	bl	80001e4 <__adddf3>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4630      	mov	r0, r6
 8006f88:	4639      	mov	r1, r7
 8006f8a:	f7f9 fc0b 	bl	80007a4 <__aeabi_ddiv>
 8006f8e:	f04f 0a00 	mov.w	sl, #0
 8006f92:	4604      	mov	r4, r0
 8006f94:	460d      	mov	r5, r1
 8006f96:	4622      	mov	r2, r4
 8006f98:	462b      	mov	r3, r5
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7f9 fad7 	bl	8000550 <__aeabi_dmul>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	4689      	mov	r9, r1
 8006faa:	f7f9 fad1 	bl	8000550 <__aeabi_dmul>
 8006fae:	a374      	add	r3, pc, #464	; (adr r3, 8007180 <atan+0x2b8>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	460f      	mov	r7, r1
 8006fb8:	f7f9 faca 	bl	8000550 <__aeabi_dmul>
 8006fbc:	a372      	add	r3, pc, #456	; (adr r3, 8007188 <atan+0x2c0>)
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f7f9 f90f 	bl	80001e4 <__adddf3>
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	463b      	mov	r3, r7
 8006fca:	f7f9 fac1 	bl	8000550 <__aeabi_dmul>
 8006fce:	a370      	add	r3, pc, #448	; (adr r3, 8007190 <atan+0x2c8>)
 8006fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd4:	f7f9 f906 	bl	80001e4 <__adddf3>
 8006fd8:	4632      	mov	r2, r6
 8006fda:	463b      	mov	r3, r7
 8006fdc:	f7f9 fab8 	bl	8000550 <__aeabi_dmul>
 8006fe0:	a36d      	add	r3, pc, #436	; (adr r3, 8007198 <atan+0x2d0>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	f7f9 f8fd 	bl	80001e4 <__adddf3>
 8006fea:	4632      	mov	r2, r6
 8006fec:	463b      	mov	r3, r7
 8006fee:	f7f9 faaf 	bl	8000550 <__aeabi_dmul>
 8006ff2:	a36b      	add	r3, pc, #428	; (adr r3, 80071a0 <atan+0x2d8>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f7f9 f8f4 	bl	80001e4 <__adddf3>
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	463b      	mov	r3, r7
 8007000:	f7f9 faa6 	bl	8000550 <__aeabi_dmul>
 8007004:	a368      	add	r3, pc, #416	; (adr r3, 80071a8 <atan+0x2e0>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	f7f9 f8eb 	bl	80001e4 <__adddf3>
 800700e:	4642      	mov	r2, r8
 8007010:	464b      	mov	r3, r9
 8007012:	f7f9 fa9d 	bl	8000550 <__aeabi_dmul>
 8007016:	a366      	add	r3, pc, #408	; (adr r3, 80071b0 <atan+0x2e8>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	4680      	mov	r8, r0
 800701e:	4689      	mov	r9, r1
 8007020:	4630      	mov	r0, r6
 8007022:	4639      	mov	r1, r7
 8007024:	f7f9 fa94 	bl	8000550 <__aeabi_dmul>
 8007028:	a363      	add	r3, pc, #396	; (adr r3, 80071b8 <atan+0x2f0>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f7f9 f8d7 	bl	80001e0 <__aeabi_dsub>
 8007032:	4632      	mov	r2, r6
 8007034:	463b      	mov	r3, r7
 8007036:	f7f9 fa8b 	bl	8000550 <__aeabi_dmul>
 800703a:	a361      	add	r3, pc, #388	; (adr r3, 80071c0 <atan+0x2f8>)
 800703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007040:	f7f9 f8ce 	bl	80001e0 <__aeabi_dsub>
 8007044:	4632      	mov	r2, r6
 8007046:	463b      	mov	r3, r7
 8007048:	f7f9 fa82 	bl	8000550 <__aeabi_dmul>
 800704c:	a35e      	add	r3, pc, #376	; (adr r3, 80071c8 <atan+0x300>)
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f7f9 f8c5 	bl	80001e0 <__aeabi_dsub>
 8007056:	4632      	mov	r2, r6
 8007058:	463b      	mov	r3, r7
 800705a:	f7f9 fa79 	bl	8000550 <__aeabi_dmul>
 800705e:	a35c      	add	r3, pc, #368	; (adr r3, 80071d0 <atan+0x308>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f7f9 f8bc 	bl	80001e0 <__aeabi_dsub>
 8007068:	4632      	mov	r2, r6
 800706a:	463b      	mov	r3, r7
 800706c:	f7f9 fa70 	bl	8000550 <__aeabi_dmul>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4640      	mov	r0, r8
 8007076:	4649      	mov	r1, r9
 8007078:	f7f9 f8b4 	bl	80001e4 <__adddf3>
 800707c:	4622      	mov	r2, r4
 800707e:	462b      	mov	r3, r5
 8007080:	f7f9 fa66 	bl	8000550 <__aeabi_dmul>
 8007084:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	d14b      	bne.n	8007126 <atan+0x25e>
 800708e:	4620      	mov	r0, r4
 8007090:	4629      	mov	r1, r5
 8007092:	f7f9 f8a5 	bl	80001e0 <__aeabi_dsub>
 8007096:	e72c      	b.n	8006ef2 <atan+0x2a>
 8007098:	ee10 0a10 	vmov	r0, s0
 800709c:	4b53      	ldr	r3, [pc, #332]	; (80071ec <atan+0x324>)
 800709e:	2200      	movs	r2, #0
 80070a0:	4629      	mov	r1, r5
 80070a2:	f7f9 f89d 	bl	80001e0 <__aeabi_dsub>
 80070a6:	4b51      	ldr	r3, [pc, #324]	; (80071ec <atan+0x324>)
 80070a8:	4606      	mov	r6, r0
 80070aa:	460f      	mov	r7, r1
 80070ac:	2200      	movs	r2, #0
 80070ae:	4620      	mov	r0, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	f7f9 f897 	bl	80001e4 <__adddf3>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	4630      	mov	r0, r6
 80070bc:	4639      	mov	r1, r7
 80070be:	f7f9 fb71 	bl	80007a4 <__aeabi_ddiv>
 80070c2:	f04f 0a01 	mov.w	sl, #1
 80070c6:	4604      	mov	r4, r0
 80070c8:	460d      	mov	r5, r1
 80070ca:	e764      	b.n	8006f96 <atan+0xce>
 80070cc:	4b49      	ldr	r3, [pc, #292]	; (80071f4 <atan+0x32c>)
 80070ce:	429e      	cmp	r6, r3
 80070d0:	da1d      	bge.n	800710e <atan+0x246>
 80070d2:	ee10 0a10 	vmov	r0, s0
 80070d6:	4b48      	ldr	r3, [pc, #288]	; (80071f8 <atan+0x330>)
 80070d8:	2200      	movs	r2, #0
 80070da:	4629      	mov	r1, r5
 80070dc:	f7f9 f880 	bl	80001e0 <__aeabi_dsub>
 80070e0:	4b45      	ldr	r3, [pc, #276]	; (80071f8 <atan+0x330>)
 80070e2:	4606      	mov	r6, r0
 80070e4:	460f      	mov	r7, r1
 80070e6:	2200      	movs	r2, #0
 80070e8:	4620      	mov	r0, r4
 80070ea:	4629      	mov	r1, r5
 80070ec:	f7f9 fa30 	bl	8000550 <__aeabi_dmul>
 80070f0:	4b3e      	ldr	r3, [pc, #248]	; (80071ec <atan+0x324>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	f7f9 f876 	bl	80001e4 <__adddf3>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4630      	mov	r0, r6
 80070fe:	4639      	mov	r1, r7
 8007100:	f7f9 fb50 	bl	80007a4 <__aeabi_ddiv>
 8007104:	f04f 0a02 	mov.w	sl, #2
 8007108:	4604      	mov	r4, r0
 800710a:	460d      	mov	r5, r1
 800710c:	e743      	b.n	8006f96 <atan+0xce>
 800710e:	462b      	mov	r3, r5
 8007110:	ee10 2a10 	vmov	r2, s0
 8007114:	4939      	ldr	r1, [pc, #228]	; (80071fc <atan+0x334>)
 8007116:	2000      	movs	r0, #0
 8007118:	f7f9 fb44 	bl	80007a4 <__aeabi_ddiv>
 800711c:	f04f 0a03 	mov.w	sl, #3
 8007120:	4604      	mov	r4, r0
 8007122:	460d      	mov	r5, r1
 8007124:	e737      	b.n	8006f96 <atan+0xce>
 8007126:	4b36      	ldr	r3, [pc, #216]	; (8007200 <atan+0x338>)
 8007128:	4e36      	ldr	r6, [pc, #216]	; (8007204 <atan+0x33c>)
 800712a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800712e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007132:	e9da 2300 	ldrd	r2, r3, [sl]
 8007136:	f7f9 f853 	bl	80001e0 <__aeabi_dsub>
 800713a:	4622      	mov	r2, r4
 800713c:	462b      	mov	r3, r5
 800713e:	f7f9 f84f 	bl	80001e0 <__aeabi_dsub>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	e9d6 0100 	ldrd	r0, r1, [r6]
 800714a:	f7f9 f849 	bl	80001e0 <__aeabi_dsub>
 800714e:	f1bb 0f00 	cmp.w	fp, #0
 8007152:	4604      	mov	r4, r0
 8007154:	460d      	mov	r5, r1
 8007156:	f6bf aed6 	bge.w	8006f06 <atan+0x3e>
 800715a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800715e:	461d      	mov	r5, r3
 8007160:	e6d1      	b.n	8006f06 <atan+0x3e>
 8007162:	a51d      	add	r5, pc, #116	; (adr r5, 80071d8 <atan+0x310>)
 8007164:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007168:	e6cd      	b.n	8006f06 <atan+0x3e>
 800716a:	bf00      	nop
 800716c:	f3af 8000 	nop.w
 8007170:	54442d18 	.word	0x54442d18
 8007174:	bff921fb 	.word	0xbff921fb
 8007178:	8800759c 	.word	0x8800759c
 800717c:	7e37e43c 	.word	0x7e37e43c
 8007180:	e322da11 	.word	0xe322da11
 8007184:	3f90ad3a 	.word	0x3f90ad3a
 8007188:	24760deb 	.word	0x24760deb
 800718c:	3fa97b4b 	.word	0x3fa97b4b
 8007190:	a0d03d51 	.word	0xa0d03d51
 8007194:	3fb10d66 	.word	0x3fb10d66
 8007198:	c54c206e 	.word	0xc54c206e
 800719c:	3fb745cd 	.word	0x3fb745cd
 80071a0:	920083ff 	.word	0x920083ff
 80071a4:	3fc24924 	.word	0x3fc24924
 80071a8:	5555550d 	.word	0x5555550d
 80071ac:	3fd55555 	.word	0x3fd55555
 80071b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80071b4:	bfa2b444 	.word	0xbfa2b444
 80071b8:	52defd9a 	.word	0x52defd9a
 80071bc:	3fadde2d 	.word	0x3fadde2d
 80071c0:	af749a6d 	.word	0xaf749a6d
 80071c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80071c8:	fe231671 	.word	0xfe231671
 80071cc:	3fbc71c6 	.word	0x3fbc71c6
 80071d0:	9998ebc4 	.word	0x9998ebc4
 80071d4:	3fc99999 	.word	0x3fc99999
 80071d8:	54442d18 	.word	0x54442d18
 80071dc:	3ff921fb 	.word	0x3ff921fb
 80071e0:	440fffff 	.word	0x440fffff
 80071e4:	7ff00000 	.word	0x7ff00000
 80071e8:	3fdbffff 	.word	0x3fdbffff
 80071ec:	3ff00000 	.word	0x3ff00000
 80071f0:	3ff2ffff 	.word	0x3ff2ffff
 80071f4:	40038000 	.word	0x40038000
 80071f8:	3ff80000 	.word	0x3ff80000
 80071fc:	bff00000 	.word	0xbff00000
 8007200:	080074d8 	.word	0x080074d8
 8007204:	080074b8 	.word	0x080074b8

08007208 <fabs>:
 8007208:	ec51 0b10 	vmov	r0, r1, d0
 800720c:	ee10 2a10 	vmov	r2, s0
 8007210:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007214:	ec43 2b10 	vmov	d0, r2, r3
 8007218:	4770      	bx	lr
	...

0800721c <lrintf>:
 800721c:	ee10 3a10 	vmov	r3, s0
 8007220:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007224:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8007228:	281e      	cmp	r0, #30
 800722a:	b082      	sub	sp, #8
 800722c:	dc2e      	bgt.n	800728c <lrintf+0x70>
 800722e:	1c41      	adds	r1, r0, #1
 8007230:	da02      	bge.n	8007238 <lrintf+0x1c>
 8007232:	2000      	movs	r0, #0
 8007234:	b002      	add	sp, #8
 8007236:	4770      	bx	lr
 8007238:	2816      	cmp	r0, #22
 800723a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800723e:	dd09      	ble.n	8007254 <lrintf+0x38>
 8007240:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007244:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007248:	3a96      	subs	r2, #150	; 0x96
 800724a:	4090      	lsls	r0, r2
 800724c:	2900      	cmp	r1, #0
 800724e:	d0f1      	beq.n	8007234 <lrintf+0x18>
 8007250:	4240      	negs	r0, r0
 8007252:	e7ef      	b.n	8007234 <lrintf+0x18>
 8007254:	4b10      	ldr	r3, [pc, #64]	; (8007298 <lrintf+0x7c>)
 8007256:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800725a:	ed93 7a00 	vldr	s14, [r3]
 800725e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8007262:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007266:	eddd 7a01 	vldr	s15, [sp, #4]
 800726a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800726e:	ee17 3a90 	vmov	r3, s15
 8007272:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007276:	d0dc      	beq.n	8007232 <lrintf+0x16>
 8007278:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800727c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8007280:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007284:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007288:	40d8      	lsrs	r0, r3
 800728a:	e7df      	b.n	800724c <lrintf+0x30>
 800728c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007290:	ee17 0a90 	vmov	r0, s15
 8007294:	e7ce      	b.n	8007234 <lrintf+0x18>
 8007296:	bf00      	nop
 8007298:	080074f8 	.word	0x080074f8

0800729c <sqrt>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	ed2d 8b02 	vpush	{d8}
 80072a2:	ec55 4b10 	vmov	r4, r5, d0
 80072a6:	f000 f82d 	bl	8007304 <__ieee754_sqrt>
 80072aa:	4b15      	ldr	r3, [pc, #84]	; (8007300 <sqrt+0x64>)
 80072ac:	eeb0 8a40 	vmov.f32	s16, s0
 80072b0:	eef0 8a60 	vmov.f32	s17, s1
 80072b4:	f993 3000 	ldrsb.w	r3, [r3]
 80072b8:	3301      	adds	r3, #1
 80072ba:	d019      	beq.n	80072f0 <sqrt+0x54>
 80072bc:	4622      	mov	r2, r4
 80072be:	462b      	mov	r3, r5
 80072c0:	4620      	mov	r0, r4
 80072c2:	4629      	mov	r1, r5
 80072c4:	f7f9 fbde 	bl	8000a84 <__aeabi_dcmpun>
 80072c8:	b990      	cbnz	r0, 80072f0 <sqrt+0x54>
 80072ca:	2200      	movs	r2, #0
 80072cc:	2300      	movs	r3, #0
 80072ce:	4620      	mov	r0, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	f7f9 fbaf 	bl	8000a34 <__aeabi_dcmplt>
 80072d6:	b158      	cbz	r0, 80072f0 <sqrt+0x54>
 80072d8:	f000 f8c8 	bl	800746c <__errno>
 80072dc:	2321      	movs	r3, #33	; 0x21
 80072de:	6003      	str	r3, [r0, #0]
 80072e0:	2200      	movs	r2, #0
 80072e2:	2300      	movs	r3, #0
 80072e4:	4610      	mov	r0, r2
 80072e6:	4619      	mov	r1, r3
 80072e8:	f7f9 fa5c 	bl	80007a4 <__aeabi_ddiv>
 80072ec:	ec41 0b18 	vmov	d8, r0, r1
 80072f0:	eeb0 0a48 	vmov.f32	s0, s16
 80072f4:	eef0 0a68 	vmov.f32	s1, s17
 80072f8:	ecbd 8b02 	vpop	{d8}
 80072fc:	bd38      	pop	{r3, r4, r5, pc}
 80072fe:	bf00      	nop
 8007300:	20000070 	.word	0x20000070

08007304 <__ieee754_sqrt>:
 8007304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	ec55 4b10 	vmov	r4, r5, d0
 800730c:	4e56      	ldr	r6, [pc, #344]	; (8007468 <__ieee754_sqrt+0x164>)
 800730e:	43ae      	bics	r6, r5
 8007310:	ee10 0a10 	vmov	r0, s0
 8007314:	ee10 3a10 	vmov	r3, s0
 8007318:	4629      	mov	r1, r5
 800731a:	462a      	mov	r2, r5
 800731c:	d110      	bne.n	8007340 <__ieee754_sqrt+0x3c>
 800731e:	ee10 2a10 	vmov	r2, s0
 8007322:	462b      	mov	r3, r5
 8007324:	f7f9 f914 	bl	8000550 <__aeabi_dmul>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4620      	mov	r0, r4
 800732e:	4629      	mov	r1, r5
 8007330:	f7f8 ff58 	bl	80001e4 <__adddf3>
 8007334:	4604      	mov	r4, r0
 8007336:	460d      	mov	r5, r1
 8007338:	ec45 4b10 	vmov	d0, r4, r5
 800733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007340:	2d00      	cmp	r5, #0
 8007342:	dc10      	bgt.n	8007366 <__ieee754_sqrt+0x62>
 8007344:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007348:	4330      	orrs	r0, r6
 800734a:	d0f5      	beq.n	8007338 <__ieee754_sqrt+0x34>
 800734c:	b15d      	cbz	r5, 8007366 <__ieee754_sqrt+0x62>
 800734e:	ee10 2a10 	vmov	r2, s0
 8007352:	462b      	mov	r3, r5
 8007354:	ee10 0a10 	vmov	r0, s0
 8007358:	f7f8 ff42 	bl	80001e0 <__aeabi_dsub>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	f7f9 fa20 	bl	80007a4 <__aeabi_ddiv>
 8007364:	e7e6      	b.n	8007334 <__ieee754_sqrt+0x30>
 8007366:	1509      	asrs	r1, r1, #20
 8007368:	d076      	beq.n	8007458 <__ieee754_sqrt+0x154>
 800736a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800736e:	07ce      	lsls	r6, r1, #31
 8007370:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007374:	bf5e      	ittt	pl
 8007376:	0fda      	lsrpl	r2, r3, #31
 8007378:	005b      	lslpl	r3, r3, #1
 800737a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800737e:	0fda      	lsrs	r2, r3, #31
 8007380:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007384:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007388:	2000      	movs	r0, #0
 800738a:	106d      	asrs	r5, r5, #1
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	f04f 0e16 	mov.w	lr, #22
 8007392:	4684      	mov	ip, r0
 8007394:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007398:	eb0c 0401 	add.w	r4, ip, r1
 800739c:	4294      	cmp	r4, r2
 800739e:	bfde      	ittt	le
 80073a0:	1b12      	suble	r2, r2, r4
 80073a2:	eb04 0c01 	addle.w	ip, r4, r1
 80073a6:	1840      	addle	r0, r0, r1
 80073a8:	0052      	lsls	r2, r2, #1
 80073aa:	f1be 0e01 	subs.w	lr, lr, #1
 80073ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80073b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80073b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80073ba:	d1ed      	bne.n	8007398 <__ieee754_sqrt+0x94>
 80073bc:	4671      	mov	r1, lr
 80073be:	2720      	movs	r7, #32
 80073c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80073c4:	4562      	cmp	r2, ip
 80073c6:	eb04 060e 	add.w	r6, r4, lr
 80073ca:	dc02      	bgt.n	80073d2 <__ieee754_sqrt+0xce>
 80073cc:	d113      	bne.n	80073f6 <__ieee754_sqrt+0xf2>
 80073ce:	429e      	cmp	r6, r3
 80073d0:	d811      	bhi.n	80073f6 <__ieee754_sqrt+0xf2>
 80073d2:	2e00      	cmp	r6, #0
 80073d4:	eb06 0e04 	add.w	lr, r6, r4
 80073d8:	da43      	bge.n	8007462 <__ieee754_sqrt+0x15e>
 80073da:	f1be 0f00 	cmp.w	lr, #0
 80073de:	db40      	blt.n	8007462 <__ieee754_sqrt+0x15e>
 80073e0:	f10c 0801 	add.w	r8, ip, #1
 80073e4:	eba2 020c 	sub.w	r2, r2, ip
 80073e8:	429e      	cmp	r6, r3
 80073ea:	bf88      	it	hi
 80073ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80073f0:	1b9b      	subs	r3, r3, r6
 80073f2:	4421      	add	r1, r4
 80073f4:	46c4      	mov	ip, r8
 80073f6:	0052      	lsls	r2, r2, #1
 80073f8:	3f01      	subs	r7, #1
 80073fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80073fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007402:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007406:	d1dd      	bne.n	80073c4 <__ieee754_sqrt+0xc0>
 8007408:	4313      	orrs	r3, r2
 800740a:	d006      	beq.n	800741a <__ieee754_sqrt+0x116>
 800740c:	1c4c      	adds	r4, r1, #1
 800740e:	bf13      	iteet	ne
 8007410:	3101      	addne	r1, #1
 8007412:	3001      	addeq	r0, #1
 8007414:	4639      	moveq	r1, r7
 8007416:	f021 0101 	bicne.w	r1, r1, #1
 800741a:	1043      	asrs	r3, r0, #1
 800741c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007420:	0849      	lsrs	r1, r1, #1
 8007422:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007426:	07c2      	lsls	r2, r0, #31
 8007428:	bf48      	it	mi
 800742a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800742e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007432:	460c      	mov	r4, r1
 8007434:	463d      	mov	r5, r7
 8007436:	e77f      	b.n	8007338 <__ieee754_sqrt+0x34>
 8007438:	0ada      	lsrs	r2, r3, #11
 800743a:	3815      	subs	r0, #21
 800743c:	055b      	lsls	r3, r3, #21
 800743e:	2a00      	cmp	r2, #0
 8007440:	d0fa      	beq.n	8007438 <__ieee754_sqrt+0x134>
 8007442:	02d7      	lsls	r7, r2, #11
 8007444:	d50a      	bpl.n	800745c <__ieee754_sqrt+0x158>
 8007446:	f1c1 0420 	rsb	r4, r1, #32
 800744a:	fa23 f404 	lsr.w	r4, r3, r4
 800744e:	1e4d      	subs	r5, r1, #1
 8007450:	408b      	lsls	r3, r1
 8007452:	4322      	orrs	r2, r4
 8007454:	1b41      	subs	r1, r0, r5
 8007456:	e788      	b.n	800736a <__ieee754_sqrt+0x66>
 8007458:	4608      	mov	r0, r1
 800745a:	e7f0      	b.n	800743e <__ieee754_sqrt+0x13a>
 800745c:	0052      	lsls	r2, r2, #1
 800745e:	3101      	adds	r1, #1
 8007460:	e7ef      	b.n	8007442 <__ieee754_sqrt+0x13e>
 8007462:	46e0      	mov	r8, ip
 8007464:	e7be      	b.n	80073e4 <__ieee754_sqrt+0xe0>
 8007466:	bf00      	nop
 8007468:	7ff00000 	.word	0x7ff00000

0800746c <__errno>:
 800746c:	4b01      	ldr	r3, [pc, #4]	; (8007474 <__errno+0x8>)
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	2000000c 	.word	0x2000000c

08007478 <_init>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr

08007484 <_fini>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	bf00      	nop
 8007488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748a:	bc08      	pop	{r3}
 800748c:	469e      	mov	lr, r3
 800748e:	4770      	bx	lr
