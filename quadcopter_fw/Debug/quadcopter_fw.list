
quadcopter_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f2c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f0  080060f0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f8  080060f8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060fc  080060fc  000160fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000014  08006114  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08006114  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019225  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003580  00000000  00000000  00039269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0003c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  0003d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197e5  00000000  00000000  0003eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b96  00000000  00000000  0005829d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000923d5  00000000  00000000  0006ce33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff208  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f4  00000000  00000000  000ff25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080060ac 	.word	0x080060ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080060ac 	.word	0x080060ac

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	4b23      	ldr	r3, [pc, #140]	; (8000568 <MX_DMA_Init+0x98>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a22      	ldr	r2, [pc, #136]	; (8000568 <MX_DMA_Init+0x98>)
 80004e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <MX_DMA_Init+0x98>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <MX_DMA_Init+0x98>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a1b      	ldr	r2, [pc, #108]	; (8000568 <MX_DMA_Init+0x98>)
 80004fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b19      	ldr	r3, [pc, #100]	; (8000568 <MX_DMA_Init+0x98>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	200c      	movs	r0, #12
 8000514:	f001 f87f 	bl	8001616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000518:	200c      	movs	r0, #12
 800051a:	f001 f898 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	200e      	movs	r0, #14
 8000524:	f001 f877 	bl	8001616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000528:	200e      	movs	r0, #14
 800052a:	f001 f890 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	200f      	movs	r0, #15
 8000534:	f001 f86f 	bl	8001616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000538:	200f      	movs	r0, #15
 800053a:	f001 f888 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	2010      	movs	r0, #16
 8000544:	f001 f867 	bl	8001616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000548:	2010      	movs	r0, #16
 800054a:	f001 f880 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	203a      	movs	r0, #58	; 0x3a
 8000554:	f001 f85f 	bl	8001616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000558:	203a      	movs	r0, #58	; 0x3a
 800055a:	f001 f878 	bl	800164e <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b5a      	ldr	r3, [pc, #360]	; (80006f0 <MX_GPIO_Init+0x184>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a59      	ldr	r2, [pc, #356]	; (80006f0 <MX_GPIO_Init+0x184>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b57      	ldr	r3, [pc, #348]	; (80006f0 <MX_GPIO_Init+0x184>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b53      	ldr	r3, [pc, #332]	; (80006f0 <MX_GPIO_Init+0x184>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a52      	ldr	r2, [pc, #328]	; (80006f0 <MX_GPIO_Init+0x184>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b50      	ldr	r3, [pc, #320]	; (80006f0 <MX_GPIO_Init+0x184>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b4c      	ldr	r3, [pc, #304]	; (80006f0 <MX_GPIO_Init+0x184>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a4b      	ldr	r2, [pc, #300]	; (80006f0 <MX_GPIO_Init+0x184>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b49      	ldr	r3, [pc, #292]	; (80006f0 <MX_GPIO_Init+0x184>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b45      	ldr	r3, [pc, #276]	; (80006f0 <MX_GPIO_Init+0x184>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a44      	ldr	r2, [pc, #272]	; (80006f0 <MX_GPIO_Init+0x184>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b42      	ldr	r3, [pc, #264]	; (80006f0 <MX_GPIO_Init+0x184>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	483e      	ldr	r0, [pc, #248]	; (80006f4 <MX_GPIO_Init+0x188>)
 80005fa:	f001 fd37 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2110      	movs	r1, #16
 8000602:	483d      	ldr	r0, [pc, #244]	; (80006f8 <MX_GPIO_Init+0x18c>)
 8000604:	f001 fd32 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|CE_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f241 0106 	movw	r1, #4102	; 0x1006
 800060e:	483b      	ldr	r0, [pc, #236]	; (80006fc <MX_GPIO_Init+0x190>)
 8000610:	f001 fd2c 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSN_GPIO_Port, SPI2_CSN_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4838      	ldr	r0, [pc, #224]	; (80006fc <MX_GPIO_Init+0x190>)
 800061c:	f001 fd26 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000626:	4834      	ldr	r0, [pc, #208]	; (80006f8 <MX_GPIO_Init+0x18c>)
 8000628:	f001 fd20 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800062c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	482b      	ldr	r0, [pc, #172]	; (80006f4 <MX_GPIO_Init+0x188>)
 8000646:	f001 fb8d 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800064a:	2310      	movs	r3, #16
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000656:	2302      	movs	r3, #2
 8000658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	4825      	ldr	r0, [pc, #148]	; (80006f8 <MX_GPIO_Init+0x18c>)
 8000662:	f001 fb7f 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8000666:	2306      	movs	r3, #6
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	481f      	ldr	r0, [pc, #124]	; (80006fc <MX_GPIO_Init+0x190>)
 800067e:	f001 fb71 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CE_Pin|SPI2_CSN_Pin;
 8000682:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4818      	ldr	r0, [pc, #96]	; (80006fc <MX_GPIO_Init+0x190>)
 800069c:	f001 fb62 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80006a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_GPIO_Init+0x194>)
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <MX_GPIO_Init+0x18c>)
 80006b6:	f001 fb55 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80006ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <MX_GPIO_Init+0x18c>)
 80006d4:	f001 fb46 	bl	8001d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2017      	movs	r0, #23
 80006de:	f000 ff9a 	bl	8001616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006e2:	2017      	movs	r0, #23
 80006e4:	f000 ffb3 	bl	800164e <HAL_NVIC_EnableIRQ>

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020000 	.word	0x40020000
 80006fc:	40020400 	.word	0x40020400
 8000700:	10210000 	.word	0x10210000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070a:	f000 fe13 	bl	8001334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070e:	f000 f85b 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000712:	f7ff ff2b 	bl	800056c <MX_GPIO_Init>
  MX_DMA_Init();
 8000716:	f7ff fedb 	bl	80004d0 <MX_DMA_Init>
  MX_SPI1_Init();
 800071a:	f000 f8e1 	bl	80008e0 <MX_SPI1_Init>
  MX_TIM2_Init();
 800071e:	f000 fa71 	bl	8000c04 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000722:	f000 fad1 	bl	8000cc8 <MX_TIM5_Init>
  MX_TIM11_Init();
 8000726:	f000 fb33 	bl	8000d90 <MX_TIM11_Init>
  MX_SPI2_Init();
 800072a:	f000 f90f 	bl	800094c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800072e:	f000 fd11 	bl	8001154 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  icm20948_init();
 8000732:	f004 fb85 	bl	8004e40 <icm20948_init>
  ak09916_init();
 8000736:	f004 fbb1 	bl	8004e9c <ak09916_init>
  dshot_init(DSHOT600);
 800073a:	2002      	movs	r0, #2
 800073c:	f004 f88a 	bl	8004854 <dshot_init>
  ibus_init();
 8000740:	f004 fa92 	bl	8004c68 <ibus_init>
  nrf24l01p_tx_init(2500, _1Mbps);
 8000744:	2100      	movs	r1, #0
 8000746:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800074a:	f005 fa03 	bl	8005b54 <nrf24l01p_tx_init>
	  HAL_Delay(100);

	  buzzer_time(100);
	  */

      icm20948_gyro_read(&my_gyro);
 800074e:	4818      	ldr	r0, [pc, #96]	; (80007b0 <main+0xac>)
 8000750:	f004 fbbd 	bl	8004ece <icm20948_gyro_read>
      icm20948_accel_read(&my_accel);
 8000754:	4817      	ldr	r0, [pc, #92]	; (80007b4 <main+0xb0>)
 8000756:	f004 fbfd 	bl	8004f54 <icm20948_accel_read>
      ak09916_mag_read(&my_mag);
 800075a:	4817      	ldr	r0, [pc, #92]	; (80007b8 <main+0xb4>)
 800075c:	f004 fc44 	bl	8004fe8 <ak09916_mag_read>

      dshot_write(my_motor_value);
 8000760:	4816      	ldr	r0, [pc, #88]	; (80007bc <main+0xb8>)
 8000762:	f004 f888 	bl	8004876 <dshot_write>
      HAL_Delay(1);
 8000766:	2001      	movs	r0, #1
 8000768:	f000 fe56 	bl	8001418 <HAL_Delay>

      ibus_read(ibus_data);
 800076c:	4814      	ldr	r0, [pc, #80]	; (80007c0 <main+0xbc>)
 800076e:	f004 fa89 	bl	8004c84 <ibus_read>
	  ibus_soft_failsafe(ibus_data, 10); // if ibus is not updated, clear ibus data.
 8000772:	210a      	movs	r1, #10
 8000774:	4812      	ldr	r0, [pc, #72]	; (80007c0 <main+0xbc>)
 8000776:	f004 fb1b 	bl	8004db0 <ibus_soft_failsafe>

      for(int i= 0; i < 8; i++)
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	e00d      	b.n	800079c <main+0x98>
    	  nrf24_data[i]++;
 8000780:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <main+0xc0>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	b2d9      	uxtb	r1, r3
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <main+0xc0>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	460a      	mov	r2, r1
 8000794:	701a      	strb	r2, [r3, #0]
      for(int i= 0; i < 8; i++)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3301      	adds	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b07      	cmp	r3, #7
 80007a0:	ddee      	ble.n	8000780 <main+0x7c>
      nrf24l01p_tx_transmit(nrf24_data);
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <main+0xc0>)
 80007a4:	f005 fa01 	bl	8005baa <nrf24l01p_tx_transmit>

      HAL_Delay(100);
 80007a8:	2064      	movs	r0, #100	; 0x64
 80007aa:	f000 fe35 	bl	8001418 <HAL_Delay>
      icm20948_gyro_read(&my_gyro);
 80007ae:	e7ce      	b.n	800074e <main+0x4a>
 80007b0:	200001b0 	.word	0x200001b0
 80007b4:	20000198 	.word	0x20000198
 80007b8:	200001a4 	.word	0x200001a4
 80007bc:	20000030 	.word	0x20000030
 80007c0:	2000018c 	.word	0x2000018c
 80007c4:	20000000 	.word	0x20000000

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	; 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f005 fc20 	bl	800601c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <SystemClock_Config+0xc8>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	4a26      	ldr	r2, [pc, #152]	; (8000890 <SystemClock_Config+0xc8>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	; 0x40
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <SystemClock_Config+0xc8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <SystemClock_Config+0xcc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a20      	ldr	r2, [pc, #128]	; (8000894 <SystemClock_Config+0xcc>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <SystemClock_Config+0xcc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000838:	230c      	movs	r3, #12
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800083c:	2360      	movs	r3, #96	; 0x60
 800083e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fc59 	bl	8002104 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000858:	f000 f83d 	bl	80008d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2103      	movs	r1, #3
 8000878:	4618      	mov	r0, r3
 800087a:	f001 febb 	bl	80025f4 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000884:	f000 f827 	bl	80008d6 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3750      	adds	r7, #80	; 0x50
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	if(huart == IBUS_UART)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_UART_RxCpltCallback+0x1c>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d101      	bne.n	80008ac <HAL_UART_RxCpltCallback+0x14>
		ibus_reset_failsafe();
 80008a8:	f004 fabe 	bl	8004e28 <ibus_reset_failsafe>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000524 	.word	0x20000524

080008b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008c8:	d101      	bne.n	80008ce <HAL_GPIO_EXTI_Callback+0x16>
		nrf24l01p_tx_irq(); // clear interrupt flag
 80008ca:	f005 f979 	bl	8005bc0 <nrf24l01p_tx_irq>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008da:	b672      	cpsid	i
}
 80008dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008de:	e7fe      	b.n	80008de <Error_Handler+0x8>

080008e0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_SPI1_Init+0x64>)
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <MX_SPI1_Init+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_SPI1_Init+0x64>)
 80008ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_SPI1_Init+0x64>)
 8000900:	2202      	movs	r2, #2
 8000902:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_SPI1_Init+0x64>)
 8000906:	2201      	movs	r2, #1
 8000908:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_SPI1_Init+0x64>)
 800090c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000910:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_SPI1_Init+0x64>)
 8000914:	2218      	movs	r2, #24
 8000916:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_SPI1_Init+0x64>)
 800092c:	220a      	movs	r2, #10
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_SPI1_Init+0x64>)
 8000932:	f002 f82f 	bl	8002994 <HAL_SPI_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800093c:	f7ff ffcb 	bl	80008d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000214 	.word	0x20000214
 8000948:	40013000 	.word	0x40013000

0800094c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_SPI2_Init+0x64>)
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <MX_SPI2_Init+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_SPI2_Init+0x64>)
 8000958:	f44f 7282 	mov.w	r2, #260	; 0x104
 800095c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_SPI2_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_SPI2_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_SPI2_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_SPI2_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_SPI2_Init+0x64>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_SPI2_Init+0x64>)
 8000980:	2210      	movs	r2, #16
 8000982:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_SPI2_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_SPI2_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_SPI2_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_SPI2_Init+0x64>)
 8000998:	220a      	movs	r2, #10
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_SPI2_Init+0x64>)
 800099e:	f001 fff9 	bl	8002994 <HAL_SPI_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009a8:	f7ff ff95 	bl	80008d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200001bc 	.word	0x200001bc
 80009b4:	40003800 	.word	0x40003800

080009b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a32      	ldr	r2, [pc, #200]	; (8000aa0 <HAL_SPI_MspInit+0xe8>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d12c      	bne.n	8000a34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a30      	ldr	r2, [pc, #192]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 80009e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a29      	ldr	r2, [pc, #164]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a12:	23e0      	movs	r3, #224	; 0xe0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a22:	2305      	movs	r3, #5
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <HAL_SPI_MspInit+0xf0>)
 8000a2e:	f001 f999 	bl	8001d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a32:	e031      	b.n	8000a98 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <HAL_SPI_MspInit+0xf4>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d12c      	bne.n	8000a98 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_SPI_MspInit+0xec>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000a76:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a88:	2305      	movs	r3, #5
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <HAL_SPI_MspInit+0xf8>)
 8000a94:	f001 f966 	bl	8001d64 <HAL_GPIO_Init>
}
 8000a98:	bf00      	nop
 8000a9a:	3730      	adds	r7, #48	; 0x30
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40013000 	.word	0x40013000
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40003800 	.word	0x40003800
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 fc42 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <DMA1_Stream1_IRQHandler+0x10>)
 8000b5e:	f000 fe97 	bl	8001890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */


  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000041c 	.word	0x2000041c

08000b6c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <DMA1_Stream3_IRQHandler+0x10>)
 8000b72:	f000 fe8d 	bl	8001890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200002cc 	.word	0x200002cc

08000b80 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <DMA1_Stream4_IRQHandler+0x10>)
 8000b86:	f000 fe83 	bl	8001890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200003bc 	.word	0x200003bc

08000b94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <DMA1_Stream5_IRQHandler+0x10>)
 8000b9a:	f000 fe79 	bl	8001890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000026c 	.word	0x2000026c

08000ba8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000bac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bb0:	f001 fa90 	bl	80020d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000bbe:	f002 fddf 	bl	8003780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000374 	.word	0x20000374

08000bcc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <DMA2_Stream2_IRQHandler+0x10>)
 8000bd2:	f000 fe5d 	bl	8001890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200004c4 	.word	0x200004c4

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_TIM2_Init+0xc0>)
 8000c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <MX_TIM2_Init+0xc0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_TIM2_Init+0xc0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <MX_TIM2_Init+0xc0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_TIM2_Init+0xc0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_TIM2_Init+0xc0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c4c:	481d      	ldr	r0, [pc, #116]	; (8000cc4 <MX_TIM2_Init+0xc0>)
 8000c4e:	f002 fc98 	bl	8003582 <HAL_TIM_PWM_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c58:	f7ff fe3d 	bl	80008d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c64:	f107 0320 	add.w	r3, r7, #32
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4816      	ldr	r0, [pc, #88]	; (8000cc4 <MX_TIM2_Init+0xc0>)
 8000c6c:	f003 f9b2 	bl	8003fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000c76:	f7ff fe2e 	bl	80008d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7a:	2360      	movs	r3, #96	; 0x60
 8000c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM2_Init+0xc0>)
 8000c92:	f002 fe7d 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000c9c:	f7ff fe1b 	bl	80008d6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <MX_TIM2_Init+0xc0>)
 8000ca8:	f002 fe72 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cb2:	f7ff fe10 	bl	80008d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <MX_TIM2_Init+0xc0>)
 8000cb8:	f000 f9ee 	bl	8001098 <HAL_TIM_MspPostInit>

}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000047c 	.word	0x2000047c

08000cc8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	f107 0320 	add.w	r3, r7, #32
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
 8000ce6:	615a      	str	r2, [r3, #20]
 8000ce8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000cea:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <MX_TIM5_Init+0xc0>)
 8000cec:	4a27      	ldr	r2, [pc, #156]	; (8000d8c <MX_TIM5_Init+0xc4>)
 8000cee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <MX_TIM5_Init+0xc0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <MX_TIM5_Init+0xc0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <MX_TIM5_Init+0xc0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_TIM5_Init+0xc0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_TIM5_Init+0xc0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000d0e:	481e      	ldr	r0, [pc, #120]	; (8000d88 <MX_TIM5_Init+0xc0>)
 8000d10:	f002 fc37 	bl	8003582 <HAL_TIM_PWM_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000d1a:	f7ff fddc 	bl	80008d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4816      	ldr	r0, [pc, #88]	; (8000d88 <MX_TIM5_Init+0xc0>)
 8000d2e:	f003 f951 	bl	8003fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000d38:	f7ff fdcd 	bl	80008d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3c:	2360      	movs	r3, #96	; 0x60
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2204      	movs	r2, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <MX_TIM5_Init+0xc0>)
 8000d54:	f002 fe1c 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000d5e:	f7ff fdba 	bl	80008d6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	220c      	movs	r2, #12
 8000d66:	4619      	mov	r1, r3
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <MX_TIM5_Init+0xc0>)
 8000d6a:	f002 fe11 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000d74:	f7ff fdaf 	bl	80008d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <MX_TIM5_Init+0xc0>)
 8000d7a:	f000 f98d 	bl	8001098 <HAL_TIM_MspPostInit>

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000032c 	.word	0x2000032c
 8000d8c:	40000c00 	.word	0x40000c00

08000d90 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <MX_TIM11_Init+0x3c>)
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <MX_TIM11_Init+0x40>)
 8000d98:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_TIM11_Init+0x3c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <MX_TIM11_Init+0x3c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_TIM11_Init+0x3c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <MX_TIM11_Init+0x3c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_TIM11_Init+0x3c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_TIM11_Init+0x3c>)
 8000dba:	f002 fb93 	bl	80034e4 <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8000dc4:	f7ff fd87 	bl	80008d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000374 	.word	0x20000374
 8000dd0:	40014800 	.word	0x40014800

08000dd4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de4:	f040 8089 	bne.w	8000efa <HAL_TIM_PWM_MspInit+0x126>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4b8c      	ldr	r3, [pc, #560]	; (8001020 <HAL_TIM_PWM_MspInit+0x24c>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	4a8b      	ldr	r2, [pc, #556]	; (8001020 <HAL_TIM_PWM_MspInit+0x24c>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
 8000df8:	4b89      	ldr	r3, [pc, #548]	; (8001020 <HAL_TIM_PWM_MspInit+0x24c>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000e04:	4b87      	ldr	r3, [pc, #540]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e06:	4a88      	ldr	r2, [pc, #544]	; (8001028 <HAL_TIM_PWM_MspInit+0x254>)
 8000e08:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000e0a:	4b86      	ldr	r3, [pc, #536]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e0c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e10:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e12:	4b84      	ldr	r3, [pc, #528]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b82      	ldr	r3, [pc, #520]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b81      	ldr	r3, [pc, #516]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e24:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e26:	4b7f      	ldr	r3, [pc, #508]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e2c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e2e:	4b7d      	ldr	r3, [pc, #500]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e34:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000e36:	4b7b      	ldr	r3, [pc, #492]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e3c:	4b79      	ldr	r3, [pc, #484]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e3e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e42:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e44:	4b77      	ldr	r3, [pc, #476]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e46:	2204      	movs	r2, #4
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000e4a:	4b76      	ldr	r3, [pc, #472]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e50:	4b74      	ldr	r3, [pc, #464]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e56:	4b73      	ldr	r3, [pc, #460]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000e5c:	4871      	ldr	r0, [pc, #452]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e5e:	f000 fc11 	bl	8001684 <HAL_DMA_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 8000e68:	f7ff fd35 	bl	80008d6 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a6d      	ldr	r2, [pc, #436]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
 8000e72:	4a6c      	ldr	r2, [pc, #432]	; (8001024 <HAL_TIM_PWM_MspInit+0x250>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8000e78:	4b6c      	ldr	r3, [pc, #432]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000e7a:	4a6d      	ldr	r2, [pc, #436]	; (8001030 <HAL_TIM_PWM_MspInit+0x25c>)
 8000e7c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8000e7e:	4b6b      	ldr	r3, [pc, #428]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000e80:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e84:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e86:	4b69      	ldr	r3, [pc, #420]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000e88:	2240      	movs	r2, #64	; 0x40
 8000e8a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8c:	4b67      	ldr	r3, [pc, #412]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e92:	4b66      	ldr	r3, [pc, #408]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000e94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e9a:	4b64      	ldr	r3, [pc, #400]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000e9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ea2:	4b62      	ldr	r3, [pc, #392]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000ea4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 8000eaa:	4b60      	ldr	r3, [pc, #384]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eb0:	4b5e      	ldr	r3, [pc, #376]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000eb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eb6:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000eb8:	4b5c      	ldr	r3, [pc, #368]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000eba:	2204      	movs	r2, #4
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000ebe:	4b5b      	ldr	r3, [pc, #364]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ec4:	4b59      	ldr	r3, [pc, #356]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000eca:	4b58      	ldr	r3, [pc, #352]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8000ed0:	4856      	ldr	r0, [pc, #344]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000ed2:	f000 fbd7 	bl	8001684 <HAL_DMA_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_TIM_PWM_MspInit+0x10c>
    {
      Error_Handler();
 8000edc:	f7ff fcfb 	bl	80008d6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a52      	ldr	r2, [pc, #328]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ee6:	4a51      	ldr	r2, [pc, #324]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a4f      	ldr	r2, [pc, #316]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000ef0:	621a      	str	r2, [r3, #32]
 8000ef2:	4a4e      	ldr	r2, [pc, #312]	; (800102c <HAL_TIM_PWM_MspInit+0x258>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000ef8:	e08d      	b.n	8001016 <HAL_TIM_PWM_MspInit+0x242>
  else if(tim_pwmHandle->Instance==TIM5)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a4d      	ldr	r2, [pc, #308]	; (8001034 <HAL_TIM_PWM_MspInit+0x260>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	f040 8088 	bne.w	8001016 <HAL_TIM_PWM_MspInit+0x242>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b45      	ldr	r3, [pc, #276]	; (8001020 <HAL_TIM_PWM_MspInit+0x24c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a44      	ldr	r2, [pc, #272]	; (8001020 <HAL_TIM_PWM_MspInit+0x24c>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b42      	ldr	r3, [pc, #264]	; (8001020 <HAL_TIM_PWM_MspInit+0x24c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8000f22:	4b45      	ldr	r3, [pc, #276]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f24:	4a45      	ldr	r2, [pc, #276]	; (800103c <HAL_TIM_PWM_MspInit+0x268>)
 8000f26:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8000f28:	4b43      	ldr	r3, [pc, #268]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f2a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f2e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f30:	4b41      	ldr	r3, [pc, #260]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f32:	2240      	movs	r2, #64	; 0x40
 8000f34:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f36:	4b40      	ldr	r3, [pc, #256]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000f3c:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f42:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f44:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f4a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f4c:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f52:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f60:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f62:	4b35      	ldr	r3, [pc, #212]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8000f7a:	482f      	ldr	r0, [pc, #188]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f7c:	f000 fb82 	bl	8001684 <HAL_DMA_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8000f86:	f7ff fca6 	bl	80008d6 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8000f90:	4a29      	ldr	r2, [pc, #164]	; (8001038 <HAL_TIM_PWM_MspInit+0x264>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 8000f96:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000f98:	4a2a      	ldr	r2, [pc, #168]	; (8001044 <HAL_TIM_PWM_MspInit+0x270>)
 8000f9a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000f9e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000fa2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fa4:	4b26      	ldr	r3, [pc, #152]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000fa6:	2240      	movs	r2, #64	; 0x40
 8000fa8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000faa:	4b25      	ldr	r3, [pc, #148]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000fba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fbe:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000fd0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fd4:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000fd8:	2204      	movs	r2, #4
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8000ff0:	f000 fb48 	bl	8001684 <HAL_DMA_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_TIM_PWM_MspInit+0x22a>
      Error_Handler();
 8000ffa:	f7ff fc6c 	bl	80008d6 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <HAL_TIM_PWM_MspInit+0x26c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	2000026c 	.word	0x2000026c
 8001028:	40026088 	.word	0x40026088
 800102c:	2000041c 	.word	0x2000041c
 8001030:	40026028 	.word	0x40026028
 8001034:	40000c00 	.word	0x40000c00
 8001038:	200003bc 	.word	0x200003bc
 800103c:	40026070 	.word	0x40026070
 8001040:	200002cc 	.word	0x200002cc
 8001044:	40026058 	.word	0x40026058

08001048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_TIM_Base_MspInit+0x48>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d115      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_TIM_Base_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <HAL_TIM_Base_MspInit+0x4c>)
 8001064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_Base_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	201a      	movs	r0, #26
 800107c:	f000 facb 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001080:	201a      	movs	r0, #26
 8001082:	f000 fae4 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40014800 	.word	0x40014800
 8001094:	40023800 	.word	0x40023800

08001098 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b8:	d11e      	bne.n	80010f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <HAL_TIM_MspPostInit+0xb0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_TIM_MspPostInit+0xb0>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <HAL_TIM_MspPostInit+0xb0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR4_Pin|MOTOR2_Pin;
 80010d6:	2305      	movs	r3, #5
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010e6:	2301      	movs	r3, #1
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4816      	ldr	r0, [pc, #88]	; (800114c <HAL_TIM_MspPostInit+0xb4>)
 80010f2:	f000 fe37 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80010f6:	e022      	b.n	800113e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_TIM_MspPostInit+0xb8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d11d      	bne.n	800113e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_TIM_MspPostInit+0xb0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_TIM_MspPostInit+0xb0>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_TIM_MspPostInit+0xb0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR3_Pin|MOTOR1_Pin;
 800111e:	230a      	movs	r3, #10
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800112e:	2302      	movs	r3, #2
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <HAL_TIM_MspPostInit+0xb4>)
 800113a:	f000 fe13 	bl	8001d64 <HAL_GPIO_Init>
}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	; 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000
 8001150:	40000c00 	.word	0x40000c00

08001154 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <MX_USART1_UART_Init+0x50>)
 800115c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800118c:	f002 ffa4 	bl	80040d8 <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001196:	f7ff fb9e 	bl	80008d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000524 	.word	0x20000524
 80011a4:	40011000 	.word	0x40011000

080011a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a40      	ldr	r2, [pc, #256]	; (80012c8 <HAL_UART_MspInit+0x120>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d179      	bne.n	80012be <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <HAL_UART_MspInit+0x124>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a3e      	ldr	r2, [pc, #248]	; (80012cc <HAL_UART_MspInit+0x124>)
 80011d4:	f043 0310 	orr.w	r3, r3, #16
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <HAL_UART_MspInit+0x124>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b38      	ldr	r3, [pc, #224]	; (80012cc <HAL_UART_MspInit+0x124>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a37      	ldr	r2, [pc, #220]	; (80012cc <HAL_UART_MspInit+0x124>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <HAL_UART_MspInit+0x124>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <HAL_UART_MspInit+0x124>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a30      	ldr	r2, [pc, #192]	; (80012cc <HAL_UART_MspInit+0x124>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <HAL_UART_MspInit+0x124>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800121e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001230:	2307      	movs	r3, #7
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4825      	ldr	r0, [pc, #148]	; (80012d0 <HAL_UART_MspInit+0x128>)
 800123c:	f000 fd92 	bl	8001d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001250:	2307      	movs	r3, #7
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	481e      	ldr	r0, [pc, #120]	; (80012d4 <HAL_UART_MspInit+0x12c>)
 800125c:	f000 fd82 	bl	8001d64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <HAL_UART_MspInit+0x130>)
 8001262:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <HAL_UART_MspInit+0x134>)
 8001264:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HAL_UART_MspInit+0x130>)
 8001268:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_UART_MspInit+0x130>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_UART_MspInit+0x130>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_UART_MspInit+0x130>)
 800127c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001280:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_UART_MspInit+0x130>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <HAL_UART_MspInit+0x130>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_UART_MspInit+0x130>)
 8001290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001294:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_UART_MspInit+0x130>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_UART_MspInit+0x130>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <HAL_UART_MspInit+0x130>)
 80012a4:	f000 f9ee 	bl	8001684 <HAL_DMA_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80012ae:	f7ff fb12 	bl	80008d6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_UART_MspInit+0x130>)
 80012b6:	639a      	str	r2, [r3, #56]	; 0x38
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_UART_MspInit+0x130>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40011000 	.word	0x40011000
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	200004c4 	.word	0x200004c4
 80012dc:	40026440 	.word	0x40026440

080012e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001318 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012e6:	e003      	b.n	80012f0 <LoopCopyDataInit>

080012e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ee:	3104      	adds	r1, #4

080012f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012f0:	480b      	ldr	r0, [pc, #44]	; (8001320 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012f8:	d3f6      	bcc.n	80012e8 <CopyDataInit>
  ldr  r2, =_sbss
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012fc:	e002      	b.n	8001304 <LoopFillZerobss>

080012fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001300:	f842 3b04 	str.w	r3, [r2], #4

08001304 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001306:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001308:	d3f9      	bcc.n	80012fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800130a:	f7ff fc69 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130e:	f004 fe61 	bl	8005fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001312:	f7ff f9f7 	bl	8000704 <main>
  bx  lr    
 8001316:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001318:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800131c:	08006100 	.word	0x08006100
  ldr  r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001324:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001328:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800132c:	2000056c 	.word	0x2000056c

08001330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <HAL_Init+0x40>)
 800133e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_Init+0x40>)
 800134a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800134e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_Init+0x40>)
 8001356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f94f 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f808 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff fba4 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023c00 	.word	0x40023c00

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f967 	bl	800166a <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 f92f 	bl	8001616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000010 	.word	0x20000010
 80013d4:	2000000c 	.word	0x2000000c

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000010 	.word	0x20000010
 80013fc:	20000568 	.word	0x20000568

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000568 	.word	0x20000568

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff ffee 	bl	8001400 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffde 	bl	8001400 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000010 	.word	0x20000010

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <__NVIC_EnableIRQ+0x38>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
         );
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00f      	b.n	80015f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <SysTick_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015da:	210f      	movs	r1, #15
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f7ff ff8e 	bl	8001500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <SysTick_Config+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SysTick_Config+0x40>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff29 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff3e 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff8e 	bl	8001554 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5d 	bl	8001500 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff31 	bl	80014c4 <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffa2 	bl	80015bc <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff feb6 	bl	8001400 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e099      	b.n	80017d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c0:	e00f      	b.n	80016e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016c2:	f7ff fe9d 	bl	8001400 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d908      	bls.n	80016e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2220      	movs	r2, #32
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e078      	b.n	80017d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1e8      	bne.n	80016c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	4b38      	ldr	r3, [pc, #224]	; (80017dc <HAL_DMA_Init+0x158>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800170e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4313      	orrs	r3, r2
 8001732:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	2b04      	cmp	r3, #4
 800173a:	d107      	bne.n	800174c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	4313      	orrs	r3, r2
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4313      	orrs	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f023 0307 	bic.w	r3, r3, #7
 8001762:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	4313      	orrs	r3, r2
 800176c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	2b04      	cmp	r3, #4
 8001774:	d117      	bne.n	80017a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4313      	orrs	r3, r2
 800177e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00e      	beq.n	80017a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 fa6f 	bl	8001c6c <DMA_CheckFifoParam>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2240      	movs	r2, #64	; 0x40
 8001798:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017a2:	2301      	movs	r3, #1
 80017a4:	e016      	b.n	80017d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fa26 	bl	8001c00 <DMA_CalcBaseAndBitshift>
 80017b4:	4603      	mov	r3, r0
 80017b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	223f      	movs	r2, #63	; 0x3f
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	f010803f 	.word	0xf010803f

080017e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_DMA_Start_IT+0x26>
 8001802:	2302      	movs	r3, #2
 8001804:	e040      	b.n	8001888 <HAL_DMA_Start_IT+0xa8>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d12f      	bne.n	800187a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2202      	movs	r2, #2
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f9b8 	bl	8001ba4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	223f      	movs	r2, #63	; 0x3f
 800183a:	409a      	lsls	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0216 	orr.w	r2, r2, #22
 800184e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	2b00      	cmp	r3, #0
 8001856:	d007      	beq.n	8001868 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0208 	orr.w	r2, r2, #8
 8001866:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 0201 	orr.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e005      	b.n	8001886 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001882:	2302      	movs	r3, #2
 8001884:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001886:	7dfb      	ldrb	r3, [r7, #23]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800189c:	4b92      	ldr	r3, [pc, #584]	; (8001ae8 <HAL_DMA_IRQHandler+0x258>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a92      	ldr	r2, [pc, #584]	; (8001aec <HAL_DMA_IRQHandler+0x25c>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0a9b      	lsrs	r3, r3, #10
 80018a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ba:	2208      	movs	r2, #8
 80018bc:	409a      	lsls	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01a      	beq.n	80018fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0204 	bic.w	r2, r2, #4
 80018e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	2208      	movs	r2, #8
 80018ea:	409a      	lsls	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f4:	f043 0201 	orr.w	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	2201      	movs	r2, #1
 8001902:	409a      	lsls	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d012      	beq.n	8001932 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2201      	movs	r2, #1
 8001920:	409a      	lsls	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	f043 0202 	orr.w	r2, r3, #2
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	2204      	movs	r2, #4
 8001938:	409a      	lsls	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4013      	ands	r3, r2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d012      	beq.n	8001968 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00b      	beq.n	8001968 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2204      	movs	r2, #4
 8001956:	409a      	lsls	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	f043 0204 	orr.w	r2, r3, #4
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	2210      	movs	r2, #16
 800196e:	409a      	lsls	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d043      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d03c      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2210      	movs	r2, #16
 800198c:	409a      	lsls	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d018      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d108      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d024      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
 80019be:	e01f      	b.n	8001a00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d01b      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
 80019d0:	e016      	b.n	8001a00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0208 	bic.w	r2, r2, #8
 80019ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a04:	2220      	movs	r2, #32
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 808e 	beq.w	8001b2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8086 	beq.w	8001b2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a26:	2220      	movs	r2, #32
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d136      	bne.n	8001aa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0216 	bic.w	r2, r2, #22
 8001a48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <HAL_DMA_IRQHandler+0x1da>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0208 	bic.w	r2, r2, #8
 8001a78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7e:	223f      	movs	r2, #63	; 0x3f
 8001a80:	409a      	lsls	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d07d      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
        }
        return;
 8001aa6:	e078      	b.n	8001b9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d01c      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d108      	bne.n	8001ad6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d030      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
 8001ad4:	e02b      	b.n	8001b2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d027      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
 8001ae6:	e022      	b.n	8001b2e <HAL_DMA_IRQHandler+0x29e>
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10f      	bne.n	8001b1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0210 	bic.w	r2, r2, #16
 8001b0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d032      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d022      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2205      	movs	r2, #5
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d307      	bcc.n	8001b76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f2      	bne.n	8001b5a <HAL_DMA_IRQHandler+0x2ca>
 8001b74:	e000      	b.n	8001b78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b76:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	4798      	blx	r3
 8001b98:	e000      	b.n	8001b9c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b9a:	bf00      	nop
    }
  }
}
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop

08001ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b40      	cmp	r3, #64	; 0x40
 8001bd0:	d108      	bne.n	8001be4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001be2:	e007      	b.n	8001bf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	60da      	str	r2, [r3, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	3b10      	subs	r3, #16
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <DMA_CalcBaseAndBitshift+0x64>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c1a:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <DMA_CalcBaseAndBitshift+0x68>)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d909      	bls.n	8001c42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	1d1a      	adds	r2, r3, #4
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001c40:	e007      	b.n	8001c52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c4a:	f023 0303 	bic.w	r3, r3, #3
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	aaaaaaab 	.word	0xaaaaaaab
 8001c68:	080060e0 	.word	0x080060e0

08001c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d11f      	bne.n	8001cc6 <DMA_CheckFifoParam+0x5a>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d856      	bhi.n	8001d3a <DMA_CheckFifoParam+0xce>
 8001c8c:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <DMA_CheckFifoParam+0x28>)
 8001c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c92:	bf00      	nop
 8001c94:	08001ca5 	.word	0x08001ca5
 8001c98:	08001cb7 	.word	0x08001cb7
 8001c9c:	08001ca5 	.word	0x08001ca5
 8001ca0:	08001d3b 	.word	0x08001d3b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d046      	beq.n	8001d3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb4:	e043      	b.n	8001d3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cbe:	d140      	bne.n	8001d42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cc4:	e03d      	b.n	8001d42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cce:	d121      	bne.n	8001d14 <DMA_CheckFifoParam+0xa8>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d837      	bhi.n	8001d46 <DMA_CheckFifoParam+0xda>
 8001cd6:	a201      	add	r2, pc, #4	; (adr r2, 8001cdc <DMA_CheckFifoParam+0x70>)
 8001cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cdc:	08001ced 	.word	0x08001ced
 8001ce0:	08001cf3 	.word	0x08001cf3
 8001ce4:	08001ced 	.word	0x08001ced
 8001ce8:	08001d05 	.word	0x08001d05
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf0:	e030      	b.n	8001d54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d025      	beq.n	8001d4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d02:	e022      	b.n	8001d4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d0c:	d11f      	bne.n	8001d4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d12:	e01c      	b.n	8001d4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d903      	bls.n	8001d22 <DMA_CheckFifoParam+0xb6>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d003      	beq.n	8001d28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d20:	e018      	b.n	8001d54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
      break;
 8001d26:	e015      	b.n	8001d54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00e      	beq.n	8001d52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
      break;
 8001d38:	e00b      	b.n	8001d52 <DMA_CheckFifoParam+0xe6>
      break;
 8001d3a:	bf00      	nop
 8001d3c:	e00a      	b.n	8001d54 <DMA_CheckFifoParam+0xe8>
      break;
 8001d3e:	bf00      	nop
 8001d40:	e008      	b.n	8001d54 <DMA_CheckFifoParam+0xe8>
      break;
 8001d42:	bf00      	nop
 8001d44:	e006      	b.n	8001d54 <DMA_CheckFifoParam+0xe8>
      break;
 8001d46:	bf00      	nop
 8001d48:	e004      	b.n	8001d54 <DMA_CheckFifoParam+0xe8>
      break;
 8001d4a:	bf00      	nop
 8001d4c:	e002      	b.n	8001d54 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d4e:	bf00      	nop
 8001d50:	e000      	b.n	8001d54 <DMA_CheckFifoParam+0xe8>
      break;
 8001d52:	bf00      	nop
    }
  } 
  
  return status; 
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e159      	b.n	8002034 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d80:	2201      	movs	r2, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 8148 	bne.w	800202e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d005      	beq.n	8001db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d130      	bne.n	8001e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 0201 	and.w	r2, r3, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d017      	beq.n	8001e54 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d123      	bne.n	8001ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	08da      	lsrs	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3208      	adds	r2, #8
 8001e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	220f      	movs	r2, #15
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	08da      	lsrs	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a2 	beq.w	800202e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b57      	ldr	r3, [pc, #348]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b54      	ldr	r3, [pc, #336]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f06:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_GPIO_Init+0x2ec>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a49      	ldr	r2, [pc, #292]	; (8002054 <HAL_GPIO_Init+0x2f0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x202>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a48      	ldr	r2, [pc, #288]	; (8002058 <HAL_GPIO_Init+0x2f4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x1fe>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a47      	ldr	r2, [pc, #284]	; (800205c <HAL_GPIO_Init+0x2f8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x1fa>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a46      	ldr	r2, [pc, #280]	; (8002060 <HAL_GPIO_Init+0x2fc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x1f6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a45      	ldr	r2, [pc, #276]	; (8002064 <HAL_GPIO_Init+0x300>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x1f2>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f56:	2307      	movs	r3, #7
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f66:	2300      	movs	r3, #0
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	f002 0203 	and.w	r2, r2, #3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f78:	4935      	ldr	r1, [pc, #212]	; (8002050 <HAL_GPIO_Init+0x2ec>)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f86:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001faa:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd4:	4a24      	ldr	r2, [pc, #144]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffe:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002028:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_GPIO_Init+0x304>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	f67f aea2 	bls.w	8001d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40013800 	.word	0x40013800
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400
 800205c:	40020800 	.word	0x40020800
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021000 	.word	0x40021000
 8002068:	40013c00 	.word	0x40013c00

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002088:	e003      	b.n	8002092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	041a      	lsls	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	041a      	lsls	r2, r3, #16
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	400b      	ands	r3, r1
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	619a      	str	r2, [r3, #24]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d006      	beq.n	80020f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fbe0 	bl	80008b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40013c00 	.word	0x40013c00

08002104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e264      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d075      	beq.n	800220e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002122:	4ba3      	ldr	r3, [pc, #652]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d00c      	beq.n	8002148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212e:	4ba0      	ldr	r3, [pc, #640]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002136:	2b08      	cmp	r3, #8
 8002138:	d112      	bne.n	8002160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213a:	4b9d      	ldr	r3, [pc, #628]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002146:	d10b      	bne.n	8002160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	4b99      	ldr	r3, [pc, #612]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d05b      	beq.n	800220c <HAL_RCC_OscConfig+0x108>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d157      	bne.n	800220c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e23f      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002168:	d106      	bne.n	8002178 <HAL_RCC_OscConfig+0x74>
 800216a:	4b91      	ldr	r3, [pc, #580]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a90      	ldr	r2, [pc, #576]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e01d      	b.n	80021b4 <HAL_RCC_OscConfig+0xb0>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x98>
 8002182:	4b8b      	ldr	r3, [pc, #556]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a8a      	ldr	r2, [pc, #552]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b88      	ldr	r3, [pc, #544]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a87      	ldr	r2, [pc, #540]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e00b      	b.n	80021b4 <HAL_RCC_OscConfig+0xb0>
 800219c:	4b84      	ldr	r3, [pc, #528]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a83      	ldr	r2, [pc, #524]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 80021a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b81      	ldr	r3, [pc, #516]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a80      	ldr	r2, [pc, #512]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff f920 	bl	8001400 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff f91c 	bl	8001400 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e204      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b76      	ldr	r3, [pc, #472]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0xc0>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff f90c 	bl	8001400 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff f908 	bl	8001400 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e1f0      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	4b6c      	ldr	r3, [pc, #432]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0xe8>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d063      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800221a:	4b65      	ldr	r3, [pc, #404]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002226:	4b62      	ldr	r3, [pc, #392]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800222e:	2b08      	cmp	r3, #8
 8002230:	d11c      	bne.n	800226c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002232:	4b5f      	ldr	r3, [pc, #380]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	4b5c      	ldr	r3, [pc, #368]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_RCC_OscConfig+0x152>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d001      	beq.n	8002256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1c4      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	4b56      	ldr	r3, [pc, #344]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4952      	ldr	r1, [pc, #328]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	e03a      	b.n	80022e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002274:	4b4f      	ldr	r3, [pc, #316]	; (80023b4 <HAL_RCC_OscConfig+0x2b0>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7ff f8c1 	bl	8001400 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002282:	f7ff f8bd 	bl	8001400 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1a5      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	4b46      	ldr	r3, [pc, #280]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4940      	ldr	r1, [pc, #256]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b6:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_RCC_OscConfig+0x2b0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7ff f8a0 	bl	8001400 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c4:	f7ff f89c 	bl	8001400 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e184      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d030      	beq.n	8002350 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d016      	beq.n	8002324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f6:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCC_OscConfig+0x2b4>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7ff f880 	bl	8001400 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002304:	f7ff f87c 	bl	8001400 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e164      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x200>
 8002322:	e015      	b.n	8002350 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002324:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCC_OscConfig+0x2b4>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232a:	f7ff f869 	bl	8001400 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002332:	f7ff f865 	bl	8001400 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e14d      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80a0 	beq.w	800249e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10f      	bne.n	800238e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x2b8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d121      	bne.n	80023de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_RCC_OscConfig+0x2b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a07      	ldr	r2, [pc, #28]	; (80023bc <HAL_RCC_OscConfig+0x2b8>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7ff f82b 	bl	8001400 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	e011      	b.n	80023d2 <HAL_RCC_OscConfig+0x2ce>
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	42470000 	.word	0x42470000
 80023b8:	42470e80 	.word	0x42470e80
 80023bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c0:	f7ff f81e 	bl	8001400 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e106      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b85      	ldr	r3, [pc, #532]	; (80025e8 <HAL_RCC_OscConfig+0x4e4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d106      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2f0>
 80023e6:	4b81      	ldr	r3, [pc, #516]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	4a80      	ldr	r2, [pc, #512]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6713      	str	r3, [r2, #112]	; 0x70
 80023f2:	e01c      	b.n	800242e <HAL_RCC_OscConfig+0x32a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d10c      	bne.n	8002416 <HAL_RCC_OscConfig+0x312>
 80023fc:	4b7b      	ldr	r3, [pc, #492]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a7a      	ldr	r2, [pc, #488]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
 8002408:	4b78      	ldr	r3, [pc, #480]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	4a77      	ldr	r2, [pc, #476]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6713      	str	r3, [r2, #112]	; 0x70
 8002414:	e00b      	b.n	800242e <HAL_RCC_OscConfig+0x32a>
 8002416:	4b75      	ldr	r3, [pc, #468]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	4a74      	ldr	r2, [pc, #464]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6713      	str	r3, [r2, #112]	; 0x70
 8002422:	4b72      	ldr	r3, [pc, #456]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	4a71      	ldr	r2, [pc, #452]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d015      	beq.n	8002462 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7fe ffe3 	bl	8001400 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe ffdf 	bl	8001400 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0c5      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002454:	4b65      	ldr	r3, [pc, #404]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ee      	beq.n	800243e <HAL_RCC_OscConfig+0x33a>
 8002460:	e014      	b.n	800248c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe ffcd 	bl	8001400 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe ffc9 	bl	8001400 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0af      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002480:	4b5a      	ldr	r3, [pc, #360]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4b56      	ldr	r3, [pc, #344]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	4a55      	ldr	r2, [pc, #340]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 8002498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 809b 	beq.w	80025de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a8:	4b50      	ldr	r3, [pc, #320]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d05c      	beq.n	800256e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d141      	bne.n	8002540 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024bc:	4b4c      	ldr	r3, [pc, #304]	; (80025f0 <HAL_RCC_OscConfig+0x4ec>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7fe ff9d 	bl	8001400 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe ff99 	bl	8001400 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e081      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024dc:	4b43      	ldr	r3, [pc, #268]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69da      	ldr	r2, [r3, #28]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	019b      	lsls	r3, r3, #6
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	3b01      	subs	r3, #1
 8002502:	041b      	lsls	r3, r3, #16
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	061b      	lsls	r3, r3, #24
 800250c:	4937      	ldr	r1, [pc, #220]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002512:	4b37      	ldr	r3, [pc, #220]	; (80025f0 <HAL_RCC_OscConfig+0x4ec>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe ff72 	bl	8001400 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe ff6e 	bl	8001400 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e056      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002532:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x41c>
 800253e:	e04e      	b.n	80025de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <HAL_RCC_OscConfig+0x4ec>)
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7fe ff5b 	bl	8001400 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254e:	f7fe ff57 	bl	8001400 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e03f      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x44a>
 800256c:	e037      	b.n	80025de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e032      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_RCC_OscConfig+0x4e8>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d028      	beq.n	80025da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d121      	bne.n	80025da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d11a      	bne.n	80025da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025aa:	4013      	ands	r3, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d111      	bne.n	80025da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	3b01      	subs	r3, #1
 80025c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d107      	bne.n	80025da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40007000 	.word	0x40007000
 80025ec:	40023800 	.word	0x40023800
 80025f0:	42470060 	.word	0x42470060

080025f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0cc      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002608:	4b68      	ldr	r3, [pc, #416]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d90c      	bls.n	8002630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b63      	ldr	r3, [pc, #396]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0b8      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800266a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	494d      	ldr	r1, [pc, #308]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d044      	beq.n	8002714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d119      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b2:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e067      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4934      	ldr	r1, [pc, #208]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e4:	f7fe fe8c 	bl	8001400 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7fe fe88 	bl	8001400 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e04f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 020c 	and.w	r2, r3, #12
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	429a      	cmp	r2, r3
 8002712:	d1eb      	bne.n	80026ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d20c      	bcs.n	800273c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_ClockConfig+0x1b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e032      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4916      	ldr	r1, [pc, #88]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	490e      	ldr	r1, [pc, #56]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800277a:	f000 f821 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 800277e:	4602      	mov	r2, r0
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	490a      	ldr	r1, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	5ccb      	ldrb	r3, [r1, r3]
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fdec 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023c00 	.word	0x40023c00
 80027b0:	40023800 	.word	0x40023800
 80027b4:	080060c8 	.word	0x080060c8
 80027b8:	20000008 	.word	0x20000008
 80027bc:	2000000c 	.word	0x2000000c

080027c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	b5b0      	push	{r4, r5, r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027c6:	2100      	movs	r1, #0
 80027c8:	6079      	str	r1, [r7, #4]
 80027ca:	2100      	movs	r1, #0
 80027cc:	60f9      	str	r1, [r7, #12]
 80027ce:	2100      	movs	r1, #0
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027d2:	2100      	movs	r1, #0
 80027d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d6:	4952      	ldr	r1, [pc, #328]	; (8002920 <HAL_RCC_GetSysClockFreq+0x160>)
 80027d8:	6889      	ldr	r1, [r1, #8]
 80027da:	f001 010c 	and.w	r1, r1, #12
 80027de:	2908      	cmp	r1, #8
 80027e0:	d00d      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x3e>
 80027e2:	2908      	cmp	r1, #8
 80027e4:	f200 8094 	bhi.w	8002910 <HAL_RCC_GetSysClockFreq+0x150>
 80027e8:	2900      	cmp	r1, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0x32>
 80027ec:	2904      	cmp	r1, #4
 80027ee:	d003      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x38>
 80027f0:	e08e      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f2:	4b4c      	ldr	r3, [pc, #304]	; (8002924 <HAL_RCC_GetSysClockFreq+0x164>)
 80027f4:	60bb      	str	r3, [r7, #8]
       break;
 80027f6:	e08e      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f8:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCC_GetSysClockFreq+0x168>)
 80027fa:	60bb      	str	r3, [r7, #8]
      break;
 80027fc:	e08b      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027fe:	4948      	ldr	r1, [pc, #288]	; (8002920 <HAL_RCC_GetSysClockFreq+0x160>)
 8002800:	6849      	ldr	r1, [r1, #4]
 8002802:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002806:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002808:	4945      	ldr	r1, [pc, #276]	; (8002920 <HAL_RCC_GetSysClockFreq+0x160>)
 800280a:	6849      	ldr	r1, [r1, #4]
 800280c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002810:	2900      	cmp	r1, #0
 8002812:	d024      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002814:	4942      	ldr	r1, [pc, #264]	; (8002920 <HAL_RCC_GetSysClockFreq+0x160>)
 8002816:	6849      	ldr	r1, [r1, #4]
 8002818:	0989      	lsrs	r1, r1, #6
 800281a:	4608      	mov	r0, r1
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002824:	f04f 0500 	mov.w	r5, #0
 8002828:	ea00 0204 	and.w	r2, r0, r4
 800282c:	ea01 0305 	and.w	r3, r1, r5
 8002830:	493d      	ldr	r1, [pc, #244]	; (8002928 <HAL_RCC_GetSysClockFreq+0x168>)
 8002832:	fb01 f003 	mul.w	r0, r1, r3
 8002836:	2100      	movs	r1, #0
 8002838:	fb01 f102 	mul.w	r1, r1, r2
 800283c:	1844      	adds	r4, r0, r1
 800283e:	493a      	ldr	r1, [pc, #232]	; (8002928 <HAL_RCC_GetSysClockFreq+0x168>)
 8002840:	fba2 0101 	umull	r0, r1, r2, r1
 8002844:	1863      	adds	r3, r4, r1
 8002846:	4619      	mov	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	461a      	mov	r2, r3
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	f7fd fcc2 	bl	80001d8 <__aeabi_uldivmod>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4613      	mov	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e04a      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285e:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_RCC_GetSysClockFreq+0x160>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	461a      	mov	r2, r3
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	ea02 0400 	and.w	r4, r2, r0
 8002876:	ea03 0501 	and.w	r5, r3, r1
 800287a:	4620      	mov	r0, r4
 800287c:	4629      	mov	r1, r5
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	014b      	lsls	r3, r1, #5
 8002888:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800288c:	0142      	lsls	r2, r0, #5
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	1b00      	subs	r0, r0, r4
 8002894:	eb61 0105 	sbc.w	r1, r1, r5
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	018b      	lsls	r3, r1, #6
 80028a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028a6:	0182      	lsls	r2, r0, #6
 80028a8:	1a12      	subs	r2, r2, r0
 80028aa:	eb63 0301 	sbc.w	r3, r3, r1
 80028ae:	f04f 0000 	mov.w	r0, #0
 80028b2:	f04f 0100 	mov.w	r1, #0
 80028b6:	00d9      	lsls	r1, r3, #3
 80028b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028bc:	00d0      	lsls	r0, r2, #3
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	1912      	adds	r2, r2, r4
 80028c4:	eb45 0303 	adc.w	r3, r5, r3
 80028c8:	f04f 0000 	mov.w	r0, #0
 80028cc:	f04f 0100 	mov.w	r1, #0
 80028d0:	0299      	lsls	r1, r3, #10
 80028d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028d6:	0290      	lsls	r0, r2, #10
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	f7fd fc76 	bl	80001d8 <__aeabi_uldivmod>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4613      	mov	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_RCC_GetSysClockFreq+0x160>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	3301      	adds	r3, #1
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	fbb2 f3f3 	udiv	r3, r2, r3
 800290c:	60bb      	str	r3, [r7, #8]
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <HAL_RCC_GetSysClockFreq+0x164>)
 8002912:	60bb      	str	r3, [r7, #8]
      break;
 8002914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002916:	68bb      	ldr	r3, [r7, #8]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bdb0      	pop	{r4, r5, r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	00f42400 	.word	0x00f42400
 8002928:	017d7840 	.word	0x017d7840

0800292c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <HAL_RCC_GetHCLKFreq+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000008 	.word	0x20000008

08002944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002948:	f7ff fff0 	bl	800292c <HAL_RCC_GetHCLKFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	0a9b      	lsrs	r3, r3, #10
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	4903      	ldr	r1, [pc, #12]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	080060d8 	.word	0x080060d8

0800296c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002970:	f7ff ffdc 	bl	800292c <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	0b5b      	lsrs	r3, r3, #13
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	080060d8 	.word	0x080060d8

08002994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e07b      	b.n	8002a9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d108      	bne.n	80029c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b6:	d009      	beq.n	80029cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	61da      	str	r2, [r3, #28]
 80029be:	e005      	b.n	80029cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fd ffe6 	bl	80009b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	ea42 0103 	orr.w	r1, r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0104 	and.w	r1, r3, #4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f003 0210 	and.w	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b088      	sub	sp, #32
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_SPI_Transmit+0x22>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e126      	b.n	8002d16 <HAL_SPI_Transmit+0x270>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ad0:	f7fe fc96 	bl	8001400 <HAL_GetTick>
 8002ad4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d002      	beq.n	8002aec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aea:	e10b      	b.n	8002d04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_SPI_Transmit+0x52>
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002afc:	e102      	b.n	8002d04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2203      	movs	r2, #3
 8002b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	88fa      	ldrh	r2, [r7, #6]
 8002b16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b44:	d10f      	bne.n	8002b66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d007      	beq.n	8002b84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b8c:	d14b      	bne.n	8002c26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_SPI_Transmit+0xf6>
 8002b96:	8afb      	ldrh	r3, [r7, #22]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d13e      	bne.n	8002c1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	881a      	ldrh	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	1c9a      	adds	r2, r3, #2
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bc0:	e02b      	b.n	8002c1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d112      	bne.n	8002bf6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	881a      	ldrh	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	1c9a      	adds	r2, r3, #2
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bf4:	e011      	b.n	8002c1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bf6:	f7fe fc03 	bl	8001400 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d803      	bhi.n	8002c0e <HAL_SPI_Transmit+0x168>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d102      	bne.n	8002c14 <HAL_SPI_Transmit+0x16e>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c18:	e074      	b.n	8002d04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ce      	bne.n	8002bc2 <HAL_SPI_Transmit+0x11c>
 8002c24:	e04c      	b.n	8002cc0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_SPI_Transmit+0x18e>
 8002c2e:	8afb      	ldrh	r3, [r7, #22]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d140      	bne.n	8002cb6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	7812      	ldrb	r2, [r2, #0]
 8002c40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c5a:	e02c      	b.n	8002cb6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d113      	bne.n	8002c92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c90:	e011      	b.n	8002cb6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c92:	f7fe fbb5 	bl	8001400 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d803      	bhi.n	8002caa <HAL_SPI_Transmit+0x204>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d102      	bne.n	8002cb0 <HAL_SPI_Transmit+0x20a>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cb4:	e026      	b.n	8002d04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1cd      	bne.n	8002c5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	6839      	ldr	r1, [r7, #0]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fbcb 	bl	8003460 <SPI_EndRxTxTransaction>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e000      	b.n	8002d04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d14:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3720      	adds	r7, #32
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b088      	sub	sp, #32
 8002d22:	af02      	add	r7, sp, #8
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d3a:	d112      	bne.n	8002d62 <HAL_SPI_Receive+0x44>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10e      	bne.n	8002d62 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2204      	movs	r2, #4
 8002d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d4c:	88fa      	ldrh	r2, [r7, #6]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	4613      	mov	r3, r2
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f8f1 	bl	8002f40 <HAL_SPI_TransmitReceive>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	e0ea      	b.n	8002f38 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_SPI_Receive+0x52>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e0e3      	b.n	8002f38 <HAL_SPI_Receive+0x21a>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d78:	f7fe fb42 	bl	8001400 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d002      	beq.n	8002d90 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d8e:	e0ca      	b.n	8002f26 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_SPI_Receive+0x7e>
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002da0:	e0c1      	b.n	8002f26 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2204      	movs	r2, #4
 8002da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	88fa      	ldrh	r2, [r7, #6]
 8002dba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de8:	d10f      	bne.n	8002e0a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d007      	beq.n	8002e28 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d162      	bne.n	8002ef6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e30:	e02e      	b.n	8002e90 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d115      	bne.n	8002e6c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f103 020c 	add.w	r2, r3, #12
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	7812      	ldrb	r2, [r2, #0]
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e6a:	e011      	b.n	8002e90 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e6c:	f7fe fac8 	bl	8001400 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d803      	bhi.n	8002e84 <HAL_SPI_Receive+0x166>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e82:	d102      	bne.n	8002e8a <HAL_SPI_Receive+0x16c>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e8e:	e04a      	b.n	8002f26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1cb      	bne.n	8002e32 <HAL_SPI_Receive+0x114>
 8002e9a:	e031      	b.n	8002f00 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d113      	bne.n	8002ed2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	b292      	uxth	r2, r2
 8002eb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	1c9a      	adds	r2, r3, #2
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ed0:	e011      	b.n	8002ef6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ed2:	f7fe fa95 	bl	8001400 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d803      	bhi.n	8002eea <HAL_SPI_Receive+0x1cc>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d102      	bne.n	8002ef0 <HAL_SPI_Receive+0x1d2>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ef4:	e017      	b.n	8002f26 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1cd      	bne.n	8002e9c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	6839      	ldr	r1, [r7, #0]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fa45 	bl	8003394 <SPI_EndRxTransaction>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
 8002f22:	e000      	b.n	8002f26 <HAL_SPI_Receive+0x208>
  }

error :
 8002f24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	; 0x30
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_SPI_TransmitReceive+0x26>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e18a      	b.n	800327c <HAL_SPI_TransmitReceive+0x33c>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f6e:	f7fe fa47 	bl	8001400 <HAL_GetTick>
 8002f72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d00f      	beq.n	8002fb0 <HAL_SPI_TransmitReceive+0x70>
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f96:	d107      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d103      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x68>
 8002fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d003      	beq.n	8002fb0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fae:	e15b      	b.n	8003268 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_SPI_TransmitReceive+0x82>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_SPI_TransmitReceive+0x82>
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fc8:	e14e      	b.n	8003268 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d003      	beq.n	8002fde <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2205      	movs	r2, #5
 8002fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	887a      	ldrh	r2, [r7, #2]
 8002fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	887a      	ldrh	r2, [r7, #2]
 8003000:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	887a      	ldrh	r2, [r7, #2]
 8003006:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301e:	2b40      	cmp	r3, #64	; 0x40
 8003020:	d007      	beq.n	8003032 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003030:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800303a:	d178      	bne.n	800312e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_SPI_TransmitReceive+0x10a>
 8003044:	8b7b      	ldrh	r3, [r7, #26]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d166      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	881a      	ldrh	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	1c9a      	adds	r2, r3, #2
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800306e:	e053      	b.n	8003118 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d11b      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x176>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d016      	beq.n	80030b6 <HAL_SPI_TransmitReceive+0x176>
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d113      	bne.n	80030b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	881a      	ldrh	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	1c9a      	adds	r2, r3, #2
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d119      	bne.n	80030f8 <HAL_SPI_TransmitReceive+0x1b8>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d014      	beq.n	80030f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	b292      	uxth	r2, r2
 80030da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	1c9a      	adds	r2, r3, #2
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030f4:	2301      	movs	r3, #1
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030f8:	f7fe f982 	bl	8001400 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003104:	429a      	cmp	r2, r3
 8003106:	d807      	bhi.n	8003118 <HAL_SPI_TransmitReceive+0x1d8>
 8003108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d003      	beq.n	8003118 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003116:	e0a7      	b.n	8003268 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1a6      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x130>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1a1      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x130>
 800312c:	e07c      	b.n	8003228 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_SPI_TransmitReceive+0x1fc>
 8003136:	8b7b      	ldrh	r3, [r7, #26]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d16b      	bne.n	8003214 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	7812      	ldrb	r2, [r2, #0]
 8003148:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003162:	e057      	b.n	8003214 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d11c      	bne.n	80031ac <HAL_SPI_TransmitReceive+0x26c>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d017      	beq.n	80031ac <HAL_SPI_TransmitReceive+0x26c>
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	2b01      	cmp	r3, #1
 8003180:	d114      	bne.n	80031ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	330c      	adds	r3, #12
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d119      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x2ae>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d014      	beq.n	80031ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031ea:	2301      	movs	r3, #1
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031ee:	f7fe f907 	bl	8001400 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d803      	bhi.n	8003206 <HAL_SPI_TransmitReceive+0x2c6>
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d102      	bne.n	800320c <HAL_SPI_TransmitReceive+0x2cc>
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003212:	e029      	b.n	8003268 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1a2      	bne.n	8003164 <HAL_SPI_TransmitReceive+0x224>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d19d      	bne.n	8003164 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f917 	bl	8003460 <SPI_EndRxTxTransaction>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d006      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003244:	e010      	b.n	8003268 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	e000      	b.n	8003268 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003266:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003278:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800327c:	4618      	mov	r0, r3
 800327e:	3730      	adds	r7, #48	; 0x30
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003294:	f7fe f8b4 	bl	8001400 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4413      	add	r3, r2
 80032a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032a4:	f7fe f8ac 	bl	8001400 <HAL_GetTick>
 80032a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032aa:	4b39      	ldr	r3, [pc, #228]	; (8003390 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	015b      	lsls	r3, r3, #5
 80032b0:	0d1b      	lsrs	r3, r3, #20
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ba:	e054      	b.n	8003366 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c2:	d050      	beq.n	8003366 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032c4:	f7fe f89c 	bl	8001400 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d902      	bls.n	80032da <SPI_WaitFlagStateUntilTimeout+0x56>
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d13d      	bne.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f2:	d111      	bne.n	8003318 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032fc:	d004      	beq.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003306:	d107      	bne.n	8003318 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003316:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003320:	d10f      	bne.n	8003342 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003340:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e017      	b.n	8003386 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3b01      	subs	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4013      	ands	r3, r2
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	bf0c      	ite	eq
 8003376:	2301      	moveq	r3, #1
 8003378:	2300      	movne	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	429a      	cmp	r2, r3
 8003382:	d19b      	bne.n	80032bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000008 	.word	0x20000008

08003394 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033a8:	d111      	bne.n	80033ce <SPI_EndRxTransaction+0x3a>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b2:	d004      	beq.n	80033be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033bc:	d107      	bne.n	80033ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033d6:	d12a      	bne.n	800342e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e0:	d012      	beq.n	8003408 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2180      	movs	r1, #128	; 0x80
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff ff49 	bl	8003284 <SPI_WaitFlagStateUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d02d      	beq.n	8003454 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e026      	b.n	8003456 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2200      	movs	r2, #0
 8003410:	2101      	movs	r1, #1
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff ff36 	bl	8003284 <SPI_WaitFlagStateUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01a      	beq.n	8003454 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e013      	b.n	8003456 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2200      	movs	r2, #0
 8003436:	2101      	movs	r1, #1
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f7ff ff23 	bl	8003284 <SPI_WaitFlagStateUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e000      	b.n	8003456 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <SPI_EndRxTxTransaction+0x7c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <SPI_EndRxTxTransaction+0x80>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	0d5b      	lsrs	r3, r3, #21
 8003478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800348a:	d112      	bne.n	80034b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f7ff fef4 	bl	8003284 <SPI_WaitFlagStateUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	f043 0220 	orr.w	r2, r3, #32
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e00f      	b.n	80034d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	d0f2      	beq.n	80034b2 <SPI_EndRxTxTransaction+0x52>
 80034cc:	e000      	b.n	80034d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80034ce:	bf00      	nop
  }

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000008 	.word	0x20000008
 80034e0:	165e9f81 	.word	0x165e9f81

080034e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e041      	b.n	800357a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd fd9c 	bl	8001048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f000 fb24 	bl	8003b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e041      	b.n	8003618 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fd fc13 	bl	8000dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f000 fad5 	bl	8003b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <HAL_TIM_PWM_Start+0x24>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e022      	b.n	800368a <HAL_TIM_PWM_Start+0x6a>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b04      	cmp	r3, #4
 8003648:	d109      	bne.n	800365e <HAL_TIM_PWM_Start+0x3e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e015      	b.n	800368a <HAL_TIM_PWM_Start+0x6a>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d109      	bne.n	8003678 <HAL_TIM_PWM_Start+0x58>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	e008      	b.n	800368a <HAL_TIM_PWM_Start+0x6a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e068      	b.n	8003764 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d104      	bne.n	80036a2 <HAL_TIM_PWM_Start+0x82>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a0:	e013      	b.n	80036ca <HAL_TIM_PWM_Start+0xaa>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d104      	bne.n	80036b2 <HAL_TIM_PWM_Start+0x92>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b0:	e00b      	b.n	80036ca <HAL_TIM_PWM_Start+0xaa>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d104      	bne.n	80036c2 <HAL_TIM_PWM_Start+0xa2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c0:	e003      	b.n	80036ca <HAL_TIM_PWM_Start+0xaa>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2202      	movs	r2, #2
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2201      	movs	r2, #1
 80036d0:	6839      	ldr	r1, [r7, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fc58 	bl	8003f88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a23      	ldr	r2, [pc, #140]	; (800376c <HAL_TIM_PWM_Start+0x14c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d107      	bne.n	80036f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1d      	ldr	r2, [pc, #116]	; (800376c <HAL_TIM_PWM_Start+0x14c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d018      	beq.n	800372e <HAL_TIM_PWM_Start+0x10e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003704:	d013      	beq.n	800372e <HAL_TIM_PWM_Start+0x10e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a19      	ldr	r2, [pc, #100]	; (8003770 <HAL_TIM_PWM_Start+0x150>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <HAL_TIM_PWM_Start+0x10e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a17      	ldr	r2, [pc, #92]	; (8003774 <HAL_TIM_PWM_Start+0x154>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_TIM_PWM_Start+0x10e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a16      	ldr	r2, [pc, #88]	; (8003778 <HAL_TIM_PWM_Start+0x158>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_TIM_PWM_Start+0x10e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a14      	ldr	r2, [pc, #80]	; (800377c <HAL_TIM_PWM_Start+0x15c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d111      	bne.n	8003752 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b06      	cmp	r3, #6
 800373e:	d010      	beq.n	8003762 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003750:	e007      	b.n	8003762 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40010000 	.word	0x40010000
 8003770:	40000400 	.word	0x40000400
 8003774:	40000800 	.word	0x40000800
 8003778:	40000c00 	.word	0x40000c00
 800377c:	40014000 	.word	0x40014000

08003780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d122      	bne.n	80037dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d11b      	bne.n	80037dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0202 	mvn.w	r2, #2
 80037ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f9b6 	bl	8003b34 <HAL_TIM_IC_CaptureCallback>
 80037c8:	e005      	b.n	80037d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f9a8 	bl	8003b20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f9b9 	bl	8003b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0204 	mvn.w	r2, #4
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f98c 	bl	8003b34 <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f97e 	bl	8003b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f98f 	bl	8003b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b08      	cmp	r3, #8
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b08      	cmp	r3, #8
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0208 	mvn.w	r2, #8
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2204      	movs	r2, #4
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f962 	bl	8003b34 <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f954 	bl	8003b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f965 	bl	8003b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b10      	cmp	r3, #16
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b10      	cmp	r3, #16
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0210 	mvn.w	r2, #16
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2208      	movs	r2, #8
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f938 	bl	8003b34 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f92a 	bl	8003b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f93b 	bl	8003b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10e      	bne.n	8003904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0201 	mvn.w	r2, #1
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f904 	bl	8003b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fbca 	bl	80040c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f900 	bl	8003b5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b20      	cmp	r3, #32
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0220 	mvn.w	r2, #32
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fb94 	bl	80040b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0ac      	b.n	8003b04 <HAL_TIM_PWM_ConfigChannel+0x174>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	f200 809f 	bhi.w	8003af8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039f5 	.word	0x080039f5
 80039c4:	08003af9 	.word	0x08003af9
 80039c8:	08003af9 	.word	0x08003af9
 80039cc:	08003af9 	.word	0x08003af9
 80039d0:	08003a35 	.word	0x08003a35
 80039d4:	08003af9 	.word	0x08003af9
 80039d8:	08003af9 	.word	0x08003af9
 80039dc:	08003af9 	.word	0x08003af9
 80039e0:	08003a77 	.word	0x08003a77
 80039e4:	08003af9 	.word	0x08003af9
 80039e8:	08003af9 	.word	0x08003af9
 80039ec:	08003af9 	.word	0x08003af9
 80039f0:	08003ab7 	.word	0x08003ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f938 	bl	8003c70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0208 	orr.w	r2, r2, #8
 8003a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0204 	bic.w	r2, r2, #4
 8003a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6999      	ldr	r1, [r3, #24]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	619a      	str	r2, [r3, #24]
      break;
 8003a32:	e062      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f97e 	bl	8003d3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6999      	ldr	r1, [r3, #24]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	021a      	lsls	r2, r3, #8
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	619a      	str	r2, [r3, #24]
      break;
 8003a74:	e041      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f9c9 	bl	8003e14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0208 	orr.w	r2, r2, #8
 8003a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0204 	bic.w	r2, r2, #4
 8003aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69d9      	ldr	r1, [r3, #28]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	61da      	str	r2, [r3, #28]
      break;
 8003ab4:	e021      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fa13 	bl	8003ee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69d9      	ldr	r1, [r3, #28]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	61da      	str	r2, [r3, #28]
      break;
 8003af6:	e000      	b.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003af8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a34      	ldr	r2, [pc, #208]	; (8003c54 <TIM_Base_SetConfig+0xe4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00f      	beq.n	8003ba8 <TIM_Base_SetConfig+0x38>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8e:	d00b      	beq.n	8003ba8 <TIM_Base_SetConfig+0x38>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a31      	ldr	r2, [pc, #196]	; (8003c58 <TIM_Base_SetConfig+0xe8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d007      	beq.n	8003ba8 <TIM_Base_SetConfig+0x38>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a30      	ldr	r2, [pc, #192]	; (8003c5c <TIM_Base_SetConfig+0xec>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_Base_SetConfig+0x38>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <TIM_Base_SetConfig+0xf0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d108      	bne.n	8003bba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a25      	ldr	r2, [pc, #148]	; (8003c54 <TIM_Base_SetConfig+0xe4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01b      	beq.n	8003bfa <TIM_Base_SetConfig+0x8a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d017      	beq.n	8003bfa <TIM_Base_SetConfig+0x8a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <TIM_Base_SetConfig+0xe8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <TIM_Base_SetConfig+0x8a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <TIM_Base_SetConfig+0xec>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00f      	beq.n	8003bfa <TIM_Base_SetConfig+0x8a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <TIM_Base_SetConfig+0xf0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00b      	beq.n	8003bfa <TIM_Base_SetConfig+0x8a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <TIM_Base_SetConfig+0xf4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <TIM_Base_SetConfig+0x8a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <TIM_Base_SetConfig+0xf8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_Base_SetConfig+0x8a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <TIM_Base_SetConfig+0xfc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d108      	bne.n	8003c0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <TIM_Base_SetConfig+0xe4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d103      	bne.n	8003c40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	615a      	str	r2, [r3, #20]
}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40010000 	.word	0x40010000
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	40000c00 	.word	0x40000c00
 8003c64:	40014000 	.word	0x40014000
 8003c68:	40014400 	.word	0x40014400
 8003c6c:	40014800 	.word	0x40014800

08003c70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f023 0201 	bic.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 0302 	bic.w	r3, r3, #2
 8003cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <TIM_OC1_SetConfig+0xc8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d10c      	bne.n	8003ce6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0308 	bic.w	r3, r3, #8
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f023 0304 	bic.w	r3, r3, #4
 8003ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <TIM_OC1_SetConfig+0xc8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d111      	bne.n	8003d12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	621a      	str	r2, [r3, #32]
}
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	40010000 	.word	0x40010000

08003d3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f023 0210 	bic.w	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0320 	bic.w	r3, r3, #32
 8003d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <TIM_OC2_SetConfig+0xd4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d10d      	bne.n	8003db8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <TIM_OC2_SetConfig+0xd4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d113      	bne.n	8003de8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40010000 	.word	0x40010000

08003e14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <TIM_OC3_SetConfig+0xd0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10d      	bne.n	8003e8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a14      	ldr	r2, [pc, #80]	; (8003ee4 <TIM_OC3_SetConfig+0xd0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d113      	bne.n	8003ebe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	621a      	str	r2, [r3, #32]
}
 8003ed8:	bf00      	nop
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	40010000 	.word	0x40010000

08003ee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	031b      	lsls	r3, r3, #12
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a10      	ldr	r2, [pc, #64]	; (8003f84 <TIM_OC4_SetConfig+0x9c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d109      	bne.n	8003f5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	019b      	lsls	r3, r3, #6
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40010000 	.word	0x40010000

08003f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1a      	ldr	r2, [r3, #32]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	401a      	ands	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1a      	ldr	r2, [r3, #32]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e050      	b.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1c      	ldr	r2, [pc, #112]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d018      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d013      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a13      	ldr	r2, [pc, #76]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10c      	bne.n	800407c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	4313      	orrs	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40010000 	.word	0x40010000
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40000c00 	.word	0x40000c00
 80040ac:	40014000 	.word	0x40014000

080040b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e03f      	b.n	800416a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fd f852 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2224      	movs	r2, #36	; 0x24
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800411a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f9d1 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	4613      	mov	r3, r2
 800417e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b20      	cmp	r3, #32
 800418a:	d11d      	bne.n	80041c8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <HAL_UART_Receive_DMA+0x26>
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e016      	b.n	80041ca <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_UART_Receive_DMA+0x38>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e00f      	b.n	80041ca <HAL_UART_Receive_DMA+0x58>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	461a      	mov	r2, r3
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f8d8 	bl	8004374 <UART_Start_Receive_DMA>
 80041c4:	4603      	mov	r3, r0
 80041c6:	e000      	b.n	80041ca <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041c8:	2302      	movs	r3, #2
  }
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	460b      	mov	r3, r1
 8004204:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d12a      	bne.n	8004284 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004242:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004262:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	2b01      	cmp	r3, #1
 8004272:	d107      	bne.n	8004284 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0210 	bic.w	r2, r2, #16
 8004282:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	2b01      	cmp	r3, #1
 800428a:	d106      	bne.n	800429a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004290:	4619      	mov	r1, r3
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff ffb1 	bl	80041fa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004298:	e002      	b.n	80042a0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7fc fafc 	bl	8000898 <HAL_UART_RxCpltCallback>
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d108      	bne.n	80042d0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	4619      	mov	r1, r3
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7ff ff96 	bl	80041fa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042ce:	e002      	b.n	80042d6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7ff ff7e 	bl	80041d2 <HAL_UART_RxHalfCpltCallback>
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fa:	2b80      	cmp	r3, #128	; 0x80
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b21      	cmp	r3, #33	; 0x21
 8004310:	d108      	bne.n	8004324 <UART_DMAError+0x46>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800431e:	68b8      	ldr	r0, [r7, #8]
 8004320:	f000 f88c 	bl	800443c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	bf0c      	ite	eq
 8004332:	2301      	moveq	r3, #1
 8004334:	2300      	movne	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b22      	cmp	r3, #34	; 0x22
 8004344:	d108      	bne.n	8004358 <UART_DMAError+0x7a>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2200      	movs	r2, #0
 8004350:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004352:	68b8      	ldr	r0, [r7, #8]
 8004354:	f000 f888 	bl	8004468 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	f043 0210 	orr.w	r2, r3, #16
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004364:	68b8      	ldr	r0, [r7, #8]
 8004366:	f7ff ff3e 	bl	80041e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	4613      	mov	r3, r2
 8004380:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2222      	movs	r2, #34	; 0x22
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	4a23      	ldr	r2, [pc, #140]	; (8004430 <UART_Start_Receive_DMA+0xbc>)
 80043a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	4a22      	ldr	r2, [pc, #136]	; (8004434 <UART_Start_Receive_DMA+0xc0>)
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	4a21      	ldr	r2, [pc, #132]	; (8004438 <UART_Start_Receive_DMA+0xc4>)
 80043b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	2200      	movs	r2, #0
 80043ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80043bc:	f107 0308 	add.w	r3, r7, #8
 80043c0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3304      	adds	r3, #4
 80043cc:	4619      	mov	r1, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	f7fd fa04 	bl	80017e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004404:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0201 	orr.w	r2, r2, #1
 8004414:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004424:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	08004213 	.word	0x08004213
 8004434:	080042a9 	.word	0x080042a9
 8004438:	080042df 	.word	0x080042df

0800443c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004452:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800447e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0210 	bic.w	r2, r2, #16
 80044a6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c8:	b09f      	sub	sp, #124	; 0x7c
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	68d9      	ldr	r1, [r3, #12]
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	ea40 0301 	orr.w	r3, r0, r1
 80044e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	431a      	orrs	r2, r3
 80044f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004508:	f021 010c 	bic.w	r1, r1, #12
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004512:	430b      	orrs	r3, r1
 8004514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004522:	6999      	ldr	r1, [r3, #24]
 8004524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	ea40 0301 	orr.w	r3, r0, r1
 800452c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800452e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4bc5      	ldr	r3, [pc, #788]	; (8004848 <UART_SetConfig+0x384>)
 8004534:	429a      	cmp	r2, r3
 8004536:	d004      	beq.n	8004542 <UART_SetConfig+0x7e>
 8004538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4bc3      	ldr	r3, [pc, #780]	; (800484c <UART_SetConfig+0x388>)
 800453e:	429a      	cmp	r2, r3
 8004540:	d103      	bne.n	800454a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004542:	f7fe fa13 	bl	800296c <HAL_RCC_GetPCLK2Freq>
 8004546:	6778      	str	r0, [r7, #116]	; 0x74
 8004548:	e002      	b.n	8004550 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800454a:	f7fe f9fb 	bl	8002944 <HAL_RCC_GetPCLK1Freq>
 800454e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004558:	f040 80b6 	bne.w	80046c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800455c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800455e:	461c      	mov	r4, r3
 8004560:	f04f 0500 	mov.w	r5, #0
 8004564:	4622      	mov	r2, r4
 8004566:	462b      	mov	r3, r5
 8004568:	1891      	adds	r1, r2, r2
 800456a:	6439      	str	r1, [r7, #64]	; 0x40
 800456c:	415b      	adcs	r3, r3
 800456e:	647b      	str	r3, [r7, #68]	; 0x44
 8004570:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004574:	1912      	adds	r2, r2, r4
 8004576:	eb45 0303 	adc.w	r3, r5, r3
 800457a:	f04f 0000 	mov.w	r0, #0
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	00d9      	lsls	r1, r3, #3
 8004584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004588:	00d0      	lsls	r0, r2, #3
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	1911      	adds	r1, r2, r4
 8004590:	6639      	str	r1, [r7, #96]	; 0x60
 8004592:	416b      	adcs	r3, r5
 8004594:	667b      	str	r3, [r7, #100]	; 0x64
 8004596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	461a      	mov	r2, r3
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	1891      	adds	r1, r2, r2
 80045a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80045a4:	415b      	adcs	r3, r3
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80045b0:	f7fb fe12 	bl	80001d8 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4ba5      	ldr	r3, [pc, #660]	; (8004850 <UART_SetConfig+0x38c>)
 80045ba:	fba3 2302 	umull	r2, r3, r3, r2
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	011e      	lsls	r6, r3, #4
 80045c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c4:	461c      	mov	r4, r3
 80045c6:	f04f 0500 	mov.w	r5, #0
 80045ca:	4622      	mov	r2, r4
 80045cc:	462b      	mov	r3, r5
 80045ce:	1891      	adds	r1, r2, r2
 80045d0:	6339      	str	r1, [r7, #48]	; 0x30
 80045d2:	415b      	adcs	r3, r3
 80045d4:	637b      	str	r3, [r7, #52]	; 0x34
 80045d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045da:	1912      	adds	r2, r2, r4
 80045dc:	eb45 0303 	adc.w	r3, r5, r3
 80045e0:	f04f 0000 	mov.w	r0, #0
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	00d9      	lsls	r1, r3, #3
 80045ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045ee:	00d0      	lsls	r0, r2, #3
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	1911      	adds	r1, r2, r4
 80045f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80045f8:	416b      	adcs	r3, r5
 80045fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	461a      	mov	r2, r3
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	1891      	adds	r1, r2, r2
 8004608:	62b9      	str	r1, [r7, #40]	; 0x28
 800460a:	415b      	adcs	r3, r3
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800460e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004612:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004616:	f7fb fddf 	bl	80001d8 <__aeabi_uldivmod>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4b8c      	ldr	r3, [pc, #560]	; (8004850 <UART_SetConfig+0x38c>)
 8004620:	fba3 1302 	umull	r1, r3, r3, r2
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	2164      	movs	r1, #100	; 0x64
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	3332      	adds	r3, #50	; 0x32
 8004632:	4a87      	ldr	r2, [pc, #540]	; (8004850 <UART_SetConfig+0x38c>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004640:	441e      	add	r6, r3
 8004642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004644:	4618      	mov	r0, r3
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	1894      	adds	r4, r2, r2
 8004650:	623c      	str	r4, [r7, #32]
 8004652:	415b      	adcs	r3, r3
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
 8004656:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800465a:	1812      	adds	r2, r2, r0
 800465c:	eb41 0303 	adc.w	r3, r1, r3
 8004660:	f04f 0400 	mov.w	r4, #0
 8004664:	f04f 0500 	mov.w	r5, #0
 8004668:	00dd      	lsls	r5, r3, #3
 800466a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800466e:	00d4      	lsls	r4, r2, #3
 8004670:	4622      	mov	r2, r4
 8004672:	462b      	mov	r3, r5
 8004674:	1814      	adds	r4, r2, r0
 8004676:	653c      	str	r4, [r7, #80]	; 0x50
 8004678:	414b      	adcs	r3, r1
 800467a:	657b      	str	r3, [r7, #84]	; 0x54
 800467c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	461a      	mov	r2, r3
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	1891      	adds	r1, r2, r2
 8004688:	61b9      	str	r1, [r7, #24]
 800468a:	415b      	adcs	r3, r3
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004692:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004696:	f7fb fd9f 	bl	80001d8 <__aeabi_uldivmod>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4b6c      	ldr	r3, [pc, #432]	; (8004850 <UART_SetConfig+0x38c>)
 80046a0:	fba3 1302 	umull	r1, r3, r3, r2
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	2164      	movs	r1, #100	; 0x64
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	3332      	adds	r3, #50	; 0x32
 80046b2:	4a67      	ldr	r2, [pc, #412]	; (8004850 <UART_SetConfig+0x38c>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	f003 0207 	and.w	r2, r3, #7
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4432      	add	r2, r6
 80046c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046c6:	e0b9      	b.n	800483c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ca:	461c      	mov	r4, r3
 80046cc:	f04f 0500 	mov.w	r5, #0
 80046d0:	4622      	mov	r2, r4
 80046d2:	462b      	mov	r3, r5
 80046d4:	1891      	adds	r1, r2, r2
 80046d6:	6139      	str	r1, [r7, #16]
 80046d8:	415b      	adcs	r3, r3
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046e0:	1912      	adds	r2, r2, r4
 80046e2:	eb45 0303 	adc.w	r3, r5, r3
 80046e6:	f04f 0000 	mov.w	r0, #0
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	00d9      	lsls	r1, r3, #3
 80046f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046f4:	00d0      	lsls	r0, r2, #3
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	eb12 0804 	adds.w	r8, r2, r4
 80046fe:	eb43 0905 	adc.w	r9, r3, r5
 8004702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	f04f 0100 	mov.w	r1, #0
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	008b      	lsls	r3, r1, #2
 8004716:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800471a:	0082      	lsls	r2, r0, #2
 800471c:	4640      	mov	r0, r8
 800471e:	4649      	mov	r1, r9
 8004720:	f7fb fd5a 	bl	80001d8 <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4b49      	ldr	r3, [pc, #292]	; (8004850 <UART_SetConfig+0x38c>)
 800472a:	fba3 2302 	umull	r2, r3, r3, r2
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	011e      	lsls	r6, r3, #4
 8004732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004734:	4618      	mov	r0, r3
 8004736:	f04f 0100 	mov.w	r1, #0
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	1894      	adds	r4, r2, r2
 8004740:	60bc      	str	r4, [r7, #8]
 8004742:	415b      	adcs	r3, r3
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800474a:	1812      	adds	r2, r2, r0
 800474c:	eb41 0303 	adc.w	r3, r1, r3
 8004750:	f04f 0400 	mov.w	r4, #0
 8004754:	f04f 0500 	mov.w	r5, #0
 8004758:	00dd      	lsls	r5, r3, #3
 800475a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800475e:	00d4      	lsls	r4, r2, #3
 8004760:	4622      	mov	r2, r4
 8004762:	462b      	mov	r3, r5
 8004764:	1814      	adds	r4, r2, r0
 8004766:	64bc      	str	r4, [r7, #72]	; 0x48
 8004768:	414b      	adcs	r3, r1
 800476a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800476c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	f04f 0100 	mov.w	r1, #0
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	008b      	lsls	r3, r1, #2
 8004780:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004784:	0082      	lsls	r2, r0, #2
 8004786:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800478a:	f7fb fd25 	bl	80001d8 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <UART_SetConfig+0x38c>)
 8004794:	fba3 1302 	umull	r1, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	2164      	movs	r1, #100	; 0x64
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	3332      	adds	r3, #50	; 0x32
 80047a6:	4a2a      	ldr	r2, [pc, #168]	; (8004850 <UART_SetConfig+0x38c>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047b2:	441e      	add	r6, r3
 80047b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047b6:	4618      	mov	r0, r3
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	1894      	adds	r4, r2, r2
 80047c2:	603c      	str	r4, [r7, #0]
 80047c4:	415b      	adcs	r3, r3
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047cc:	1812      	adds	r2, r2, r0
 80047ce:	eb41 0303 	adc.w	r3, r1, r3
 80047d2:	f04f 0400 	mov.w	r4, #0
 80047d6:	f04f 0500 	mov.w	r5, #0
 80047da:	00dd      	lsls	r5, r3, #3
 80047dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047e0:	00d4      	lsls	r4, r2, #3
 80047e2:	4622      	mov	r2, r4
 80047e4:	462b      	mov	r3, r5
 80047e6:	eb12 0a00 	adds.w	sl, r2, r0
 80047ea:	eb43 0b01 	adc.w	fp, r3, r1
 80047ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f04f 0100 	mov.w	r1, #0
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	008b      	lsls	r3, r1, #2
 8004802:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004806:	0082      	lsls	r2, r0, #2
 8004808:	4650      	mov	r0, sl
 800480a:	4659      	mov	r1, fp
 800480c:	f7fb fce4 	bl	80001d8 <__aeabi_uldivmod>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <UART_SetConfig+0x38c>)
 8004816:	fba3 1302 	umull	r1, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2164      	movs	r1, #100	; 0x64
 800481e:	fb01 f303 	mul.w	r3, r1, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	; 0x32
 8004828:	4a09      	ldr	r2, [pc, #36]	; (8004850 <UART_SetConfig+0x38c>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 020f 	and.w	r2, r3, #15
 8004834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4432      	add	r2, r6
 800483a:	609a      	str	r2, [r3, #8]
}
 800483c:	bf00      	nop
 800483e:	377c      	adds	r7, #124	; 0x7c
 8004840:	46bd      	mov	sp, r7
 8004842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004846:	bf00      	nop
 8004848:	40011000 	.word	0x40011000
 800484c:	40011400 	.word	0x40011400
 8004850:	51eb851f 	.word	0x51eb851f

08004854 <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f833 	bl	80048cc <dshot_set_timer>
	dshot_put_tc_callback_function();
 8004866:	f000 f8d3 	bl	8004a10 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800486a:	f000 f8ef 	bl	8004a4c <dshot_start_pwm>
}
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f962 	bl	8004b48 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8004884:	f000 f98c 	bl	8004ba0 <dshot_dma_start>
	dshot_enable_dma_request();
 8004888:	f000 f9c2 	bl	8004c10 <dshot_enable_dma_request>
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d003      	beq.n	80048ac <dshot_choose_type+0x18>
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d103      	bne.n	80048b0 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <dshot_choose_type+0x2c>)
 80048aa:	e002      	b.n	80048b2 <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <dshot_choose_type+0x30>)
 80048ae:	e000      	b.n	80048b2 <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <dshot_choose_type+0x34>)
	}
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	00b71b00 	.word	0x00b71b00
 80048c4:	005b8d80 	.word	0x005b8d80
 80048c8:	002dc6c0 	.word	0x002dc6c0

080048cc <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	ed2d 8b02 	vpush	{d8}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80048da:	4b27      	ldr	r3, [pc, #156]	; (8004978 <dshot_set_timer+0xac>)
 80048dc:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	ee07 3a90 	vmov	s15, r3
 80048e4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff ffd2 	bl	8004894 <dshot_choose_type>
 80048f0:	ee07 0a90 	vmov	s15, r0
 80048f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048f8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80048fc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800497c <dshot_set_timer+0xb0>
 8004900:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004904:	eeb0 0a67 	vmov.f32	s0, s15
 8004908:	f001 fb90 	bl	800602c <lrintf>
 800490c:	4603      	mov	r3, r0
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8004914:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <dshot_set_timer+0xb4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	897a      	ldrh	r2, [r7, #10]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 800491c:	4b18      	ldr	r3, [pc, #96]	; (8004980 <dshot_set_timer+0xb4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2214      	movs	r2, #20
 8004922:	62da      	str	r2, [r3, #44]	; 0x2c
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <dshot_set_timer+0xb4>)
 8004926:	2214      	movs	r2, #20
 8004928:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 800492a:	4b16      	ldr	r3, [pc, #88]	; (8004984 <dshot_set_timer+0xb8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	897a      	ldrh	r2, [r7, #10]
 8004930:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <dshot_set_timer+0xb8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2214      	movs	r2, #20
 8004938:	62da      	str	r2, [r3, #44]	; 0x2c
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <dshot_set_timer+0xb8>)
 800493c:	2214      	movs	r2, #20
 800493e:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8004940:	4b10      	ldr	r3, [pc, #64]	; (8004984 <dshot_set_timer+0xb8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	897a      	ldrh	r2, [r7, #10]
 8004946:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8004948:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <dshot_set_timer+0xb8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2214      	movs	r2, #20
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <dshot_set_timer+0xb8>)
 8004952:	2214      	movs	r2, #20
 8004954:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <dshot_set_timer+0xb4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	897a      	ldrh	r2, [r7, #10]
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 800495e:	4b08      	ldr	r3, [pc, #32]	; (8004980 <dshot_set_timer+0xb4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2214      	movs	r2, #20
 8004964:	62da      	str	r2, [r3, #44]	; 0x2c
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <dshot_set_timer+0xb4>)
 8004968:	2214      	movs	r2, #20
 800496a:	60da      	str	r2, [r3, #12]
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	ecbd 8b02 	vpop	{d8}
 8004976:	bd80      	pop	{r7, pc}
 8004978:	05f5e100 	.word	0x05f5e100
 800497c:	3c23d70a 	.word	0x3c23d70a
 8004980:	2000032c 	.word	0x2000032c
 8004984:	2000047c 	.word	0x2000047c

08004988 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d108      	bne.n	80049b2 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049ae:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 80049b0:	e028      	b.n	8004a04 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d108      	bne.n	80049ce <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ca:	60da      	str	r2, [r3, #12]
}
 80049cc:	e01a      	b.n	8004a04 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d108      	bne.n	80049ea <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e6:	60da      	str	r2, [r3, #12]
}
 80049e8:	e00c      	b.n	8004a04 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d107      	bne.n	8004a04 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a02:	60da      	str	r2, [r3, #12]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <dshot_put_tc_callback_function+0x30>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <dshot_put_tc_callback_function+0x34>)
 8004a1a:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <dshot_put_tc_callback_function+0x38>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <dshot_put_tc_callback_function+0x34>)
 8004a22:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8004a24:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <dshot_put_tc_callback_function+0x38>)
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	4a06      	ldr	r2, [pc, #24]	; (8004a44 <dshot_put_tc_callback_function+0x34>)
 8004a2a:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <dshot_put_tc_callback_function+0x30>)
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	4a04      	ldr	r2, [pc, #16]	; (8004a44 <dshot_put_tc_callback_function+0x34>)
 8004a32:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	2000032c 	.word	0x2000032c
 8004a44:	08004989 	.word	0x08004989
 8004a48:	2000047c 	.word	0x2000047c

08004a4c <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8004a50:	210c      	movs	r1, #12
 8004a52:	4808      	ldr	r0, [pc, #32]	; (8004a74 <dshot_start_pwm+0x28>)
 8004a54:	f7fe fde4 	bl	8003620 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8004a58:	2108      	movs	r1, #8
 8004a5a:	4807      	ldr	r0, [pc, #28]	; (8004a78 <dshot_start_pwm+0x2c>)
 8004a5c:	f7fe fde0 	bl	8003620 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8004a60:	2100      	movs	r1, #0
 8004a62:	4805      	ldr	r0, [pc, #20]	; (8004a78 <dshot_start_pwm+0x2c>)
 8004a64:	f7fe fddc 	bl	8003620 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8004a68:	2104      	movs	r1, #4
 8004a6a:	4802      	ldr	r0, [pc, #8]	; (8004a74 <dshot_start_pwm+0x28>)
 8004a6c:	f7fe fdd8 	bl	8003620 <HAL_TIM_PWM_Start>
}
 8004a70:	bf00      	nop
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	2000032c 	.word	0x2000032c
 8004a78:	2000047c 	.word	0x2000047c

08004a7c <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8004a86:	2300      	movs	r3, #0
 8004a88:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	b21a      	sxth	r2, r3
 8004a90:	7afb      	ldrb	r3, [r7, #11]
 8004a92:	b21b      	sxth	r3, r3
 8004a94:	4313      	orrs	r3, r2
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8004a9e:	893b      	ldrh	r3, [r7, #8]
 8004aa0:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e009      	b.n	8004abc <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	4053      	eors	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	ddf2      	ble.n	8004aa8 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8004aca:	893b      	ldrh	r3, [r7, #8]
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	813b      	strh	r3, [r7, #8]

	return packet;
 8004ad8:	893b      	ldrh	r3, [r7, #8]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	460b      	mov	r3, r1
 8004af0:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8004af2:	887b      	ldrh	r3, [r7, #2]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff ffc1 	bl	8004a7c <dshot_prepare_packet>
 8004afa:	4603      	mov	r3, r0
 8004afc:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	e011      	b.n	8004b28 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8004b04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	da01      	bge.n	8004b10 <dshot_prepare_dmabuffer+0x2a>
 8004b0c:	220e      	movs	r2, #14
 8004b0e:	e000      	b.n	8004b12 <dshot_prepare_dmabuffer+0x2c>
 8004b10:	2207      	movs	r2, #7
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	440b      	add	r3, r1
 8004b1a:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8004b1c:	89fb      	ldrh	r3, [r7, #14]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	3301      	adds	r3, #1
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b0f      	cmp	r3, #15
 8004b2c:	ddea      	ble.n	8004b04 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3340      	adds	r3, #64	; 0x40
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3344      	adds	r3, #68	; 0x44
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	4619      	mov	r1, r3
 8004b56:	480e      	ldr	r0, [pc, #56]	; (8004b90 <dshot_prepare_dmabuffer_all+0x48>)
 8004b58:	f7ff ffc5 	bl	8004ae6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3302      	adds	r3, #2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	4619      	mov	r1, r3
 8004b64:	480b      	ldr	r0, [pc, #44]	; (8004b94 <dshot_prepare_dmabuffer_all+0x4c>)
 8004b66:	f7ff ffbe 	bl	8004ae6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	4619      	mov	r1, r3
 8004b72:	4809      	ldr	r0, [pc, #36]	; (8004b98 <dshot_prepare_dmabuffer_all+0x50>)
 8004b74:	f7ff ffb7 	bl	8004ae6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3306      	adds	r3, #6
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4806      	ldr	r0, [pc, #24]	; (8004b9c <dshot_prepare_dmabuffer_all+0x54>)
 8004b82:	f7ff ffb0 	bl	8004ae6 <dshot_prepare_dmabuffer>
}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000038 	.word	0x20000038
 8004b94:	20000080 	.word	0x20000080
 8004b98:	200000c8 	.word	0x200000c8
 8004b9c:	20000110 	.word	0x20000110

08004ba0 <dshot_dma_start>:

static void dshot_dma_start()
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8004ba4:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <dshot_dma_start+0x58>)
 8004ba6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ba8:	4914      	ldr	r1, [pc, #80]	; (8004bfc <dshot_dma_start+0x5c>)
 8004baa:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <dshot_dma_start+0x58>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3340      	adds	r3, #64	; 0x40
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2312      	movs	r3, #18
 8004bb4:	f7fc fe14 	bl	80017e0 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <dshot_dma_start+0x60>)
 8004bba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004bbc:	4911      	ldr	r1, [pc, #68]	; (8004c04 <dshot_dma_start+0x64>)
 8004bbe:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <dshot_dma_start+0x60>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	333c      	adds	r3, #60	; 0x3c
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2312      	movs	r3, #18
 8004bc8:	f7fc fe0a 	bl	80017e0 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <dshot_dma_start+0x60>)
 8004bce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004bd0:	490d      	ldr	r1, [pc, #52]	; (8004c08 <dshot_dma_start+0x68>)
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <dshot_dma_start+0x60>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3334      	adds	r3, #52	; 0x34
 8004bd8:	461a      	mov	r2, r3
 8004bda:	2312      	movs	r3, #18
 8004bdc:	f7fc fe00 	bl	80017e0 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <dshot_dma_start+0x58>)
 8004be2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004be4:	4909      	ldr	r1, [pc, #36]	; (8004c0c <dshot_dma_start+0x6c>)
 8004be6:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <dshot_dma_start+0x58>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3338      	adds	r3, #56	; 0x38
 8004bec:	461a      	mov	r2, r3
 8004bee:	2312      	movs	r3, #18
 8004bf0:	f7fc fdf6 	bl	80017e0 <HAL_DMA_Start_IT>
}
 8004bf4:	bf00      	nop
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	2000032c 	.word	0x2000032c
 8004bfc:	20000038 	.word	0x20000038
 8004c00:	2000047c 	.word	0x2000047c
 8004c04:	20000080 	.word	0x20000080
 8004c08:	200000c8 	.word	0x200000c8
 8004c0c:	20000110 	.word	0x20000110

08004c10 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8004c14:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <dshot_enable_dma_request+0x50>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <dshot_enable_dma_request+0x50>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c22:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <dshot_enable_dma_request+0x54>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <dshot_enable_dma_request+0x54>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c32:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <dshot_enable_dma_request+0x54>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <dshot_enable_dma_request+0x54>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c42:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <dshot_enable_dma_request+0x50>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <dshot_enable_dma_request+0x50>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c52:	60da      	str	r2, [r3, #12]
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	2000032c 	.word	0x2000032c
 8004c64:	2000047c 	.word	0x2000047c

08004c68 <ibus_init>:
static uint8_t fail_safe_flag = 0;


/* Main Functions */
void ibus_init()
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	4903      	ldr	r1, [pc, #12]	; (8004c7c <ibus_init+0x14>)
 8004c70:	4803      	ldr	r0, [pc, #12]	; (8004c80 <ibus_init+0x18>)
 8004c72:	f7ff fa7e 	bl	8004172 <HAL_UART_Receive_DMA>
}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000158 	.word	0x20000158
 8004c80:	20000524 	.word	0x20000524

08004c84 <ibus_read>:

bool ibus_read(uint16_t* ibus_data)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	if(!ibus_is_valid()) 
 8004c8c:	f000 f81a 	bl	8004cc4 <ibus_is_valid>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f083 0301 	eor.w	r3, r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <ibus_read+0x1c>
		return false;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e00d      	b.n	8004cbc <ibus_read+0x38>

	if(!ibus_checksum())
 8004ca0:	f000 f828 	bl	8004cf4 <ibus_checksum>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f083 0301 	eor.w	r3, r3, #1
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <ibus_read+0x30>
		return false;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e003      	b.n	8004cbc <ibus_read+0x38>

	ibus_update(ibus_data);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f84d 	bl	8004d54 <ibus_update>
	return true;
 8004cba:	2301      	movs	r3, #1
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <ibus_is_valid>:


/* Sub Functions */
bool ibus_is_valid()
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
	// is it ibus?
	return (uart_rx_buffer[0] == IBUS_LENGTH && uart_rx_buffer[1] == IBUS_COMMAND40);
 8004cc8:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <ibus_is_valid+0x2c>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d105      	bne.n	8004cdc <ibus_is_valid+0x18>
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <ibus_is_valid+0x2c>)
 8004cd2:	785b      	ldrb	r3, [r3, #1]
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d101      	bne.n	8004cdc <ibus_is_valid+0x18>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <ibus_is_valid+0x1a>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	b2db      	uxtb	r3, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000158 	.word	0x20000158

08004cf4 <ibus_checksum>:

bool ibus_checksum()
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 	uint16_t checksum_cal = 0xffff;
 8004cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cfe:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i = 0; i < 30; i++)
 8004d00:	2300      	movs	r3, #0
 8004d02:	60bb      	str	r3, [r7, #8]
 8004d04:	e00a      	b.n	8004d1c <ibus_checksum+0x28>
	{
		checksum_cal -= uart_rx_buffer[i];
 8004d06:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <ibus_checksum+0x5c>)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	89fa      	ldrh	r2, [r7, #14]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 30; i++)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b1d      	cmp	r3, #29
 8004d20:	ddf1      	ble.n	8004d06 <ibus_checksum+0x12>
	}

	checksum_ibus = uart_rx_buffer[31] << 8 | uart_rx_buffer[30]; // checksum value from ibus
 8004d22:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <ibus_checksum+0x5c>)
 8004d24:	7fdb      	ldrb	r3, [r3, #31]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	b21a      	sxth	r2, r3
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <ibus_checksum+0x5c>)
 8004d2c:	7f9b      	ldrb	r3, [r3, #30]
 8004d2e:	b21b      	sxth	r3, r3
 8004d30:	4313      	orrs	r3, r2
 8004d32:	b21b      	sxth	r3, r3
 8004d34:	80fb      	strh	r3, [r7, #6]
	return (checksum_ibus == checksum_cal);
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	89fb      	ldrh	r3, [r7, #14]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000158 	.word	0x20000158

08004d54 <ibus_update>:

void ibus_update(uint16_t* ibus_data)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	2302      	movs	r3, #2
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	e018      	b.n	8004d98 <ibus_update+0x44>
	{
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8 | uart_rx_buffer[bf_index];
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	4a10      	ldr	r2, [pc, #64]	; (8004dac <ibus_update+0x58>)
 8004d6c:	5cd3      	ldrb	r3, [r2, r3]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	b21a      	sxth	r2, r3
 8004d72:	490e      	ldr	r1, [pc, #56]	; (8004dac <ibus_update+0x58>)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	440b      	add	r3, r1
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	b21b      	sxth	r3, r3
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	b219      	sxth	r1, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4413      	add	r3, r2
 8004d88:	b28a      	uxth	r2, r1
 8004d8a:	801a      	strh	r2, [r3, #0]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	3302      	adds	r3, #2
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	dde3      	ble.n	8004d66 <ibus_update+0x12>
	}
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	20000158 	.word	0x20000158

08004db0 <ibus_soft_failsafe>:

/**
 * @note FS-A8S don't have fail safe feature, So make software fail-safe.
 */
void ibus_soft_failsafe(uint16_t* ibus_data, uint8_t fail_safe_max)
{	
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
	fail_safe_flag++;
 8004dbc:	4b18      	ldr	r3, [pc, #96]	; (8004e20 <ibus_soft_failsafe+0x70>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	4b16      	ldr	r3, [pc, #88]	; (8004e20 <ibus_soft_failsafe+0x70>)
 8004dc6:	701a      	strb	r2, [r3, #0]

	if(fail_safe_max > fail_safe_flag)
 8004dc8:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <ibus_soft_failsafe+0x70>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	78fa      	ldrb	r2, [r7, #3]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d820      	bhi.n	8004e14 <ibus_soft_failsafe+0x64>
		return;

	// Clear ibus data
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e008      	b.n	8004dea <ibus_soft_failsafe+0x3a>
		ibus_data[i] = 0;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4413      	add	r3, r2
 8004de0:	2200      	movs	r2, #0
 8004de2:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3301      	adds	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	ddf3      	ble.n	8004dd8 <ibus_soft_failsafe+0x28>

	// Clear ibus buffer
	for(int j = 0; j < IBUS_LENGTH; j++)
 8004df0:	2300      	movs	r3, #0
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	e007      	b.n	8004e06 <ibus_soft_failsafe+0x56>
		uart_rx_buffer[j] = 0;
 8004df6:	4a0b      	ldr	r2, [pc, #44]	; (8004e24 <ibus_soft_failsafe+0x74>)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < IBUS_LENGTH; j++)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	3301      	adds	r3, #1
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b1f      	cmp	r3, #31
 8004e0a:	ddf4      	ble.n	8004df6 <ibus_soft_failsafe+0x46>

	fail_safe_flag = 0;
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <ibus_soft_failsafe+0x70>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
	return;
 8004e12:	e000      	b.n	8004e16 <ibus_soft_failsafe+0x66>
		return;
 8004e14:	bf00      	nop
}
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	20000178 	.word	0x20000178
 8004e24:	20000158 	.word	0x20000158

08004e28 <ibus_reset_failsafe>:

/**
 * @note This function is located in HAL_UART_RxCpltCallback.
 */
void ibus_reset_failsafe()
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
		fail_safe_flag = 0; // flag reset
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <ibus_reset_failsafe+0x14>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
}
 8004e32:	bf00      	nop
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20000178 	.word	0x20000178

08004e40 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8004e44:	bf00      	nop
 8004e46:	f000 f92a 	bl	800509e <icm20948_who_am_i>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f083 0301 	eor.w	r3, r3, #1
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f7      	bne.n	8004e46 <icm20948_init+0x6>

	icm20948_device_reset();
 8004e56:	f000 f947 	bl	80050e8 <icm20948_device_reset>
	icm20948_wakeup();
 8004e5a:	f000 f95c 	bl	8005116 <icm20948_wakeup>

	icm20948_clock_source(1);
 8004e5e:	2001      	movs	r0, #1
 8004e60:	f000 f9d4 	bl	800520c <icm20948_clock_source>
	icm20948_odr_align_enable();
 8004e64:	f000 f9eb 	bl	800523e <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 8004e68:	f000 f96f 	bl	800514a <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	f000 f9ef 	bl	8005250 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8004e72:	2000      	movs	r0, #0
 8004e74:	f000 fa09 	bl	800528a <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8004e78:	2000      	movs	r0, #0
 8004e7a:	f000 fa23 	bl	80052c4 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f000 fa2f 	bl	80052e2 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8004e84:	f000 fa5c 	bl	8005340 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8004e88:	f000 faf6 	bl	8005478 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8004e8c:	2003      	movs	r0, #3
 8004e8e:	f000 fc01 	bl	8005694 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8004e92:	2003      	movs	r0, #3
 8004e94:	f000 fc48 	bl	8005728 <icm20948_accel_full_scale_select>
}
 8004e98:	bf00      	nop
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <ak09916_init>:

void ak09916_init()
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8004ea0:	f000 f96a 	bl	8005178 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8004ea4:	f000 f97f 	bl	80051a6 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8004ea8:	2007      	movs	r0, #7
 8004eaa:	f000 f996 	bl	80051da <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8004eae:	bf00      	nop
 8004eb0:	f000 f908 	bl	80050c4 <ak09916_who_am_i>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f083 0301 	eor.w	r3, r3, #1
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f7      	bne.n	8004eb0 <ak09916_init+0x14>

	ak09916_soft_reset();
 8004ec0:	f000 f91e 	bl	8005100 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8004ec4:	2008      	movs	r0, #8
 8004ec6:	f000 fa2a 	bl	800531e <ak09916_operation_mode_setting>
}
 8004eca:	bf00      	nop
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8004ed6:	2206      	movs	r2, #6
 8004ed8:	2133      	movs	r1, #51	; 0x33
 8004eda:	2000      	movs	r0, #0
 8004edc:	f000 fcec 	bl	80058b8 <read_multiple_icm20948_reg>
 8004ee0:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	b21a      	sxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3301      	adds	r3, #1
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	b21b      	sxth	r3, r3
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	b21b      	sxth	r3, r3
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3302      	adds	r3, #2
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	b21a      	sxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3303      	adds	r3, #3
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	b21b      	sxth	r3, r3
 8004f16:	4313      	orrs	r3, r2
 8004f18:	b21b      	sxth	r3, r3
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	b21a      	sxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3305      	adds	r3, #5
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	b21b      	sxth	r3, r3
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	b21b      	sxth	r3, r3
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004f4c:	bf00      	nop
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8004f5c:	2206      	movs	r2, #6
 8004f5e:	212d      	movs	r1, #45	; 0x2d
 8004f60:	2000      	movs	r0, #0
 8004f62:	f000 fca9 	bl	80058b8 <read_multiple_icm20948_reg>
 8004f66:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	b21a      	sxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b21b      	sxth	r3, r3
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	b21b      	sxth	r3, r3
 8004f7c:	ee07 3a90 	vmov	s15, r3
 8004f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	b21a      	sxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3303      	adds	r3, #3
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	b21b      	sxth	r3, r3
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	b21b      	sxth	r3, r3
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	b21a      	sxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3305      	adds	r3, #5
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	b21b      	sxth	r3, r3
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	b21b      	sxth	r3, r3
 8004fc4:	ee07 3a90 	vmov	s15, r3
 8004fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <icm20948_accel_read+0x90>)
 8004fce:	edd3 7a00 	vldr	s15, [r3]
 8004fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	edc3 7a02 	vstr	s15, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20000180 	.word	0x20000180

08004fe8 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 8004ff0:	2010      	movs	r0, #16
 8004ff2:	f000 fcbd 	bl	8005970 <read_single_ak09916_reg>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <ak09916_mag_read+0x20>
 8005004:	2300      	movs	r3, #0
 8005006:	e046      	b.n	8005096 <ak09916_mag_read+0xae>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8005008:	2106      	movs	r1, #6
 800500a:	2011      	movs	r0, #17
 800500c:	f000 fcf3 	bl	80059f6 <read_multiple_ak09916_reg>
 8005010:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8005012:	2018      	movs	r0, #24
 8005014:	f000 fcac 	bl	8005970 <read_single_ak09916_reg>
 8005018:	4603      	mov	r3, r0
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <ak09916_mag_read+0x42>
 8005026:	2300      	movs	r3, #0
 8005028:	e035      	b.n	8005096 <ak09916_mag_read+0xae>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3301      	adds	r3, #1
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	b21a      	sxth	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	b21b      	sxth	r3, r3
 800503a:	4313      	orrs	r3, r2
 800503c:	b21b      	sxth	r3, r3
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	3303      	adds	r3, #3
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	b21a      	sxth	r2, r3
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	3302      	adds	r3, #2
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b21b      	sxth	r3, r3
 800505e:	4313      	orrs	r3, r2
 8005060:	b21b      	sxth	r3, r3
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	3305      	adds	r3, #5
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	b21a      	sxth	r2, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	3304      	adds	r3, #4
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b21b      	sxth	r3, r3
 8005082:	4313      	orrs	r3, r2
 8005084:	b21b      	sxth	r3, r3
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	edc3 7a02 	vstr	s15, [r3, #8]

	return true;
 8005094:	2301      	movs	r3, #1
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 80050a4:	2100      	movs	r1, #0
 80050a6:	2000      	movs	r0, #0
 80050a8:	f000 fbb6 	bl	8005818 <read_single_icm20948_reg>
 80050ac:	4603      	mov	r3, r0
 80050ae:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	2bea      	cmp	r3, #234	; 0xea
 80050b4:	d101      	bne.n	80050ba <icm20948_who_am_i+0x1c>
		return true;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <icm20948_who_am_i+0x1e>
	else
		return false;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 80050ca:	2001      	movs	r0, #1
 80050cc:	f000 fc50 	bl	8005970 <read_single_ak09916_reg>
 80050d0:	4603      	mov	r3, r0
 80050d2:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	2b09      	cmp	r3, #9
 80050d8:	d101      	bne.n	80050de <ak09916_who_am_i+0x1a>
		return true;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <ak09916_who_am_i+0x1c>
	else
		return false;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <icm20948_device_reset>:

void icm20948_device_reset()
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 80050ec:	22c1      	movs	r2, #193	; 0xc1
 80050ee:	2106      	movs	r1, #6
 80050f0:	2000      	movs	r0, #0
 80050f2:	f000 fbbd 	bl	8005870 <write_single_icm20948_reg>
	HAL_Delay(100);
 80050f6:	2064      	movs	r0, #100	; 0x64
 80050f8:	f7fc f98e 	bl	8001418 <HAL_Delay>
}
 80050fc:	bf00      	nop
 80050fe:	bd80      	pop	{r7, pc}

08005100 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8005104:	2101      	movs	r1, #1
 8005106:	2032      	movs	r0, #50	; 0x32
 8005108:	f000 fc53 	bl	80059b2 <write_single_ak09916_reg>
	HAL_Delay(100);
 800510c:	2064      	movs	r0, #100	; 0x64
 800510e:	f7fc f983 	bl	8001418 <HAL_Delay>
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}

08005116 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800511c:	2106      	movs	r1, #6
 800511e:	2000      	movs	r0, #0
 8005120:	f000 fb7a 	bl	8005818 <read_single_icm20948_reg>
 8005124:	4603      	mov	r3, r0
 8005126:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512e:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	461a      	mov	r2, r3
 8005134:	2106      	movs	r1, #6
 8005136:	2000      	movs	r0, #0
 8005138:	f000 fb9a 	bl	8005870 <write_single_icm20948_reg>
	HAL_Delay(100);
 800513c:	2064      	movs	r0, #100	; 0x64
 800513e:	f7fc f96b 	bl	8001418 <HAL_Delay>
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8005150:	2103      	movs	r1, #3
 8005152:	2000      	movs	r0, #0
 8005154:	f000 fb60 	bl	8005818 <read_single_icm20948_reg>
 8005158:	4603      	mov	r3, r0
 800515a:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	f043 0310 	orr.w	r3, r3, #16
 8005162:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	461a      	mov	r2, r3
 8005168:	2103      	movs	r1, #3
 800516a:	2000      	movs	r0, #0
 800516c:	f000 fb80 	bl	8005870 <write_single_icm20948_reg>
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 800517e:	2103      	movs	r1, #3
 8005180:	2000      	movs	r0, #0
 8005182:	f000 fb49 	bl	8005818 <read_single_icm20948_reg>
 8005186:	4603      	mov	r3, r0
 8005188:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	461a      	mov	r2, r3
 8005196:	2103      	movs	r1, #3
 8005198:	2000      	movs	r0, #0
 800519a:	f000 fb69 	bl	8005870 <write_single_icm20948_reg>
}
 800519e:	bf00      	nop
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80051ac:	2103      	movs	r1, #3
 80051ae:	2000      	movs	r0, #0
 80051b0:	f000 fb32 	bl	8005818 <read_single_icm20948_reg>
 80051b4:	4603      	mov	r3, r0
 80051b6:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	f043 0320 	orr.w	r3, r3, #32
 80051be:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	461a      	mov	r2, r3
 80051c4:	2103      	movs	r1, #3
 80051c6:	2000      	movs	r0, #0
 80051c8:	f000 fb52 	bl	8005870 <write_single_icm20948_reg>
	HAL_Delay(100);
 80051cc:	2064      	movs	r0, #100	; 0x64
 80051ce:	f7fc f923 	bl	8001418 <HAL_Delay>
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	4603      	mov	r3, r0
 80051e2:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 80051e4:	2101      	movs	r1, #1
 80051e6:	2030      	movs	r0, #48	; 0x30
 80051e8:	f000 fb16 	bl	8005818 <read_single_icm20948_reg>
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 80051f0:	7bfa      	ldrb	r2, [r7, #15]
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	461a      	mov	r2, r3
 80051fc:	2101      	movs	r1, #1
 80051fe:	2030      	movs	r0, #48	; 0x30
 8005200:	f000 fb36 	bl	8005870 <write_single_icm20948_reg>
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8005216:	2106      	movs	r1, #6
 8005218:	2000      	movs	r0, #0
 800521a:	f000 fafd 	bl	8005818 <read_single_icm20948_reg>
 800521e:	4603      	mov	r3, r0
 8005220:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8005222:	7bfa      	ldrb	r2, [r7, #15]
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	4313      	orrs	r3, r2
 8005228:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	461a      	mov	r2, r3
 800522e:	2106      	movs	r1, #6
 8005230:	2000      	movs	r0, #0
 8005232:	f000 fb1d 	bl	8005870 <write_single_icm20948_reg>
}
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 800523e:	b580      	push	{r7, lr}
 8005240:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8005242:	2201      	movs	r2, #1
 8005244:	2109      	movs	r1, #9
 8005246:	2020      	movs	r0, #32
 8005248:	f000 fb12 	bl	8005870 <write_single_icm20948_reg>
}
 800524c:	bf00      	nop
 800524e:	bd80      	pop	{r7, pc}

08005250 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800525a:	2101      	movs	r1, #1
 800525c:	2020      	movs	r0, #32
 800525e:	f000 fadb 	bl	8005818 <read_single_icm20948_reg>
 8005262:	4603      	mov	r3, r0
 8005264:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8005266:	79fb      	ldrb	r3, [r7, #7]
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	b25a      	sxtb	r2, r3
 800526c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005270:	4313      	orrs	r3, r2
 8005272:	b25b      	sxtb	r3, r3
 8005274:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	461a      	mov	r2, r3
 800527a:	2101      	movs	r1, #1
 800527c:	2020      	movs	r0, #32
 800527e:	f000 faf7 	bl	8005870 <write_single_icm20948_reg>
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	4603      	mov	r3, r0
 8005292:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8005294:	2114      	movs	r1, #20
 8005296:	2020      	movs	r0, #32
 8005298:	f000 fabe 	bl	8005818 <read_single_icm20948_reg>
 800529c:	4603      	mov	r3, r0
 800529e:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	b25a      	sxtb	r2, r3
 80052a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	b25b      	sxtb	r3, r3
 80052ae:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	461a      	mov	r2, r3
 80052b4:	2101      	movs	r1, #1
 80052b6:	2020      	movs	r0, #32
 80052b8:	f000 fada 	bl	8005870 <write_single_icm20948_reg>
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	461a      	mov	r2, r3
 80052d2:	2100      	movs	r1, #0
 80052d4:	2020      	movs	r0, #32
 80052d6:	f000 facb 	bl	8005870 <write_single_icm20948_reg>
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	4603      	mov	r3, r0
 80052ea:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	461a      	mov	r2, r3
 8005302:	2110      	movs	r1, #16
 8005304:	2020      	movs	r0, #32
 8005306:	f000 fab3 	bl	8005870 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 800530a:	7bbb      	ldrb	r3, [r7, #14]
 800530c:	461a      	mov	r2, r3
 800530e:	2111      	movs	r1, #17
 8005310:	2020      	movs	r0, #32
 8005312:	f000 faad 	bl	8005870 <write_single_icm20948_reg>
}
 8005316:	bf00      	nop
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	4603      	mov	r3, r0
 8005326:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	4619      	mov	r1, r3
 800532c:	2031      	movs	r0, #49	; 0x31
 800532e:	f000 fb40 	bl	80059b2 <write_single_ak09916_reg>
	HAL_Delay(100);
 8005332:	2064      	movs	r0, #100	; 0x64
 8005334:	f7fc f870 	bl	8001418 <HAL_Delay>
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8005346:	f107 030c 	add.w	r3, r7, #12
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	605a      	str	r2, [r3, #4]
 8005350:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8005352:	2300      	movs	r3, #0
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	2300      	movs	r3, #0
 8005358:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 800535a:	2300      	movs	r3, #0
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
 800535e:	e031      	b.n	80053c4 <icm20948_gyro_calibration+0x84>
	{
		icm20948_gyro_read(&temp);
 8005360:	f107 0318 	add.w	r3, r7, #24
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff fdb2 	bl	8004ece <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005374:	edd7 7a06 	vldr	s15, [r7, #24]
 8005378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800537c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005380:	ee17 3a90 	vmov	r3, s15
 8005384:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005390:	edd7 7a07 	vldr	s15, [r7, #28]
 8005394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800539c:	ee17 3a90 	vmov	r3, s15
 80053a0:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	ee07 3a90 	vmov	s15, r3
 80053a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80053b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053b8:	ee17 3a90 	vmov	r3, s15
 80053bc:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	3301      	adds	r3, #1
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	2b63      	cmp	r3, #99	; 0x63
 80053c8:	ddca      	ble.n	8005360 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4a29      	ldr	r2, [pc, #164]	; (8005474 <icm20948_gyro_calibration+0x134>)
 80053ce:	fb82 1203 	smull	r1, r2, r2, r3
 80053d2:	1152      	asrs	r2, r2, #5
 80053d4:	17db      	asrs	r3, r3, #31
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4a25      	ldr	r2, [pc, #148]	; (8005474 <icm20948_gyro_calibration+0x134>)
 80053de:	fb82 1203 	smull	r1, r2, r2, r3
 80053e2:	1152      	asrs	r2, r2, #5
 80053e4:	17db      	asrs	r3, r3, #31
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	4a21      	ldr	r2, [pc, #132]	; (8005474 <icm20948_gyro_calibration+0x134>)
 80053ee:	fb82 1203 	smull	r1, r2, r2, r3
 80053f2:	1152      	asrs	r2, r2, #5
 80053f4:	17db      	asrs	r3, r3, #31
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	425b      	negs	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da00      	bge.n	8005404 <icm20948_gyro_calibration+0xc4>
 8005402:	3303      	adds	r3, #3
 8005404:	109b      	asrs	r3, r3, #2
 8005406:	121b      	asrs	r3, r3, #8
 8005408:	b2db      	uxtb	r3, r3
 800540a:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	425b      	negs	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	da00      	bge.n	8005416 <icm20948_gyro_calibration+0xd6>
 8005414:	3303      	adds	r3, #3
 8005416:	109b      	asrs	r3, r3, #2
 8005418:	b2db      	uxtb	r3, r3
 800541a:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	425b      	negs	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	da00      	bge.n	8005426 <icm20948_gyro_calibration+0xe6>
 8005424:	3303      	adds	r3, #3
 8005426:	109b      	asrs	r3, r3, #2
 8005428:	121b      	asrs	r3, r3, #8
 800542a:	b2db      	uxtb	r3, r3
 800542c:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	425b      	negs	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	da00      	bge.n	8005438 <icm20948_gyro_calibration+0xf8>
 8005436:	3303      	adds	r3, #3
 8005438:	109b      	asrs	r3, r3, #2
 800543a:	b2db      	uxtb	r3, r3
 800543c:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	425b      	negs	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	da00      	bge.n	8005448 <icm20948_gyro_calibration+0x108>
 8005446:	3303      	adds	r3, #3
 8005448:	109b      	asrs	r3, r3, #2
 800544a:	121b      	asrs	r3, r3, #8
 800544c:	b2db      	uxtb	r3, r3
 800544e:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	425b      	negs	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	da00      	bge.n	800545a <icm20948_gyro_calibration+0x11a>
 8005458:	3303      	adds	r3, #3
 800545a:	109b      	asrs	r3, r3, #2
 800545c:	b2db      	uxtb	r3, r3
 800545e:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8005460:	1d3a      	adds	r2, r7, #4
 8005462:	2306      	movs	r3, #6
 8005464:	2103      	movs	r1, #3
 8005466:	2020      	movs	r0, #32
 8005468:	f000 fa56 	bl	8005918 <write_multiple_icm20948_reg>
}
 800546c:	bf00      	nop
 800546e:	3728      	adds	r7, #40	; 0x28
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	51eb851f 	.word	0x51eb851f

08005478 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b090      	sub	sp, #64	; 0x40
 800547c:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 800547e:	f107 0318 	add.w	r3, r7, #24
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	605a      	str	r2, [r3, #4]
 8005488:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 800548a:	f107 030c 	add.w	r3, r7, #12
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	605a      	str	r2, [r3, #4]
 8005494:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 8005496:	2300      	movs	r3, #0
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	2300      	movs	r3, #0
 800549c:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 800549e:	2300      	movs	r3, #0
 80054a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a2:	e031      	b.n	8005508 <icm20948_accel_calibration+0x90>
	{
		icm20948_accel_read(&temp);
 80054a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fd53 	bl	8004f54 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80054bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054c4:	ee17 3a90 	vmov	r3, s15
 80054c8:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	ee07 3a90 	vmov	s15, r3
 80054d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80054d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054e0:	ee17 3a90 	vmov	r3, s15
 80054e4:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	ee07 3a90 	vmov	s15, r3
 80054ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80054f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054fc:	ee17 3a90 	vmov	r3, s15
 8005500:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 8005502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005504:	3301      	adds	r3, #1
 8005506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550a:	2b63      	cmp	r3, #99	; 0x63
 800550c:	ddca      	ble.n	80054a4 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	4a5e      	ldr	r2, [pc, #376]	; (800568c <icm20948_accel_calibration+0x214>)
 8005512:	fb82 1203 	smull	r1, r2, r2, r3
 8005516:	1152      	asrs	r2, r2, #5
 8005518:	17db      	asrs	r3, r3, #31
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4a5a      	ldr	r2, [pc, #360]	; (800568c <icm20948_accel_calibration+0x214>)
 8005522:	fb82 1203 	smull	r1, r2, r2, r3
 8005526:	1152      	asrs	r2, r2, #5
 8005528:	17db      	asrs	r3, r3, #31
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	4a56      	ldr	r2, [pc, #344]	; (800568c <icm20948_accel_calibration+0x214>)
 8005532:	fb82 1203 	smull	r1, r2, r2, r3
 8005536:	1152      	asrs	r2, r2, #5
 8005538:	17db      	asrs	r3, r3, #31
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 800553e:	4a54      	ldr	r2, [pc, #336]	; (8005690 <icm20948_accel_calibration+0x218>)
 8005540:	463b      	mov	r3, r7
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	4611      	mov	r1, r2
 8005546:	8019      	strh	r1, [r3, #0]
 8005548:	3302      	adds	r3, #2
 800554a:	0c12      	lsrs	r2, r2, #16
 800554c:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 800554e:	2202      	movs	r2, #2
 8005550:	2114      	movs	r1, #20
 8005552:	2010      	movs	r0, #16
 8005554:	f000 f9b0 	bl	80058b8 <read_multiple_icm20948_reg>
 8005558:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005562:	3201      	adds	r2, #1
 8005564:	7812      	ldrb	r2, [r2, #0]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	3301      	adds	r3, #1
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8005578:	2202      	movs	r2, #2
 800557a:	2117      	movs	r1, #23
 800557c:	2010      	movs	r0, #16
 800557e:	f000 f99b 	bl	80058b8 <read_multiple_icm20948_reg>
 8005582:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8005584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800558c:	3201      	adds	r2, #1
 800558e:	7812      	ldrb	r2, [r2, #0]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	3301      	adds	r3, #1
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 80055a2:	2202      	movs	r2, #2
 80055a4:	211a      	movs	r1, #26
 80055a6:	2010      	movs	r0, #16
 80055a8:	f000 f986 	bl	80058b8 <read_multiple_icm20948_reg>
 80055ac:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b6:	3201      	adds	r2, #1
 80055b8:	7812      	ldrb	r2, [r2, #0]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	3301      	adds	r3, #1
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	da00      	bge.n	80055d6 <icm20948_accel_calibration+0x15e>
 80055d4:	3307      	adds	r3, #7
 80055d6:	10db      	asrs	r3, r3, #3
 80055d8:	425b      	negs	r3, r3
 80055da:	4413      	add	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	da00      	bge.n	80055e8 <icm20948_accel_calibration+0x170>
 80055e6:	3307      	adds	r3, #7
 80055e8:	10db      	asrs	r3, r3, #3
 80055ea:	425b      	negs	r3, r3
 80055ec:	4413      	add	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	da00      	bge.n	80055fa <icm20948_accel_calibration+0x182>
 80055f8:	3307      	adds	r3, #7
 80055fa:	10db      	asrs	r3, r3, #3
 80055fc:	425b      	negs	r3, r3
 80055fe:	4413      	add	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	121b      	asrs	r3, r3, #8
 8005606:	b2db      	uxtb	r3, r3
 8005608:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8005616:	797a      	ldrb	r2, [r7, #5]
 8005618:	783b      	ldrb	r3, [r7, #0]
 800561a:	4313      	orrs	r3, r2
 800561c:	b2db      	uxtb	r3, r3
 800561e:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	121b      	asrs	r3, r3, #8
 8005624:	b2db      	uxtb	r3, r3
 8005626:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	b2db      	uxtb	r3, r3
 8005632:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8005634:	79fa      	ldrb	r2, [r7, #7]
 8005636:	787b      	ldrb	r3, [r7, #1]
 8005638:	4313      	orrs	r3, r2
 800563a:	b2db      	uxtb	r3, r3
 800563c:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	121b      	asrs	r3, r3, #8
 8005642:	b2db      	uxtb	r3, r3
 8005644:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	b2db      	uxtb	r3, r3
 8005650:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8005652:	7a7a      	ldrb	r2, [r7, #9]
 8005654:	78bb      	ldrb	r3, [r7, #2]
 8005656:	4313      	orrs	r3, r2
 8005658:	b2db      	uxtb	r3, r3
 800565a:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800565c:	1d3a      	adds	r2, r7, #4
 800565e:	2302      	movs	r3, #2
 8005660:	2114      	movs	r1, #20
 8005662:	2010      	movs	r0, #16
 8005664:	f000 f958 	bl	8005918 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8005668:	1d3b      	adds	r3, r7, #4
 800566a:	1c9a      	adds	r2, r3, #2
 800566c:	2302      	movs	r3, #2
 800566e:	2117      	movs	r1, #23
 8005670:	2010      	movs	r0, #16
 8005672:	f000 f951 	bl	8005918 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8005676:	1d3b      	adds	r3, r7, #4
 8005678:	1d1a      	adds	r2, r3, #4
 800567a:	2302      	movs	r3, #2
 800567c:	211a      	movs	r1, #26
 800567e:	2010      	movs	r0, #16
 8005680:	f000 f94a 	bl	8005918 <write_multiple_icm20948_reg>
}
 8005684:	bf00      	nop
 8005686:	3740      	adds	r7, #64	; 0x40
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	51eb851f 	.word	0x51eb851f
 8005690:	080060c4 	.word	0x080060c4

08005694 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800569e:	2101      	movs	r1, #1
 80056a0:	2020      	movs	r0, #32
 80056a2:	f000 f8b9 	bl	8005818 <read_single_icm20948_reg>
 80056a6:	4603      	mov	r3, r0
 80056a8:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d827      	bhi.n	8005700 <icm20948_gyro_full_scale_select+0x6c>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <icm20948_gyro_full_scale_select+0x24>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056c9 	.word	0x080056c9
 80056bc:	080056d1 	.word	0x080056d1
 80056c0:	080056e1 	.word	0x080056e1
 80056c4:	080056f1 	.word	0x080056f1
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 80056c8:	4b12      	ldr	r3, [pc, #72]	; (8005714 <icm20948_gyro_full_scale_select+0x80>)
 80056ca:	4a13      	ldr	r2, [pc, #76]	; (8005718 <icm20948_gyro_full_scale_select+0x84>)
 80056cc:	601a      	str	r2, [r3, #0]
			break;
 80056ce:	e017      	b.n	8005700 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	f043 0302 	orr.w	r3, r3, #2
 80056d6:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 80056d8:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <icm20948_gyro_full_scale_select+0x80>)
 80056da:	4a10      	ldr	r2, [pc, #64]	; (800571c <icm20948_gyro_full_scale_select+0x88>)
 80056dc:	601a      	str	r2, [r3, #0]
			break;
 80056de:	e00f      	b.n	8005700 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	f043 0304 	orr.w	r3, r3, #4
 80056e6:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 80056e8:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <icm20948_gyro_full_scale_select+0x80>)
 80056ea:	4a0d      	ldr	r2, [pc, #52]	; (8005720 <icm20948_gyro_full_scale_select+0x8c>)
 80056ec:	601a      	str	r2, [r3, #0]
			break;
 80056ee:	e007      	b.n	8005700 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	f043 0306 	orr.w	r3, r3, #6
 80056f6:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <icm20948_gyro_full_scale_select+0x80>)
 80056fa:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <icm20948_gyro_full_scale_select+0x90>)
 80056fc:	601a      	str	r2, [r3, #0]
			break;
 80056fe:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	461a      	mov	r2, r3
 8005704:	2101      	movs	r1, #1
 8005706:	2020      	movs	r0, #32
 8005708:	f000 f8b2 	bl	8005870 <write_single_icm20948_reg>
}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	2000017c 	.word	0x2000017c
 8005718:	43030000 	.word	0x43030000
 800571c:	42830000 	.word	0x42830000
 8005720:	42033333 	.word	0x42033333
 8005724:	41833333 	.word	0x41833333

08005728 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8005732:	2114      	movs	r1, #20
 8005734:	2020      	movs	r0, #32
 8005736:	f000 f86f 	bl	8005818 <read_single_icm20948_reg>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d82b      	bhi.n	800579c <icm20948_accel_full_scale_select+0x74>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <icm20948_accel_full_scale_select+0x24>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	0800575d 	.word	0x0800575d
 8005750:	08005767 	.word	0x08005767
 8005754:	08005779 	.word	0x08005779
 8005758:	0800578b 	.word	0x0800578b
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 800575c:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <icm20948_accel_full_scale_select+0x88>)
 800575e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005762:	601a      	str	r2, [r3, #0]
			break;
 8005764:	e01a      	b.n	800579c <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	f043 0302 	orr.w	r3, r3, #2
 800576c:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 800576e:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <icm20948_accel_full_scale_select+0x88>)
 8005770:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8005774:	601a      	str	r2, [r3, #0]
			break;
 8005776:	e011      	b.n	800579c <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	f043 0304 	orr.w	r3, r3, #4
 800577e:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <icm20948_accel_full_scale_select+0x88>)
 8005782:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8005786:	601a      	str	r2, [r3, #0]
			break;
 8005788:	e008      	b.n	800579c <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	f043 0306 	orr.w	r3, r3, #6
 8005790:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8005792:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <icm20948_accel_full_scale_select+0x88>)
 8005794:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8005798:	601a      	str	r2, [r3, #0]
			break;
 800579a:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	461a      	mov	r2, r3
 80057a0:	2114      	movs	r1, #20
 80057a2:	2020      	movs	r0, #32
 80057a4:	f000 f864 	bl	8005870 <write_single_icm20948_reg>
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000180 	.word	0x20000180

080057b4 <cs_high>:


/* Static Functions */
static void cs_high()
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 80057b8:	2201      	movs	r2, #1
 80057ba:	2110      	movs	r1, #16
 80057bc:	4802      	ldr	r0, [pc, #8]	; (80057c8 <cs_high+0x14>)
 80057be:	f7fc fc55 	bl	800206c <HAL_GPIO_WritePin>
}
 80057c2:	bf00      	nop
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40020000 	.word	0x40020000

080057cc <cs_low>:

static void cs_low()
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80057d0:	2200      	movs	r2, #0
 80057d2:	2110      	movs	r1, #16
 80057d4:	4802      	ldr	r0, [pc, #8]	; (80057e0 <cs_low+0x14>)
 80057d6:	f7fc fc49 	bl	800206c <HAL_GPIO_WritePin>
}
 80057da:	bf00      	nop
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40020000 	.word	0x40020000

080057e4 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 80057ee:	237f      	movs	r3, #127	; 0x7f
 80057f0:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	737b      	strb	r3, [r7, #13]

	cs_low();
 80057f6:	f7ff ffe9 	bl	80057cc <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80057fa:	f107 010c 	add.w	r1, r7, #12
 80057fe:	230a      	movs	r3, #10
 8005800:	2202      	movs	r2, #2
 8005802:	4804      	ldr	r0, [pc, #16]	; (8005814 <select_user_bank+0x30>)
 8005804:	f7fd f94f 	bl	8002aa6 <HAL_SPI_Transmit>
	cs_high();
 8005808:	f7ff ffd4 	bl	80057b4 <cs_high>
}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000214 	.word	0x20000214

08005818 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	460a      	mov	r2, r1
 8005822:	71fb      	strb	r3, [r7, #7]
 8005824:	4613      	mov	r3, r2
 8005826:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8005828:	79bb      	ldrb	r3, [r7, #6]
 800582a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800582e:	b2db      	uxtb	r3, r3
 8005830:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff ffd5 	bl	80057e4 <select_user_bank>

	cs_low();
 800583a:	f7ff ffc7 	bl	80057cc <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800583e:	f107 010f 	add.w	r1, r7, #15
 8005842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005846:	2201      	movs	r2, #1
 8005848:	4808      	ldr	r0, [pc, #32]	; (800586c <read_single_icm20948_reg+0x54>)
 800584a:	f7fd f92c 	bl	8002aa6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 800584e:	f107 010e 	add.w	r1, r7, #14
 8005852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005856:	2201      	movs	r2, #1
 8005858:	4804      	ldr	r0, [pc, #16]	; (800586c <read_single_icm20948_reg+0x54>)
 800585a:	f7fd fa60 	bl	8002d1e <HAL_SPI_Receive>
	cs_high();
 800585e:	f7ff ffa9 	bl	80057b4 <cs_high>

	return reg_val;
 8005862:	7bbb      	ldrb	r3, [r7, #14]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000214 	.word	0x20000214

08005870 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	71fb      	strb	r3, [r7, #7]
 800587a:	460b      	mov	r3, r1
 800587c:	71bb      	strb	r3, [r7, #6]
 800587e:	4613      	mov	r3, r2
 8005880:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8005882:	79bb      	ldrb	r3, [r7, #6]
 8005884:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8005886:	797b      	ldrb	r3, [r7, #5]
 8005888:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff ffa9 	bl	80057e4 <select_user_bank>

	cs_low();
 8005892:	f7ff ff9b 	bl	80057cc <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8005896:	f107 010c 	add.w	r1, r7, #12
 800589a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800589e:	2202      	movs	r2, #2
 80058a0:	4804      	ldr	r0, [pc, #16]	; (80058b4 <write_single_icm20948_reg+0x44>)
 80058a2:	f7fd f900 	bl	8002aa6 <HAL_SPI_Transmit>
	cs_high();
 80058a6:	f7ff ff85 	bl	80057b4 <cs_high>
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000214 	.word	0x20000214

080058b8 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	71fb      	strb	r3, [r7, #7]
 80058c2:	460b      	mov	r3, r1
 80058c4:	71bb      	strb	r3, [r7, #6]
 80058c6:	4613      	mov	r3, r2
 80058c8:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 80058ca:	79bb      	ldrb	r3, [r7, #6]
 80058cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff ff84 	bl	80057e4 <select_user_bank>

	cs_low();
 80058dc:	f7ff ff76 	bl	80057cc <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80058e0:	f107 010f 	add.w	r1, r7, #15
 80058e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058e8:	2201      	movs	r2, #1
 80058ea:	4809      	ldr	r0, [pc, #36]	; (8005910 <read_multiple_icm20948_reg+0x58>)
 80058ec:	f7fd f8db 	bl	8002aa6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80058f0:	797b      	ldrb	r3, [r7, #5]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058f8:	4906      	ldr	r1, [pc, #24]	; (8005914 <read_multiple_icm20948_reg+0x5c>)
 80058fa:	4805      	ldr	r0, [pc, #20]	; (8005910 <read_multiple_icm20948_reg+0x58>)
 80058fc:	f7fd fa0f 	bl	8002d1e <HAL_SPI_Receive>
	cs_high();
 8005900:	f7ff ff58 	bl	80057b4 <cs_high>

	return reg_val;
 8005904:	4b03      	ldr	r3, [pc, #12]	; (8005914 <read_multiple_icm20948_reg+0x5c>)
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000214 	.word	0x20000214
 8005914:	20000184 	.word	0x20000184

08005918 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	603a      	str	r2, [r7, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	4603      	mov	r3, r0
 8005924:	71fb      	strb	r3, [r7, #7]
 8005926:	460b      	mov	r3, r1
 8005928:	71bb      	strb	r3, [r7, #6]
 800592a:	4613      	mov	r3, r2
 800592c:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 800592e:	79bb      	ldrb	r3, [r7, #6]
 8005930:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff ff55 	bl	80057e4 <select_user_bank>

	cs_low();
 800593a:	f7ff ff47 	bl	80057cc <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 800593e:	f107 010f 	add.w	r1, r7, #15
 8005942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005946:	2201      	movs	r2, #1
 8005948:	4808      	ldr	r0, [pc, #32]	; (800596c <write_multiple_icm20948_reg+0x54>)
 800594a:	f7fd f8ac 	bl	8002aa6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 800594e:	797b      	ldrb	r3, [r7, #5]
 8005950:	b29a      	uxth	r2, r3
 8005952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	4804      	ldr	r0, [pc, #16]	; (800596c <write_multiple_icm20948_reg+0x54>)
 800595a:	f7fd f8a4 	bl	8002aa6 <HAL_SPI_Transmit>
	cs_high();
 800595e:	f7ff ff29 	bl	80057b4 <cs_high>
}
 8005962:	bf00      	nop
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000214 	.word	0x20000214

08005970 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	4603      	mov	r3, r0
 8005978:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 800597a:	228c      	movs	r2, #140	; 0x8c
 800597c:	2103      	movs	r1, #3
 800597e:	2030      	movs	r0, #48	; 0x30
 8005980:	f7ff ff76 	bl	8005870 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	461a      	mov	r2, r3
 8005988:	2104      	movs	r1, #4
 800598a:	2030      	movs	r0, #48	; 0x30
 800598c:	f7ff ff70 	bl	8005870 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8005990:	2281      	movs	r2, #129	; 0x81
 8005992:	2105      	movs	r1, #5
 8005994:	2030      	movs	r0, #48	; 0x30
 8005996:	f7ff ff6b 	bl	8005870 <write_single_icm20948_reg>

	HAL_Delay(1);
 800599a:	2001      	movs	r0, #1
 800599c:	f7fb fd3c 	bl	8001418 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 80059a0:	213b      	movs	r1, #59	; 0x3b
 80059a2:	2000      	movs	r0, #0
 80059a4:	f7ff ff38 	bl	8005818 <read_single_icm20948_reg>
 80059a8:	4603      	mov	r3, r0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	4603      	mov	r3, r0
 80059ba:	460a      	mov	r2, r1
 80059bc:	71fb      	strb	r3, [r7, #7]
 80059be:	4613      	mov	r3, r2
 80059c0:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 80059c2:	220c      	movs	r2, #12
 80059c4:	2103      	movs	r1, #3
 80059c6:	2030      	movs	r0, #48	; 0x30
 80059c8:	f7ff ff52 	bl	8005870 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	461a      	mov	r2, r3
 80059d0:	2104      	movs	r1, #4
 80059d2:	2030      	movs	r0, #48	; 0x30
 80059d4:	f7ff ff4c 	bl	8005870 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 80059d8:	79bb      	ldrb	r3, [r7, #6]
 80059da:	461a      	mov	r2, r3
 80059dc:	2106      	movs	r1, #6
 80059de:	2030      	movs	r0, #48	; 0x30
 80059e0:	f7ff ff46 	bl	8005870 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80059e4:	2281      	movs	r2, #129	; 0x81
 80059e6:	2105      	movs	r1, #5
 80059e8:	2030      	movs	r0, #48	; 0x30
 80059ea:	f7ff ff41 	bl	8005870 <write_single_icm20948_reg>
}
 80059ee:	bf00      	nop
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	4603      	mov	r3, r0
 80059fe:	460a      	mov	r2, r1
 8005a00:	71fb      	strb	r3, [r7, #7]
 8005a02:	4613      	mov	r3, r2
 8005a04:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8005a06:	228c      	movs	r2, #140	; 0x8c
 8005a08:	2103      	movs	r1, #3
 8005a0a:	2030      	movs	r0, #48	; 0x30
 8005a0c:	f7ff ff30 	bl	8005870 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	461a      	mov	r2, r3
 8005a14:	2104      	movs	r1, #4
 8005a16:	2030      	movs	r0, #48	; 0x30
 8005a18:	f7ff ff2a 	bl	8005870 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8005a1c:	79bb      	ldrb	r3, [r7, #6]
 8005a1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	2105      	movs	r1, #5
 8005a28:	2030      	movs	r0, #48	; 0x30
 8005a2a:	f7ff ff21 	bl	8005870 <write_single_icm20948_reg>

	HAL_Delay(1);
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f7fb fcf2 	bl	8001418 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8005a34:	79bb      	ldrb	r3, [r7, #6]
 8005a36:	461a      	mov	r2, r3
 8005a38:	213b      	movs	r1, #59	; 0x3b
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	f7ff ff3c 	bl	80058b8 <read_multiple_icm20948_reg>
 8005a40:	4603      	mov	r3, r0
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8005a50:	2201      	movs	r2, #1
 8005a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a56:	4802      	ldr	r0, [pc, #8]	; (8005a60 <cs_high+0x14>)
 8005a58:	f7fc fb08 	bl	800206c <HAL_GPIO_WritePin>
}
 8005a5c:	bf00      	nop
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40020400 	.word	0x40020400

08005a64 <cs_low>:

static void cs_low()
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a6e:	4802      	ldr	r0, [pc, #8]	; (8005a78 <cs_low+0x14>)
 8005a70:	f7fc fafc 	bl	800206c <HAL_GPIO_WritePin>
}
 8005a74:	bf00      	nop
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40020400 	.word	0x40020400

08005a7c <ce_high>:

static void ce_high()
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8005a80:	2201      	movs	r2, #1
 8005a82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a86:	4802      	ldr	r0, [pc, #8]	; (8005a90 <ce_high+0x14>)
 8005a88:	f7fc faf0 	bl	800206c <HAL_GPIO_WritePin>
}
 8005a8c:	bf00      	nop
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40020400 	.word	0x40020400

08005a94 <ce_low>:

static void ce_low()
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a9e:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <ce_low+0x14>)
 8005aa0:	f7fc fae4 	bl	800206c <HAL_GPIO_WritePin>
}
 8005aa4:	bf00      	nop
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40020400 	.word	0x40020400

08005aac <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8005aba:	f7ff ffd3 	bl	8005a64 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005abe:	f107 020e 	add.w	r2, r7, #14
 8005ac2:	f107 010f 	add.w	r1, r7, #15
 8005ac6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	2301      	movs	r3, #1
 8005ace:	4809      	ldr	r0, [pc, #36]	; (8005af4 <read_register+0x48>)
 8005ad0:	f7fd fa36 	bl	8002f40 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8005ad4:	f107 010d 	add.w	r1, r7, #13
 8005ad8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005adc:	2201      	movs	r2, #1
 8005ade:	4805      	ldr	r0, [pc, #20]	; (8005af4 <read_register+0x48>)
 8005ae0:	f7fd f91d 	bl	8002d1e <HAL_SPI_Receive>
    cs_high();
 8005ae4:	f7ff ffb2 	bl	8005a4c <cs_high>

    return read_val;
 8005ae8:	7b7b      	ldrb	r3, [r7, #13]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200001bc 	.word	0x200001bc

08005af8 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af02      	add	r7, sp, #8
 8005afe:	4603      	mov	r3, r0
 8005b00:	460a      	mov	r2, r1
 8005b02:	71fb      	strb	r3, [r7, #7]
 8005b04:	4613      	mov	r3, r2
 8005b06:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	f043 0320 	orr.w	r3, r3, #32
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8005b12:	79bb      	ldrb	r3, [r7, #6]
 8005b14:	737b      	strb	r3, [r7, #13]

    cs_low();
 8005b16:	f7ff ffa5 	bl	8005a64 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005b1a:	f107 020e 	add.w	r2, r7, #14
 8005b1e:	f107 010f 	add.w	r1, r7, #15
 8005b22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	2301      	movs	r3, #1
 8005b2a:	4809      	ldr	r0, [pc, #36]	; (8005b50 <write_register+0x58>)
 8005b2c:	f7fd fa08 	bl	8002f40 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8005b30:	f107 010d 	add.w	r1, r7, #13
 8005b34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005b38:	2201      	movs	r2, #1
 8005b3a:	4805      	ldr	r0, [pc, #20]	; (8005b50 <write_register+0x58>)
 8005b3c:	f7fc ffb3 	bl	8002aa6 <HAL_SPI_Transmit>
    cs_high();
 8005b40:	f7ff ff84 	bl	8005a4c <cs_high>

    return write_val;
 8005b44:	7b7b      	ldrb	r3, [r7, #13]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200001bc 	.word	0x200001bc

08005b54 <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	460a      	mov	r2, r1
 8005b5e:	80fb      	strh	r3, [r7, #6]
 8005b60:	4613      	mov	r3, r2
 8005b62:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8005b64:	f000 f850 	bl	8005c08 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8005b68:	f000 f8a2 	bl	8005cb0 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8005b6c:	f000 f94c 	bl	8005e08 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f9d4 	bl	8005f20 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8005b78:	797b      	ldrb	r3, [r7, #5]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fa00 	bl	8005f80 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8005b80:	2003      	movs	r0, #3
 8005b82:	f000 f9e0 	bl	8005f46 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8005b86:	2001      	movs	r0, #1
 8005b88:	f000 f953 	bl	8005e32 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8005b8c:	2005      	movs	r0, #5
 8005b8e:	f000 f973 	bl	8005e78 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8005b92:	2003      	movs	r0, #3
 8005b94:	f000 f980 	bl	8005e98 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8005b98:	20fa      	movs	r0, #250	; 0xfa
 8005b9a:	f000 f999 	bl	8005ed0 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8005b9e:	f7ff ff6d 	bl	8005a7c <ce_high>
}
 8005ba2:	bf00      	nop
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f892 	bl	8005cdc <nrf24l01p_write_tx_fifo>
}
 8005bb8:	bf00      	nop
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 8005bc6:	f000 f8dd 	bl	8005d84 <nrf24l01p_get_status>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <nrf24l01p_tx_irq+0x2c>
    {   
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005bdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005be0:	4808      	ldr	r0, [pc, #32]	; (8005c04 <nrf24l01p_tx_irq+0x44>)
 8005be2:	f7fc fa5c 	bl	800209e <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 8005be6:	f000 f8e7 	bl	8005db8 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 8005bea:	e007      	b.n	8005bfc <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8005bec:	2201      	movs	r2, #1
 8005bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bf2:	4804      	ldr	r0, [pc, #16]	; (8005c04 <nrf24l01p_tx_irq+0x44>)
 8005bf4:	f7fc fa3a 	bl	800206c <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 8005bf8:	f000 f8f2 	bl	8005de0 <nrf24l01p_clear_max_rt>
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40020800 	.word	0x40020800

08005c08 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8005c0c:	f7ff ff1e 	bl	8005a4c <cs_high>
    ce_low();
 8005c10:	f7ff ff40 	bl	8005a94 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8005c14:	2108      	movs	r1, #8
 8005c16:	2000      	movs	r0, #0
 8005c18:	f7ff ff6e 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8005c1c:	213f      	movs	r1, #63	; 0x3f
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f7ff ff6a 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8005c24:	2103      	movs	r1, #3
 8005c26:	2002      	movs	r0, #2
 8005c28:	f7ff ff66 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8005c2c:	2103      	movs	r1, #3
 8005c2e:	2003      	movs	r0, #3
 8005c30:	f7ff ff62 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8005c34:	2103      	movs	r1, #3
 8005c36:	2004      	movs	r0, #4
 8005c38:	f7ff ff5e 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8005c3c:	2102      	movs	r1, #2
 8005c3e:	2005      	movs	r0, #5
 8005c40:	f7ff ff5a 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8005c44:	2107      	movs	r1, #7
 8005c46:	2006      	movs	r0, #6
 8005c48:	f7ff ff56 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8005c4c:	217e      	movs	r1, #126	; 0x7e
 8005c4e:	2007      	movs	r0, #7
 8005c50:	f7ff ff52 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8005c54:	2100      	movs	r1, #0
 8005c56:	2011      	movs	r0, #17
 8005c58:	f7ff ff4e 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	2011      	movs	r0, #17
 8005c60:	f7ff ff4a 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8005c64:	2100      	movs	r1, #0
 8005c66:	2012      	movs	r0, #18
 8005c68:	f7ff ff46 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	2013      	movs	r0, #19
 8005c70:	f7ff ff42 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8005c74:	2100      	movs	r1, #0
 8005c76:	2014      	movs	r0, #20
 8005c78:	f7ff ff3e 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	2015      	movs	r0, #21
 8005c80:	f7ff ff3a 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8005c84:	2100      	movs	r1, #0
 8005c86:	2016      	movs	r0, #22
 8005c88:	f7ff ff36 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8005c8c:	2111      	movs	r1, #17
 8005c8e:	2017      	movs	r0, #23
 8005c90:	f7ff ff32 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8005c94:	2100      	movs	r1, #0
 8005c96:	201c      	movs	r0, #28
 8005c98:	f7ff ff2e 	bl	8005af8 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	201d      	movs	r0, #29
 8005ca0:	f7ff ff2a 	bl	8005af8 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8005ca4:	f000 f83e 	bl	8005d24 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8005ca8:	f000 f854 	bl	8005d54 <nrf24l01p_flush_tx_fifo>
}
 8005cac:	bf00      	nop
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	f7ff fef8 	bl	8005aac <read_register>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 8005cc0:	79fb      	ldrb	r3, [r7, #7]
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f7ff ff13 	bl	8005af8 <write_register>
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8005ce4:	23a0      	movs	r3, #160	; 0xa0
 8005ce6:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8005ce8:	f7ff febc 	bl	8005a64 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005cec:	f107 020e 	add.w	r2, r7, #14
 8005cf0:	f107 010f 	add.w	r1, r7, #15
 8005cf4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4808      	ldr	r0, [pc, #32]	; (8005d20 <nrf24l01p_write_tx_fifo+0x44>)
 8005cfe:	f7fd f91f 	bl	8002f40 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8005d02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005d06:	2208      	movs	r2, #8
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4805      	ldr	r0, [pc, #20]	; (8005d20 <nrf24l01p_write_tx_fifo+0x44>)
 8005d0c:	f7fc fecb 	bl	8002aa6 <HAL_SPI_Transmit>
    cs_high(); 
 8005d10:	f7ff fe9c 	bl	8005a4c <cs_high>

    return status;
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200001bc 	.word	0x200001bc

08005d24 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8005d2a:	23e2      	movs	r3, #226	; 0xe2
 8005d2c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8005d2e:	f7ff fe99 	bl	8005a64 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005d32:	1dba      	adds	r2, r7, #6
 8005d34:	1df9      	adds	r1, r7, #7
 8005d36:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	4804      	ldr	r0, [pc, #16]	; (8005d50 <nrf24l01p_flush_rx_fifo+0x2c>)
 8005d40:	f7fd f8fe 	bl	8002f40 <HAL_SPI_TransmitReceive>
    cs_high();
 8005d44:	f7ff fe82 	bl	8005a4c <cs_high>
}
 8005d48:	bf00      	nop
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	200001bc 	.word	0x200001bc

08005d54 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8005d5a:	23e1      	movs	r3, #225	; 0xe1
 8005d5c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8005d5e:	f7ff fe81 	bl	8005a64 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005d62:	1dba      	adds	r2, r7, #6
 8005d64:	1df9      	adds	r1, r7, #7
 8005d66:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4804      	ldr	r0, [pc, #16]	; (8005d80 <nrf24l01p_flush_tx_fifo+0x2c>)
 8005d70:	f7fd f8e6 	bl	8002f40 <HAL_SPI_TransmitReceive>
    cs_high();
 8005d74:	f7ff fe6a 	bl	8005a4c <cs_high>
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	200001bc 	.word	0x200001bc

08005d84 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 8005d8a:	23ff      	movs	r3, #255	; 0xff
 8005d8c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8005d8e:	f7ff fe69 	bl	8005a64 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8005d92:	1dba      	adds	r2, r7, #6
 8005d94:	1df9      	adds	r1, r7, #7
 8005d96:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	4805      	ldr	r0, [pc, #20]	; (8005db4 <nrf24l01p_get_status+0x30>)
 8005da0:	f7fd f8ce 	bl	8002f40 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8005da4:	f7ff fe52 	bl	8005a4c <cs_high>

    return status;
 8005da8:	79bb      	ldrb	r3, [r7, #6]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	200001bc 	.word	0x200001bc

08005db8 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8005dbe:	f7ff ffe1 	bl	8005d84 <nrf24l01p_get_status>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	f043 0320 	orr.w	r3, r3, #32
 8005dcc:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	2007      	movs	r0, #7
 8005dd4:	f7ff fe90 	bl	8005af8 <write_register>
}
 8005dd8:	bf00      	nop
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 8005de6:	f7ff ffcd 	bl	8005d84 <nrf24l01p_get_status>
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	f043 0310 	orr.w	r3, r3, #16
 8005df4:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	2007      	movs	r0, #7
 8005dfc:	f7ff fe7c 	bl	8005af8 <write_register>
}
 8005e00:	bf00      	nop
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8005e0e:	2000      	movs	r0, #0
 8005e10:	f7ff fe4c 	bl	8005aac <read_register>
 8005e14:	4603      	mov	r3, r0
 8005e16:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	f043 0302 	orr.w	r3, r3, #2
 8005e1e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	4619      	mov	r1, r3
 8005e24:	2000      	movs	r0, #0
 8005e26:	f7ff fe67 	bl	8005af8 <write_register>
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	4603      	mov	r3, r0
 8005e3a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f7ff fe35 	bl	8005aac <read_register>
 8005e42:	4603      	mov	r3, r0
 8005e44:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d002      	beq.n	8005e52 <nrf24l01p_set_crc_length+0x20>
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d005      	beq.n	8005e5c <nrf24l01p_set_crc_length+0x2a>
 8005e50:	e009      	b.n	8005e66 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	f023 0304 	bic.w	r3, r3, #4
 8005e58:	73fb      	strb	r3, [r7, #15]
            break;
 8005e5a:	e004      	b.n	8005e66 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	f043 0304 	orr.w	r3, r3, #4
 8005e62:	73fb      	strb	r3, [r7, #15]
            break;
 8005e64:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	f7ff fe44 	bl	8005af8 <write_register>
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	3b02      	subs	r3, #2
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	4619      	mov	r1, r3
 8005e8a:	2003      	movs	r0, #3
 8005e8c:	f7ff fe34 	bl	8005af8 <write_register>
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8005ea2:	2004      	movs	r0, #4
 8005ea4:	f7ff fe02 	bl	8005aac <read_register>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	f063 030f 	orn	r3, r3, #15
 8005eb2:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8005eb4:	7bfa      	ldrb	r2, [r7, #15]
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	2004      	movs	r0, #4
 8005ec2:	f7ff fe19 	bl	8005af8 <write_register>
}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8005eda:	2004      	movs	r0, #4
 8005edc:	f7ff fde6 	bl	8005aac <read_register>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	f043 030f 	orr.w	r3, r3, #15
 8005eea:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8005eec:	88fb      	ldrh	r3, [r7, #6]
 8005eee:	4a0b      	ldr	r2, [pc, #44]	; (8005f1c <nrf24l01p_auto_retransmit_delay+0x4c>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	b25a      	sxtb	r2, r3
 8005efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	b25b      	sxtb	r3, r3
 8005f06:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	2004      	movs	r0, #4
 8005f0e:	f7ff fdf3 	bl	8005af8 <write_register>
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	10624dd3 	.word	0x10624dd3

08005f20 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8005f30:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8005f32:	89fb      	ldrh	r3, [r7, #14]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	4619      	mov	r1, r3
 8005f38:	2005      	movs	r0, #5
 8005f3a:	f7ff fddd 	bl	8005af8 <write_register>
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8005f50:	2006      	movs	r0, #6
 8005f52:	f7ff fdab 	bl	8005aac <read_register>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f023 0306 	bic.w	r3, r3, #6
 8005f5c:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	b25a      	sxtb	r2, r3
 8005f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	b25b      	sxtb	r3, r3
 8005f6c:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	4619      	mov	r1, r3
 8005f72:	2006      	movs	r0, #6
 8005f74:	f7ff fdc0 	bl	8005af8 <write_register>
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4603      	mov	r3, r0
 8005f88:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8005f8a:	2006      	movs	r0, #6
 8005f8c:	f7ff fd8e 	bl	8005aac <read_register>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005f96:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d00a      	beq.n	8005fb4 <nrf24l01p_set_rf_air_data_rate+0x34>
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	dc0e      	bgt.n	8005fc0 <nrf24l01p_set_rf_air_data_rate+0x40>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <nrf24l01p_set_rf_air_data_rate+0x3e>
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d10a      	bne.n	8005fc0 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	f043 0308 	orr.w	r3, r3, #8
 8005fb0:	73fb      	strb	r3, [r7, #15]
            break;
 8005fb2:	e005      	b.n	8005fc0 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	f043 0320 	orr.w	r3, r3, #32
 8005fba:	73fb      	strb	r3, [r7, #15]
            break;
 8005fbc:	e000      	b.n	8005fc0 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8005fbe:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	2006      	movs	r0, #6
 8005fc6:	f7ff fd97 	bl	8005af8 <write_register>
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <__libc_init_array>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	4d0d      	ldr	r5, [pc, #52]	; (800600c <__libc_init_array+0x38>)
 8005fd8:	4c0d      	ldr	r4, [pc, #52]	; (8006010 <__libc_init_array+0x3c>)
 8005fda:	1b64      	subs	r4, r4, r5
 8005fdc:	10a4      	asrs	r4, r4, #2
 8005fde:	2600      	movs	r6, #0
 8005fe0:	42a6      	cmp	r6, r4
 8005fe2:	d109      	bne.n	8005ff8 <__libc_init_array+0x24>
 8005fe4:	4d0b      	ldr	r5, [pc, #44]	; (8006014 <__libc_init_array+0x40>)
 8005fe6:	4c0c      	ldr	r4, [pc, #48]	; (8006018 <__libc_init_array+0x44>)
 8005fe8:	f000 f860 	bl	80060ac <_init>
 8005fec:	1b64      	subs	r4, r4, r5
 8005fee:	10a4      	asrs	r4, r4, #2
 8005ff0:	2600      	movs	r6, #0
 8005ff2:	42a6      	cmp	r6, r4
 8005ff4:	d105      	bne.n	8006002 <__libc_init_array+0x2e>
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ffc:	4798      	blx	r3
 8005ffe:	3601      	adds	r6, #1
 8006000:	e7ee      	b.n	8005fe0 <__libc_init_array+0xc>
 8006002:	f855 3b04 	ldr.w	r3, [r5], #4
 8006006:	4798      	blx	r3
 8006008:	3601      	adds	r6, #1
 800600a:	e7f2      	b.n	8005ff2 <__libc_init_array+0x1e>
 800600c:	080060f8 	.word	0x080060f8
 8006010:	080060f8 	.word	0x080060f8
 8006014:	080060f8 	.word	0x080060f8
 8006018:	080060fc 	.word	0x080060fc

0800601c <memset>:
 800601c:	4402      	add	r2, r0
 800601e:	4603      	mov	r3, r0
 8006020:	4293      	cmp	r3, r2
 8006022:	d100      	bne.n	8006026 <memset+0xa>
 8006024:	4770      	bx	lr
 8006026:	f803 1b01 	strb.w	r1, [r3], #1
 800602a:	e7f9      	b.n	8006020 <memset+0x4>

0800602c <lrintf>:
 800602c:	ee10 3a10 	vmov	r3, s0
 8006030:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006034:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8006038:	281e      	cmp	r0, #30
 800603a:	b082      	sub	sp, #8
 800603c:	dc2e      	bgt.n	800609c <lrintf+0x70>
 800603e:	1c41      	adds	r1, r0, #1
 8006040:	da02      	bge.n	8006048 <lrintf+0x1c>
 8006042:	2000      	movs	r0, #0
 8006044:	b002      	add	sp, #8
 8006046:	4770      	bx	lr
 8006048:	2816      	cmp	r0, #22
 800604a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800604e:	dd09      	ble.n	8006064 <lrintf+0x38>
 8006050:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006054:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006058:	3a96      	subs	r2, #150	; 0x96
 800605a:	4090      	lsls	r0, r2
 800605c:	2900      	cmp	r1, #0
 800605e:	d0f1      	beq.n	8006044 <lrintf+0x18>
 8006060:	4240      	negs	r0, r0
 8006062:	e7ef      	b.n	8006044 <lrintf+0x18>
 8006064:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <lrintf+0x7c>)
 8006066:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800606a:	ed93 7a00 	vldr	s14, [r3]
 800606e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8006072:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006076:	eddd 7a01 	vldr	s15, [sp, #4]
 800607a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800607e:	ee17 3a90 	vmov	r3, s15
 8006082:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006086:	d0dc      	beq.n	8006042 <lrintf+0x16>
 8006088:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800608c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8006090:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006094:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006098:	40d8      	lsrs	r0, r3
 800609a:	e7df      	b.n	800605c <lrintf+0x30>
 800609c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80060a0:	ee17 0a90 	vmov	r0, s15
 80060a4:	e7ce      	b.n	8006044 <lrintf+0x18>
 80060a6:	bf00      	nop
 80060a8:	080060e8 	.word	0x080060e8

080060ac <_init>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr

080060b8 <_fini>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	bf00      	nop
 80060bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060be:	bc08      	pop	{r3}
 80060c0:	469e      	mov	lr, r3
 80060c2:	4770      	bx	lr
