
quadcopter_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f10  08006f10  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f18  08006f18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f1c  08006f1c  00016f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000070  08006f90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08006f90  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf59  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b68  00000000  00000000  0003bff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  0003fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00040ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b044  00000000  00000000  00041cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001767c  00000000  00000000  0005cd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cd08  00000000  00000000  000743b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001110b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005020  00000000  00000000  0011110c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  0011612c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001161c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e14 	.word	0x08006e14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006e14 	.word	0x08006e14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bea:	463b      	mov	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <MX_ADC1_Init+0x9c>)
 8000bfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000bfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <MX_ADC1_Init+0xa0>)
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c46:	f001 f86b 	bl	8001d20 <HAL_ADC_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c50:	f000 fa8c 	bl	800116c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c54:	2308      	movs	r3, #8
 8000c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c60:	463b      	mov	r3, r7
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_ADC1_Init+0x98>)
 8000c66:	f001 f9ad 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c70:	f000 fa7c 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000c8 	.word	0x200000c8
 8000c80:	40012000 	.word	0x40012000
 8000c84:	0f000001 	.word	0x0f000001

08000c88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <HAL_ADC_MspInit+0xdc>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d157      	bne.n	8000d5a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <HAL_ADC_MspInit+0xe0>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <HAL_ADC_MspInit+0xe0>)
 8000cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <HAL_ADC_MspInit+0xe0>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <HAL_ADC_MspInit+0xe0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <HAL_ADC_MspInit+0xe0>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_ADC_MspInit+0xe0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481d      	ldr	r0, [pc, #116]	; (8000d6c <HAL_ADC_MspInit+0xe4>)
 8000cf6:	f002 f929 	bl	8002f4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <HAL_ADC_MspInit+0xec>)
 8000cfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d40:	f001 fd02 	bl	8002748 <HAL_DMA_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000d4a:	f000 fa0f 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d52:	639a      	str	r2, [r3, #56]	; 0x38
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_ADC_MspInit+0xe8>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40012000 	.word	0x40012000
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	20000110 	.word	0x20000110
 8000d74:	40026410 	.word	0x40026410

08000d78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <MX_DMA_Init+0xa8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a26      	ldr	r2, [pc, #152]	; (8000e20 <MX_DMA_Init+0xa8>)
 8000d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <MX_DMA_Init+0xa8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <MX_DMA_Init+0xa8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <MX_DMA_Init+0xa8>)
 8000da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_DMA_Init+0xa8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	200c      	movs	r0, #12
 8000dbc:	f001 fc8d 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000dc0:	200c      	movs	r0, #12
 8000dc2:	f001 fca6 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	200e      	movs	r0, #14
 8000dcc:	f001 fc85 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000dd0:	200e      	movs	r0, #14
 8000dd2:	f001 fc9e 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f001 fc7d 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000de0:	200f      	movs	r0, #15
 8000de2:	f001 fc96 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2010      	movs	r0, #16
 8000dec:	f001 fc75 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000df0:	2010      	movs	r0, #16
 8000df2:	f001 fc8e 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2038      	movs	r0, #56	; 0x38
 8000dfc:	f001 fc6d 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e00:	2038      	movs	r0, #56	; 0x38
 8000e02:	f001 fc86 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	203a      	movs	r0, #58	; 0x3a
 8000e0c:	f001 fc65 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e10:	203a      	movs	r0, #58	; 0x3a
 8000e12:	f001 fc7e 	bl	8002712 <HAL_NVIC_EnableIRQ>

}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a3b      	ldr	r2, [pc, #236]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a34      	ldr	r2, [pc, #208]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a26      	ldr	r2, [pc, #152]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <MX_GPIO_Init+0x10c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb0:	4820      	ldr	r0, [pc, #128]	; (8000f34 <MX_GPIO_Init+0x110>)
 8000eb2:	f002 f9cf 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000ebc:	481e      	ldr	r0, [pc, #120]	; (8000f38 <MX_GPIO_Init+0x114>)
 8000ebe:	f002 f9c9 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|SPI2_CE_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f243 0106 	movw	r1, #12294	; 0x3006
 8000ec8:	481c      	ldr	r0, [pc, #112]	; (8000f3c <MX_GPIO_Init+0x118>)
 8000eca:	f002 f9c3 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4813      	ldr	r0, [pc, #76]	; (8000f34 <MX_GPIO_Init+0x110>)
 8000ee8:	f002 f830 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|Buzzer_Pin;
 8000eec:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <MX_GPIO_Init+0x114>)
 8000f06:	f002 f821 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|SPI2_CE_Pin|SPI2_CS_Pin;
 8000f0a:	f243 0306 	movw	r3, #12294	; 0x3006
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <MX_GPIO_Init+0x118>)
 8000f24:	f002 f812 	bl	8002f4c <HAL_GPIO_Init>

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_TIM_PeriodElapsedCallback>:

uint16_t loop_time[4];
uint8_t software_fail_safe = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

	battery_monitor_read();
 8000f48:	f004 fb5a 	bl	8005600 <battery_monitor_read>

  if (htim == LOOP_TIM)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a2e      	ldr	r2, [pc, #184]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d155      	bne.n	8001000 <HAL_TIM_PeriodElapsedCallback+0xc0>
  {
	  if(channel[4] == 2000 && software_fail_safe < 10) // arming
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f56:	891b      	ldrh	r3, [r3, #8]
 8000f58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f5c:	d138      	bne.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x90>
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b09      	cmp	r3, #9
 8000f64:	d834      	bhi.n	8000fd0 <HAL_TIM_PeriodElapsedCallback+0x90>
	  {

		  if(channel[2] > 1011) // 69
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f68:	889b      	ldrh	r3, [r3, #4]
 8000f6a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8000f6e:	d316      	bcc.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x5e>
		  {
			  for(int i = 0; i < 4; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	e00f      	b.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x56>
				  motor_value[i] = (channel[2] - 1000) * 2 + 47;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	332f      	adds	r3, #47	; 0x2f
 8000f86:	b299      	uxth	r1, r3
 8000f88:	4a22      	ldr	r2, [pc, #136]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for(int i = 0; i < 4; i++)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3301      	adds	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	ddec      	ble.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x36>
 8000f9c:	e00d      	b.n	8000fba <HAL_TIM_PeriodElapsedCallback+0x7a>
		  }

		  else
		  {
			  for(int i = 0; i < 4; i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	e007      	b.n	8000fb4 <HAL_TIM_PeriodElapsedCallback+0x74>
				  motor_value[i] = 69; // minimum value to spin smoothly
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	2145      	movs	r1, #69	; 0x45
 8000faa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for(int i = 0; i < 4; i++)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	ddf4      	ble.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x64>
		  }

		  dshot_write();
 8000fba:	f004 fd5f 	bl	8005a7c <dshot_write>
		  led1_on();
 8000fbe:	f004 fe49 	bl	8005c54 <led1_on>

		  software_fail_safe++;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e011      	b.n	8000ff4 <HAL_TIM_PeriodElapsedCallback+0xb4>
	  }

	  else	// disarming
	  {
		  for(int i = 0; i < 4; i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	e007      	b.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0xa6>
			  motor_value[i] = 0;
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2100      	movs	r1, #0
 8000fdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i = 0; i < 4; i++)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	ddf4      	ble.n	8000fd6 <HAL_TIM_PeriodElapsedCallback+0x96>
		  dshot_write();
 8000fec:	f004 fd46 	bl	8005a7c <dshot_write>
		  led1_off();
 8000ff0:	f004 fe3c 	bl	8005c6c <led1_off>
	  }

		  loop_time[0] = loop_runtime();
 8000ff4:	f004 fe80 	bl	8005cf8 <loop_runtime>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ffe:	801a      	strh	r2, [r3, #0]
  }

}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000354 	.word	0x20000354
 800100c:	200000b0 	.word	0x200000b0
 8001010:	2000008c 	.word	0x2000008c
 8001014:	20000554 	.word	0x20000554
 8001018:	20000170 	.word	0x20000170

0800101c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	if(huart->Instance == IBUS_UART_INSTANCE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <HAL_UART_RxCpltCallback+0x24>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d104      	bne.n	8001038 <HAL_UART_RxCpltCallback+0x1c>
	{
		ibus_read_channel();
 800102e:	f004 fded 	bl	8005c0c <ibus_read_channel>
		software_fail_safe = 0;
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <HAL_UART_RxCpltCallback+0x28>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	}
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40011000 	.word	0x40011000
 8001044:	2000008c 	.word	0x2000008c

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f000 fdd2 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001050:	f000 f824 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001054:	f7ff fee6 	bl	8000e24 <MX_GPIO_Init>
  MX_DMA_Init();
 8001058:	f7ff fe8e 	bl	8000d78 <MX_DMA_Init>
  MX_SPI1_Init();
 800105c:	f000 f88c 	bl	8001178 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001060:	f000 fa28 	bl	80014b4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001064:	f000 fa88 	bl	8001578 <MX_TIM5_Init>
  MX_TIM11_Init();
 8001068:	f000 faea 	bl	8001640 <MX_TIM11_Init>
  MX_ADC1_Init();
 800106c:	f7ff fdba 	bl	8000be4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001070:	f000 f8b8 	bl	80011e4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001074:	f000 fcc6 	bl	8001a04 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  buzzer_time(100);
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	f004 fae1 	bl	8005640 <buzzer_time>

  battery_monitor_init();
 800107e:	f004 faad 	bl	80055dc <battery_monitor_init>
  dshot_init(DSHOT600);
 8001082:	2002      	movs	r0, #2
 8001084:	f004 fbee 	bl	8005864 <dshot_init>
  ibus_init();
 8001088:	f004 fd3c 	bl	8005b04 <ibus_init>
  loop_init(1000);
 800108c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001090:	f004 fdf8 	bl	8005c84 <loop_init>

  loop_start();
 8001094:	f004 fe3e 	bl	8005d14 <loop_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001098:	e7fe      	b.n	8001098 <main+0x50>
	...

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fe60 	bl	8005d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <SystemClock_Config+0xc8>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <SystemClock_Config+0xc8>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <SystemClock_Config+0xc8>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <SystemClock_Config+0xcc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <SystemClock_Config+0xcc>)
 80010e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <SystemClock_Config+0xcc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800110c:	230c      	movs	r3, #12
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001110:	2360      	movs	r3, #96	; 0x60
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001118:	2304      	movs	r3, #4
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f002 f8b1 	bl	8003288 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800112c:	f000 f81e 	bl	800116c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2302      	movs	r3, #2
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2103      	movs	r1, #3
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fb13 	bl	8003778 <HAL_RCC_ClockConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001158:	f000 f808 	bl	800116c <Error_Handler>
  }
}
 800115c:	bf00      	nop
 800115e:	3750      	adds	r7, #80	; 0x50
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>
	...

08001178 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_SPI1_Init+0x64>)
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <MX_SPI1_Init+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_SPI1_Init+0x64>)
 8001184:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001188:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_SPI1_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_SPI1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_SPI1_Init+0x64>)
 8001198:	2202      	movs	r2, #2
 800119a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_SPI1_Init+0x64>)
 800119e:	2201      	movs	r2, #1
 80011a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_SPI1_Init+0x64>)
 80011a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_SPI1_Init+0x64>)
 80011ac:	2218      	movs	r2, #24
 80011ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_SPI1_Init+0x64>)
 80011c4:	220a      	movs	r2, #10
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_SPI1_Init+0x64>)
 80011ca:	f002 fca5 	bl	8003b18 <HAL_SPI_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011d4:	f7ff ffca 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200001f4 	.word	0x200001f4
 80011e0:	40013000 	.word	0x40013000

080011e4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_SPI2_Init+0x64>)
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <MX_SPI2_Init+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_SPI2_Init+0x64>)
 80011f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_SPI2_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_SPI2_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_SPI2_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_SPI2_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_SPI2_Init+0x64>)
 8001210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001214:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_SPI2_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_SPI2_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_SPI2_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_SPI2_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_SPI2_Init+0x64>)
 8001230:	220a      	movs	r2, #10
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_SPI2_Init+0x64>)
 8001236:	f002 fc6f 	bl	8003b18 <HAL_SPI_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001240:	f7ff ff94 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000019c 	.word	0x2000019c
 800124c:	40003800 	.word	0x40003800

08001250 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a32      	ldr	r2, [pc, #200]	; (8001338 <HAL_SPI_MspInit+0xe8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12c      	bne.n	80012cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	4b31      	ldr	r3, [pc, #196]	; (800133c <HAL_SPI_MspInit+0xec>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a30      	ldr	r2, [pc, #192]	; (800133c <HAL_SPI_MspInit+0xec>)
 800127c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b2e      	ldr	r3, [pc, #184]	; (800133c <HAL_SPI_MspInit+0xec>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	4b2a      	ldr	r3, [pc, #168]	; (800133c <HAL_SPI_MspInit+0xec>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a29      	ldr	r2, [pc, #164]	; (800133c <HAL_SPI_MspInit+0xec>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <HAL_SPI_MspInit+0xec>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012aa:	23e0      	movs	r3, #224	; 0xe0
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ba:	2305      	movs	r3, #5
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	4619      	mov	r1, r3
 80012c4:	481e      	ldr	r0, [pc, #120]	; (8001340 <HAL_SPI_MspInit+0xf0>)
 80012c6:	f001 fe41 	bl	8002f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012ca:	e031      	b.n	8001330 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_SPI_MspInit+0xf4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12c      	bne.n	8001330 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_SPI_MspInit+0xec>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_SPI_MspInit+0xec>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_SPI_MspInit+0xec>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_SPI_MspInit+0xec>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_SPI_MspInit+0xec>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_SPI_MspInit+0xec>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800130e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001320:	2305      	movs	r3, #5
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <HAL_SPI_MspInit+0xf8>)
 800132c:	f001 fe0e 	bl	8002f4c <HAL_GPIO_Init>
}
 8001330:	bf00      	nop
 8001332:	3730      	adds	r7, #48	; 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40013000 	.word	0x40013000
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000
 8001344:	40003800 	.word	0x40003800
 8001348:	40020400 	.word	0x40020400

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_MspInit+0x4c>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_MspInit+0x4c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e8:	f000 fc56 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
//if(__HAL_DMA_GET_TC_FLAG_INDEX(&hdma_tim2_ch3_up))
//{
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <DMA1_Stream1_IRQHandler+0x10>)
 80013f6:	f001 fb3f 	bl	8002a78 <HAL_DMA_IRQHandler>
	//__HAL_DMA_DISABLE(&hdma_tim2_ch3_up);
	//__HAL_TIM_DISABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
	//__HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch3_up, DMA_FLAG_TCIF1_5);
//}
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200003fc 	.word	0x200003fc

08001404 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <DMA1_Stream3_IRQHandler+0x10>)
 800140a:	f001 fb35 	bl	8002a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200002ac 	.word	0x200002ac

08001418 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <DMA1_Stream4_IRQHandler+0x10>)
 800141e:	f001 fb2b 	bl	8002a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000039c 	.word	0x2000039c

0800142c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <DMA1_Stream5_IRQHandler+0x10>)
 8001432:	f001 fb21 	bl	8002a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000024c 	.word	0x2000024c

08001440 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001446:	f002 fda1 	bl	8003f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000354 	.word	0x20000354

08001454 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <USART1_IRQHandler+0x10>)
 800145a:	f003 fab7 	bl	80049cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000504 	.word	0x20000504

08001468 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <DMA2_Stream0_IRQHandler+0x10>)
 800146e:	f001 fb03 	bl	8002a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000110 	.word	0x20000110

0800147c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <DMA2_Stream2_IRQHandler+0x10>)
 8001482:	f001 faf9 	bl	8002a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200004a4 	.word	0x200004a4

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	615a      	str	r2, [r3, #20]
 80014d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <MX_TIM2_Init+0xc0>)
 80014d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <MX_TIM2_Init+0xc0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_TIM2_Init+0xc0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <MX_TIM2_Init+0xc0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_TIM2_Init+0xc0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <MX_TIM2_Init+0xc0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014fc:	481d      	ldr	r0, [pc, #116]	; (8001574 <MX_TIM2_Init+0xc0>)
 80014fe:	f002 fc45 	bl	8003d8c <HAL_TIM_PWM_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001508:	f7ff fe30 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001514:	f107 0320 	add.w	r3, r7, #32
 8001518:	4619      	mov	r1, r3
 800151a:	4816      	ldr	r0, [pc, #88]	; (8001574 <MX_TIM2_Init+0xc0>)
 800151c:	f003 f956 	bl	80047cc <HAL_TIMEx_MasterConfigSynchronization>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001526:	f7ff fe21 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152a:	2360      	movs	r3, #96	; 0x60
 800152c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <MX_TIM2_Init+0xc0>)
 8001542:	f002 fe2b 	bl	800419c <HAL_TIM_PWM_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800154c:	f7ff fe0e 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2208      	movs	r2, #8
 8001554:	4619      	mov	r1, r3
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <MX_TIM2_Init+0xc0>)
 8001558:	f002 fe20 	bl	800419c <HAL_TIM_PWM_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001562:	f7ff fe03 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001566:	4803      	ldr	r0, [pc, #12]	; (8001574 <MX_TIM2_Init+0xc0>)
 8001568:	f000 f9ee 	bl	8001948 <HAL_TIM_MspPostInit>

}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	; 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000045c 	.word	0x2000045c

08001578 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157e:	f107 0320 	add.w	r3, r7, #32
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]
 8001596:	615a      	str	r2, [r3, #20]
 8001598:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800159a:	4b27      	ldr	r3, [pc, #156]	; (8001638 <MX_TIM5_Init+0xc0>)
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <MX_TIM5_Init+0xc4>)
 800159e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <MX_TIM5_Init+0xc0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <MX_TIM5_Init+0xc0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <MX_TIM5_Init+0xc0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <MX_TIM5_Init+0xc0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <MX_TIM5_Init+0xc0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015be:	481e      	ldr	r0, [pc, #120]	; (8001638 <MX_TIM5_Init+0xc0>)
 80015c0:	f002 fbe4 	bl	8003d8c <HAL_TIM_PWM_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80015ca:	f7ff fdcf 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	4619      	mov	r1, r3
 80015dc:	4816      	ldr	r0, [pc, #88]	; (8001638 <MX_TIM5_Init+0xc0>)
 80015de:	f003 f8f5 	bl	80047cc <HAL_TIMEx_MasterConfigSynchronization>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80015e8:	f7ff fdc0 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ec:	2360      	movs	r3, #96	; 0x60
 80015ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2204      	movs	r2, #4
 8001600:	4619      	mov	r1, r3
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <MX_TIM5_Init+0xc0>)
 8001604:	f002 fdca 	bl	800419c <HAL_TIM_PWM_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800160e:	f7ff fdad 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	220c      	movs	r2, #12
 8001616:	4619      	mov	r1, r3
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM5_Init+0xc0>)
 800161a:	f002 fdbf 	bl	800419c <HAL_TIM_PWM_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001624:	f7ff fda2 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM5_Init+0xc0>)
 800162a:	f000 f98d 	bl	8001948 <HAL_TIM_MspPostInit>

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000030c 	.word	0x2000030c
 800163c:	40000c00 	.word	0x40000c00

08001640 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <MX_TIM11_Init+0x3c>)
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <MX_TIM11_Init+0x40>)
 8001648:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_TIM11_Init+0x3c>)
 800164c:	2200      	movs	r2, #0
 800164e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_TIM11_Init+0x3c>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_TIM11_Init+0x3c>)
 8001658:	2200      	movs	r2, #0
 800165a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <MX_TIM11_Init+0x3c>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_TIM11_Init+0x3c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_TIM11_Init+0x3c>)
 800166a:	f002 fade 	bl	8003c2a <HAL_TIM_Base_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8001674:	f7ff fd7a 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000354 	.word	0x20000354
 8001680:	40014800 	.word	0x40014800

08001684 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001694:	f040 8089 	bne.w	80017aa <HAL_TIM_PWM_MspInit+0x126>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4b8c      	ldr	r3, [pc, #560]	; (80018d0 <HAL_TIM_PWM_MspInit+0x24c>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a8b      	ldr	r2, [pc, #556]	; (80018d0 <HAL_TIM_PWM_MspInit+0x24c>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b89      	ldr	r3, [pc, #548]	; (80018d0 <HAL_TIM_PWM_MspInit+0x24c>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80016b4:	4b87      	ldr	r3, [pc, #540]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 80016b6:	4a88      	ldr	r2, [pc, #544]	; (80018d8 <HAL_TIM_PWM_MspInit+0x254>)
 80016b8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80016ba:	4b86      	ldr	r3, [pc, #536]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 80016bc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016c0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c2:	4b84      	ldr	r3, [pc, #528]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 80016c4:	2240      	movs	r2, #64	; 0x40
 80016c6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c8:	4b82      	ldr	r3, [pc, #520]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016ce:	4b81      	ldr	r3, [pc, #516]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 80016d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016d6:	4b7f      	ldr	r3, [pc, #508]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 80016d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016dc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016de:	4b7d      	ldr	r3, [pc, #500]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 80016e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016e4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80016e6:	4b7b      	ldr	r3, [pc, #492]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80016ec:	4b79      	ldr	r3, [pc, #484]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 80016ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016f2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016f4:	4b77      	ldr	r3, [pc, #476]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 80016f6:	2204      	movs	r2, #4
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80016fa:	4b76      	ldr	r3, [pc, #472]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001700:	4b74      	ldr	r3, [pc, #464]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 8001702:	2200      	movs	r2, #0
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001706:	4b73      	ldr	r3, [pc, #460]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 8001708:	2200      	movs	r2, #0
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800170c:	4871      	ldr	r0, [pc, #452]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 800170e:	f001 f81b 	bl	8002748 <HAL_DMA_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 8001718:	f7ff fd28 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a6d      	ldr	r2, [pc, #436]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
 8001722:	4a6c      	ldr	r2, [pc, #432]	; (80018d4 <HAL_TIM_PWM_MspInit+0x250>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 8001728:	4b6c      	ldr	r3, [pc, #432]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 800172a:	4a6d      	ldr	r2, [pc, #436]	; (80018e0 <HAL_TIM_PWM_MspInit+0x25c>)
 800172c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 800172e:	4b6b      	ldr	r3, [pc, #428]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 8001730:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001734:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001736:	4b69      	ldr	r3, [pc, #420]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 8001738:	2240      	movs	r2, #64	; 0x40
 800173a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800173c:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001742:	4b66      	ldr	r3, [pc, #408]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 8001744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001748:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800174a:	4b64      	ldr	r3, [pc, #400]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 800174c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001750:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001752:	4b62      	ldr	r3, [pc, #392]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 8001754:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001758:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 800175a:	4b60      	ldr	r3, [pc, #384]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001760:	4b5e      	ldr	r3, [pc, #376]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 8001762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001766:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001768:	4b5c      	ldr	r3, [pc, #368]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 800176a:	2204      	movs	r2, #4
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800176e:	4b5b      	ldr	r3, [pc, #364]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 8001776:	2200      	movs	r2, #0
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800177a:	4b58      	ldr	r3, [pc, #352]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 800177c:	2200      	movs	r2, #0
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8001780:	4856      	ldr	r0, [pc, #344]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 8001782:	f000 ffe1 	bl	8002748 <HAL_DMA_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_TIM_PWM_MspInit+0x10c>
    {
      Error_Handler();
 800178c:	f7ff fcee 	bl	800116c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
 8001796:	4a51      	ldr	r2, [pc, #324]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a4f      	ldr	r2, [pc, #316]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 80017a0:	621a      	str	r2, [r3, #32]
 80017a2:	4a4e      	ldr	r2, [pc, #312]	; (80018dc <HAL_TIM_PWM_MspInit+0x258>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80017a8:	e08d      	b.n	80018c6 <HAL_TIM_PWM_MspInit+0x242>
  else if(tim_pwmHandle->Instance==TIM5)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a4d      	ldr	r2, [pc, #308]	; (80018e4 <HAL_TIM_PWM_MspInit+0x260>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	f040 8088 	bne.w	80018c6 <HAL_TIM_PWM_MspInit+0x242>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b45      	ldr	r3, [pc, #276]	; (80018d0 <HAL_TIM_PWM_MspInit+0x24c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a44      	ldr	r2, [pc, #272]	; (80018d0 <HAL_TIM_PWM_MspInit+0x24c>)
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <HAL_TIM_PWM_MspInit+0x24c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80017d2:	4b45      	ldr	r3, [pc, #276]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 80017d4:	4a45      	ldr	r2, [pc, #276]	; (80018ec <HAL_TIM_PWM_MspInit+0x268>)
 80017d6:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 80017d8:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 80017da:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80017de:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e0:	4b41      	ldr	r3, [pc, #260]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 80017e2:	2240      	movs	r2, #64	; 0x40
 80017e4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e6:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80017ec:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 80017ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 80017f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017fa:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017fc:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 80017fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001802:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001804:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 800180c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001810:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 8001814:	2204      	movs	r2, #4
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001818:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 800181a:	2200      	movs	r2, #0
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 800181e:	4b32      	ldr	r3, [pc, #200]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 8001820:	2200      	movs	r2, #0
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 8001826:	2200      	movs	r2, #0
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 800182a:	482f      	ldr	r0, [pc, #188]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 800182c:	f000 ff8c 	bl	8002748 <HAL_DMA_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8001836:	f7ff fc99 	bl	800116c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a2a      	ldr	r2, [pc, #168]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
 8001840:	4a29      	ldr	r2, [pc, #164]	; (80018e8 <HAL_TIM_PWM_MspInit+0x264>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 8001848:	4a2a      	ldr	r2, [pc, #168]	; (80018f4 <HAL_TIM_PWM_MspInit+0x270>)
 800184a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 800184e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001852:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 8001856:	2240      	movs	r2, #64	; 0x40
 8001858:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 8001862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001866:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 800186a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800186e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 8001872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001876:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 8001880:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001884:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 8001888:	2204      	movs	r2, #4
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 800188e:	2200      	movs	r2, #0
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 8001894:	2200      	movs	r2, #0
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 800189a:	2200      	movs	r2, #0
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 800189e:	4814      	ldr	r0, [pc, #80]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 80018a0:	f000 ff52 	bl	8002748 <HAL_DMA_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_TIM_PWM_MspInit+0x22a>
      Error_Handler();
 80018aa:	f7ff fc5f 	bl	800116c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
 80018c0:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_TIM_PWM_MspInit+0x26c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	2000024c 	.word	0x2000024c
 80018d8:	40026088 	.word	0x40026088
 80018dc:	200003fc 	.word	0x200003fc
 80018e0:	40026028 	.word	0x40026028
 80018e4:	40000c00 	.word	0x40000c00
 80018e8:	2000039c 	.word	0x2000039c
 80018ec:	40026070 	.word	0x40026070
 80018f0:	200002ac 	.word	0x200002ac
 80018f4:	40026058 	.word	0x40026058

080018f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_TIM_Base_MspInit+0x48>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d115      	bne.n	8001936 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_TIM_Base_MspInit+0x4c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <HAL_TIM_Base_MspInit+0x4c>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_TIM_Base_MspInit+0x4c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	201a      	movs	r0, #26
 800192c:	f000 fed5 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001930:	201a      	movs	r0, #26
 8001932:	f000 feee 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40014800 	.word	0x40014800
 8001944:	40023800 	.word	0x40023800

08001948 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001968:	d11e      	bne.n	80019a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_2_Pin;
 8001986:	2305      	movs	r3, #5
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001996:	2301      	movs	r3, #1
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4816      	ldr	r0, [pc, #88]	; (80019fc <HAL_TIM_MspPostInit+0xb4>)
 80019a2:	f001 fad3 	bl	8002f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80019a6:	e022      	b.n	80019ee <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <HAL_TIM_MspPostInit+0xb8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d11d      	bne.n	80019ee <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_4_Pin|MOTOR_1_Pin;
 80019ce:	230a      	movs	r3, #10
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80019de:	2302      	movs	r3, #2
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <HAL_TIM_MspPostInit+0xb4>)
 80019ea:	f001 faaf 	bl	8002f4c <HAL_GPIO_Init>
}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40000c00 	.word	0x40000c00

08001a04 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_USART1_UART_Init+0x4c>)
 8001a3c:	f002 ff48 	bl	80048d0 <HAL_UART_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a46:	f7ff fb91 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000504 	.word	0x20000504
 8001a54:	40011000 	.word	0x40011000

08001a58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a44      	ldr	r2, [pc, #272]	; (8001b88 <HAL_UART_MspInit+0x130>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	f040 8082 	bne.w	8001b80 <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	4b42      	ldr	r3, [pc, #264]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	4a41      	ldr	r2, [pc, #260]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8c:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	4a3a      	ldr	r2, [pc, #232]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	4a33      	ldr	r2, [pc, #204]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <HAL_UART_MspInit+0x134>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	4828      	ldr	r0, [pc, #160]	; (8001b90 <HAL_UART_MspInit+0x138>)
 8001aee:	f001 fa2d 	bl	8002f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b02:	2307      	movs	r3, #7
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4821      	ldr	r0, [pc, #132]	; (8001b94 <HAL_UART_MspInit+0x13c>)
 8001b0e:	f001 fa1d 	bl	8002f4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b14:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <HAL_UART_MspInit+0x144>)
 8001b16:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b32:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b4c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b54:	4810      	ldr	r0, [pc, #64]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b56:	f000 fdf7 	bl	8002748 <HAL_DMA_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001b60:	f7ff fb04 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
 8001b6a:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <HAL_UART_MspInit+0x140>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2025      	movs	r0, #37	; 0x25
 8001b76:	f000 fdb0 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b7a:	2025      	movs	r0, #37	; 0x25
 8001b7c:	f000 fdc9 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b80:	bf00      	nop
 8001b82:	3728      	adds	r7, #40	; 0x28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020000 	.word	0x40020000
 8001b94:	40020400 	.word	0x40020400
 8001b98:	200004a4 	.word	0x200004a4
 8001b9c:	40026440 	.word	0x40026440

08001ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ba6:	e003      	b.n	8001bb0 <LoopCopyDataInit>

08001ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bae:	3104      	adds	r1, #4

08001bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bb0:	480b      	ldr	r0, [pc, #44]	; (8001be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bb8:	d3f6      	bcc.n	8001ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bbc:	e002      	b.n	8001bc4 <LoopFillZerobss>

08001bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bc0:	f842 3b04 	str.w	r3, [r2], #4

08001bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bc8:	d3f9      	bcc.n	8001bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bca:	f7ff fc61 	bl	8001490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bce:	f004 f8ab 	bl	8005d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd2:	f7ff fa39 	bl	8001048 <main>
  bx  lr    
 8001bd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bdc:	08006f20 	.word	0x08006f20
  ldr  r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001be4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001be8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001bec:	2000068c 	.word	0x2000068c

08001bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <HAL_Init+0x40>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_Init+0x40>)
 8001c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x40>)
 8001c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 fd51 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fb90 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fd69 	bl	800272e <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 fd31 	bl	80026da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000548 	.word	0x20000548

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000548 	.word	0x20000548

08001cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff ffee 	bl	8001cc0 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_Delay+0x44>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffde 	bl	8001cc0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008

08001d20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e033      	b.n	8001d9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe ffa2 	bl	8000c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d66:	f023 0302 	bic.w	r3, r3, #2
 8001d6a:	f043 0202 	orr.w	r2, r3, #2
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fa58 	bl	8002228 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d8e:	e001      	b.n	8001d94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Start_DMA+0x1e>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e0ce      	b.n	8001f64 <HAL_ADC_Start_DMA+0x1bc>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d018      	beq.n	8001e0e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dec:	4b5f      	ldr	r3, [pc, #380]	; (8001f6c <HAL_ADC_Start_DMA+0x1c4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a5f      	ldr	r2, [pc, #380]	; (8001f70 <HAL_ADC_Start_DMA+0x1c8>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0c9a      	lsrs	r2, r3, #18
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e00:	e002      	b.n	8001e08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f9      	bne.n	8001e02 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e1c:	d107      	bne.n	8001e2e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	f040 8086 	bne.w	8001f4a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7c:	d106      	bne.n	8001e8c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f023 0206 	bic.w	r2, r3, #6
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
 8001e8a:	e002      	b.n	8001e92 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_ADC_Start_DMA+0x1cc>)
 8001e9c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	4a35      	ldr	r2, [pc, #212]	; (8001f78 <HAL_ADC_Start_DMA+0x1d0>)
 8001ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eaa:	4a34      	ldr	r2, [pc, #208]	; (8001f7c <HAL_ADC_Start_DMA+0x1d4>)
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	4a33      	ldr	r2, [pc, #204]	; (8001f80 <HAL_ADC_Start_DMA+0x1d8>)
 8001eb4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ece:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ede:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	334c      	adds	r3, #76	; 0x4c
 8001eea:	4619      	mov	r1, r3
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f000 fcd8 	bl	80028a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10f      	bne.n	8001f20 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d129      	bne.n	8001f62 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	e020      	b.n	8001f62 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <HAL_ADC_Start_DMA+0x1dc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d11b      	bne.n	8001f62 <HAL_ADC_Start_DMA+0x1ba>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d114      	bne.n	8001f62 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e00b      	b.n	8001f62 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	40012300 	.word	0x40012300
 8001f78:	08002421 	.word	0x08002421
 8001f7c:	080024db 	.word	0x080024db
 8001f80:	080024f7 	.word	0x080024f7
 8001f84:	40012000 	.word	0x40012000

08001f88 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1c>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e113      	b.n	8002208 <HAL_ADC_ConfigChannel+0x244>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	d925      	bls.n	800203c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68d9      	ldr	r1, [r3, #12]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	3b1e      	subs	r3, #30
 8002006:	2207      	movs	r2, #7
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43da      	mvns	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	400a      	ands	r2, r1
 8002014:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68d9      	ldr	r1, [r3, #12]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	4618      	mov	r0, r3
 8002028:	4603      	mov	r3, r0
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4403      	add	r3, r0
 800202e:	3b1e      	subs	r3, #30
 8002030:	409a      	lsls	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	e022      	b.n	8002082 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6919      	ldr	r1, [r3, #16]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	2207      	movs	r2, #7
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	400a      	ands	r2, r1
 800205e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6919      	ldr	r1, [r3, #16]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	4603      	mov	r3, r0
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4403      	add	r3, r0
 8002078:	409a      	lsls	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b06      	cmp	r3, #6
 8002088:	d824      	bhi.n	80020d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	3b05      	subs	r3, #5
 800209c:	221f      	movs	r2, #31
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	400a      	ands	r2, r1
 80020aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	3b05      	subs	r3, #5
 80020c6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34
 80020d2:	e04c      	b.n	800216e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	d824      	bhi.n	8002126 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	3b23      	subs	r3, #35	; 0x23
 80020ee:	221f      	movs	r2, #31
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43da      	mvns	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	400a      	ands	r2, r1
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	4618      	mov	r0, r3
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	3b23      	subs	r3, #35	; 0x23
 8002118:	fa00 f203 	lsl.w	r2, r0, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
 8002124:	e023      	b.n	800216e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3b41      	subs	r3, #65	; 0x41
 8002138:	221f      	movs	r2, #31
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	400a      	ands	r2, r1
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	3b41      	subs	r3, #65	; 0x41
 8002162:	fa00 f203 	lsl.w	r2, r0, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_ADC_ConfigChannel+0x250>)
 8002170:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a28      	ldr	r2, [pc, #160]	; (8002218 <HAL_ADC_ConfigChannel+0x254>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d10f      	bne.n	800219c <HAL_ADC_ConfigChannel+0x1d8>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b12      	cmp	r3, #18
 8002182:	d10b      	bne.n	800219c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_ADC_ConfigChannel+0x254>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d12b      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x23a>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_ADC_ConfigChannel+0x258>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <HAL_ADC_ConfigChannel+0x1f4>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b11      	cmp	r3, #17
 80021b6:	d122      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a11      	ldr	r2, [pc, #68]	; (800221c <HAL_ADC_ConfigChannel+0x258>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d111      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_ADC_ConfigChannel+0x25c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a11      	ldr	r2, [pc, #68]	; (8002224 <HAL_ADC_ConfigChannel+0x260>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	0c9a      	lsrs	r2, r3, #18
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021f0:	e002      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f9      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40012300 	.word	0x40012300
 8002218:	40012000 	.word	0x40012000
 800221c:	10000012 	.word	0x10000012
 8002220:	20000000 	.word	0x20000000
 8002224:	431bde83 	.word	0x431bde83

08002228 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002230:	4b79      	ldr	r3, [pc, #484]	; (8002418 <ADC_Init+0x1f0>)
 8002232:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	431a      	orrs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800225c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	021a      	lsls	r2, r3, #8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6899      	ldr	r1, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	4a58      	ldr	r2, [pc, #352]	; (800241c <ADC_Init+0x1f4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d022      	beq.n	8002306 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6899      	ldr	r1, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6899      	ldr	r1, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e00f      	b.n	8002326 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002324:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0202 	bic.w	r2, r2, #2
 8002334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e1b      	ldrb	r3, [r3, #24]
 8002340:	005a      	lsls	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01b      	beq.n	800238c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002362:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002372:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	3b01      	subs	r3, #1
 8002380:	035a      	lsls	r2, r3, #13
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	e007      	b.n	800239c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800239a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	051a      	lsls	r2, r3, #20
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6899      	ldr	r1, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023de:	025a      	lsls	r2, r3, #9
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	029a      	lsls	r2, r3, #10
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40012300 	.word	0x40012300
 800241c:	0f000001 	.word	0x0f000001

08002420 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002436:	2b00      	cmp	r3, #0
 8002438:	d13c      	bne.n	80024b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d12b      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002458:	2b00      	cmp	r3, #0
 800245a:	d127      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	d006      	beq.n	8002478 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002474:	2b00      	cmp	r3, #0
 8002476:	d119      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0220 	bic.w	r2, r2, #32
 8002486:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7ff fd6b 	bl	8001f88 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024b2:	e00e      	b.n	80024d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff fd75 	bl	8001fb0 <HAL_ADC_ErrorCallback>
}
 80024c6:	e004      	b.n	80024d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff fd57 	bl	8001f9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2240      	movs	r2, #64	; 0x40
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f043 0204 	orr.w	r2, r3, #4
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff fd4a 	bl	8001fb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800254c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <__NVIC_GetPriorityGrouping+0x18>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 0307 	and.w	r3, r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	2b00      	cmp	r3, #0
 8002598:	db0b      	blt.n	80025b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	4907      	ldr	r1, [pc, #28]	; (80025c0 <__NVIC_EnableIRQ+0x38>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2001      	movs	r0, #1
 80025aa:	fa00 f202 	lsl.w	r2, r0, r2
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db0a      	blt.n	80025ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	490c      	ldr	r1, [pc, #48]	; (8002610 <__NVIC_SetPriority+0x4c>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	0112      	lsls	r2, r2, #4
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	440b      	add	r3, r1
 80025e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ec:	e00a      	b.n	8002604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4908      	ldr	r1, [pc, #32]	; (8002614 <__NVIC_SetPriority+0x50>)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	3b04      	subs	r3, #4
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	440b      	add	r3, r1
 8002602:	761a      	strb	r2, [r3, #24]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000e100 	.word	0xe000e100
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f1c3 0307 	rsb	r3, r3, #7
 8002632:	2b04      	cmp	r3, #4
 8002634:	bf28      	it	cs
 8002636:	2304      	movcs	r3, #4
 8002638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3304      	adds	r3, #4
 800263e:	2b06      	cmp	r3, #6
 8002640:	d902      	bls.n	8002648 <NVIC_EncodePriority+0x30>
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3b03      	subs	r3, #3
 8002646:	e000      	b.n	800264a <NVIC_EncodePriority+0x32>
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002660:	f04f 31ff 	mov.w	r1, #4294967295
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	43d9      	mvns	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	4313      	orrs	r3, r2
         );
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002690:	d301      	bcc.n	8002696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <SysTick_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269e:	210f      	movs	r1, #15
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f7ff ff8e 	bl	80025c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <SysTick_Config+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <SysTick_Config+0x40>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff29 	bl	8002524 <__NVIC_SetPriorityGrouping>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff3e 	bl	800256c <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff8e 	bl	8002618 <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5d 	bl	80025c4 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff31 	bl	8002588 <__NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa2 	bl	8002680 <SysTick_Config>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff fab4 	bl	8001cc0 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e099      	b.n	8002898 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002784:	e00f      	b.n	80027a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002786:	f7ff fa9b 	bl	8001cc0 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b05      	cmp	r3, #5
 8002792:	d908      	bls.n	80027a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2203      	movs	r2, #3
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e078      	b.n	8002898 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1e8      	bne.n	8002786 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <HAL_DMA_Init+0x158>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d107      	bne.n	8002810 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	4313      	orrs	r3, r2
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0307 	bic.w	r3, r3, #7
 8002826:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	2b04      	cmp	r3, #4
 8002838:	d117      	bne.n	800286a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00e      	beq.n	800286a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fb01 	bl	8002e54 <DMA_CheckFifoParam>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002866:	2301      	movs	r3, #1
 8002868:	e016      	b.n	8002898 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fab8 	bl	8002de8 <DMA_CalcBaseAndBitshift>
 8002878:	4603      	mov	r3, r0
 800287a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	223f      	movs	r2, #63	; 0x3f
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	f010803f 	.word	0xf010803f

080028a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_DMA_Start_IT+0x26>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e040      	b.n	800294c <HAL_DMA_Start_IT+0xa8>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d12f      	bne.n	800293e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fa4a 	bl	8002d8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	223f      	movs	r2, #63	; 0x3f
 80028fe:	409a      	lsls	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0216 	orr.w	r2, r2, #22
 8002912:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0208 	orr.w	r2, r2, #8
 800292a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e005      	b.n	800294a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002946:	2302      	movs	r3, #2
 8002948:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800294a:	7dfb      	ldrb	r3, [r7, #23]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002962:	f7ff f9ad 	bl	8001cc0 <HAL_GetTick>
 8002966:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d008      	beq.n	8002986 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e052      	b.n	8002a2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0216 	bic.w	r2, r2, #22
 8002994:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d103      	bne.n	80029b6 <HAL_DMA_Abort+0x62>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0208 	bic.w	r2, r2, #8
 80029c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d6:	e013      	b.n	8002a00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029d8:	f7ff f972 	bl	8001cc0 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d90c      	bls.n	8002a00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2220      	movs	r2, #32
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2203      	movs	r2, #3
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e015      	b.n	8002a2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1e4      	bne.n	80029d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	223f      	movs	r2, #63	; 0x3f
 8002a14:	409a      	lsls	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d004      	beq.n	8002a52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00c      	b.n	8002a6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2205      	movs	r2, #5
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a84:	4b92      	ldr	r3, [pc, #584]	; (8002cd0 <HAL_DMA_IRQHandler+0x258>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a92      	ldr	r2, [pc, #584]	; (8002cd4 <HAL_DMA_IRQHandler+0x25c>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0a9b      	lsrs	r3, r3, #10
 8002a90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01a      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0204 	bic.w	r2, r2, #4
 8002aca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	2201      	movs	r2, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	2201      	movs	r2, #1
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	f043 0202 	orr.w	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1e:	2204      	movs	r2, #4
 8002b20:	409a      	lsls	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d012      	beq.n	8002b50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	f043 0204 	orr.w	r2, r3, #4
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	2210      	movs	r2, #16
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d043      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d03c      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2210      	movs	r2, #16
 8002b74:	409a      	lsls	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d018      	beq.n	8002bba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d108      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d024      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
 8002ba6:	e01f      	b.n	8002be8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01b      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
 8002bb8:	e016      	b.n	8002be8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0208 	bic.w	r2, r2, #8
 8002bd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	2220      	movs	r2, #32
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 808e 	beq.w	8002d16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8086 	beq.w	8002d16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	2220      	movs	r2, #32
 8002c10:	409a      	lsls	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d136      	bne.n	8002c90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0216 	bic.w	r2, r2, #22
 8002c30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <HAL_DMA_IRQHandler+0x1da>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0208 	bic.w	r2, r2, #8
 8002c60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	223f      	movs	r2, #63	; 0x3f
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d07d      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
        }
        return;
 8002c8e:	e078      	b.n	8002d82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d01c      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d108      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d030      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
 8002cbc:	e02b      	b.n	8002d16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d027      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
 8002cce:	e022      	b.n	8002d16 <HAL_DMA_IRQHandler+0x29e>
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10f      	bne.n	8002d06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0210 	bic.w	r2, r2, #16
 8002cf4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d032      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d022      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2205      	movs	r2, #5
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3301      	adds	r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d307      	bcc.n	8002d5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f2      	bne.n	8002d42 <HAL_DMA_IRQHandler+0x2ca>
 8002d5c:	e000      	b.n	8002d60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d5e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
 8002d80:	e000      	b.n	8002d84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d82:	bf00      	nop
    }
  }
}
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop

08002d8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002da8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b40      	cmp	r3, #64	; 0x40
 8002db8:	d108      	bne.n	8002dcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dca:	e007      	b.n	8002ddc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	3b10      	subs	r3, #16
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <DMA_CalcBaseAndBitshift+0x64>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e02:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <DMA_CalcBaseAndBitshift+0x68>)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d909      	bls.n	8002e2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e1e:	f023 0303 	bic.w	r3, r3, #3
 8002e22:	1d1a      	adds	r2, r3, #4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	659a      	str	r2, [r3, #88]	; 0x58
 8002e28:	e007      	b.n	8002e3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	aaaaaaab 	.word	0xaaaaaaab
 8002e50:	08006e68 	.word	0x08006e68

08002e54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d11f      	bne.n	8002eae <DMA_CheckFifoParam+0x5a>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d856      	bhi.n	8002f22 <DMA_CheckFifoParam+0xce>
 8002e74:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <DMA_CheckFifoParam+0x28>)
 8002e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7a:	bf00      	nop
 8002e7c:	08002e8d 	.word	0x08002e8d
 8002e80:	08002e9f 	.word	0x08002e9f
 8002e84:	08002e8d 	.word	0x08002e8d
 8002e88:	08002f23 	.word	0x08002f23
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d046      	beq.n	8002f26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9c:	e043      	b.n	8002f26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ea6:	d140      	bne.n	8002f2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eac:	e03d      	b.n	8002f2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb6:	d121      	bne.n	8002efc <DMA_CheckFifoParam+0xa8>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d837      	bhi.n	8002f2e <DMA_CheckFifoParam+0xda>
 8002ebe:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <DMA_CheckFifoParam+0x70>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002ed5 	.word	0x08002ed5
 8002ec8:	08002edb 	.word	0x08002edb
 8002ecc:	08002ed5 	.word	0x08002ed5
 8002ed0:	08002eed 	.word	0x08002eed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed8:	e030      	b.n	8002f3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d025      	beq.n	8002f32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eea:	e022      	b.n	8002f32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ef4:	d11f      	bne.n	8002f36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002efa:	e01c      	b.n	8002f36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d903      	bls.n	8002f0a <DMA_CheckFifoParam+0xb6>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d003      	beq.n	8002f10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f08:	e018      	b.n	8002f3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f0e:	e015      	b.n	8002f3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00e      	beq.n	8002f3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f20:	e00b      	b.n	8002f3a <DMA_CheckFifoParam+0xe6>
      break;
 8002f22:	bf00      	nop
 8002f24:	e00a      	b.n	8002f3c <DMA_CheckFifoParam+0xe8>
      break;
 8002f26:	bf00      	nop
 8002f28:	e008      	b.n	8002f3c <DMA_CheckFifoParam+0xe8>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e006      	b.n	8002f3c <DMA_CheckFifoParam+0xe8>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e004      	b.n	8002f3c <DMA_CheckFifoParam+0xe8>
      break;
 8002f32:	bf00      	nop
 8002f34:	e002      	b.n	8002f3c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f36:	bf00      	nop
 8002f38:	e000      	b.n	8002f3c <DMA_CheckFifoParam+0xe8>
      break;
 8002f3a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	e159      	b.n	800321c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f68:	2201      	movs	r2, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	f040 8148 	bne.w	8003216 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d005      	beq.n	8002f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d130      	bne.n	8003000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 0201 	and.w	r2, r3, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b03      	cmp	r3, #3
 800300a:	d017      	beq.n	800303c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d123      	bne.n	8003090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	08da      	lsrs	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3208      	adds	r2, #8
 8003050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	220f      	movs	r2, #15
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	08da      	lsrs	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3208      	adds	r2, #8
 800308a:	69b9      	ldr	r1, [r7, #24]
 800308c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0203 	and.w	r2, r3, #3
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a2 	beq.w	8003216 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b57      	ldr	r3, [pc, #348]	; (8003234 <HAL_GPIO_Init+0x2e8>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a56      	ldr	r2, [pc, #344]	; (8003234 <HAL_GPIO_Init+0x2e8>)
 80030dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b54      	ldr	r3, [pc, #336]	; (8003234 <HAL_GPIO_Init+0x2e8>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ee:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_GPIO_Init+0x2ec>)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	220f      	movs	r2, #15
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a49      	ldr	r2, [pc, #292]	; (800323c <HAL_GPIO_Init+0x2f0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d019      	beq.n	800314e <HAL_GPIO_Init+0x202>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a48      	ldr	r2, [pc, #288]	; (8003240 <HAL_GPIO_Init+0x2f4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_GPIO_Init+0x1fe>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a47      	ldr	r2, [pc, #284]	; (8003244 <HAL_GPIO_Init+0x2f8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00d      	beq.n	8003146 <HAL_GPIO_Init+0x1fa>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a46      	ldr	r2, [pc, #280]	; (8003248 <HAL_GPIO_Init+0x2fc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <HAL_GPIO_Init+0x1f6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a45      	ldr	r2, [pc, #276]	; (800324c <HAL_GPIO_Init+0x300>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_GPIO_Init+0x1f2>
 800313a:	2304      	movs	r3, #4
 800313c:	e008      	b.n	8003150 <HAL_GPIO_Init+0x204>
 800313e:	2307      	movs	r3, #7
 8003140:	e006      	b.n	8003150 <HAL_GPIO_Init+0x204>
 8003142:	2303      	movs	r3, #3
 8003144:	e004      	b.n	8003150 <HAL_GPIO_Init+0x204>
 8003146:	2302      	movs	r3, #2
 8003148:	e002      	b.n	8003150 <HAL_GPIO_Init+0x204>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_GPIO_Init+0x204>
 800314e:	2300      	movs	r3, #0
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	f002 0203 	and.w	r2, r2, #3
 8003156:	0092      	lsls	r2, r2, #2
 8003158:	4093      	lsls	r3, r2
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003160:	4935      	ldr	r1, [pc, #212]	; (8003238 <HAL_GPIO_Init+0x2ec>)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800316e:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_GPIO_Init+0x304>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003192:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <HAL_GPIO_Init+0x304>)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_GPIO_Init+0x304>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031bc:	4a24      	ldr	r2, [pc, #144]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031e6:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003210:	4a0f      	ldr	r2, [pc, #60]	; (8003250 <HAL_GPIO_Init+0x304>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3301      	adds	r3, #1
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	f67f aea2 	bls.w	8002f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	40013800 	.word	0x40013800
 800323c:	40020000 	.word	0x40020000
 8003240:	40020400 	.word	0x40020400
 8003244:	40020800 	.word	0x40020800
 8003248:	40020c00 	.word	0x40020c00
 800324c:	40021000 	.word	0x40021000
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003264:	787b      	ldrb	r3, [r7, #1]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003270:	e003      	b.n	800327a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	041a      	lsls	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	619a      	str	r2, [r3, #24]
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e264      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d075      	beq.n	8003392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032a6:	4ba3      	ldr	r3, [pc, #652]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d00c      	beq.n	80032cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b2:	4ba0      	ldr	r3, [pc, #640]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d112      	bne.n	80032e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032be:	4b9d      	ldr	r3, [pc, #628]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ca:	d10b      	bne.n	80032e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	4b99      	ldr	r3, [pc, #612]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d05b      	beq.n	8003390 <HAL_RCC_OscConfig+0x108>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d157      	bne.n	8003390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e23f      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ec:	d106      	bne.n	80032fc <HAL_RCC_OscConfig+0x74>
 80032ee:	4b91      	ldr	r3, [pc, #580]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a90      	ldr	r2, [pc, #576]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e01d      	b.n	8003338 <HAL_RCC_OscConfig+0xb0>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003304:	d10c      	bne.n	8003320 <HAL_RCC_OscConfig+0x98>
 8003306:	4b8b      	ldr	r3, [pc, #556]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a8a      	ldr	r2, [pc, #552]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800330c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b88      	ldr	r3, [pc, #544]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a87      	ldr	r2, [pc, #540]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e00b      	b.n	8003338 <HAL_RCC_OscConfig+0xb0>
 8003320:	4b84      	ldr	r3, [pc, #528]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a83      	ldr	r2, [pc, #524]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	4b81      	ldr	r3, [pc, #516]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a80      	ldr	r2, [pc, #512]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d013      	beq.n	8003368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe fcbe 	bl	8001cc0 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003348:	f7fe fcba 	bl	8001cc0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e204      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	4b76      	ldr	r3, [pc, #472]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0xc0>
 8003366:	e014      	b.n	8003392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fcaa 	bl	8001cc0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003370:	f7fe fca6 	bl	8001cc0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e1f0      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0xe8>
 800338e:	e000      	b.n	8003392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d063      	beq.n	8003466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800339e:	4b65      	ldr	r3, [pc, #404]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033aa:	4b62      	ldr	r3, [pc, #392]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d11c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b6:	4b5f      	ldr	r3, [pc, #380]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d116      	bne.n	80033f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	4b5c      	ldr	r3, [pc, #368]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_RCC_OscConfig+0x152>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e1c4      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033da:	4b56      	ldr	r3, [pc, #344]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4952      	ldr	r1, [pc, #328]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	e03a      	b.n	8003466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f8:	4b4f      	ldr	r3, [pc, #316]	; (8003538 <HAL_RCC_OscConfig+0x2b0>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fe fc5f 	bl	8001cc0 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003406:	f7fe fc5b 	bl	8001cc0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e1a5      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003424:	4b43      	ldr	r3, [pc, #268]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4940      	ldr	r1, [pc, #256]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
 8003438:	e015      	b.n	8003466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343a:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <HAL_RCC_OscConfig+0x2b0>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe fc3e 	bl	8001cc0 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003448:	f7fe fc3a 	bl	8001cc0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e184      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	4b36      	ldr	r3, [pc, #216]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d030      	beq.n	80034d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_RCC_OscConfig+0x2b4>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003480:	f7fe fc1e 	bl	8001cc0 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003488:	f7fe fc1a 	bl	8001cc0 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e164      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	4b26      	ldr	r3, [pc, #152]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x200>
 80034a6:	e015      	b.n	80034d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a8:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_OscConfig+0x2b4>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ae:	f7fe fc07 	bl	8001cc0 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b6:	f7fe fc03 	bl	8001cc0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e14d      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a0 	beq.w	8003622 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10f      	bne.n	8003512 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4a0e      	ldr	r2, [pc, #56]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350e:	2301      	movs	r3, #1
 8003510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_OscConfig+0x2b8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d121      	bne.n	8003562 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_RCC_OscConfig+0x2b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_RCC_OscConfig+0x2b8>)
 8003524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352a:	f7fe fbc9 	bl	8001cc0 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003530:	e011      	b.n	8003556 <HAL_RCC_OscConfig+0x2ce>
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
 8003538:	42470000 	.word	0x42470000
 800353c:	42470e80 	.word	0x42470e80
 8003540:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003544:	f7fe fbbc 	bl	8001cc0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e106      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003556:	4b85      	ldr	r3, [pc, #532]	; (800376c <HAL_RCC_OscConfig+0x4e4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x2f0>
 800356a:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	4a80      	ldr	r2, [pc, #512]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6713      	str	r3, [r2, #112]	; 0x70
 8003576:	e01c      	b.n	80035b2 <HAL_RCC_OscConfig+0x32a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b05      	cmp	r3, #5
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x312>
 8003580:	4b7b      	ldr	r3, [pc, #492]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	4a7a      	ldr	r2, [pc, #488]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003586:	f043 0304 	orr.w	r3, r3, #4
 800358a:	6713      	str	r3, [r2, #112]	; 0x70
 800358c:	4b78      	ldr	r3, [pc, #480]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4a77      	ldr	r2, [pc, #476]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
 8003598:	e00b      	b.n	80035b2 <HAL_RCC_OscConfig+0x32a>
 800359a:	4b75      	ldr	r3, [pc, #468]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a74      	ldr	r2, [pc, #464]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	4b72      	ldr	r3, [pc, #456]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a71      	ldr	r2, [pc, #452]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d015      	beq.n	80035e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fe fb81 	bl	8001cc0 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fe fb7d 	bl	8001cc0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0c5      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ee      	beq.n	80035c2 <HAL_RCC_OscConfig+0x33a>
 80035e4:	e014      	b.n	8003610 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e6:	f7fe fb6b 	bl	8001cc0 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fe fb67 	bl	8001cc0 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0af      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003604:	4b5a      	ldr	r3, [pc, #360]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ee      	bne.n	80035ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003616:	4b56      	ldr	r3, [pc, #344]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a55      	ldr	r2, [pc, #340]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003620:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 809b 	beq.w	8003762 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d05c      	beq.n	80036f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d141      	bne.n	80036c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b4c      	ldr	r3, [pc, #304]	; (8003774 <HAL_RCC_OscConfig+0x4ec>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7fe fb3b 	bl	8001cc0 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364e:	f7fe fb37 	bl	8001cc0 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e081      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003660:	4b43      	ldr	r3, [pc, #268]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	019b      	lsls	r3, r3, #6
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	3b01      	subs	r3, #1
 8003686:	041b      	lsls	r3, r3, #16
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	061b      	lsls	r3, r3, #24
 8003690:	4937      	ldr	r1, [pc, #220]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003696:	4b37      	ldr	r3, [pc, #220]	; (8003774 <HAL_RCC_OscConfig+0x4ec>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe fb10 	bl	8001cc0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fe fb0c 	bl	8001cc0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e056      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x41c>
 80036c2:	e04e      	b.n	8003762 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <HAL_RCC_OscConfig+0x4ec>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe faf9 	bl	8001cc0 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fe faf5 	bl	8001cc0 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e03f      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x44a>
 80036f0:	e037      	b.n	8003762 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e032      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <HAL_RCC_OscConfig+0x4e8>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d028      	beq.n	800375e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d121      	bne.n	800375e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d11a      	bne.n	800375e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800372e:	4013      	ands	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003734:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003736:	4293      	cmp	r3, r2
 8003738:	d111      	bne.n	800375e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	3b01      	subs	r3, #1
 8003748:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d107      	bne.n	800375e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d001      	beq.n	8003762 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40007000 	.word	0x40007000
 8003770:	40023800 	.word	0x40023800
 8003774:	42470060 	.word	0x42470060

08003778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0cc      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800378c:	4b68      	ldr	r3, [pc, #416]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d90c      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b65      	ldr	r3, [pc, #404]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b63      	ldr	r3, [pc, #396]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0b8      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d020      	beq.n	8003802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037cc:	4b59      	ldr	r3, [pc, #356]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a58      	ldr	r2, [pc, #352]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e4:	4b53      	ldr	r3, [pc, #332]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a52      	ldr	r2, [pc, #328]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f0:	4b50      	ldr	r3, [pc, #320]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	494d      	ldr	r1, [pc, #308]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d044      	beq.n	8003898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d107      	bne.n	8003826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	4b47      	ldr	r3, [pc, #284]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d119      	bne.n	8003856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e07f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d003      	beq.n	8003836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003832:	2b03      	cmp	r3, #3
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003836:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e06f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003846:	4b3b      	ldr	r3, [pc, #236]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e067      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003856:	4b37      	ldr	r3, [pc, #220]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f023 0203 	bic.w	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4934      	ldr	r1, [pc, #208]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003868:	f7fe fa2a 	bl	8001cc0 <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	e00a      	b.n	8003886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003870:	f7fe fa26 	bl	8001cc0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e04f      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 020c 	and.w	r2, r3, #12
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	429a      	cmp	r2, r3
 8003896:	d1eb      	bne.n	8003870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d20c      	bcs.n	80038c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b22      	ldr	r3, [pc, #136]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e032      	b.n	8003926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4916      	ldr	r1, [pc, #88]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	490e      	ldr	r1, [pc, #56]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038fe:	f000 f821 	bl	8003944 <HAL_RCC_GetSysClockFreq>
 8003902:	4602      	mov	r2, r0
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	490a      	ldr	r1, [pc, #40]	; (8003938 <HAL_RCC_ClockConfig+0x1c0>)
 8003910:	5ccb      	ldrb	r3, [r1, r3]
 8003912:	fa22 f303 	lsr.w	r3, r2, r3
 8003916:	4a09      	ldr	r2, [pc, #36]	; (800393c <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800391a:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe f98a 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023c00 	.word	0x40023c00
 8003934:	40023800 	.word	0x40023800
 8003938:	08006e50 	.word	0x08006e50
 800393c:	20000000 	.word	0x20000000
 8003940:	20000004 	.word	0x20000004

08003944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800394a:	2100      	movs	r1, #0
 800394c:	6079      	str	r1, [r7, #4]
 800394e:	2100      	movs	r1, #0
 8003950:	60f9      	str	r1, [r7, #12]
 8003952:	2100      	movs	r1, #0
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003956:	2100      	movs	r1, #0
 8003958:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800395a:	4952      	ldr	r1, [pc, #328]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 800395c:	6889      	ldr	r1, [r1, #8]
 800395e:	f001 010c 	and.w	r1, r1, #12
 8003962:	2908      	cmp	r1, #8
 8003964:	d00d      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x3e>
 8003966:	2908      	cmp	r1, #8
 8003968:	f200 8094 	bhi.w	8003a94 <HAL_RCC_GetSysClockFreq+0x150>
 800396c:	2900      	cmp	r1, #0
 800396e:	d002      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0x32>
 8003970:	2904      	cmp	r1, #4
 8003972:	d003      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x38>
 8003974:	e08e      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003976:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003978:	60bb      	str	r3, [r7, #8]
       break;
 800397a:	e08e      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <HAL_RCC_GetSysClockFreq+0x168>)
 800397e:	60bb      	str	r3, [r7, #8]
      break;
 8003980:	e08b      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003982:	4948      	ldr	r1, [pc, #288]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003984:	6849      	ldr	r1, [r1, #4]
 8003986:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800398a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800398c:	4945      	ldr	r1, [pc, #276]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 800398e:	6849      	ldr	r1, [r1, #4]
 8003990:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003994:	2900      	cmp	r1, #0
 8003996:	d024      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003998:	4942      	ldr	r1, [pc, #264]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 800399a:	6849      	ldr	r1, [r1, #4]
 800399c:	0989      	lsrs	r1, r1, #6
 800399e:	4608      	mov	r0, r1
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80039a8:	f04f 0500 	mov.w	r5, #0
 80039ac:	ea00 0204 	and.w	r2, r0, r4
 80039b0:	ea01 0305 	and.w	r3, r1, r5
 80039b4:	493d      	ldr	r1, [pc, #244]	; (8003aac <HAL_RCC_GetSysClockFreq+0x168>)
 80039b6:	fb01 f003 	mul.w	r0, r1, r3
 80039ba:	2100      	movs	r1, #0
 80039bc:	fb01 f102 	mul.w	r1, r1, r2
 80039c0:	1844      	adds	r4, r0, r1
 80039c2:	493a      	ldr	r1, [pc, #232]	; (8003aac <HAL_RCC_GetSysClockFreq+0x168>)
 80039c4:	fba2 0101 	umull	r0, r1, r2, r1
 80039c8:	1863      	adds	r3, r4, r1
 80039ca:	4619      	mov	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	f7fc ff8a 	bl	80008ec <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4613      	mov	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e04a      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e2:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	461a      	mov	r2, r3
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039f2:	f04f 0100 	mov.w	r1, #0
 80039f6:	ea02 0400 	and.w	r4, r2, r0
 80039fa:	ea03 0501 	and.w	r5, r3, r1
 80039fe:	4620      	mov	r0, r4
 8003a00:	4629      	mov	r1, r5
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	014b      	lsls	r3, r1, #5
 8003a0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a10:	0142      	lsls	r2, r0, #5
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	1b00      	subs	r0, r0, r4
 8003a18:	eb61 0105 	sbc.w	r1, r1, r5
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	018b      	lsls	r3, r1, #6
 8003a26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a2a:	0182      	lsls	r2, r0, #6
 8003a2c:	1a12      	subs	r2, r2, r0
 8003a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a32:	f04f 0000 	mov.w	r0, #0
 8003a36:	f04f 0100 	mov.w	r1, #0
 8003a3a:	00d9      	lsls	r1, r3, #3
 8003a3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a40:	00d0      	lsls	r0, r2, #3
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	1912      	adds	r2, r2, r4
 8003a48:	eb45 0303 	adc.w	r3, r5, r3
 8003a4c:	f04f 0000 	mov.w	r0, #0
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	0299      	lsls	r1, r3, #10
 8003a56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a5a:	0290      	lsls	r0, r2, #10
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	f7fc ff3e 	bl	80008ec <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4613      	mov	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	3301      	adds	r3, #1
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	60bb      	str	r3, [r7, #8]
      break;
 8003a92:	e002      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a96:	60bb      	str	r3, [r7, #8]
      break;
 8003a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	00f42400 	.word	0x00f42400
 8003aac:	017d7840 	.word	0x017d7840

08003ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20000000 	.word	0x20000000

08003ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003acc:	f7ff fff0 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	0a9b      	lsrs	r3, r3, #10
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	4903      	ldr	r1, [pc, #12]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	08006e60 	.word	0x08006e60

08003af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003af4:	f7ff ffdc 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0b5b      	lsrs	r3, r3, #13
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4903      	ldr	r1, [pc, #12]	; (8003b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40023800 	.word	0x40023800
 8003b14:	08006e60 	.word	0x08006e60

08003b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07b      	b.n	8003c22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3a:	d009      	beq.n	8003b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	61da      	str	r2, [r3, #28]
 8003b42:	e005      	b.n	8003b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fb70 	bl	8001250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd4:	ea42 0103 	orr.w	r1, r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	0c1b      	lsrs	r3, r3, #16
 8003bee:	f003 0104 	and.w	r1, r3, #4
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 0210 	and.w	r2, r3, #16
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e041      	b.n	8003cc0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7fd fe51 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f000 fb7d 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d001      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e044      	b.n	8003d6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <HAL_TIM_Base_Start_IT+0xb0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x6c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0a:	d013      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x6c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1a      	ldr	r2, [pc, #104]	; (8003d7c <HAL_TIM_Base_Start_IT+0xb4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x6c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <HAL_TIM_Base_Start_IT+0xb8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x6c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x6c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d111      	bne.n	8003d58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d010      	beq.n	8003d68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d56:	e007      	b.n	8003d68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800
 8003d84:	40000c00 	.word	0x40000c00
 8003d88:	40014000 	.word	0x40014000

08003d8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e041      	b.n	8003e22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fd fc66 	bl	8001684 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f000 facc 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_TIM_PWM_Start+0x24>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	bf14      	ite	ne
 8003e48:	2301      	movne	r3, #1
 8003e4a:	2300      	moveq	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e022      	b.n	8003e96 <HAL_TIM_PWM_Start+0x6a>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d109      	bne.n	8003e6a <HAL_TIM_PWM_Start+0x3e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	bf14      	ite	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	2300      	moveq	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	e015      	b.n	8003e96 <HAL_TIM_PWM_Start+0x6a>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d109      	bne.n	8003e84 <HAL_TIM_PWM_Start+0x58>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	bf14      	ite	ne
 8003e7c:	2301      	movne	r3, #1
 8003e7e:	2300      	moveq	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	e008      	b.n	8003e96 <HAL_TIM_PWM_Start+0x6a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	bf14      	ite	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	2300      	moveq	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e068      	b.n	8003f70 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start+0x82>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eac:	e013      	b.n	8003ed6 <HAL_TIM_PWM_Start+0xaa>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_PWM_Start+0x92>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ebc:	e00b      	b.n	8003ed6 <HAL_TIM_PWM_Start+0xaa>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d104      	bne.n	8003ece <HAL_TIM_PWM_Start+0xa2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ecc:	e003      	b.n	8003ed6 <HAL_TIM_PWM_Start+0xaa>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2201      	movs	r2, #1
 8003edc:	6839      	ldr	r1, [r7, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fc4e 	bl	8004780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <HAL_TIM_PWM_Start+0x14c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d107      	bne.n	8003efe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003efc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <HAL_TIM_PWM_Start+0x14c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <HAL_TIM_PWM_Start+0x10e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f10:	d013      	beq.n	8003f3a <HAL_TIM_PWM_Start+0x10e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <HAL_TIM_PWM_Start+0x150>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_TIM_PWM_Start+0x10e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <HAL_TIM_PWM_Start+0x154>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_TIM_PWM_Start+0x10e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <HAL_TIM_PWM_Start+0x158>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_TIM_PWM_Start+0x10e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <HAL_TIM_PWM_Start+0x15c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d111      	bne.n	8003f5e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b06      	cmp	r3, #6
 8003f4a:	d010      	beq.n	8003f6e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5c:	e007      	b.n	8003f6e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 0201 	orr.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40014000 	.word	0x40014000

08003f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d122      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d11b      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0202 	mvn.w	r2, #2
 8003fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f9ac 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f99e 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f9af 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d122      	bne.n	800403c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b04      	cmp	r3, #4
 8004002:	d11b      	bne.n	800403c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0204 	mvn.w	r2, #4
 800400c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f982 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 8004028:	e005      	b.n	8004036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f974 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f985 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b08      	cmp	r3, #8
 8004048:	d122      	bne.n	8004090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b08      	cmp	r3, #8
 8004056:	d11b      	bne.n	8004090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0208 	mvn.w	r2, #8
 8004060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2204      	movs	r2, #4
 8004066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f958 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f94a 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f95b 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b10      	cmp	r3, #16
 800409c:	d122      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d11b      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0210 	mvn.w	r2, #16
 80040b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2208      	movs	r2, #8
 80040ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f92e 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 80040d0:	e005      	b.n	80040de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f920 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f931 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d10e      	bne.n	8004110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d107      	bne.n	8004110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0201 	mvn.w	r2, #1
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc ff18 	bl	8000f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b80      	cmp	r3, #128	; 0x80
 800411c:	d10e      	bne.n	800413c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b80      	cmp	r3, #128	; 0x80
 800412a:	d107      	bne.n	800413c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fbc0 	bl	80048bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b40      	cmp	r3, #64	; 0x40
 8004148:	d10e      	bne.n	8004168 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d107      	bne.n	8004168 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f8f6 	bl	8004354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b20      	cmp	r3, #32
 8004174:	d10e      	bne.n	8004194 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b20      	cmp	r3, #32
 8004182:	d107      	bne.n	8004194 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0220 	mvn.w	r2, #32
 800418c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fb8a 	bl	80048a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e0ac      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x174>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	f200 809f 	bhi.w	8004304 <HAL_TIM_PWM_ConfigChannel+0x168>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004305 	.word	0x08004305
 80041d4:	08004305 	.word	0x08004305
 80041d8:	08004305 	.word	0x08004305
 80041dc:	08004241 	.word	0x08004241
 80041e0:	08004305 	.word	0x08004305
 80041e4:	08004305 	.word	0x08004305
 80041e8:	08004305 	.word	0x08004305
 80041ec:	08004283 	.word	0x08004283
 80041f0:	08004305 	.word	0x08004305
 80041f4:	08004305 	.word	0x08004305
 80041f8:	08004305 	.word	0x08004305
 80041fc:	080042c3 	.word	0x080042c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	4618      	mov	r0, r3
 8004208:	f000 f92e 	bl	8004468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0208 	orr.w	r2, r2, #8
 800421a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0204 	bic.w	r2, r2, #4
 800422a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6999      	ldr	r1, [r3, #24]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	619a      	str	r2, [r3, #24]
      break;
 800423e:	e062      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f974 	bl	8004534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800425a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6999      	ldr	r1, [r3, #24]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	619a      	str	r2, [r3, #24]
      break;
 8004280:	e041      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	4618      	mov	r0, r3
 800428a:	f000 f9bf 	bl	800460c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0208 	orr.w	r2, r2, #8
 800429c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0204 	bic.w	r2, r2, #4
 80042ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69d9      	ldr	r1, [r3, #28]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	61da      	str	r2, [r3, #28]
      break;
 80042c0:	e021      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fa09 	bl	80046e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69d9      	ldr	r1, [r3, #28]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	021a      	lsls	r2, r3, #8
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	61da      	str	r2, [r3, #28]
      break;
 8004302:	e000      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a34      	ldr	r2, [pc, #208]	; (800444c <TIM_Base_SetConfig+0xe4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00f      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004386:	d00b      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a31      	ldr	r2, [pc, #196]	; (8004450 <TIM_Base_SetConfig+0xe8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d007      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a30      	ldr	r2, [pc, #192]	; (8004454 <TIM_Base_SetConfig+0xec>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_Base_SetConfig+0x38>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a2f      	ldr	r2, [pc, #188]	; (8004458 <TIM_Base_SetConfig+0xf0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d108      	bne.n	80043b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a25      	ldr	r2, [pc, #148]	; (800444c <TIM_Base_SetConfig+0xe4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01b      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c0:	d017      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a22      	ldr	r2, [pc, #136]	; (8004450 <TIM_Base_SetConfig+0xe8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a21      	ldr	r2, [pc, #132]	; (8004454 <TIM_Base_SetConfig+0xec>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00f      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a20      	ldr	r2, [pc, #128]	; (8004458 <TIM_Base_SetConfig+0xf0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a1f      	ldr	r2, [pc, #124]	; (800445c <TIM_Base_SetConfig+0xf4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <TIM_Base_SetConfig+0xf8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_Base_SetConfig+0x8a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <TIM_Base_SetConfig+0xfc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d108      	bne.n	8004404 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a08      	ldr	r2, [pc, #32]	; (800444c <TIM_Base_SetConfig+0xe4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d103      	bne.n	8004438 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	615a      	str	r2, [r3, #20]
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40010000 	.word	0x40010000
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800
 8004458:	40000c00 	.word	0x40000c00
 800445c:	40014000 	.word	0x40014000
 8004460:	40014400 	.word	0x40014400
 8004464:	40014800 	.word	0x40014800

08004468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0302 	bic.w	r3, r3, #2
 80044b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <TIM_OC1_SetConfig+0xc8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10c      	bne.n	80044de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0308 	bic.w	r3, r3, #8
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 0304 	bic.w	r3, r3, #4
 80044dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a13      	ldr	r2, [pc, #76]	; (8004530 <TIM_OC1_SetConfig+0xc8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d111      	bne.n	800450a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	621a      	str	r2, [r3, #32]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40010000 	.word	0x40010000

08004534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0210 	bic.w	r2, r3, #16
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0320 	bic.w	r3, r3, #32
 800457e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <TIM_OC2_SetConfig+0xd4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10d      	bne.n	80045b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a15      	ldr	r2, [pc, #84]	; (8004608 <TIM_OC2_SetConfig+0xd4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d113      	bne.n	80045e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40010000 	.word	0x40010000

0800460c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0303 	bic.w	r3, r3, #3
 8004642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <TIM_OC3_SetConfig+0xd0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10d      	bne.n	8004686 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a14      	ldr	r2, [pc, #80]	; (80046dc <TIM_OC3_SetConfig+0xd0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d113      	bne.n	80046b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800469c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	621a      	str	r2, [r3, #32]
}
 80046d0:	bf00      	nop
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	40010000 	.word	0x40010000

080046e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800472a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	031b      	lsls	r3, r3, #12
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a10      	ldr	r2, [pc, #64]	; (800477c <TIM_OC4_SetConfig+0x9c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d109      	bne.n	8004754 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	019b      	lsls	r3, r3, #6
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000

08004780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	2201      	movs	r2, #1
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1a      	ldr	r2, [r3, #32]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	401a      	ands	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	fa01 f303 	lsl.w	r3, r1, r3
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e050      	b.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d018      	beq.n	800485a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d013      	beq.n	800485a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00e      	beq.n	800485a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d009      	beq.n	800485a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d10c      	bne.n	8004874 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	4313      	orrs	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40010000 	.word	0x40010000
 8004898:	40000400 	.word	0x40000400
 800489c:	40000800 	.word	0x40000800
 80048a0:	40000c00 	.word	0x40000c00
 80048a4:	40014000 	.word	0x40014000

080048a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e03f      	b.n	8004962 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd f8ae 	bl	8001a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2224      	movs	r2, #36	; 0x24
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fc99 	bl	800524c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	4613      	mov	r3, r2
 8004976:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b20      	cmp	r3, #32
 8004982:	d11d      	bne.n	80049c0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_UART_Receive_DMA+0x26>
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e016      	b.n	80049c2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Receive_DMA+0x38>
 800499e:	2302      	movs	r3, #2
 80049a0:	e00f      	b.n	80049c2 <HAL_UART_Receive_DMA+0x58>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	461a      	mov	r2, r3
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fa8e 	bl	8004ed8 <UART_Start_Receive_DMA>
 80049bc:	4603      	mov	r3, r0
 80049be:	e000      	b.n	80049c2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
  }
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10d      	bne.n	8004a1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_UART_IRQHandler+0x52>
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fb81 	bl	800511e <UART_Receive_IT>
      return;
 8004a1c:	e17c      	b.n	8004d18 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80b1 	beq.w	8004b88 <HAL_UART_IRQHandler+0x1bc>
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d105      	bne.n	8004a3c <HAL_UART_IRQHandler+0x70>
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80a6 	beq.w	8004b88 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_UART_IRQHandler+0x90>
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_UART_IRQHandler+0xb0>
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f043 0202 	orr.w	r2, r3, #2
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_UART_IRQHandler+0xd0>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	f043 0204 	orr.w	r2, r3, #4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00f      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xfa>
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d104      	bne.n	8004aba <HAL_UART_IRQHandler+0xee>
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f043 0208 	orr.w	r2, r3, #8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 811f 	beq.w	8004d0e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <HAL_UART_IRQHandler+0x11e>
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fb1a 	bl	800511e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <HAL_UART_IRQHandler+0x146>
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d031      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa5a 	bl	8004fcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d123      	bne.n	8004b6e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695a      	ldr	r2, [r3, #20]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d013      	beq.n	8004b66 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	4a77      	ldr	r2, [pc, #476]	; (8004d20 <HAL_UART_IRQHandler+0x354>)
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fd ff72 	bl	8002a34 <HAL_DMA_Abort_IT>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d016      	beq.n	8004b84 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b60:	4610      	mov	r0, r2
 8004b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	e00e      	b.n	8004b84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f8f0 	bl	8004d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	e00a      	b.n	8004b84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f8ec 	bl	8004d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	e006      	b.n	8004b84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f8e8 	bl	8004d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b82:	e0c4      	b.n	8004d0e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	bf00      	nop
    return;
 8004b86:	e0c2      	b.n	8004d0e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	f040 80a2 	bne.w	8004cd6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 809c 	beq.w	8004cd6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8096 	beq.w	8004cd6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d14f      	bne.n	8004c6e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004bd8:	8a3b      	ldrh	r3, [r7, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8099 	beq.w	8004d12 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004be4:	8a3a      	ldrh	r2, [r7, #16]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	f080 8093 	bcs.w	8004d12 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8a3a      	ldrh	r2, [r7, #16]
 8004bf0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfc:	d02b      	beq.n	8004c56 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c0c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695a      	ldr	r2, [r3, #20]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695a      	ldr	r2, [r3, #20]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0210 	bic.w	r2, r2, #16
 8004c4a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fd fe7f 	bl	8002954 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f87a 	bl	8004d60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004c6c:	e051      	b.n	8004d12 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d047      	beq.n	8004d16 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004c86:	8a7b      	ldrh	r3, [r7, #18]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d044      	beq.n	8004d16 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c9a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695a      	ldr	r2, [r3, #20]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0210 	bic.w	r2, r2, #16
 8004cc8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cca:	8a7b      	ldrh	r3, [r7, #18]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f846 	bl	8004d60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004cd4:	e01f      	b.n	8004d16 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x326>
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9af 	bl	800504e <UART_Transmit_IT>
    return;
 8004cf0:	e012      	b.n	8004d18 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00d      	beq.n	8004d18 <HAL_UART_IRQHandler+0x34c>
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f9f1 	bl	80050ee <UART_EndTransmit_IT>
    return;
 8004d0c:	e004      	b.n	8004d18 <HAL_UART_IRQHandler+0x34c>
    return;
 8004d0e:	bf00      	nop
 8004d10:	e002      	b.n	8004d18 <HAL_UART_IRQHandler+0x34c>
      return;
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <HAL_UART_IRQHandler+0x34c>
      return;
 8004d16:	bf00      	nop
  }
}
 8004d18:	3728      	adds	r7, #40	; 0x28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	08005027 	.word	0x08005027

08004d24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d12a      	bne.n	8004dea <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004da8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d107      	bne.n	8004dea <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0210 	bic.w	r2, r2, #16
 8004de8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d106      	bne.n	8004e00 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004df6:	4619      	mov	r1, r3
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff ffb1 	bl	8004d60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dfe:	e002      	b.n	8004e06 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7fc f90b 	bl	800101c <HAL_UART_RxCpltCallback>
}
 8004e06:	bf00      	nop
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d108      	bne.n	8004e36 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff ff96 	bl	8004d60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e34:	e002      	b.n	8004e3c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff ff7e 	bl	8004d38 <HAL_UART_RxHalfCpltCallback>
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e60:	2b80      	cmp	r3, #128	; 0x80
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b21      	cmp	r3, #33	; 0x21
 8004e76:	d108      	bne.n	8004e8a <UART_DMAError+0x46>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2200      	movs	r2, #0
 8004e82:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004e84:	68b8      	ldr	r0, [r7, #8]
 8004e86:	f000 f88b 	bl	8004fa0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b22      	cmp	r3, #34	; 0x22
 8004eaa:	d108      	bne.n	8004ebe <UART_DMAError+0x7a>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004eb8:	68b8      	ldr	r0, [r7, #8]
 8004eba:	f000 f887 	bl	8004fcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f043 0210 	orr.w	r2, r3, #16
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eca:	68b8      	ldr	r0, [r7, #8]
 8004ecc:	f7ff ff3e 	bl	8004d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed0:	bf00      	nop
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	88fa      	ldrh	r2, [r7, #6]
 8004ef0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2222      	movs	r2, #34	; 0x22
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	4a23      	ldr	r2, [pc, #140]	; (8004f94 <UART_Start_Receive_DMA+0xbc>)
 8004f06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	4a22      	ldr	r2, [pc, #136]	; (8004f98 <UART_Start_Receive_DMA+0xc0>)
 8004f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	4a21      	ldr	r2, [pc, #132]	; (8004f9c <UART_Start_Receive_DMA+0xc4>)
 8004f16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004f20:	f107 0308 	add.w	r3, r7, #8
 8004f24:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	f7fd fcb4 	bl	80028a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f68:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695a      	ldr	r2, [r3, #20]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f88:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	08004d79 	.word	0x08004d79
 8004f98:	08004e0f 	.word	0x08004e0f
 8004f9c:	08004e45 	.word	0x08004e45

08004fa0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004fb6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fe2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0210 	bic.w	r2, r2, #16
 800500a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff fe83 	bl	8004d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005046:	bf00      	nop
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800504e:	b480      	push	{r7}
 8005050:	b085      	sub	sp, #20
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b21      	cmp	r3, #33	; 0x21
 8005060:	d13e      	bne.n	80050e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506a:	d114      	bne.n	8005096 <UART_Transmit_IT+0x48>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d110      	bne.n	8005096 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005088:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	1c9a      	adds	r2, r3, #2
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	621a      	str	r2, [r3, #32]
 8005094:	e008      	b.n	80050a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	1c59      	adds	r1, r3, #1
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6211      	str	r1, [r2, #32]
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	4619      	mov	r1, r3
 80050b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10f      	bne.n	80050dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	e000      	b.n	80050e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
  }
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005104:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fe08 	bl	8004d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b22      	cmp	r3, #34	; 0x22
 8005130:	f040 8087 	bne.w	8005242 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513c:	d117      	bne.n	800516e <UART_Receive_IT+0x50>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d113      	bne.n	800516e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515c:	b29a      	uxth	r2, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	1c9a      	adds	r2, r3, #2
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	; 0x28
 800516c:	e026      	b.n	80051bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005174:	2300      	movs	r3, #0
 8005176:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005180:	d007      	beq.n	8005192 <UART_Receive_IT+0x74>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10a      	bne.n	80051a0 <UART_Receive_IT+0x82>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e008      	b.n	80051b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4619      	mov	r1, r3
 80051ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d136      	bne.n	800523e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0220 	bic.w	r2, r2, #32
 80051de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10e      	bne.n	800522e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0210 	bic.w	r2, r2, #16
 800521e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005224:	4619      	mov	r1, r3
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff fd9a 	bl	8004d60 <HAL_UARTEx_RxEventCallback>
 800522c:	e002      	b.n	8005234 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7fb fef4 	bl	800101c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	e002      	b.n	8005244 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e000      	b.n	8005244 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005242:	2302      	movs	r3, #2
  }
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005250:	b09f      	sub	sp, #124	; 0x7c
 8005252:	af00      	add	r7, sp, #0
 8005254:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005262:	68d9      	ldr	r1, [r3, #12]
 8005264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	ea40 0301 	orr.w	r3, r0, r1
 800526c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800526e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	431a      	orrs	r2, r3
 8005278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	431a      	orrs	r2, r3
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	4313      	orrs	r3, r2
 8005284:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005290:	f021 010c 	bic.w	r1, r1, #12
 8005294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529a:	430b      	orrs	r3, r1
 800529c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800529e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052aa:	6999      	ldr	r1, [r3, #24]
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	ea40 0301 	orr.w	r3, r0, r1
 80052b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4bc5      	ldr	r3, [pc, #788]	; (80055d0 <UART_SetConfig+0x384>)
 80052bc:	429a      	cmp	r2, r3
 80052be:	d004      	beq.n	80052ca <UART_SetConfig+0x7e>
 80052c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	4bc3      	ldr	r3, [pc, #780]	; (80055d4 <UART_SetConfig+0x388>)
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d103      	bne.n	80052d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052ca:	f7fe fc11 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 80052ce:	6778      	str	r0, [r7, #116]	; 0x74
 80052d0:	e002      	b.n	80052d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052d2:	f7fe fbf9 	bl	8003ac8 <HAL_RCC_GetPCLK1Freq>
 80052d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e0:	f040 80b6 	bne.w	8005450 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e6:	461c      	mov	r4, r3
 80052e8:	f04f 0500 	mov.w	r5, #0
 80052ec:	4622      	mov	r2, r4
 80052ee:	462b      	mov	r3, r5
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	6439      	str	r1, [r7, #64]	; 0x40
 80052f4:	415b      	adcs	r3, r3
 80052f6:	647b      	str	r3, [r7, #68]	; 0x44
 80052f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052fc:	1912      	adds	r2, r2, r4
 80052fe:	eb45 0303 	adc.w	r3, r5, r3
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f04f 0100 	mov.w	r1, #0
 800530a:	00d9      	lsls	r1, r3, #3
 800530c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005310:	00d0      	lsls	r0, r2, #3
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	1911      	adds	r1, r2, r4
 8005318:	6639      	str	r1, [r7, #96]	; 0x60
 800531a:	416b      	adcs	r3, r5
 800531c:	667b      	str	r3, [r7, #100]	; 0x64
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	461a      	mov	r2, r3
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	1891      	adds	r1, r2, r2
 800532a:	63b9      	str	r1, [r7, #56]	; 0x38
 800532c:	415b      	adcs	r3, r3
 800532e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005334:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005338:	f7fb fad8 	bl	80008ec <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4ba5      	ldr	r3, [pc, #660]	; (80055d8 <UART_SetConfig+0x38c>)
 8005342:	fba3 2302 	umull	r2, r3, r3, r2
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	011e      	lsls	r6, r3, #4
 800534a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800534c:	461c      	mov	r4, r3
 800534e:	f04f 0500 	mov.w	r5, #0
 8005352:	4622      	mov	r2, r4
 8005354:	462b      	mov	r3, r5
 8005356:	1891      	adds	r1, r2, r2
 8005358:	6339      	str	r1, [r7, #48]	; 0x30
 800535a:	415b      	adcs	r3, r3
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
 800535e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005362:	1912      	adds	r2, r2, r4
 8005364:	eb45 0303 	adc.w	r3, r5, r3
 8005368:	f04f 0000 	mov.w	r0, #0
 800536c:	f04f 0100 	mov.w	r1, #0
 8005370:	00d9      	lsls	r1, r3, #3
 8005372:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005376:	00d0      	lsls	r0, r2, #3
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	1911      	adds	r1, r2, r4
 800537e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005380:	416b      	adcs	r3, r5
 8005382:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	461a      	mov	r2, r3
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	1891      	adds	r1, r2, r2
 8005390:	62b9      	str	r1, [r7, #40]	; 0x28
 8005392:	415b      	adcs	r3, r3
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800539a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800539e:	f7fb faa5 	bl	80008ec <__aeabi_uldivmod>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4b8c      	ldr	r3, [pc, #560]	; (80055d8 <UART_SetConfig+0x38c>)
 80053a8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	2164      	movs	r1, #100	; 0x64
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	3332      	adds	r3, #50	; 0x32
 80053ba:	4a87      	ldr	r2, [pc, #540]	; (80055d8 <UART_SetConfig+0x38c>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053c8:	441e      	add	r6, r3
 80053ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053cc:	4618      	mov	r0, r3
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	1894      	adds	r4, r2, r2
 80053d8:	623c      	str	r4, [r7, #32]
 80053da:	415b      	adcs	r3, r3
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
 80053de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053e2:	1812      	adds	r2, r2, r0
 80053e4:	eb41 0303 	adc.w	r3, r1, r3
 80053e8:	f04f 0400 	mov.w	r4, #0
 80053ec:	f04f 0500 	mov.w	r5, #0
 80053f0:	00dd      	lsls	r5, r3, #3
 80053f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053f6:	00d4      	lsls	r4, r2, #3
 80053f8:	4622      	mov	r2, r4
 80053fa:	462b      	mov	r3, r5
 80053fc:	1814      	adds	r4, r2, r0
 80053fe:	653c      	str	r4, [r7, #80]	; 0x50
 8005400:	414b      	adcs	r3, r1
 8005402:	657b      	str	r3, [r7, #84]	; 0x54
 8005404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	461a      	mov	r2, r3
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	1891      	adds	r1, r2, r2
 8005410:	61b9      	str	r1, [r7, #24]
 8005412:	415b      	adcs	r3, r3
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800541a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800541e:	f7fb fa65 	bl	80008ec <__aeabi_uldivmod>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4b6c      	ldr	r3, [pc, #432]	; (80055d8 <UART_SetConfig+0x38c>)
 8005428:	fba3 1302 	umull	r1, r3, r3, r2
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	2164      	movs	r1, #100	; 0x64
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	3332      	adds	r3, #50	; 0x32
 800543a:	4a67      	ldr	r2, [pc, #412]	; (80055d8 <UART_SetConfig+0x38c>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f003 0207 	and.w	r2, r3, #7
 8005446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4432      	add	r2, r6
 800544c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800544e:	e0b9      	b.n	80055c4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005452:	461c      	mov	r4, r3
 8005454:	f04f 0500 	mov.w	r5, #0
 8005458:	4622      	mov	r2, r4
 800545a:	462b      	mov	r3, r5
 800545c:	1891      	adds	r1, r2, r2
 800545e:	6139      	str	r1, [r7, #16]
 8005460:	415b      	adcs	r3, r3
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005468:	1912      	adds	r2, r2, r4
 800546a:	eb45 0303 	adc.w	r3, r5, r3
 800546e:	f04f 0000 	mov.w	r0, #0
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	00d9      	lsls	r1, r3, #3
 8005478:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800547c:	00d0      	lsls	r0, r2, #3
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	eb12 0804 	adds.w	r8, r2, r4
 8005486:	eb43 0905 	adc.w	r9, r3, r5
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	008b      	lsls	r3, r1, #2
 800549e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054a2:	0082      	lsls	r2, r0, #2
 80054a4:	4640      	mov	r0, r8
 80054a6:	4649      	mov	r1, r9
 80054a8:	f7fb fa20 	bl	80008ec <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4b49      	ldr	r3, [pc, #292]	; (80055d8 <UART_SetConfig+0x38c>)
 80054b2:	fba3 2302 	umull	r2, r3, r3, r2
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	011e      	lsls	r6, r3, #4
 80054ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054bc:	4618      	mov	r0, r3
 80054be:	f04f 0100 	mov.w	r1, #0
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	1894      	adds	r4, r2, r2
 80054c8:	60bc      	str	r4, [r7, #8]
 80054ca:	415b      	adcs	r3, r3
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054d2:	1812      	adds	r2, r2, r0
 80054d4:	eb41 0303 	adc.w	r3, r1, r3
 80054d8:	f04f 0400 	mov.w	r4, #0
 80054dc:	f04f 0500 	mov.w	r5, #0
 80054e0:	00dd      	lsls	r5, r3, #3
 80054e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054e6:	00d4      	lsls	r4, r2, #3
 80054e8:	4622      	mov	r2, r4
 80054ea:	462b      	mov	r3, r5
 80054ec:	1814      	adds	r4, r2, r0
 80054ee:	64bc      	str	r4, [r7, #72]	; 0x48
 80054f0:	414b      	adcs	r3, r1
 80054f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f04f 0100 	mov.w	r1, #0
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	008b      	lsls	r3, r1, #2
 8005508:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800550c:	0082      	lsls	r2, r0, #2
 800550e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005512:	f7fb f9eb 	bl	80008ec <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4b2f      	ldr	r3, [pc, #188]	; (80055d8 <UART_SetConfig+0x38c>)
 800551c:	fba3 1302 	umull	r1, r3, r3, r2
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	2164      	movs	r1, #100	; 0x64
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	3332      	adds	r3, #50	; 0x32
 800552e:	4a2a      	ldr	r2, [pc, #168]	; (80055d8 <UART_SetConfig+0x38c>)
 8005530:	fba2 2303 	umull	r2, r3, r2, r3
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800553a:	441e      	add	r6, r3
 800553c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800553e:	4618      	mov	r0, r3
 8005540:	f04f 0100 	mov.w	r1, #0
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	1894      	adds	r4, r2, r2
 800554a:	603c      	str	r4, [r7, #0]
 800554c:	415b      	adcs	r3, r3
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005554:	1812      	adds	r2, r2, r0
 8005556:	eb41 0303 	adc.w	r3, r1, r3
 800555a:	f04f 0400 	mov.w	r4, #0
 800555e:	f04f 0500 	mov.w	r5, #0
 8005562:	00dd      	lsls	r5, r3, #3
 8005564:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005568:	00d4      	lsls	r4, r2, #3
 800556a:	4622      	mov	r2, r4
 800556c:	462b      	mov	r3, r5
 800556e:	eb12 0a00 	adds.w	sl, r2, r0
 8005572:	eb43 0b01 	adc.w	fp, r3, r1
 8005576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	4618      	mov	r0, r3
 800557c:	f04f 0100 	mov.w	r1, #0
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	008b      	lsls	r3, r1, #2
 800558a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800558e:	0082      	lsls	r2, r0, #2
 8005590:	4650      	mov	r0, sl
 8005592:	4659      	mov	r1, fp
 8005594:	f7fb f9aa 	bl	80008ec <__aeabi_uldivmod>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <UART_SetConfig+0x38c>)
 800559e:	fba3 1302 	umull	r1, r3, r3, r2
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	2164      	movs	r1, #100	; 0x64
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	3332      	adds	r3, #50	; 0x32
 80055b0:	4a09      	ldr	r2, [pc, #36]	; (80055d8 <UART_SetConfig+0x38c>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	f003 020f 	and.w	r2, r3, #15
 80055bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4432      	add	r2, r6
 80055c2:	609a      	str	r2, [r3, #8]
}
 80055c4:	bf00      	nop
 80055c6:	377c      	adds	r7, #124	; 0x7c
 80055c8:	46bd      	mov	sp, r7
 80055ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ce:	bf00      	nop
 80055d0:	40011000 	.word	0x40011000
 80055d4:	40011400 	.word	0x40011400
 80055d8:	51eb851f 	.word	0x51eb851f

080055dc <battery_monitor_init>:
uint32_t    battery_adc;
float       battery_voltage;


void battery_monitor_init()
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, &battery_adc, 1);
 80055e0:	2201      	movs	r2, #1
 80055e2:	4904      	ldr	r1, [pc, #16]	; (80055f4 <battery_monitor_init+0x18>)
 80055e4:	4804      	ldr	r0, [pc, #16]	; (80055f8 <battery_monitor_init+0x1c>)
 80055e6:	f7fc fbdf 	bl	8001da8 <HAL_ADC_Start_DMA>
    HAL_Delay(100);
 80055ea:	2064      	movs	r0, #100	; 0x64
 80055ec:	f7fc fb74 	bl	8001cd8 <HAL_Delay>
}
 80055f0:	bf00      	nop
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000550 	.word	0x20000550
 80055f8:	200000c8 	.word	0x200000c8
 80055fc:	00000000 	.word	0x00000000

08005600 <battery_monitor_read>:

void battery_monitor_read()
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
    battery_voltage = (3.3/4095) * 5.7 * battery_adc;
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <battery_monitor_read+0x38>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f7fb f8a5 	bl	8000758 <__aeabi_ui2d>
 800560e:	a308      	add	r3, pc, #32	; (adr r3, 8005630 <battery_monitor_read+0x30>)
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f7fa fe34 	bl	8000280 <__aeabi_dmul>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4610      	mov	r0, r2
 800561e:	4619      	mov	r1, r3
 8005620:	f7fb f914 	bl	800084c <__aeabi_d2f>
 8005624:	4603      	mov	r3, r0
 8005626:	4a05      	ldr	r2, [pc, #20]	; (800563c <battery_monitor_read+0x3c>)
 8005628:	6013      	str	r3, [r2, #0]
}
 800562a:	bf00      	nop
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	3188db1d 	.word	0x3188db1d
 8005634:	3f72d089 	.word	0x3f72d089
 8005638:	20000550 	.word	0x20000550
 800563c:	2000054c 	.word	0x2000054c

08005640 <buzzer_time>:
{
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, RESET);
}

void buzzer_time(uint16_t ms)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, SET);
 800564a:	2201      	movs	r2, #1
 800564c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005650:	4808      	ldr	r0, [pc, #32]	; (8005674 <buzzer_time+0x34>)
 8005652:	f7fd fdff 	bl	8003254 <HAL_GPIO_WritePin>
    HAL_Delay(ms);
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	4618      	mov	r0, r3
 800565a:	f7fc fb3d 	bl	8001cd8 <HAL_Delay>
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, RESET);
 800565e:	2200      	movs	r2, #0
 8005660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005664:	4803      	ldr	r0, [pc, #12]	; (8005674 <buzzer_time+0x34>)
 8005666:	f7fd fdf5 	bl	8003254 <HAL_GPIO_WritePin>
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40020000 	.word	0x40020000

08005678 <dshot_choose_type>:

uint16_t motor_value[4]; // motor speed value


static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	4603      	mov	r3, r0
 8005680:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d003      	beq.n	8005690 <dshot_choose_type+0x18>
 8005688:	2b02      	cmp	r3, #2
 800568a:	d103      	bne.n	8005694 <dshot_choose_type+0x1c>
	{
	case(DSHOT600):
			return DSHOT600_HZ;
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <dshot_choose_type+0x2c>)
 800568e:	e002      	b.n	8005696 <dshot_choose_type+0x1e>
	case(DSHOT300):
			return DSHOT300_HZ;
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <dshot_choose_type+0x30>)
 8005692:	e000      	b.n	8005696 <dshot_choose_type+0x1e>
	default:
	case(DSHOT150):
			return DSHOT150_HZ;
 8005694:	4b05      	ldr	r3, [pc, #20]	; (80056ac <dshot_choose_type+0x34>)
	}
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	00b71b00 	.word	0x00b71b00
 80056a8:	005b8d80 	.word	0x005b8d80
 80056ac:	002dc6c0 	.word	0x002dc6c0

080056b0 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	ed2d 8b02 	vpush	{d8}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = SystemCoreClock; // all timer clock is same as SystemCoreClock in stm32f411ceu6
 80056be:	4b28      	ldr	r3, [pc, #160]	; (8005760 <dshot_set_timer+0xb0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler that fits dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff ffd1 	bl	8005678 <dshot_choose_type>
 80056d6:	ee07 0a90 	vmov	s15, r0
 80056da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056de:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80056e2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005764 <dshot_set_timer+0xb4>
 80056e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056ea:	eeb0 0a67 	vmov.f32	s0, s15
 80056ee:	f001 fb13 	bl	8006d18 <lrintf>
 80056f2:	4603      	mov	r3, r0
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 80056fa:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <dshot_set_timer+0xb8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	897a      	ldrh	r2, [r7, #10]
 8005700:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8005702:	4b19      	ldr	r3, [pc, #100]	; (8005768 <dshot_set_timer+0xb8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2214      	movs	r2, #20
 8005708:	62da      	str	r2, [r3, #44]	; 0x2c
 800570a:	4b17      	ldr	r3, [pc, #92]	; (8005768 <dshot_set_timer+0xb8>)
 800570c:	2214      	movs	r2, #20
 800570e:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8005710:	4b16      	ldr	r3, [pc, #88]	; (800576c <dshot_set_timer+0xbc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	897a      	ldrh	r2, [r7, #10]
 8005716:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8005718:	4b14      	ldr	r3, [pc, #80]	; (800576c <dshot_set_timer+0xbc>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2214      	movs	r2, #20
 800571e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005720:	4b12      	ldr	r3, [pc, #72]	; (800576c <dshot_set_timer+0xbc>)
 8005722:	2214      	movs	r2, #20
 8005724:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8005726:	4b11      	ldr	r3, [pc, #68]	; (800576c <dshot_set_timer+0xbc>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	897a      	ldrh	r2, [r7, #10]
 800572c:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 800572e:	4b0f      	ldr	r3, [pc, #60]	; (800576c <dshot_set_timer+0xbc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2214      	movs	r2, #20
 8005734:	62da      	str	r2, [r3, #44]	; 0x2c
 8005736:	4b0d      	ldr	r3, [pc, #52]	; (800576c <dshot_set_timer+0xbc>)
 8005738:	2214      	movs	r2, #20
 800573a:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800573c:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <dshot_set_timer+0xb8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	897a      	ldrh	r2, [r7, #10]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8005744:	4b08      	ldr	r3, [pc, #32]	; (8005768 <dshot_set_timer+0xb8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2214      	movs	r2, #20
 800574a:	62da      	str	r2, [r3, #44]	; 0x2c
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <dshot_set_timer+0xb8>)
 800574e:	2214      	movs	r2, #20
 8005750:	60da      	str	r2, [r3, #12]
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	ecbd 8b02 	vpop	{d8}
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000000 	.word	0x20000000
 8005764:	3c23d70a 	.word	0x3c23d70a
 8005768:	2000030c 	.word	0x2000030c
 800576c:	2000045c 	.word	0x2000045c

08005770 <dshot_dma_tc_callback>:


// __HAL_TIM_DISABLE_DMA is needed to Eliminate the delay between the dshot signals sent by dma
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	d108      	bne.n	800579a <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005796:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8005798:	e028      	b.n	80057ec <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d108      	bne.n	80057b6 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b2:	60da      	str	r2, [r3, #12]
}
 80057b4:	e01a      	b.n	80057ec <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d108      	bne.n	80057d2 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ce:	60da      	str	r2, [r3, #12]
}
 80057d0:	e00c      	b.n	80057ec <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d107      	bne.n	80057ec <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057ea:	60da      	str	r2, [r3, #12]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <dshot_put_tc_callback_function>:


static void dshot_put_tc_callback_function()
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 80057fc:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <dshot_put_tc_callback_function+0x30>)
 80057fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005800:	4a0a      	ldr	r2, [pc, #40]	; (800582c <dshot_put_tc_callback_function+0x34>)
 8005802:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <dshot_put_tc_callback_function+0x38>)
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	4a08      	ldr	r2, [pc, #32]	; (800582c <dshot_put_tc_callback_function+0x34>)
 800580a:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 800580c:	4b08      	ldr	r3, [pc, #32]	; (8005830 <dshot_put_tc_callback_function+0x38>)
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	4a06      	ldr	r2, [pc, #24]	; (800582c <dshot_put_tc_callback_function+0x34>)
 8005812:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <dshot_put_tc_callback_function+0x30>)
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	4a04      	ldr	r2, [pc, #16]	; (800582c <dshot_put_tc_callback_function+0x34>)
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800581c:	bf00      	nop
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	2000030c 	.word	0x2000030c
 800582c:	08005771 	.word	0x08005771
 8005830:	2000045c 	.word	0x2000045c

08005834 <dshot_start_pwm>:


static void dshot_start_pwm()
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8005838:	210c      	movs	r1, #12
 800583a:	4808      	ldr	r0, [pc, #32]	; (800585c <dshot_start_pwm+0x28>)
 800583c:	f7fe faf6 	bl	8003e2c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8005840:	2108      	movs	r1, #8
 8005842:	4807      	ldr	r0, [pc, #28]	; (8005860 <dshot_start_pwm+0x2c>)
 8005844:	f7fe faf2 	bl	8003e2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8005848:	2100      	movs	r1, #0
 800584a:	4805      	ldr	r0, [pc, #20]	; (8005860 <dshot_start_pwm+0x2c>)
 800584c:	f7fe faee 	bl	8003e2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8005850:	2104      	movs	r1, #4
 8005852:	4802      	ldr	r0, [pc, #8]	; (800585c <dshot_start_pwm+0x28>)
 8005854:	f7fe faea 	bl	8003e2c <HAL_TIM_PWM_Start>
}
 8005858:	bf00      	nop
 800585a:	bd80      	pop	{r7, pc}
 800585c:	2000030c 	.word	0x2000030c
 8005860:	2000045c 	.word	0x2000045c

08005864 <dshot_init>:


void dshot_init(dshot_type_e dshot_type)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff1d 	bl	80056b0 <dshot_set_timer>

	dshot_put_tc_callback_function(); // the function that starts at transfer complete interrupt
 8005876:	f7ff ffbf 	bl	80057f8 <dshot_put_tc_callback_function>

	dshot_start_pwm();
 800587a:	f7ff ffdb 	bl	8005834 <dshot_start_pwm>

	// Initialize motor value to 0
	for(int i = 0; i < 4; i++)
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	e007      	b.n	8005894 <dshot_init+0x30>
	{
		motor_value[i] = 0;
 8005884:	4a07      	ldr	r2, [pc, #28]	; (80058a4 <dshot_init+0x40>)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2100      	movs	r1, #0
 800588a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < 4; i++)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3301      	adds	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b03      	cmp	r3, #3
 8005898:	ddf4      	ble.n	8005884 <dshot_init+0x20>
	}

}
 800589a:	bf00      	nop
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20000554 	.word	0x20000554

080058a8 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 80058b2:	2300      	movs	r3, #0
 80058b4:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	b21a      	sxth	r2, r3
 80058bc:	7afb      	ldrb	r3, [r7, #11]
 80058be:	b21b      	sxth	r3, r3
 80058c0:	4313      	orrs	r3, r2
 80058c2:	b21b      	sxth	r3, r3
 80058c4:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 80058ca:	893b      	ldrh	r3, [r7, #8]
 80058cc:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e009      	b.n	80058e8 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4053      	eors	r3, r2
 80058da:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	091b      	lsrs	r3, r3, #4
 80058e0:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3301      	adds	r3, #1
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	ddf2      	ble.n	80058d4 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 80058f6:	893b      	ldrh	r3, [r7, #8]
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	4313      	orrs	r3, r2
 8005902:	813b      	strh	r3, [r7, #8]

	return packet;
 8005904:	893b      	ldrh	r3, [r7, #8]
}
 8005906:	4618      	mov	r0, r3
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal sent to dma
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	460b      	mov	r3, r1
 800591c:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 800591e:	887b      	ldrh	r3, [r7, #2]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff ffc1 	bl	80058a8 <dshot_prepare_packet>
 8005926:	4603      	mov	r3, r0
 8005928:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	e011      	b.n	8005954 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8005930:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005934:	2b00      	cmp	r3, #0
 8005936:	da01      	bge.n	800593c <dshot_prepare_dmabuffer+0x2a>
 8005938:	220e      	movs	r2, #14
 800593a:	e000      	b.n	800593e <dshot_prepare_dmabuffer+0x2c>
 800593c:	2207      	movs	r2, #7
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	440b      	add	r3, r1
 8005946:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8005948:	89fb      	ldrh	r3, [r7, #14]
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	3301      	adds	r3, #1
 8005952:	60bb      	str	r3, [r7, #8]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b0f      	cmp	r3, #15
 8005958:	ddea      	ble.n	8005930 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3340      	adds	r3, #64	; 0x40
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3344      	adds	r3, #68	; 0x44
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
}
 800596a:	bf00      	nop
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <dshot_dma_start>:


static void dshot_dma_start(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t *pData, uint16_t Length)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	807b      	strh	r3, [r7, #2]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b0c      	cmp	r3, #12
 8005986:	d849      	bhi.n	8005a1c <dshot_dma_start+0xa8>
 8005988:	a201      	add	r2, pc, #4	; (adr r2, 8005990 <dshot_dma_start+0x1c>)
 800598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598e:	bf00      	nop
 8005990:	080059c5 	.word	0x080059c5
 8005994:	08005a1d 	.word	0x08005a1d
 8005998:	08005a1d 	.word	0x08005a1d
 800599c:	08005a1d 	.word	0x08005a1d
 80059a0:	080059db 	.word	0x080059db
 80059a4:	08005a1d 	.word	0x08005a1d
 80059a8:	08005a1d 	.word	0x08005a1d
 80059ac:	08005a1d 	.word	0x08005a1d
 80059b0:	080059f1 	.word	0x080059f1
 80059b4:	08005a1d 	.word	0x08005a1d
 80059b8:	08005a1d 	.word	0x08005a1d
 80059bc:	08005a1d 	.word	0x08005a1d
 80059c0:	08005a07 	.word	0x08005a07
    switch (channel) 
	{
		case TIM_CHANNEL_1:
			HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3334      	adds	r3, #52	; 0x34
 80059d0:	461a      	mov	r2, r3
 80059d2:	887b      	ldrh	r3, [r7, #2]
 80059d4:	f7fc ff66 	bl	80028a4 <HAL_DMA_Start_IT>
			break;
 80059d8:	e020      	b.n	8005a1c <dshot_dma_start+0xa8>

		case TIM_CHANNEL_2:
			HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3338      	adds	r3, #56	; 0x38
 80059e6:	461a      	mov	r2, r3
 80059e8:	887b      	ldrh	r3, [r7, #2]
 80059ea:	f7fc ff5b 	bl	80028a4 <HAL_DMA_Start_IT>
			break;
 80059ee:	e015      	b.n	8005a1c <dshot_dma_start+0xa8>

		case TIM_CHANNEL_3:
			HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	333c      	adds	r3, #60	; 0x3c
 80059fc:	461a      	mov	r2, r3
 80059fe:	887b      	ldrh	r3, [r7, #2]
 8005a00:	f7fc ff50 	bl	80028a4 <HAL_DMA_Start_IT>
			break;
 8005a04:	e00a      	b.n	8005a1c <dshot_dma_start+0xa8>

		case TIM_CHANNEL_4:
			HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3340      	adds	r3, #64	; 0x40
 8005a12:	461a      	mov	r2, r3
 8005a14:	887b      	ldrh	r3, [r7, #2]
 8005a16:	f7fc ff45 	bl	80028a4 <HAL_DMA_Start_IT>
			break;
 8005a1a:	bf00      	nop
    }
}
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <dshot_enable_dma_request>:


static void dshot_enable_dma_request()
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
	// TIM_DMA_CCx depends on timer channel
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8005a28:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <dshot_enable_dma_request+0x50>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <dshot_enable_dma_request+0x50>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a36:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8005a38:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <dshot_enable_dma_request+0x54>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <dshot_enable_dma_request+0x54>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a46:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <dshot_enable_dma_request+0x54>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <dshot_enable_dma_request+0x54>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a56:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <dshot_enable_dma_request+0x50>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <dshot_enable_dma_request+0x50>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a66:	60da      	str	r2, [r3, #12]
}
 8005a68:	bf00      	nop
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	2000030c 	.word	0x2000030c
 8005a78:	2000045c 	.word	0x2000045c

08005a7c <dshot_write>:


void dshot_write()
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8005a80:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <dshot_write+0x6c>)
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	4619      	mov	r1, r3
 8005a86:	4819      	ldr	r0, [pc, #100]	; (8005aec <dshot_write+0x70>)
 8005a88:	f7ff ff43 	bl	8005912 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8005a8c:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <dshot_write+0x6c>)
 8005a8e:	885b      	ldrh	r3, [r3, #2]
 8005a90:	4619      	mov	r1, r3
 8005a92:	4817      	ldr	r0, [pc, #92]	; (8005af0 <dshot_write+0x74>)
 8005a94:	f7ff ff3d 	bl	8005912 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8005a98:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <dshot_write+0x6c>)
 8005a9a:	889b      	ldrh	r3, [r3, #4]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4815      	ldr	r0, [pc, #84]	; (8005af4 <dshot_write+0x78>)
 8005aa0:	f7ff ff37 	bl	8005912 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8005aa4:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <dshot_write+0x6c>)
 8005aa6:	88db      	ldrh	r3, [r3, #6]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4813      	ldr	r0, [pc, #76]	; (8005af8 <dshot_write+0x7c>)
 8005aac:	f7ff ff31 	bl	8005912 <dshot_prepare_dmabuffer>

	dshot_dma_start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL, motor1_dmabuffer, 18);
 8005ab0:	2312      	movs	r3, #18
 8005ab2:	4a0e      	ldr	r2, [pc, #56]	; (8005aec <dshot_write+0x70>)
 8005ab4:	210c      	movs	r1, #12
 8005ab6:	4811      	ldr	r0, [pc, #68]	; (8005afc <dshot_write+0x80>)
 8005ab8:	f7ff ff5c 	bl	8005974 <dshot_dma_start>
	dshot_dma_start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL, motor2_dmabuffer, 18);
 8005abc:	2312      	movs	r3, #18
 8005abe:	4a0c      	ldr	r2, [pc, #48]	; (8005af0 <dshot_write+0x74>)
 8005ac0:	2108      	movs	r1, #8
 8005ac2:	480f      	ldr	r0, [pc, #60]	; (8005b00 <dshot_write+0x84>)
 8005ac4:	f7ff ff56 	bl	8005974 <dshot_dma_start>
	dshot_dma_start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL, motor3_dmabuffer, 18);
 8005ac8:	2312      	movs	r3, #18
 8005aca:	4a0a      	ldr	r2, [pc, #40]	; (8005af4 <dshot_write+0x78>)
 8005acc:	2100      	movs	r1, #0
 8005ace:	480c      	ldr	r0, [pc, #48]	; (8005b00 <dshot_write+0x84>)
 8005ad0:	f7ff ff50 	bl	8005974 <dshot_dma_start>
	dshot_dma_start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL, motor4_dmabuffer, 18);
 8005ad4:	2312      	movs	r3, #18
 8005ad6:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <dshot_write+0x7c>)
 8005ad8:	2104      	movs	r1, #4
 8005ada:	4808      	ldr	r0, [pc, #32]	; (8005afc <dshot_write+0x80>)
 8005adc:	f7ff ff4a 	bl	8005974 <dshot_dma_start>

	dshot_enable_dma_request();
 8005ae0:	f7ff ffa0 	bl	8005a24 <dshot_enable_dma_request>
 8005ae4:	bf00      	nop
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000554 	.word	0x20000554
 8005aec:	200005ec 	.word	0x200005ec
 8005af0:	200005a4 	.word	0x200005a4
 8005af4:	2000055c 	.word	0x2000055c
 8005af8:	20000634 	.word	0x20000634
 8005afc:	2000030c 	.word	0x2000030c
 8005b00:	2000045c 	.word	0x2000045c

08005b04 <ibus_init>:
static uint8_t ibus_buffer[32] = {0};
uint16_t channel[IBUS_USER_CHANNELS] = {0};


void ibus_init()
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
	/* Interrupt mode */
	//HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);

	/* DMA mode */
	HAL_UART_Receive_DMA(IBUS_UART, ibus_buffer, 32);
 8005b08:	2220      	movs	r2, #32
 8005b0a:	4903      	ldr	r1, [pc, #12]	; (8005b18 <ibus_init+0x14>)
 8005b0c:	4803      	ldr	r0, [pc, #12]	; (8005b1c <ibus_init+0x18>)
 8005b0e:	f7fe ff2c 	bl	800496a <HAL_UART_Receive_DMA>
}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000090 	.word	0x20000090
 8005b1c:	20000504 	.word	0x20000504

08005b20 <ibus_is_valid>:


static bool ibus_is_valid()
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
	// is it ibus?
	return (ibus_buffer[0] == IBUS_LENGTH && ibus_buffer[1] == IBUS_COMMAND40);
 8005b24:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <ibus_is_valid+0x2c>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d105      	bne.n	8005b38 <ibus_is_valid+0x18>
 8005b2c:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <ibus_is_valid+0x2c>)
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d101      	bne.n	8005b38 <ibus_is_valid+0x18>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <ibus_is_valid+0x1a>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	b2db      	uxtb	r3, r3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	20000090 	.word	0x20000090

08005b50 <ibus_checksum>:


static bool ibus_checksum()
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 	uint16_t checksum_cal = 0xffff;
 8005b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b5a:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i = 0; i < 30; i++)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	e00a      	b.n	8005b78 <ibus_checksum+0x28>
	{
		checksum_cal -= ibus_buffer[i];
 8005b62:	4a12      	ldr	r2, [pc, #72]	; (8005bac <ibus_checksum+0x5c>)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4413      	add	r3, r2
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	89fa      	ldrh	r2, [r7, #14]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 30; i++)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60bb      	str	r3, [r7, #8]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b1d      	cmp	r3, #29
 8005b7c:	ddf1      	ble.n	8005b62 <ibus_checksum+0x12>
	}

	checksum_ibus = ibus_buffer[31] << 8 | ibus_buffer[30]; // checksum value from ibus
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <ibus_checksum+0x5c>)
 8005b80:	7fdb      	ldrb	r3, [r3, #31]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	b21a      	sxth	r2, r3
 8005b86:	4b09      	ldr	r3, [pc, #36]	; (8005bac <ibus_checksum+0x5c>)
 8005b88:	7f9b      	ldrb	r3, [r3, #30]
 8005b8a:	b21b      	sxth	r3, r3
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	b21b      	sxth	r3, r3
 8005b90:	80fb      	strh	r3, [r7, #6]
	
	return (checksum_ibus == checksum_cal);
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	89fb      	ldrh	r3, [r7, #14]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	bf0c      	ite	eq
 8005b9a:	2301      	moveq	r3, #1
 8005b9c:	2300      	movne	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	20000090 	.word	0x20000090

08005bb0 <ibus_little_endian>:


static void ibus_little_endian()
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	607b      	str	r3, [r7, #4]
 8005bba:	2302      	movs	r3, #2
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	e017      	b.n	8005bf0 <ibus_little_endian+0x40>
	{
		channel[ch_index] = ibus_buffer[bf_index + 1] << 8 | ibus_buffer[bf_index];
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	4a0f      	ldr	r2, [pc, #60]	; (8005c04 <ibus_little_endian+0x54>)
 8005bc6:	5cd3      	ldrb	r3, [r2, r3]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	b21a      	sxth	r2, r3
 8005bcc:	490d      	ldr	r1, [pc, #52]	; (8005c04 <ibus_little_endian+0x54>)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	440b      	add	r3, r1
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b21b      	sxth	r3, r3
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	b21b      	sxth	r3, r3
 8005bda:	b299      	uxth	r1, r3
 8005bdc:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <ibus_little_endian+0x58>)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3301      	adds	r3, #1
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	3302      	adds	r3, #2
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b05      	cmp	r3, #5
 8005bf4:	dde4      	ble.n	8005bc0 <ibus_little_endian+0x10>
	}
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	20000090 	.word	0x20000090
 8005c08:	200000b0 	.word	0x200000b0

08005c0c <ibus_read_channel>:


bool ibus_read_channel()
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
	if(!ibus_is_valid())
 8005c10:	f7ff ff86 	bl	8005b20 <ibus_is_valid>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f083 0301 	eor.w	r3, r3, #1
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <ibus_read_channel+0x18>
		return false;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e011      	b.n	8005c48 <ibus_read_channel+0x3c>

	if(!ibus_checksum())
 8005c24:	f7ff ff94 	bl	8005b50 <ibus_checksum>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f083 0301 	eor.w	r3, r3, #1
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <ibus_read_channel+0x2c>
		return false;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e007      	b.n	8005c48 <ibus_read_channel+0x3c>

	ibus_little_endian();
 8005c38:	f7ff ffba 	bl	8005bb0 <ibus_little_endian>

	/* Interrupt mode */
	//HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);

	/* DMA mode */
	HAL_UART_Receive_DMA(IBUS_UART, ibus_buffer, 32);
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	4903      	ldr	r1, [pc, #12]	; (8005c4c <ibus_read_channel+0x40>)
 8005c40:	4803      	ldr	r0, [pc, #12]	; (8005c50 <ibus_read_channel+0x44>)
 8005c42:	f7fe fe92 	bl	800496a <HAL_UART_Receive_DMA>

	return true;
 8005c46:	2301      	movs	r3, #1
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000090 	.word	0x20000090
 8005c50:	20000504 	.word	0x20000504

08005c54 <led1_on>:
#include "led.h"


// LED1
void led1_on()
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c5e:	4802      	ldr	r0, [pc, #8]	; (8005c68 <led1_on+0x14>)
 8005c60:	f7fd faf8 	bl	8003254 <HAL_GPIO_WritePin>
}
 8005c64:	bf00      	nop
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40020800 	.word	0x40020800

08005c6c <led1_off>:

void led1_off()
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8005c70:	2201      	movs	r2, #1
 8005c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c76:	4802      	ldr	r0, [pc, #8]	; (8005c80 <led1_off+0x14>)
 8005c78:	f7fd faec 	bl	8003254 <HAL_GPIO_WritePin>
}
 8005c7c:	bf00      	nop
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40020800 	.word	0x40020800

08005c84 <loop_init>:
#include "dshot.h"



void loop_init(uint16_t loop_hz)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	80fb      	strh	r3, [r7, #6]
    uint32_t timer_clock = SystemCoreClock;
 8005c8e:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <loop_init+0x5c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]

    uint16_t prescaler_1us = (timer_clock / 1000000) - 1;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4a13      	ldr	r2, [pc, #76]	; (8005ce4 <loop_init+0x60>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	0c9b      	lsrs	r3, r3, #18
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	817b      	strh	r3, [r7, #10]
    uint16_t period = (1000000 / loop_hz) - 1;
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	4a10      	ldr	r2, [pc, #64]	; (8005ce8 <loop_init+0x64>)
 8005ca8:	fb92 f3f3 	sdiv	r3, r2, r3
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	813b      	strh	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(LOOP_TIM, prescaler_1us);  
 8005cb2:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <loop_init+0x68>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	897a      	ldrh	r2, [r7, #10]
 8005cb8:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_TIM_SET_AUTORELOAD(LOOP_TIM, period);
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <loop_init+0x68>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	893a      	ldrh	r2, [r7, #8]
 8005cc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cc2:	893b      	ldrh	r3, [r7, #8]
 8005cc4:	4a09      	ldr	r2, [pc, #36]	; (8005cec <loop_init+0x68>)
 8005cc6:	60d3      	str	r3, [r2, #12]

    printf("%d Hz loop \n", loop_hz);
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4808      	ldr	r0, [pc, #32]	; (8005cf0 <loop_init+0x6c>)
 8005cce:	f000 f857 	bl	8005d80 <iprintf>
    printf("loop initialized \n");
 8005cd2:	4808      	ldr	r0, [pc, #32]	; (8005cf4 <loop_init+0x70>)
 8005cd4:	f000 f8da 	bl	8005e8c <puts>
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	20000000 	.word	0x20000000
 8005ce4:	431bde83 	.word	0x431bde83
 8005ce8:	000f4240 	.word	0x000f4240
 8005cec:	20000354 	.word	0x20000354
 8005cf0:	08006e2c 	.word	0x08006e2c
 8005cf4:	08006e3c 	.word	0x08006e3c

08005cf8 <loop_runtime>:

uint16_t loop_runtime()
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(LOOP_TIM);
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <loop_runtime+0x18>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	b29b      	uxth	r3, r3
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000354 	.word	0x20000354

08005d14 <loop_start>:

void loop_start()
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(LOOP_TIM);
 8005d18:	4802      	ldr	r0, [pc, #8]	; (8005d24 <loop_start+0x10>)
 8005d1a:	f7fd ffd5 	bl	8003cc8 <HAL_TIM_Base_Start_IT>
}
 8005d1e:	bf00      	nop
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000354 	.word	0x20000354

08005d28 <__libc_init_array>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	4d0d      	ldr	r5, [pc, #52]	; (8005d60 <__libc_init_array+0x38>)
 8005d2c:	4c0d      	ldr	r4, [pc, #52]	; (8005d64 <__libc_init_array+0x3c>)
 8005d2e:	1b64      	subs	r4, r4, r5
 8005d30:	10a4      	asrs	r4, r4, #2
 8005d32:	2600      	movs	r6, #0
 8005d34:	42a6      	cmp	r6, r4
 8005d36:	d109      	bne.n	8005d4c <__libc_init_array+0x24>
 8005d38:	4d0b      	ldr	r5, [pc, #44]	; (8005d68 <__libc_init_array+0x40>)
 8005d3a:	4c0c      	ldr	r4, [pc, #48]	; (8005d6c <__libc_init_array+0x44>)
 8005d3c:	f001 f86a 	bl	8006e14 <_init>
 8005d40:	1b64      	subs	r4, r4, r5
 8005d42:	10a4      	asrs	r4, r4, #2
 8005d44:	2600      	movs	r6, #0
 8005d46:	42a6      	cmp	r6, r4
 8005d48:	d105      	bne.n	8005d56 <__libc_init_array+0x2e>
 8005d4a:	bd70      	pop	{r4, r5, r6, pc}
 8005d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d50:	4798      	blx	r3
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7ee      	b.n	8005d34 <__libc_init_array+0xc>
 8005d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5a:	4798      	blx	r3
 8005d5c:	3601      	adds	r6, #1
 8005d5e:	e7f2      	b.n	8005d46 <__libc_init_array+0x1e>
 8005d60:	08006f18 	.word	0x08006f18
 8005d64:	08006f18 	.word	0x08006f18
 8005d68:	08006f18 	.word	0x08006f18
 8005d6c:	08006f1c 	.word	0x08006f1c

08005d70 <memset>:
 8005d70:	4402      	add	r2, r0
 8005d72:	4603      	mov	r3, r0
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d100      	bne.n	8005d7a <memset+0xa>
 8005d78:	4770      	bx	lr
 8005d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7e:	e7f9      	b.n	8005d74 <memset+0x4>

08005d80 <iprintf>:
 8005d80:	b40f      	push	{r0, r1, r2, r3}
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <iprintf+0x2c>)
 8005d84:	b513      	push	{r0, r1, r4, lr}
 8005d86:	681c      	ldr	r4, [r3, #0]
 8005d88:	b124      	cbz	r4, 8005d94 <iprintf+0x14>
 8005d8a:	69a3      	ldr	r3, [r4, #24]
 8005d8c:	b913      	cbnz	r3, 8005d94 <iprintf+0x14>
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 fa5e 	bl	8006250 <__sinit>
 8005d94:	ab05      	add	r3, sp, #20
 8005d96:	9a04      	ldr	r2, [sp, #16]
 8005d98:	68a1      	ldr	r1, [r4, #8]
 8005d9a:	9301      	str	r3, [sp, #4]
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f000 fc2f 	bl	8006600 <_vfiprintf_r>
 8005da2:	b002      	add	sp, #8
 8005da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da8:	b004      	add	sp, #16
 8005daa:	4770      	bx	lr
 8005dac:	2000000c 	.word	0x2000000c

08005db0 <_puts_r>:
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	460e      	mov	r6, r1
 8005db4:	4605      	mov	r5, r0
 8005db6:	b118      	cbz	r0, 8005dc0 <_puts_r+0x10>
 8005db8:	6983      	ldr	r3, [r0, #24]
 8005dba:	b90b      	cbnz	r3, 8005dc0 <_puts_r+0x10>
 8005dbc:	f000 fa48 	bl	8006250 <__sinit>
 8005dc0:	69ab      	ldr	r3, [r5, #24]
 8005dc2:	68ac      	ldr	r4, [r5, #8]
 8005dc4:	b913      	cbnz	r3, 8005dcc <_puts_r+0x1c>
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f000 fa42 	bl	8006250 <__sinit>
 8005dcc:	4b2c      	ldr	r3, [pc, #176]	; (8005e80 <_puts_r+0xd0>)
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	d120      	bne.n	8005e14 <_puts_r+0x64>
 8005dd2:	686c      	ldr	r4, [r5, #4]
 8005dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dd6:	07db      	lsls	r3, r3, #31
 8005dd8:	d405      	bmi.n	8005de6 <_puts_r+0x36>
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	0598      	lsls	r0, r3, #22
 8005dde:	d402      	bmi.n	8005de6 <_puts_r+0x36>
 8005de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005de2:	f000 fad3 	bl	800638c <__retarget_lock_acquire_recursive>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	0719      	lsls	r1, r3, #28
 8005dea:	d51d      	bpl.n	8005e28 <_puts_r+0x78>
 8005dec:	6923      	ldr	r3, [r4, #16]
 8005dee:	b1db      	cbz	r3, 8005e28 <_puts_r+0x78>
 8005df0:	3e01      	subs	r6, #1
 8005df2:	68a3      	ldr	r3, [r4, #8]
 8005df4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	60a3      	str	r3, [r4, #8]
 8005dfc:	bb39      	cbnz	r1, 8005e4e <_puts_r+0x9e>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	da38      	bge.n	8005e74 <_puts_r+0xc4>
 8005e02:	4622      	mov	r2, r4
 8005e04:	210a      	movs	r1, #10
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 f848 	bl	8005e9c <__swbuf_r>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d011      	beq.n	8005e34 <_puts_r+0x84>
 8005e10:	250a      	movs	r5, #10
 8005e12:	e011      	b.n	8005e38 <_puts_r+0x88>
 8005e14:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <_puts_r+0xd4>)
 8005e16:	429c      	cmp	r4, r3
 8005e18:	d101      	bne.n	8005e1e <_puts_r+0x6e>
 8005e1a:	68ac      	ldr	r4, [r5, #8]
 8005e1c:	e7da      	b.n	8005dd4 <_puts_r+0x24>
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <_puts_r+0xd8>)
 8005e20:	429c      	cmp	r4, r3
 8005e22:	bf08      	it	eq
 8005e24:	68ec      	ldreq	r4, [r5, #12]
 8005e26:	e7d5      	b.n	8005dd4 <_puts_r+0x24>
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f000 f888 	bl	8005f40 <__swsetup_r>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d0dd      	beq.n	8005df0 <_puts_r+0x40>
 8005e34:	f04f 35ff 	mov.w	r5, #4294967295
 8005e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e3a:	07da      	lsls	r2, r3, #31
 8005e3c:	d405      	bmi.n	8005e4a <_puts_r+0x9a>
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	059b      	lsls	r3, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_puts_r+0x9a>
 8005e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e46:	f000 faa2 	bl	800638e <__retarget_lock_release_recursive>
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	bd70      	pop	{r4, r5, r6, pc}
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	da04      	bge.n	8005e5c <_puts_r+0xac>
 8005e52:	69a2      	ldr	r2, [r4, #24]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	dc06      	bgt.n	8005e66 <_puts_r+0xb6>
 8005e58:	290a      	cmp	r1, #10
 8005e5a:	d004      	beq.n	8005e66 <_puts_r+0xb6>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	6022      	str	r2, [r4, #0]
 8005e62:	7019      	strb	r1, [r3, #0]
 8005e64:	e7c5      	b.n	8005df2 <_puts_r+0x42>
 8005e66:	4622      	mov	r2, r4
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f000 f817 	bl	8005e9c <__swbuf_r>
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d1bf      	bne.n	8005df2 <_puts_r+0x42>
 8005e72:	e7df      	b.n	8005e34 <_puts_r+0x84>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	250a      	movs	r5, #10
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	6022      	str	r2, [r4, #0]
 8005e7c:	701d      	strb	r5, [r3, #0]
 8005e7e:	e7db      	b.n	8005e38 <_puts_r+0x88>
 8005e80:	08006e94 	.word	0x08006e94
 8005e84:	08006eb4 	.word	0x08006eb4
 8005e88:	08006e74 	.word	0x08006e74

08005e8c <puts>:
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <puts+0xc>)
 8005e8e:	4601      	mov	r1, r0
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	f7ff bf8d 	b.w	8005db0 <_puts_r>
 8005e96:	bf00      	nop
 8005e98:	2000000c 	.word	0x2000000c

08005e9c <__swbuf_r>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	460e      	mov	r6, r1
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	b118      	cbz	r0, 8005eae <__swbuf_r+0x12>
 8005ea6:	6983      	ldr	r3, [r0, #24]
 8005ea8:	b90b      	cbnz	r3, 8005eae <__swbuf_r+0x12>
 8005eaa:	f000 f9d1 	bl	8006250 <__sinit>
 8005eae:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <__swbuf_r+0x98>)
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	d12b      	bne.n	8005f0c <__swbuf_r+0x70>
 8005eb4:	686c      	ldr	r4, [r5, #4]
 8005eb6:	69a3      	ldr	r3, [r4, #24]
 8005eb8:	60a3      	str	r3, [r4, #8]
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	071a      	lsls	r2, r3, #28
 8005ebe:	d52f      	bpl.n	8005f20 <__swbuf_r+0x84>
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	b36b      	cbz	r3, 8005f20 <__swbuf_r+0x84>
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	6820      	ldr	r0, [r4, #0]
 8005ec8:	1ac0      	subs	r0, r0, r3
 8005eca:	6963      	ldr	r3, [r4, #20]
 8005ecc:	b2f6      	uxtb	r6, r6
 8005ece:	4283      	cmp	r3, r0
 8005ed0:	4637      	mov	r7, r6
 8005ed2:	dc04      	bgt.n	8005ede <__swbuf_r+0x42>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 f926 	bl	8006128 <_fflush_r>
 8005edc:	bb30      	cbnz	r0, 8005f2c <__swbuf_r+0x90>
 8005ede:	68a3      	ldr	r3, [r4, #8]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	60a3      	str	r3, [r4, #8]
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	6022      	str	r2, [r4, #0]
 8005eea:	701e      	strb	r6, [r3, #0]
 8005eec:	6963      	ldr	r3, [r4, #20]
 8005eee:	3001      	adds	r0, #1
 8005ef0:	4283      	cmp	r3, r0
 8005ef2:	d004      	beq.n	8005efe <__swbuf_r+0x62>
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	07db      	lsls	r3, r3, #31
 8005ef8:	d506      	bpl.n	8005f08 <__swbuf_r+0x6c>
 8005efa:	2e0a      	cmp	r6, #10
 8005efc:	d104      	bne.n	8005f08 <__swbuf_r+0x6c>
 8005efe:	4621      	mov	r1, r4
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 f911 	bl	8006128 <_fflush_r>
 8005f06:	b988      	cbnz	r0, 8005f2c <__swbuf_r+0x90>
 8005f08:	4638      	mov	r0, r7
 8005f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <__swbuf_r+0x9c>)
 8005f0e:	429c      	cmp	r4, r3
 8005f10:	d101      	bne.n	8005f16 <__swbuf_r+0x7a>
 8005f12:	68ac      	ldr	r4, [r5, #8]
 8005f14:	e7cf      	b.n	8005eb6 <__swbuf_r+0x1a>
 8005f16:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <__swbuf_r+0xa0>)
 8005f18:	429c      	cmp	r4, r3
 8005f1a:	bf08      	it	eq
 8005f1c:	68ec      	ldreq	r4, [r5, #12]
 8005f1e:	e7ca      	b.n	8005eb6 <__swbuf_r+0x1a>
 8005f20:	4621      	mov	r1, r4
 8005f22:	4628      	mov	r0, r5
 8005f24:	f000 f80c 	bl	8005f40 <__swsetup_r>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d0cb      	beq.n	8005ec4 <__swbuf_r+0x28>
 8005f2c:	f04f 37ff 	mov.w	r7, #4294967295
 8005f30:	e7ea      	b.n	8005f08 <__swbuf_r+0x6c>
 8005f32:	bf00      	nop
 8005f34:	08006e94 	.word	0x08006e94
 8005f38:	08006eb4 	.word	0x08006eb4
 8005f3c:	08006e74 	.word	0x08006e74

08005f40 <__swsetup_r>:
 8005f40:	4b32      	ldr	r3, [pc, #200]	; (800600c <__swsetup_r+0xcc>)
 8005f42:	b570      	push	{r4, r5, r6, lr}
 8005f44:	681d      	ldr	r5, [r3, #0]
 8005f46:	4606      	mov	r6, r0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	b125      	cbz	r5, 8005f56 <__swsetup_r+0x16>
 8005f4c:	69ab      	ldr	r3, [r5, #24]
 8005f4e:	b913      	cbnz	r3, 8005f56 <__swsetup_r+0x16>
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 f97d 	bl	8006250 <__sinit>
 8005f56:	4b2e      	ldr	r3, [pc, #184]	; (8006010 <__swsetup_r+0xd0>)
 8005f58:	429c      	cmp	r4, r3
 8005f5a:	d10f      	bne.n	8005f7c <__swsetup_r+0x3c>
 8005f5c:	686c      	ldr	r4, [r5, #4]
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f64:	0719      	lsls	r1, r3, #28
 8005f66:	d42c      	bmi.n	8005fc2 <__swsetup_r+0x82>
 8005f68:	06dd      	lsls	r5, r3, #27
 8005f6a:	d411      	bmi.n	8005f90 <__swsetup_r+0x50>
 8005f6c:	2309      	movs	r3, #9
 8005f6e:	6033      	str	r3, [r6, #0]
 8005f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f74:	81a3      	strh	r3, [r4, #12]
 8005f76:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7a:	e03e      	b.n	8005ffa <__swsetup_r+0xba>
 8005f7c:	4b25      	ldr	r3, [pc, #148]	; (8006014 <__swsetup_r+0xd4>)
 8005f7e:	429c      	cmp	r4, r3
 8005f80:	d101      	bne.n	8005f86 <__swsetup_r+0x46>
 8005f82:	68ac      	ldr	r4, [r5, #8]
 8005f84:	e7eb      	b.n	8005f5e <__swsetup_r+0x1e>
 8005f86:	4b24      	ldr	r3, [pc, #144]	; (8006018 <__swsetup_r+0xd8>)
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	bf08      	it	eq
 8005f8c:	68ec      	ldreq	r4, [r5, #12]
 8005f8e:	e7e6      	b.n	8005f5e <__swsetup_r+0x1e>
 8005f90:	0758      	lsls	r0, r3, #29
 8005f92:	d512      	bpl.n	8005fba <__swsetup_r+0x7a>
 8005f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f96:	b141      	cbz	r1, 8005faa <__swsetup_r+0x6a>
 8005f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f9c:	4299      	cmp	r1, r3
 8005f9e:	d002      	beq.n	8005fa6 <__swsetup_r+0x66>
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f000 fa59 	bl	8006458 <_free_r>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fb0:	81a3      	strh	r3, [r4, #12]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6063      	str	r3, [r4, #4]
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	f043 0308 	orr.w	r3, r3, #8
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	b94b      	cbnz	r3, 8005fda <__swsetup_r+0x9a>
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd0:	d003      	beq.n	8005fda <__swsetup_r+0x9a>
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f000 f9ff 	bl	80063d8 <__smakebuf_r>
 8005fda:	89a0      	ldrh	r0, [r4, #12]
 8005fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fe0:	f010 0301 	ands.w	r3, r0, #1
 8005fe4:	d00a      	beq.n	8005ffc <__swsetup_r+0xbc>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60a3      	str	r3, [r4, #8]
 8005fea:	6963      	ldr	r3, [r4, #20]
 8005fec:	425b      	negs	r3, r3
 8005fee:	61a3      	str	r3, [r4, #24]
 8005ff0:	6923      	ldr	r3, [r4, #16]
 8005ff2:	b943      	cbnz	r3, 8006006 <__swsetup_r+0xc6>
 8005ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ff8:	d1ba      	bne.n	8005f70 <__swsetup_r+0x30>
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
 8005ffc:	0781      	lsls	r1, r0, #30
 8005ffe:	bf58      	it	pl
 8006000:	6963      	ldrpl	r3, [r4, #20]
 8006002:	60a3      	str	r3, [r4, #8]
 8006004:	e7f4      	b.n	8005ff0 <__swsetup_r+0xb0>
 8006006:	2000      	movs	r0, #0
 8006008:	e7f7      	b.n	8005ffa <__swsetup_r+0xba>
 800600a:	bf00      	nop
 800600c:	2000000c 	.word	0x2000000c
 8006010:	08006e94 	.word	0x08006e94
 8006014:	08006eb4 	.word	0x08006eb4
 8006018:	08006e74 	.word	0x08006e74

0800601c <__sflush_r>:
 800601c:	898a      	ldrh	r2, [r1, #12]
 800601e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006022:	4605      	mov	r5, r0
 8006024:	0710      	lsls	r0, r2, #28
 8006026:	460c      	mov	r4, r1
 8006028:	d458      	bmi.n	80060dc <__sflush_r+0xc0>
 800602a:	684b      	ldr	r3, [r1, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	dc05      	bgt.n	800603c <__sflush_r+0x20>
 8006030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	dc02      	bgt.n	800603c <__sflush_r+0x20>
 8006036:	2000      	movs	r0, #0
 8006038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800603c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800603e:	2e00      	cmp	r6, #0
 8006040:	d0f9      	beq.n	8006036 <__sflush_r+0x1a>
 8006042:	2300      	movs	r3, #0
 8006044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006048:	682f      	ldr	r7, [r5, #0]
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	d032      	beq.n	80060b4 <__sflush_r+0x98>
 800604e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	075a      	lsls	r2, r3, #29
 8006054:	d505      	bpl.n	8006062 <__sflush_r+0x46>
 8006056:	6863      	ldr	r3, [r4, #4]
 8006058:	1ac0      	subs	r0, r0, r3
 800605a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800605c:	b10b      	cbz	r3, 8006062 <__sflush_r+0x46>
 800605e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006060:	1ac0      	subs	r0, r0, r3
 8006062:	2300      	movs	r3, #0
 8006064:	4602      	mov	r2, r0
 8006066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006068:	6a21      	ldr	r1, [r4, #32]
 800606a:	4628      	mov	r0, r5
 800606c:	47b0      	blx	r6
 800606e:	1c43      	adds	r3, r0, #1
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	d106      	bne.n	8006082 <__sflush_r+0x66>
 8006074:	6829      	ldr	r1, [r5, #0]
 8006076:	291d      	cmp	r1, #29
 8006078:	d82c      	bhi.n	80060d4 <__sflush_r+0xb8>
 800607a:	4a2a      	ldr	r2, [pc, #168]	; (8006124 <__sflush_r+0x108>)
 800607c:	40ca      	lsrs	r2, r1
 800607e:	07d6      	lsls	r6, r2, #31
 8006080:	d528      	bpl.n	80060d4 <__sflush_r+0xb8>
 8006082:	2200      	movs	r2, #0
 8006084:	6062      	str	r2, [r4, #4]
 8006086:	04d9      	lsls	r1, r3, #19
 8006088:	6922      	ldr	r2, [r4, #16]
 800608a:	6022      	str	r2, [r4, #0]
 800608c:	d504      	bpl.n	8006098 <__sflush_r+0x7c>
 800608e:	1c42      	adds	r2, r0, #1
 8006090:	d101      	bne.n	8006096 <__sflush_r+0x7a>
 8006092:	682b      	ldr	r3, [r5, #0]
 8006094:	b903      	cbnz	r3, 8006098 <__sflush_r+0x7c>
 8006096:	6560      	str	r0, [r4, #84]	; 0x54
 8006098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800609a:	602f      	str	r7, [r5, #0]
 800609c:	2900      	cmp	r1, #0
 800609e:	d0ca      	beq.n	8006036 <__sflush_r+0x1a>
 80060a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060a4:	4299      	cmp	r1, r3
 80060a6:	d002      	beq.n	80060ae <__sflush_r+0x92>
 80060a8:	4628      	mov	r0, r5
 80060aa:	f000 f9d5 	bl	8006458 <_free_r>
 80060ae:	2000      	movs	r0, #0
 80060b0:	6360      	str	r0, [r4, #52]	; 0x34
 80060b2:	e7c1      	b.n	8006038 <__sflush_r+0x1c>
 80060b4:	6a21      	ldr	r1, [r4, #32]
 80060b6:	2301      	movs	r3, #1
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b0      	blx	r6
 80060bc:	1c41      	adds	r1, r0, #1
 80060be:	d1c7      	bne.n	8006050 <__sflush_r+0x34>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0c4      	beq.n	8006050 <__sflush_r+0x34>
 80060c6:	2b1d      	cmp	r3, #29
 80060c8:	d001      	beq.n	80060ce <__sflush_r+0xb2>
 80060ca:	2b16      	cmp	r3, #22
 80060cc:	d101      	bne.n	80060d2 <__sflush_r+0xb6>
 80060ce:	602f      	str	r7, [r5, #0]
 80060d0:	e7b1      	b.n	8006036 <__sflush_r+0x1a>
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d8:	81a3      	strh	r3, [r4, #12]
 80060da:	e7ad      	b.n	8006038 <__sflush_r+0x1c>
 80060dc:	690f      	ldr	r7, [r1, #16]
 80060de:	2f00      	cmp	r7, #0
 80060e0:	d0a9      	beq.n	8006036 <__sflush_r+0x1a>
 80060e2:	0793      	lsls	r3, r2, #30
 80060e4:	680e      	ldr	r6, [r1, #0]
 80060e6:	bf08      	it	eq
 80060e8:	694b      	ldreq	r3, [r1, #20]
 80060ea:	600f      	str	r7, [r1, #0]
 80060ec:	bf18      	it	ne
 80060ee:	2300      	movne	r3, #0
 80060f0:	eba6 0807 	sub.w	r8, r6, r7
 80060f4:	608b      	str	r3, [r1, #8]
 80060f6:	f1b8 0f00 	cmp.w	r8, #0
 80060fa:	dd9c      	ble.n	8006036 <__sflush_r+0x1a>
 80060fc:	6a21      	ldr	r1, [r4, #32]
 80060fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006100:	4643      	mov	r3, r8
 8006102:	463a      	mov	r2, r7
 8006104:	4628      	mov	r0, r5
 8006106:	47b0      	blx	r6
 8006108:	2800      	cmp	r0, #0
 800610a:	dc06      	bgt.n	800611a <__sflush_r+0xfe>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006112:	81a3      	strh	r3, [r4, #12]
 8006114:	f04f 30ff 	mov.w	r0, #4294967295
 8006118:	e78e      	b.n	8006038 <__sflush_r+0x1c>
 800611a:	4407      	add	r7, r0
 800611c:	eba8 0800 	sub.w	r8, r8, r0
 8006120:	e7e9      	b.n	80060f6 <__sflush_r+0xda>
 8006122:	bf00      	nop
 8006124:	20400001 	.word	0x20400001

08006128 <_fflush_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	690b      	ldr	r3, [r1, #16]
 800612c:	4605      	mov	r5, r0
 800612e:	460c      	mov	r4, r1
 8006130:	b913      	cbnz	r3, 8006138 <_fflush_r+0x10>
 8006132:	2500      	movs	r5, #0
 8006134:	4628      	mov	r0, r5
 8006136:	bd38      	pop	{r3, r4, r5, pc}
 8006138:	b118      	cbz	r0, 8006142 <_fflush_r+0x1a>
 800613a:	6983      	ldr	r3, [r0, #24]
 800613c:	b90b      	cbnz	r3, 8006142 <_fflush_r+0x1a>
 800613e:	f000 f887 	bl	8006250 <__sinit>
 8006142:	4b14      	ldr	r3, [pc, #80]	; (8006194 <_fflush_r+0x6c>)
 8006144:	429c      	cmp	r4, r3
 8006146:	d11b      	bne.n	8006180 <_fflush_r+0x58>
 8006148:	686c      	ldr	r4, [r5, #4]
 800614a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0ef      	beq.n	8006132 <_fflush_r+0xa>
 8006152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006154:	07d0      	lsls	r0, r2, #31
 8006156:	d404      	bmi.n	8006162 <_fflush_r+0x3a>
 8006158:	0599      	lsls	r1, r3, #22
 800615a:	d402      	bmi.n	8006162 <_fflush_r+0x3a>
 800615c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800615e:	f000 f915 	bl	800638c <__retarget_lock_acquire_recursive>
 8006162:	4628      	mov	r0, r5
 8006164:	4621      	mov	r1, r4
 8006166:	f7ff ff59 	bl	800601c <__sflush_r>
 800616a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800616c:	07da      	lsls	r2, r3, #31
 800616e:	4605      	mov	r5, r0
 8006170:	d4e0      	bmi.n	8006134 <_fflush_r+0xc>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	059b      	lsls	r3, r3, #22
 8006176:	d4dd      	bmi.n	8006134 <_fflush_r+0xc>
 8006178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800617a:	f000 f908 	bl	800638e <__retarget_lock_release_recursive>
 800617e:	e7d9      	b.n	8006134 <_fflush_r+0xc>
 8006180:	4b05      	ldr	r3, [pc, #20]	; (8006198 <_fflush_r+0x70>)
 8006182:	429c      	cmp	r4, r3
 8006184:	d101      	bne.n	800618a <_fflush_r+0x62>
 8006186:	68ac      	ldr	r4, [r5, #8]
 8006188:	e7df      	b.n	800614a <_fflush_r+0x22>
 800618a:	4b04      	ldr	r3, [pc, #16]	; (800619c <_fflush_r+0x74>)
 800618c:	429c      	cmp	r4, r3
 800618e:	bf08      	it	eq
 8006190:	68ec      	ldreq	r4, [r5, #12]
 8006192:	e7da      	b.n	800614a <_fflush_r+0x22>
 8006194:	08006e94 	.word	0x08006e94
 8006198:	08006eb4 	.word	0x08006eb4
 800619c:	08006e74 	.word	0x08006e74

080061a0 <std>:
 80061a0:	2300      	movs	r3, #0
 80061a2:	b510      	push	{r4, lr}
 80061a4:	4604      	mov	r4, r0
 80061a6:	e9c0 3300 	strd	r3, r3, [r0]
 80061aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ae:	6083      	str	r3, [r0, #8]
 80061b0:	8181      	strh	r1, [r0, #12]
 80061b2:	6643      	str	r3, [r0, #100]	; 0x64
 80061b4:	81c2      	strh	r2, [r0, #14]
 80061b6:	6183      	str	r3, [r0, #24]
 80061b8:	4619      	mov	r1, r3
 80061ba:	2208      	movs	r2, #8
 80061bc:	305c      	adds	r0, #92	; 0x5c
 80061be:	f7ff fdd7 	bl	8005d70 <memset>
 80061c2:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <std+0x38>)
 80061c4:	6263      	str	r3, [r4, #36]	; 0x24
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <std+0x3c>)
 80061c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80061ca:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <std+0x40>)
 80061cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <std+0x44>)
 80061d0:	6224      	str	r4, [r4, #32]
 80061d2:	6323      	str	r3, [r4, #48]	; 0x30
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	bf00      	nop
 80061d8:	08006ba9 	.word	0x08006ba9
 80061dc:	08006bcb 	.word	0x08006bcb
 80061e0:	08006c03 	.word	0x08006c03
 80061e4:	08006c27 	.word	0x08006c27

080061e8 <_cleanup_r>:
 80061e8:	4901      	ldr	r1, [pc, #4]	; (80061f0 <_cleanup_r+0x8>)
 80061ea:	f000 b8af 	b.w	800634c <_fwalk_reent>
 80061ee:	bf00      	nop
 80061f0:	08006129 	.word	0x08006129

080061f4 <__sfmoreglue>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	1e4a      	subs	r2, r1, #1
 80061f8:	2568      	movs	r5, #104	; 0x68
 80061fa:	4355      	muls	r5, r2
 80061fc:	460e      	mov	r6, r1
 80061fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006202:	f000 f979 	bl	80064f8 <_malloc_r>
 8006206:	4604      	mov	r4, r0
 8006208:	b140      	cbz	r0, 800621c <__sfmoreglue+0x28>
 800620a:	2100      	movs	r1, #0
 800620c:	e9c0 1600 	strd	r1, r6, [r0]
 8006210:	300c      	adds	r0, #12
 8006212:	60a0      	str	r0, [r4, #8]
 8006214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006218:	f7ff fdaa 	bl	8005d70 <memset>
 800621c:	4620      	mov	r0, r4
 800621e:	bd70      	pop	{r4, r5, r6, pc}

08006220 <__sfp_lock_acquire>:
 8006220:	4801      	ldr	r0, [pc, #4]	; (8006228 <__sfp_lock_acquire+0x8>)
 8006222:	f000 b8b3 	b.w	800638c <__retarget_lock_acquire_recursive>
 8006226:	bf00      	nop
 8006228:	20000684 	.word	0x20000684

0800622c <__sfp_lock_release>:
 800622c:	4801      	ldr	r0, [pc, #4]	; (8006234 <__sfp_lock_release+0x8>)
 800622e:	f000 b8ae 	b.w	800638e <__retarget_lock_release_recursive>
 8006232:	bf00      	nop
 8006234:	20000684 	.word	0x20000684

08006238 <__sinit_lock_acquire>:
 8006238:	4801      	ldr	r0, [pc, #4]	; (8006240 <__sinit_lock_acquire+0x8>)
 800623a:	f000 b8a7 	b.w	800638c <__retarget_lock_acquire_recursive>
 800623e:	bf00      	nop
 8006240:	2000067f 	.word	0x2000067f

08006244 <__sinit_lock_release>:
 8006244:	4801      	ldr	r0, [pc, #4]	; (800624c <__sinit_lock_release+0x8>)
 8006246:	f000 b8a2 	b.w	800638e <__retarget_lock_release_recursive>
 800624a:	bf00      	nop
 800624c:	2000067f 	.word	0x2000067f

08006250 <__sinit>:
 8006250:	b510      	push	{r4, lr}
 8006252:	4604      	mov	r4, r0
 8006254:	f7ff fff0 	bl	8006238 <__sinit_lock_acquire>
 8006258:	69a3      	ldr	r3, [r4, #24]
 800625a:	b11b      	cbz	r3, 8006264 <__sinit+0x14>
 800625c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006260:	f7ff bff0 	b.w	8006244 <__sinit_lock_release>
 8006264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006268:	6523      	str	r3, [r4, #80]	; 0x50
 800626a:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <__sinit+0x68>)
 800626c:	4a13      	ldr	r2, [pc, #76]	; (80062bc <__sinit+0x6c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	62a2      	str	r2, [r4, #40]	; 0x28
 8006272:	42a3      	cmp	r3, r4
 8006274:	bf04      	itt	eq
 8006276:	2301      	moveq	r3, #1
 8006278:	61a3      	streq	r3, [r4, #24]
 800627a:	4620      	mov	r0, r4
 800627c:	f000 f820 	bl	80062c0 <__sfp>
 8006280:	6060      	str	r0, [r4, #4]
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f81c 	bl	80062c0 <__sfp>
 8006288:	60a0      	str	r0, [r4, #8]
 800628a:	4620      	mov	r0, r4
 800628c:	f000 f818 	bl	80062c0 <__sfp>
 8006290:	2200      	movs	r2, #0
 8006292:	60e0      	str	r0, [r4, #12]
 8006294:	2104      	movs	r1, #4
 8006296:	6860      	ldr	r0, [r4, #4]
 8006298:	f7ff ff82 	bl	80061a0 <std>
 800629c:	68a0      	ldr	r0, [r4, #8]
 800629e:	2201      	movs	r2, #1
 80062a0:	2109      	movs	r1, #9
 80062a2:	f7ff ff7d 	bl	80061a0 <std>
 80062a6:	68e0      	ldr	r0, [r4, #12]
 80062a8:	2202      	movs	r2, #2
 80062aa:	2112      	movs	r1, #18
 80062ac:	f7ff ff78 	bl	80061a0 <std>
 80062b0:	2301      	movs	r3, #1
 80062b2:	61a3      	str	r3, [r4, #24]
 80062b4:	e7d2      	b.n	800625c <__sinit+0xc>
 80062b6:	bf00      	nop
 80062b8:	08006e70 	.word	0x08006e70
 80062bc:	080061e9 	.word	0x080061e9

080062c0 <__sfp>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	4607      	mov	r7, r0
 80062c4:	f7ff ffac 	bl	8006220 <__sfp_lock_acquire>
 80062c8:	4b1e      	ldr	r3, [pc, #120]	; (8006344 <__sfp+0x84>)
 80062ca:	681e      	ldr	r6, [r3, #0]
 80062cc:	69b3      	ldr	r3, [r6, #24]
 80062ce:	b913      	cbnz	r3, 80062d6 <__sfp+0x16>
 80062d0:	4630      	mov	r0, r6
 80062d2:	f7ff ffbd 	bl	8006250 <__sinit>
 80062d6:	3648      	adds	r6, #72	; 0x48
 80062d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062dc:	3b01      	subs	r3, #1
 80062de:	d503      	bpl.n	80062e8 <__sfp+0x28>
 80062e0:	6833      	ldr	r3, [r6, #0]
 80062e2:	b30b      	cbz	r3, 8006328 <__sfp+0x68>
 80062e4:	6836      	ldr	r6, [r6, #0]
 80062e6:	e7f7      	b.n	80062d8 <__sfp+0x18>
 80062e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062ec:	b9d5      	cbnz	r5, 8006324 <__sfp+0x64>
 80062ee:	4b16      	ldr	r3, [pc, #88]	; (8006348 <__sfp+0x88>)
 80062f0:	60e3      	str	r3, [r4, #12]
 80062f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062f6:	6665      	str	r5, [r4, #100]	; 0x64
 80062f8:	f000 f847 	bl	800638a <__retarget_lock_init_recursive>
 80062fc:	f7ff ff96 	bl	800622c <__sfp_lock_release>
 8006300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006308:	6025      	str	r5, [r4, #0]
 800630a:	61a5      	str	r5, [r4, #24]
 800630c:	2208      	movs	r2, #8
 800630e:	4629      	mov	r1, r5
 8006310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006314:	f7ff fd2c 	bl	8005d70 <memset>
 8006318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800631c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006320:	4620      	mov	r0, r4
 8006322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006324:	3468      	adds	r4, #104	; 0x68
 8006326:	e7d9      	b.n	80062dc <__sfp+0x1c>
 8006328:	2104      	movs	r1, #4
 800632a:	4638      	mov	r0, r7
 800632c:	f7ff ff62 	bl	80061f4 <__sfmoreglue>
 8006330:	4604      	mov	r4, r0
 8006332:	6030      	str	r0, [r6, #0]
 8006334:	2800      	cmp	r0, #0
 8006336:	d1d5      	bne.n	80062e4 <__sfp+0x24>
 8006338:	f7ff ff78 	bl	800622c <__sfp_lock_release>
 800633c:	230c      	movs	r3, #12
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	e7ee      	b.n	8006320 <__sfp+0x60>
 8006342:	bf00      	nop
 8006344:	08006e70 	.word	0x08006e70
 8006348:	ffff0001 	.word	0xffff0001

0800634c <_fwalk_reent>:
 800634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006350:	4606      	mov	r6, r0
 8006352:	4688      	mov	r8, r1
 8006354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006358:	2700      	movs	r7, #0
 800635a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800635e:	f1b9 0901 	subs.w	r9, r9, #1
 8006362:	d505      	bpl.n	8006370 <_fwalk_reent+0x24>
 8006364:	6824      	ldr	r4, [r4, #0]
 8006366:	2c00      	cmp	r4, #0
 8006368:	d1f7      	bne.n	800635a <_fwalk_reent+0xe>
 800636a:	4638      	mov	r0, r7
 800636c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006370:	89ab      	ldrh	r3, [r5, #12]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d907      	bls.n	8006386 <_fwalk_reent+0x3a>
 8006376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800637a:	3301      	adds	r3, #1
 800637c:	d003      	beq.n	8006386 <_fwalk_reent+0x3a>
 800637e:	4629      	mov	r1, r5
 8006380:	4630      	mov	r0, r6
 8006382:	47c0      	blx	r8
 8006384:	4307      	orrs	r7, r0
 8006386:	3568      	adds	r5, #104	; 0x68
 8006388:	e7e9      	b.n	800635e <_fwalk_reent+0x12>

0800638a <__retarget_lock_init_recursive>:
 800638a:	4770      	bx	lr

0800638c <__retarget_lock_acquire_recursive>:
 800638c:	4770      	bx	lr

0800638e <__retarget_lock_release_recursive>:
 800638e:	4770      	bx	lr

08006390 <__swhatbuf_r>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	460e      	mov	r6, r1
 8006394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006398:	2900      	cmp	r1, #0
 800639a:	b096      	sub	sp, #88	; 0x58
 800639c:	4614      	mov	r4, r2
 800639e:	461d      	mov	r5, r3
 80063a0:	da07      	bge.n	80063b2 <__swhatbuf_r+0x22>
 80063a2:	2300      	movs	r3, #0
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	89b3      	ldrh	r3, [r6, #12]
 80063a8:	061a      	lsls	r2, r3, #24
 80063aa:	d410      	bmi.n	80063ce <__swhatbuf_r+0x3e>
 80063ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b0:	e00e      	b.n	80063d0 <__swhatbuf_r+0x40>
 80063b2:	466a      	mov	r2, sp
 80063b4:	f000 fc5e 	bl	8006c74 <_fstat_r>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	dbf2      	blt.n	80063a2 <__swhatbuf_r+0x12>
 80063bc:	9a01      	ldr	r2, [sp, #4]
 80063be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063c6:	425a      	negs	r2, r3
 80063c8:	415a      	adcs	r2, r3
 80063ca:	602a      	str	r2, [r5, #0]
 80063cc:	e7ee      	b.n	80063ac <__swhatbuf_r+0x1c>
 80063ce:	2340      	movs	r3, #64	; 0x40
 80063d0:	2000      	movs	r0, #0
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	b016      	add	sp, #88	; 0x58
 80063d6:	bd70      	pop	{r4, r5, r6, pc}

080063d8 <__smakebuf_r>:
 80063d8:	898b      	ldrh	r3, [r1, #12]
 80063da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063dc:	079d      	lsls	r5, r3, #30
 80063de:	4606      	mov	r6, r0
 80063e0:	460c      	mov	r4, r1
 80063e2:	d507      	bpl.n	80063f4 <__smakebuf_r+0x1c>
 80063e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	6123      	str	r3, [r4, #16]
 80063ec:	2301      	movs	r3, #1
 80063ee:	6163      	str	r3, [r4, #20]
 80063f0:	b002      	add	sp, #8
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	ab01      	add	r3, sp, #4
 80063f6:	466a      	mov	r2, sp
 80063f8:	f7ff ffca 	bl	8006390 <__swhatbuf_r>
 80063fc:	9900      	ldr	r1, [sp, #0]
 80063fe:	4605      	mov	r5, r0
 8006400:	4630      	mov	r0, r6
 8006402:	f000 f879 	bl	80064f8 <_malloc_r>
 8006406:	b948      	cbnz	r0, 800641c <__smakebuf_r+0x44>
 8006408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800640c:	059a      	lsls	r2, r3, #22
 800640e:	d4ef      	bmi.n	80063f0 <__smakebuf_r+0x18>
 8006410:	f023 0303 	bic.w	r3, r3, #3
 8006414:	f043 0302 	orr.w	r3, r3, #2
 8006418:	81a3      	strh	r3, [r4, #12]
 800641a:	e7e3      	b.n	80063e4 <__smakebuf_r+0xc>
 800641c:	4b0d      	ldr	r3, [pc, #52]	; (8006454 <__smakebuf_r+0x7c>)
 800641e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	6020      	str	r0, [r4, #0]
 8006424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006428:	81a3      	strh	r3, [r4, #12]
 800642a:	9b00      	ldr	r3, [sp, #0]
 800642c:	6163      	str	r3, [r4, #20]
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	6120      	str	r0, [r4, #16]
 8006432:	b15b      	cbz	r3, 800644c <__smakebuf_r+0x74>
 8006434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006438:	4630      	mov	r0, r6
 800643a:	f000 fc2d 	bl	8006c98 <_isatty_r>
 800643e:	b128      	cbz	r0, 800644c <__smakebuf_r+0x74>
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f023 0303 	bic.w	r3, r3, #3
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	89a0      	ldrh	r0, [r4, #12]
 800644e:	4305      	orrs	r5, r0
 8006450:	81a5      	strh	r5, [r4, #12]
 8006452:	e7cd      	b.n	80063f0 <__smakebuf_r+0x18>
 8006454:	080061e9 	.word	0x080061e9

08006458 <_free_r>:
 8006458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800645a:	2900      	cmp	r1, #0
 800645c:	d048      	beq.n	80064f0 <_free_r+0x98>
 800645e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006462:	9001      	str	r0, [sp, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f1a1 0404 	sub.w	r4, r1, #4
 800646a:	bfb8      	it	lt
 800646c:	18e4      	addlt	r4, r4, r3
 800646e:	f000 fc35 	bl	8006cdc <__malloc_lock>
 8006472:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <_free_r+0x9c>)
 8006474:	9801      	ldr	r0, [sp, #4]
 8006476:	6813      	ldr	r3, [r2, #0]
 8006478:	4615      	mov	r5, r2
 800647a:	b933      	cbnz	r3, 800648a <_free_r+0x32>
 800647c:	6063      	str	r3, [r4, #4]
 800647e:	6014      	str	r4, [r2, #0]
 8006480:	b003      	add	sp, #12
 8006482:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006486:	f000 bc2f 	b.w	8006ce8 <__malloc_unlock>
 800648a:	42a3      	cmp	r3, r4
 800648c:	d90b      	bls.n	80064a6 <_free_r+0x4e>
 800648e:	6821      	ldr	r1, [r4, #0]
 8006490:	1862      	adds	r2, r4, r1
 8006492:	4293      	cmp	r3, r2
 8006494:	bf04      	itt	eq
 8006496:	681a      	ldreq	r2, [r3, #0]
 8006498:	685b      	ldreq	r3, [r3, #4]
 800649a:	6063      	str	r3, [r4, #4]
 800649c:	bf04      	itt	eq
 800649e:	1852      	addeq	r2, r2, r1
 80064a0:	6022      	streq	r2, [r4, #0]
 80064a2:	602c      	str	r4, [r5, #0]
 80064a4:	e7ec      	b.n	8006480 <_free_r+0x28>
 80064a6:	461a      	mov	r2, r3
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	b10b      	cbz	r3, 80064b0 <_free_r+0x58>
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	d9fa      	bls.n	80064a6 <_free_r+0x4e>
 80064b0:	6811      	ldr	r1, [r2, #0]
 80064b2:	1855      	adds	r5, r2, r1
 80064b4:	42a5      	cmp	r5, r4
 80064b6:	d10b      	bne.n	80064d0 <_free_r+0x78>
 80064b8:	6824      	ldr	r4, [r4, #0]
 80064ba:	4421      	add	r1, r4
 80064bc:	1854      	adds	r4, r2, r1
 80064be:	42a3      	cmp	r3, r4
 80064c0:	6011      	str	r1, [r2, #0]
 80064c2:	d1dd      	bne.n	8006480 <_free_r+0x28>
 80064c4:	681c      	ldr	r4, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	6053      	str	r3, [r2, #4]
 80064ca:	4421      	add	r1, r4
 80064cc:	6011      	str	r1, [r2, #0]
 80064ce:	e7d7      	b.n	8006480 <_free_r+0x28>
 80064d0:	d902      	bls.n	80064d8 <_free_r+0x80>
 80064d2:	230c      	movs	r3, #12
 80064d4:	6003      	str	r3, [r0, #0]
 80064d6:	e7d3      	b.n	8006480 <_free_r+0x28>
 80064d8:	6825      	ldr	r5, [r4, #0]
 80064da:	1961      	adds	r1, r4, r5
 80064dc:	428b      	cmp	r3, r1
 80064de:	bf04      	itt	eq
 80064e0:	6819      	ldreq	r1, [r3, #0]
 80064e2:	685b      	ldreq	r3, [r3, #4]
 80064e4:	6063      	str	r3, [r4, #4]
 80064e6:	bf04      	itt	eq
 80064e8:	1949      	addeq	r1, r1, r5
 80064ea:	6021      	streq	r1, [r4, #0]
 80064ec:	6054      	str	r4, [r2, #4]
 80064ee:	e7c7      	b.n	8006480 <_free_r+0x28>
 80064f0:	b003      	add	sp, #12
 80064f2:	bd30      	pop	{r4, r5, pc}
 80064f4:	200000bc 	.word	0x200000bc

080064f8 <_malloc_r>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	1ccd      	adds	r5, r1, #3
 80064fc:	f025 0503 	bic.w	r5, r5, #3
 8006500:	3508      	adds	r5, #8
 8006502:	2d0c      	cmp	r5, #12
 8006504:	bf38      	it	cc
 8006506:	250c      	movcc	r5, #12
 8006508:	2d00      	cmp	r5, #0
 800650a:	4606      	mov	r6, r0
 800650c:	db01      	blt.n	8006512 <_malloc_r+0x1a>
 800650e:	42a9      	cmp	r1, r5
 8006510:	d903      	bls.n	800651a <_malloc_r+0x22>
 8006512:	230c      	movs	r3, #12
 8006514:	6033      	str	r3, [r6, #0]
 8006516:	2000      	movs	r0, #0
 8006518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800651a:	f000 fbdf 	bl	8006cdc <__malloc_lock>
 800651e:	4921      	ldr	r1, [pc, #132]	; (80065a4 <_malloc_r+0xac>)
 8006520:	680a      	ldr	r2, [r1, #0]
 8006522:	4614      	mov	r4, r2
 8006524:	b99c      	cbnz	r4, 800654e <_malloc_r+0x56>
 8006526:	4f20      	ldr	r7, [pc, #128]	; (80065a8 <_malloc_r+0xb0>)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	b923      	cbnz	r3, 8006536 <_malloc_r+0x3e>
 800652c:	4621      	mov	r1, r4
 800652e:	4630      	mov	r0, r6
 8006530:	f000 fb2a 	bl	8006b88 <_sbrk_r>
 8006534:	6038      	str	r0, [r7, #0]
 8006536:	4629      	mov	r1, r5
 8006538:	4630      	mov	r0, r6
 800653a:	f000 fb25 	bl	8006b88 <_sbrk_r>
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	d123      	bne.n	800658a <_malloc_r+0x92>
 8006542:	230c      	movs	r3, #12
 8006544:	6033      	str	r3, [r6, #0]
 8006546:	4630      	mov	r0, r6
 8006548:	f000 fbce 	bl	8006ce8 <__malloc_unlock>
 800654c:	e7e3      	b.n	8006516 <_malloc_r+0x1e>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	1b5b      	subs	r3, r3, r5
 8006552:	d417      	bmi.n	8006584 <_malloc_r+0x8c>
 8006554:	2b0b      	cmp	r3, #11
 8006556:	d903      	bls.n	8006560 <_malloc_r+0x68>
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	441c      	add	r4, r3
 800655c:	6025      	str	r5, [r4, #0]
 800655e:	e004      	b.n	800656a <_malloc_r+0x72>
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	42a2      	cmp	r2, r4
 8006564:	bf0c      	ite	eq
 8006566:	600b      	streq	r3, [r1, #0]
 8006568:	6053      	strne	r3, [r2, #4]
 800656a:	4630      	mov	r0, r6
 800656c:	f000 fbbc 	bl	8006ce8 <__malloc_unlock>
 8006570:	f104 000b 	add.w	r0, r4, #11
 8006574:	1d23      	adds	r3, r4, #4
 8006576:	f020 0007 	bic.w	r0, r0, #7
 800657a:	1ac2      	subs	r2, r0, r3
 800657c:	d0cc      	beq.n	8006518 <_malloc_r+0x20>
 800657e:	1a1b      	subs	r3, r3, r0
 8006580:	50a3      	str	r3, [r4, r2]
 8006582:	e7c9      	b.n	8006518 <_malloc_r+0x20>
 8006584:	4622      	mov	r2, r4
 8006586:	6864      	ldr	r4, [r4, #4]
 8006588:	e7cc      	b.n	8006524 <_malloc_r+0x2c>
 800658a:	1cc4      	adds	r4, r0, #3
 800658c:	f024 0403 	bic.w	r4, r4, #3
 8006590:	42a0      	cmp	r0, r4
 8006592:	d0e3      	beq.n	800655c <_malloc_r+0x64>
 8006594:	1a21      	subs	r1, r4, r0
 8006596:	4630      	mov	r0, r6
 8006598:	f000 faf6 	bl	8006b88 <_sbrk_r>
 800659c:	3001      	adds	r0, #1
 800659e:	d1dd      	bne.n	800655c <_malloc_r+0x64>
 80065a0:	e7cf      	b.n	8006542 <_malloc_r+0x4a>
 80065a2:	bf00      	nop
 80065a4:	200000bc 	.word	0x200000bc
 80065a8:	200000c0 	.word	0x200000c0

080065ac <__sfputc_r>:
 80065ac:	6893      	ldr	r3, [r2, #8]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	b410      	push	{r4}
 80065b4:	6093      	str	r3, [r2, #8]
 80065b6:	da08      	bge.n	80065ca <__sfputc_r+0x1e>
 80065b8:	6994      	ldr	r4, [r2, #24]
 80065ba:	42a3      	cmp	r3, r4
 80065bc:	db01      	blt.n	80065c2 <__sfputc_r+0x16>
 80065be:	290a      	cmp	r1, #10
 80065c0:	d103      	bne.n	80065ca <__sfputc_r+0x1e>
 80065c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065c6:	f7ff bc69 	b.w	8005e9c <__swbuf_r>
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	1c58      	adds	r0, r3, #1
 80065ce:	6010      	str	r0, [r2, #0]
 80065d0:	7019      	strb	r1, [r3, #0]
 80065d2:	4608      	mov	r0, r1
 80065d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065d8:	4770      	bx	lr

080065da <__sfputs_r>:
 80065da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065dc:	4606      	mov	r6, r0
 80065de:	460f      	mov	r7, r1
 80065e0:	4614      	mov	r4, r2
 80065e2:	18d5      	adds	r5, r2, r3
 80065e4:	42ac      	cmp	r4, r5
 80065e6:	d101      	bne.n	80065ec <__sfputs_r+0x12>
 80065e8:	2000      	movs	r0, #0
 80065ea:	e007      	b.n	80065fc <__sfputs_r+0x22>
 80065ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f0:	463a      	mov	r2, r7
 80065f2:	4630      	mov	r0, r6
 80065f4:	f7ff ffda 	bl	80065ac <__sfputc_r>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d1f3      	bne.n	80065e4 <__sfputs_r+0xa>
 80065fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006600 <_vfiprintf_r>:
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	460d      	mov	r5, r1
 8006606:	b09d      	sub	sp, #116	; 0x74
 8006608:	4614      	mov	r4, r2
 800660a:	4698      	mov	r8, r3
 800660c:	4606      	mov	r6, r0
 800660e:	b118      	cbz	r0, 8006618 <_vfiprintf_r+0x18>
 8006610:	6983      	ldr	r3, [r0, #24]
 8006612:	b90b      	cbnz	r3, 8006618 <_vfiprintf_r+0x18>
 8006614:	f7ff fe1c 	bl	8006250 <__sinit>
 8006618:	4b89      	ldr	r3, [pc, #548]	; (8006840 <_vfiprintf_r+0x240>)
 800661a:	429d      	cmp	r5, r3
 800661c:	d11b      	bne.n	8006656 <_vfiprintf_r+0x56>
 800661e:	6875      	ldr	r5, [r6, #4]
 8006620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006622:	07d9      	lsls	r1, r3, #31
 8006624:	d405      	bmi.n	8006632 <_vfiprintf_r+0x32>
 8006626:	89ab      	ldrh	r3, [r5, #12]
 8006628:	059a      	lsls	r2, r3, #22
 800662a:	d402      	bmi.n	8006632 <_vfiprintf_r+0x32>
 800662c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800662e:	f7ff fead 	bl	800638c <__retarget_lock_acquire_recursive>
 8006632:	89ab      	ldrh	r3, [r5, #12]
 8006634:	071b      	lsls	r3, r3, #28
 8006636:	d501      	bpl.n	800663c <_vfiprintf_r+0x3c>
 8006638:	692b      	ldr	r3, [r5, #16]
 800663a:	b9eb      	cbnz	r3, 8006678 <_vfiprintf_r+0x78>
 800663c:	4629      	mov	r1, r5
 800663e:	4630      	mov	r0, r6
 8006640:	f7ff fc7e 	bl	8005f40 <__swsetup_r>
 8006644:	b1c0      	cbz	r0, 8006678 <_vfiprintf_r+0x78>
 8006646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006648:	07dc      	lsls	r4, r3, #31
 800664a:	d50e      	bpl.n	800666a <_vfiprintf_r+0x6a>
 800664c:	f04f 30ff 	mov.w	r0, #4294967295
 8006650:	b01d      	add	sp, #116	; 0x74
 8006652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006656:	4b7b      	ldr	r3, [pc, #492]	; (8006844 <_vfiprintf_r+0x244>)
 8006658:	429d      	cmp	r5, r3
 800665a:	d101      	bne.n	8006660 <_vfiprintf_r+0x60>
 800665c:	68b5      	ldr	r5, [r6, #8]
 800665e:	e7df      	b.n	8006620 <_vfiprintf_r+0x20>
 8006660:	4b79      	ldr	r3, [pc, #484]	; (8006848 <_vfiprintf_r+0x248>)
 8006662:	429d      	cmp	r5, r3
 8006664:	bf08      	it	eq
 8006666:	68f5      	ldreq	r5, [r6, #12]
 8006668:	e7da      	b.n	8006620 <_vfiprintf_r+0x20>
 800666a:	89ab      	ldrh	r3, [r5, #12]
 800666c:	0598      	lsls	r0, r3, #22
 800666e:	d4ed      	bmi.n	800664c <_vfiprintf_r+0x4c>
 8006670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006672:	f7ff fe8c 	bl	800638e <__retarget_lock_release_recursive>
 8006676:	e7e9      	b.n	800664c <_vfiprintf_r+0x4c>
 8006678:	2300      	movs	r3, #0
 800667a:	9309      	str	r3, [sp, #36]	; 0x24
 800667c:	2320      	movs	r3, #32
 800667e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006682:	f8cd 800c 	str.w	r8, [sp, #12]
 8006686:	2330      	movs	r3, #48	; 0x30
 8006688:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800684c <_vfiprintf_r+0x24c>
 800668c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006690:	f04f 0901 	mov.w	r9, #1
 8006694:	4623      	mov	r3, r4
 8006696:	469a      	mov	sl, r3
 8006698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800669c:	b10a      	cbz	r2, 80066a2 <_vfiprintf_r+0xa2>
 800669e:	2a25      	cmp	r2, #37	; 0x25
 80066a0:	d1f9      	bne.n	8006696 <_vfiprintf_r+0x96>
 80066a2:	ebba 0b04 	subs.w	fp, sl, r4
 80066a6:	d00b      	beq.n	80066c0 <_vfiprintf_r+0xc0>
 80066a8:	465b      	mov	r3, fp
 80066aa:	4622      	mov	r2, r4
 80066ac:	4629      	mov	r1, r5
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7ff ff93 	bl	80065da <__sfputs_r>
 80066b4:	3001      	adds	r0, #1
 80066b6:	f000 80aa 	beq.w	800680e <_vfiprintf_r+0x20e>
 80066ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066bc:	445a      	add	r2, fp
 80066be:	9209      	str	r2, [sp, #36]	; 0x24
 80066c0:	f89a 3000 	ldrb.w	r3, [sl]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80a2 	beq.w	800680e <_vfiprintf_r+0x20e>
 80066ca:	2300      	movs	r3, #0
 80066cc:	f04f 32ff 	mov.w	r2, #4294967295
 80066d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066d4:	f10a 0a01 	add.w	sl, sl, #1
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	9307      	str	r3, [sp, #28]
 80066dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066e0:	931a      	str	r3, [sp, #104]	; 0x68
 80066e2:	4654      	mov	r4, sl
 80066e4:	2205      	movs	r2, #5
 80066e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ea:	4858      	ldr	r0, [pc, #352]	; (800684c <_vfiprintf_r+0x24c>)
 80066ec:	f7f9 fd78 	bl	80001e0 <memchr>
 80066f0:	9a04      	ldr	r2, [sp, #16]
 80066f2:	b9d8      	cbnz	r0, 800672c <_vfiprintf_r+0x12c>
 80066f4:	06d1      	lsls	r1, r2, #27
 80066f6:	bf44      	itt	mi
 80066f8:	2320      	movmi	r3, #32
 80066fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066fe:	0713      	lsls	r3, r2, #28
 8006700:	bf44      	itt	mi
 8006702:	232b      	movmi	r3, #43	; 0x2b
 8006704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006708:	f89a 3000 	ldrb.w	r3, [sl]
 800670c:	2b2a      	cmp	r3, #42	; 0x2a
 800670e:	d015      	beq.n	800673c <_vfiprintf_r+0x13c>
 8006710:	9a07      	ldr	r2, [sp, #28]
 8006712:	4654      	mov	r4, sl
 8006714:	2000      	movs	r0, #0
 8006716:	f04f 0c0a 	mov.w	ip, #10
 800671a:	4621      	mov	r1, r4
 800671c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006720:	3b30      	subs	r3, #48	; 0x30
 8006722:	2b09      	cmp	r3, #9
 8006724:	d94e      	bls.n	80067c4 <_vfiprintf_r+0x1c4>
 8006726:	b1b0      	cbz	r0, 8006756 <_vfiprintf_r+0x156>
 8006728:	9207      	str	r2, [sp, #28]
 800672a:	e014      	b.n	8006756 <_vfiprintf_r+0x156>
 800672c:	eba0 0308 	sub.w	r3, r0, r8
 8006730:	fa09 f303 	lsl.w	r3, r9, r3
 8006734:	4313      	orrs	r3, r2
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	46a2      	mov	sl, r4
 800673a:	e7d2      	b.n	80066e2 <_vfiprintf_r+0xe2>
 800673c:	9b03      	ldr	r3, [sp, #12]
 800673e:	1d19      	adds	r1, r3, #4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	9103      	str	r1, [sp, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	bfbb      	ittet	lt
 8006748:	425b      	neglt	r3, r3
 800674a:	f042 0202 	orrlt.w	r2, r2, #2
 800674e:	9307      	strge	r3, [sp, #28]
 8006750:	9307      	strlt	r3, [sp, #28]
 8006752:	bfb8      	it	lt
 8006754:	9204      	strlt	r2, [sp, #16]
 8006756:	7823      	ldrb	r3, [r4, #0]
 8006758:	2b2e      	cmp	r3, #46	; 0x2e
 800675a:	d10c      	bne.n	8006776 <_vfiprintf_r+0x176>
 800675c:	7863      	ldrb	r3, [r4, #1]
 800675e:	2b2a      	cmp	r3, #42	; 0x2a
 8006760:	d135      	bne.n	80067ce <_vfiprintf_r+0x1ce>
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	1d1a      	adds	r2, r3, #4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	9203      	str	r2, [sp, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	bfb8      	it	lt
 800676e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006772:	3402      	adds	r4, #2
 8006774:	9305      	str	r3, [sp, #20]
 8006776:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800685c <_vfiprintf_r+0x25c>
 800677a:	7821      	ldrb	r1, [r4, #0]
 800677c:	2203      	movs	r2, #3
 800677e:	4650      	mov	r0, sl
 8006780:	f7f9 fd2e 	bl	80001e0 <memchr>
 8006784:	b140      	cbz	r0, 8006798 <_vfiprintf_r+0x198>
 8006786:	2340      	movs	r3, #64	; 0x40
 8006788:	eba0 000a 	sub.w	r0, r0, sl
 800678c:	fa03 f000 	lsl.w	r0, r3, r0
 8006790:	9b04      	ldr	r3, [sp, #16]
 8006792:	4303      	orrs	r3, r0
 8006794:	3401      	adds	r4, #1
 8006796:	9304      	str	r3, [sp, #16]
 8006798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679c:	482c      	ldr	r0, [pc, #176]	; (8006850 <_vfiprintf_r+0x250>)
 800679e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067a2:	2206      	movs	r2, #6
 80067a4:	f7f9 fd1c 	bl	80001e0 <memchr>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d03f      	beq.n	800682c <_vfiprintf_r+0x22c>
 80067ac:	4b29      	ldr	r3, [pc, #164]	; (8006854 <_vfiprintf_r+0x254>)
 80067ae:	bb1b      	cbnz	r3, 80067f8 <_vfiprintf_r+0x1f8>
 80067b0:	9b03      	ldr	r3, [sp, #12]
 80067b2:	3307      	adds	r3, #7
 80067b4:	f023 0307 	bic.w	r3, r3, #7
 80067b8:	3308      	adds	r3, #8
 80067ba:	9303      	str	r3, [sp, #12]
 80067bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067be:	443b      	add	r3, r7
 80067c0:	9309      	str	r3, [sp, #36]	; 0x24
 80067c2:	e767      	b.n	8006694 <_vfiprintf_r+0x94>
 80067c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80067c8:	460c      	mov	r4, r1
 80067ca:	2001      	movs	r0, #1
 80067cc:	e7a5      	b.n	800671a <_vfiprintf_r+0x11a>
 80067ce:	2300      	movs	r3, #0
 80067d0:	3401      	adds	r4, #1
 80067d2:	9305      	str	r3, [sp, #20]
 80067d4:	4619      	mov	r1, r3
 80067d6:	f04f 0c0a 	mov.w	ip, #10
 80067da:	4620      	mov	r0, r4
 80067dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067e0:	3a30      	subs	r2, #48	; 0x30
 80067e2:	2a09      	cmp	r2, #9
 80067e4:	d903      	bls.n	80067ee <_vfiprintf_r+0x1ee>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0c5      	beq.n	8006776 <_vfiprintf_r+0x176>
 80067ea:	9105      	str	r1, [sp, #20]
 80067ec:	e7c3      	b.n	8006776 <_vfiprintf_r+0x176>
 80067ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80067f2:	4604      	mov	r4, r0
 80067f4:	2301      	movs	r3, #1
 80067f6:	e7f0      	b.n	80067da <_vfiprintf_r+0x1da>
 80067f8:	ab03      	add	r3, sp, #12
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	462a      	mov	r2, r5
 80067fe:	4b16      	ldr	r3, [pc, #88]	; (8006858 <_vfiprintf_r+0x258>)
 8006800:	a904      	add	r1, sp, #16
 8006802:	4630      	mov	r0, r6
 8006804:	f3af 8000 	nop.w
 8006808:	4607      	mov	r7, r0
 800680a:	1c78      	adds	r0, r7, #1
 800680c:	d1d6      	bne.n	80067bc <_vfiprintf_r+0x1bc>
 800680e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006810:	07d9      	lsls	r1, r3, #31
 8006812:	d405      	bmi.n	8006820 <_vfiprintf_r+0x220>
 8006814:	89ab      	ldrh	r3, [r5, #12]
 8006816:	059a      	lsls	r2, r3, #22
 8006818:	d402      	bmi.n	8006820 <_vfiprintf_r+0x220>
 800681a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800681c:	f7ff fdb7 	bl	800638e <__retarget_lock_release_recursive>
 8006820:	89ab      	ldrh	r3, [r5, #12]
 8006822:	065b      	lsls	r3, r3, #25
 8006824:	f53f af12 	bmi.w	800664c <_vfiprintf_r+0x4c>
 8006828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800682a:	e711      	b.n	8006650 <_vfiprintf_r+0x50>
 800682c:	ab03      	add	r3, sp, #12
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	462a      	mov	r2, r5
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <_vfiprintf_r+0x258>)
 8006834:	a904      	add	r1, sp, #16
 8006836:	4630      	mov	r0, r6
 8006838:	f000 f880 	bl	800693c <_printf_i>
 800683c:	e7e4      	b.n	8006808 <_vfiprintf_r+0x208>
 800683e:	bf00      	nop
 8006840:	08006e94 	.word	0x08006e94
 8006844:	08006eb4 	.word	0x08006eb4
 8006848:	08006e74 	.word	0x08006e74
 800684c:	08006ed4 	.word	0x08006ed4
 8006850:	08006ede 	.word	0x08006ede
 8006854:	00000000 	.word	0x00000000
 8006858:	080065db 	.word	0x080065db
 800685c:	08006eda 	.word	0x08006eda

08006860 <_printf_common>:
 8006860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006864:	4616      	mov	r6, r2
 8006866:	4699      	mov	r9, r3
 8006868:	688a      	ldr	r2, [r1, #8]
 800686a:	690b      	ldr	r3, [r1, #16]
 800686c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006870:	4293      	cmp	r3, r2
 8006872:	bfb8      	it	lt
 8006874:	4613      	movlt	r3, r2
 8006876:	6033      	str	r3, [r6, #0]
 8006878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800687c:	4607      	mov	r7, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b10a      	cbz	r2, 8006886 <_printf_common+0x26>
 8006882:	3301      	adds	r3, #1
 8006884:	6033      	str	r3, [r6, #0]
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	0699      	lsls	r1, r3, #26
 800688a:	bf42      	ittt	mi
 800688c:	6833      	ldrmi	r3, [r6, #0]
 800688e:	3302      	addmi	r3, #2
 8006890:	6033      	strmi	r3, [r6, #0]
 8006892:	6825      	ldr	r5, [r4, #0]
 8006894:	f015 0506 	ands.w	r5, r5, #6
 8006898:	d106      	bne.n	80068a8 <_printf_common+0x48>
 800689a:	f104 0a19 	add.w	sl, r4, #25
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	6832      	ldr	r2, [r6, #0]
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	42ab      	cmp	r3, r5
 80068a6:	dc26      	bgt.n	80068f6 <_printf_common+0x96>
 80068a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068ac:	1e13      	subs	r3, r2, #0
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	bf18      	it	ne
 80068b2:	2301      	movne	r3, #1
 80068b4:	0692      	lsls	r2, r2, #26
 80068b6:	d42b      	bmi.n	8006910 <_printf_common+0xb0>
 80068b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068bc:	4649      	mov	r1, r9
 80068be:	4638      	mov	r0, r7
 80068c0:	47c0      	blx	r8
 80068c2:	3001      	adds	r0, #1
 80068c4:	d01e      	beq.n	8006904 <_printf_common+0xa4>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	68e5      	ldr	r5, [r4, #12]
 80068ca:	6832      	ldr	r2, [r6, #0]
 80068cc:	f003 0306 	and.w	r3, r3, #6
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	bf08      	it	eq
 80068d4:	1aad      	subeq	r5, r5, r2
 80068d6:	68a3      	ldr	r3, [r4, #8]
 80068d8:	6922      	ldr	r2, [r4, #16]
 80068da:	bf0c      	ite	eq
 80068dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e0:	2500      	movne	r5, #0
 80068e2:	4293      	cmp	r3, r2
 80068e4:	bfc4      	itt	gt
 80068e6:	1a9b      	subgt	r3, r3, r2
 80068e8:	18ed      	addgt	r5, r5, r3
 80068ea:	2600      	movs	r6, #0
 80068ec:	341a      	adds	r4, #26
 80068ee:	42b5      	cmp	r5, r6
 80068f0:	d11a      	bne.n	8006928 <_printf_common+0xc8>
 80068f2:	2000      	movs	r0, #0
 80068f4:	e008      	b.n	8006908 <_printf_common+0xa8>
 80068f6:	2301      	movs	r3, #1
 80068f8:	4652      	mov	r2, sl
 80068fa:	4649      	mov	r1, r9
 80068fc:	4638      	mov	r0, r7
 80068fe:	47c0      	blx	r8
 8006900:	3001      	adds	r0, #1
 8006902:	d103      	bne.n	800690c <_printf_common+0xac>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690c:	3501      	adds	r5, #1
 800690e:	e7c6      	b.n	800689e <_printf_common+0x3e>
 8006910:	18e1      	adds	r1, r4, r3
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	2030      	movs	r0, #48	; 0x30
 8006916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800691a:	4422      	add	r2, r4
 800691c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006924:	3302      	adds	r3, #2
 8006926:	e7c7      	b.n	80068b8 <_printf_common+0x58>
 8006928:	2301      	movs	r3, #1
 800692a:	4622      	mov	r2, r4
 800692c:	4649      	mov	r1, r9
 800692e:	4638      	mov	r0, r7
 8006930:	47c0      	blx	r8
 8006932:	3001      	adds	r0, #1
 8006934:	d0e6      	beq.n	8006904 <_printf_common+0xa4>
 8006936:	3601      	adds	r6, #1
 8006938:	e7d9      	b.n	80068ee <_printf_common+0x8e>
	...

0800693c <_printf_i>:
 800693c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	460c      	mov	r4, r1
 8006942:	4691      	mov	r9, r2
 8006944:	7e27      	ldrb	r7, [r4, #24]
 8006946:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006948:	2f78      	cmp	r7, #120	; 0x78
 800694a:	4680      	mov	r8, r0
 800694c:	469a      	mov	sl, r3
 800694e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006952:	d807      	bhi.n	8006964 <_printf_i+0x28>
 8006954:	2f62      	cmp	r7, #98	; 0x62
 8006956:	d80a      	bhi.n	800696e <_printf_i+0x32>
 8006958:	2f00      	cmp	r7, #0
 800695a:	f000 80d8 	beq.w	8006b0e <_printf_i+0x1d2>
 800695e:	2f58      	cmp	r7, #88	; 0x58
 8006960:	f000 80a3 	beq.w	8006aaa <_printf_i+0x16e>
 8006964:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800696c:	e03a      	b.n	80069e4 <_printf_i+0xa8>
 800696e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006972:	2b15      	cmp	r3, #21
 8006974:	d8f6      	bhi.n	8006964 <_printf_i+0x28>
 8006976:	a001      	add	r0, pc, #4	; (adr r0, 800697c <_printf_i+0x40>)
 8006978:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800697c:	080069d5 	.word	0x080069d5
 8006980:	080069e9 	.word	0x080069e9
 8006984:	08006965 	.word	0x08006965
 8006988:	08006965 	.word	0x08006965
 800698c:	08006965 	.word	0x08006965
 8006990:	08006965 	.word	0x08006965
 8006994:	080069e9 	.word	0x080069e9
 8006998:	08006965 	.word	0x08006965
 800699c:	08006965 	.word	0x08006965
 80069a0:	08006965 	.word	0x08006965
 80069a4:	08006965 	.word	0x08006965
 80069a8:	08006af5 	.word	0x08006af5
 80069ac:	08006a19 	.word	0x08006a19
 80069b0:	08006ad7 	.word	0x08006ad7
 80069b4:	08006965 	.word	0x08006965
 80069b8:	08006965 	.word	0x08006965
 80069bc:	08006b17 	.word	0x08006b17
 80069c0:	08006965 	.word	0x08006965
 80069c4:	08006a19 	.word	0x08006a19
 80069c8:	08006965 	.word	0x08006965
 80069cc:	08006965 	.word	0x08006965
 80069d0:	08006adf 	.word	0x08006adf
 80069d4:	680b      	ldr	r3, [r1, #0]
 80069d6:	1d1a      	adds	r2, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	600a      	str	r2, [r1, #0]
 80069dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069e4:	2301      	movs	r3, #1
 80069e6:	e0a3      	b.n	8006b30 <_printf_i+0x1f4>
 80069e8:	6825      	ldr	r5, [r4, #0]
 80069ea:	6808      	ldr	r0, [r1, #0]
 80069ec:	062e      	lsls	r6, r5, #24
 80069ee:	f100 0304 	add.w	r3, r0, #4
 80069f2:	d50a      	bpl.n	8006a0a <_printf_i+0xce>
 80069f4:	6805      	ldr	r5, [r0, #0]
 80069f6:	600b      	str	r3, [r1, #0]
 80069f8:	2d00      	cmp	r5, #0
 80069fa:	da03      	bge.n	8006a04 <_printf_i+0xc8>
 80069fc:	232d      	movs	r3, #45	; 0x2d
 80069fe:	426d      	negs	r5, r5
 8006a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a04:	485e      	ldr	r0, [pc, #376]	; (8006b80 <_printf_i+0x244>)
 8006a06:	230a      	movs	r3, #10
 8006a08:	e019      	b.n	8006a3e <_printf_i+0x102>
 8006a0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a0e:	6805      	ldr	r5, [r0, #0]
 8006a10:	600b      	str	r3, [r1, #0]
 8006a12:	bf18      	it	ne
 8006a14:	b22d      	sxthne	r5, r5
 8006a16:	e7ef      	b.n	80069f8 <_printf_i+0xbc>
 8006a18:	680b      	ldr	r3, [r1, #0]
 8006a1a:	6825      	ldr	r5, [r4, #0]
 8006a1c:	1d18      	adds	r0, r3, #4
 8006a1e:	6008      	str	r0, [r1, #0]
 8006a20:	0628      	lsls	r0, r5, #24
 8006a22:	d501      	bpl.n	8006a28 <_printf_i+0xec>
 8006a24:	681d      	ldr	r5, [r3, #0]
 8006a26:	e002      	b.n	8006a2e <_printf_i+0xf2>
 8006a28:	0669      	lsls	r1, r5, #25
 8006a2a:	d5fb      	bpl.n	8006a24 <_printf_i+0xe8>
 8006a2c:	881d      	ldrh	r5, [r3, #0]
 8006a2e:	4854      	ldr	r0, [pc, #336]	; (8006b80 <_printf_i+0x244>)
 8006a30:	2f6f      	cmp	r7, #111	; 0x6f
 8006a32:	bf0c      	ite	eq
 8006a34:	2308      	moveq	r3, #8
 8006a36:	230a      	movne	r3, #10
 8006a38:	2100      	movs	r1, #0
 8006a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a3e:	6866      	ldr	r6, [r4, #4]
 8006a40:	60a6      	str	r6, [r4, #8]
 8006a42:	2e00      	cmp	r6, #0
 8006a44:	bfa2      	ittt	ge
 8006a46:	6821      	ldrge	r1, [r4, #0]
 8006a48:	f021 0104 	bicge.w	r1, r1, #4
 8006a4c:	6021      	strge	r1, [r4, #0]
 8006a4e:	b90d      	cbnz	r5, 8006a54 <_printf_i+0x118>
 8006a50:	2e00      	cmp	r6, #0
 8006a52:	d04d      	beq.n	8006af0 <_printf_i+0x1b4>
 8006a54:	4616      	mov	r6, r2
 8006a56:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a5a:	fb03 5711 	mls	r7, r3, r1, r5
 8006a5e:	5dc7      	ldrb	r7, [r0, r7]
 8006a60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a64:	462f      	mov	r7, r5
 8006a66:	42bb      	cmp	r3, r7
 8006a68:	460d      	mov	r5, r1
 8006a6a:	d9f4      	bls.n	8006a56 <_printf_i+0x11a>
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d10b      	bne.n	8006a88 <_printf_i+0x14c>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	07df      	lsls	r7, r3, #31
 8006a74:	d508      	bpl.n	8006a88 <_printf_i+0x14c>
 8006a76:	6923      	ldr	r3, [r4, #16]
 8006a78:	6861      	ldr	r1, [r4, #4]
 8006a7a:	4299      	cmp	r1, r3
 8006a7c:	bfde      	ittt	le
 8006a7e:	2330      	movle	r3, #48	; 0x30
 8006a80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a88:	1b92      	subs	r2, r2, r6
 8006a8a:	6122      	str	r2, [r4, #16]
 8006a8c:	f8cd a000 	str.w	sl, [sp]
 8006a90:	464b      	mov	r3, r9
 8006a92:	aa03      	add	r2, sp, #12
 8006a94:	4621      	mov	r1, r4
 8006a96:	4640      	mov	r0, r8
 8006a98:	f7ff fee2 	bl	8006860 <_printf_common>
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d14c      	bne.n	8006b3a <_printf_i+0x1fe>
 8006aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa4:	b004      	add	sp, #16
 8006aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aaa:	4835      	ldr	r0, [pc, #212]	; (8006b80 <_printf_i+0x244>)
 8006aac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	680e      	ldr	r6, [r1, #0]
 8006ab4:	061f      	lsls	r7, r3, #24
 8006ab6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006aba:	600e      	str	r6, [r1, #0]
 8006abc:	d514      	bpl.n	8006ae8 <_printf_i+0x1ac>
 8006abe:	07d9      	lsls	r1, r3, #31
 8006ac0:	bf44      	itt	mi
 8006ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ac6:	6023      	strmi	r3, [r4, #0]
 8006ac8:	b91d      	cbnz	r5, 8006ad2 <_printf_i+0x196>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	f023 0320 	bic.w	r3, r3, #32
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	e7b0      	b.n	8006a38 <_printf_i+0xfc>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	f043 0320 	orr.w	r3, r3, #32
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	2378      	movs	r3, #120	; 0x78
 8006ae0:	4828      	ldr	r0, [pc, #160]	; (8006b84 <_printf_i+0x248>)
 8006ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ae6:	e7e3      	b.n	8006ab0 <_printf_i+0x174>
 8006ae8:	065e      	lsls	r6, r3, #25
 8006aea:	bf48      	it	mi
 8006aec:	b2ad      	uxthmi	r5, r5
 8006aee:	e7e6      	b.n	8006abe <_printf_i+0x182>
 8006af0:	4616      	mov	r6, r2
 8006af2:	e7bb      	b.n	8006a6c <_printf_i+0x130>
 8006af4:	680b      	ldr	r3, [r1, #0]
 8006af6:	6826      	ldr	r6, [r4, #0]
 8006af8:	6960      	ldr	r0, [r4, #20]
 8006afa:	1d1d      	adds	r5, r3, #4
 8006afc:	600d      	str	r5, [r1, #0]
 8006afe:	0635      	lsls	r5, r6, #24
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	d501      	bpl.n	8006b08 <_printf_i+0x1cc>
 8006b04:	6018      	str	r0, [r3, #0]
 8006b06:	e002      	b.n	8006b0e <_printf_i+0x1d2>
 8006b08:	0671      	lsls	r1, r6, #25
 8006b0a:	d5fb      	bpl.n	8006b04 <_printf_i+0x1c8>
 8006b0c:	8018      	strh	r0, [r3, #0]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	6123      	str	r3, [r4, #16]
 8006b12:	4616      	mov	r6, r2
 8006b14:	e7ba      	b.n	8006a8c <_printf_i+0x150>
 8006b16:	680b      	ldr	r3, [r1, #0]
 8006b18:	1d1a      	adds	r2, r3, #4
 8006b1a:	600a      	str	r2, [r1, #0]
 8006b1c:	681e      	ldr	r6, [r3, #0]
 8006b1e:	6862      	ldr	r2, [r4, #4]
 8006b20:	2100      	movs	r1, #0
 8006b22:	4630      	mov	r0, r6
 8006b24:	f7f9 fb5c 	bl	80001e0 <memchr>
 8006b28:	b108      	cbz	r0, 8006b2e <_printf_i+0x1f2>
 8006b2a:	1b80      	subs	r0, r0, r6
 8006b2c:	6060      	str	r0, [r4, #4]
 8006b2e:	6863      	ldr	r3, [r4, #4]
 8006b30:	6123      	str	r3, [r4, #16]
 8006b32:	2300      	movs	r3, #0
 8006b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b38:	e7a8      	b.n	8006a8c <_printf_i+0x150>
 8006b3a:	6923      	ldr	r3, [r4, #16]
 8006b3c:	4632      	mov	r2, r6
 8006b3e:	4649      	mov	r1, r9
 8006b40:	4640      	mov	r0, r8
 8006b42:	47d0      	blx	sl
 8006b44:	3001      	adds	r0, #1
 8006b46:	d0ab      	beq.n	8006aa0 <_printf_i+0x164>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	079b      	lsls	r3, r3, #30
 8006b4c:	d413      	bmi.n	8006b76 <_printf_i+0x23a>
 8006b4e:	68e0      	ldr	r0, [r4, #12]
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	4298      	cmp	r0, r3
 8006b54:	bfb8      	it	lt
 8006b56:	4618      	movlt	r0, r3
 8006b58:	e7a4      	b.n	8006aa4 <_printf_i+0x168>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	4632      	mov	r2, r6
 8006b5e:	4649      	mov	r1, r9
 8006b60:	4640      	mov	r0, r8
 8006b62:	47d0      	blx	sl
 8006b64:	3001      	adds	r0, #1
 8006b66:	d09b      	beq.n	8006aa0 <_printf_i+0x164>
 8006b68:	3501      	adds	r5, #1
 8006b6a:	68e3      	ldr	r3, [r4, #12]
 8006b6c:	9903      	ldr	r1, [sp, #12]
 8006b6e:	1a5b      	subs	r3, r3, r1
 8006b70:	42ab      	cmp	r3, r5
 8006b72:	dcf2      	bgt.n	8006b5a <_printf_i+0x21e>
 8006b74:	e7eb      	b.n	8006b4e <_printf_i+0x212>
 8006b76:	2500      	movs	r5, #0
 8006b78:	f104 0619 	add.w	r6, r4, #25
 8006b7c:	e7f5      	b.n	8006b6a <_printf_i+0x22e>
 8006b7e:	bf00      	nop
 8006b80:	08006ee5 	.word	0x08006ee5
 8006b84:	08006ef6 	.word	0x08006ef6

08006b88 <_sbrk_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4d06      	ldr	r5, [pc, #24]	; (8006ba4 <_sbrk_r+0x1c>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	f000 f928 	bl	8006de8 <_sbrk>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d102      	bne.n	8006ba2 <_sbrk_r+0x1a>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	b103      	cbz	r3, 8006ba2 <_sbrk_r+0x1a>
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	20000688 	.word	0x20000688

08006ba8 <__sread>:
 8006ba8:	b510      	push	{r4, lr}
 8006baa:	460c      	mov	r4, r1
 8006bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb0:	f000 f8a0 	bl	8006cf4 <_read_r>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	bfab      	itete	ge
 8006bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bba:	89a3      	ldrhlt	r3, [r4, #12]
 8006bbc:	181b      	addge	r3, r3, r0
 8006bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bc2:	bfac      	ite	ge
 8006bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bc6:	81a3      	strhlt	r3, [r4, #12]
 8006bc8:	bd10      	pop	{r4, pc}

08006bca <__swrite>:
 8006bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bce:	461f      	mov	r7, r3
 8006bd0:	898b      	ldrh	r3, [r1, #12]
 8006bd2:	05db      	lsls	r3, r3, #23
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	4616      	mov	r6, r2
 8006bda:	d505      	bpl.n	8006be8 <__swrite+0x1e>
 8006bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be0:	2302      	movs	r3, #2
 8006be2:	2200      	movs	r2, #0
 8006be4:	f000 f868 	bl	8006cb8 <_lseek_r>
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfe:	f000 b817 	b.w	8006c30 <_write_r>

08006c02 <__sseek>:
 8006c02:	b510      	push	{r4, lr}
 8006c04:	460c      	mov	r4, r1
 8006c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0a:	f000 f855 	bl	8006cb8 <_lseek_r>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	bf15      	itete	ne
 8006c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c1e:	81a3      	strheq	r3, [r4, #12]
 8006c20:	bf18      	it	ne
 8006c22:	81a3      	strhne	r3, [r4, #12]
 8006c24:	bd10      	pop	{r4, pc}

08006c26 <__sclose>:
 8006c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2a:	f000 b813 	b.w	8006c54 <_close_r>
	...

08006c30 <_write_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4d07      	ldr	r5, [pc, #28]	; (8006c50 <_write_r+0x20>)
 8006c34:	4604      	mov	r4, r0
 8006c36:	4608      	mov	r0, r1
 8006c38:	4611      	mov	r1, r2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	602a      	str	r2, [r5, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f000 f8e0 	bl	8006e04 <_write>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d102      	bne.n	8006c4e <_write_r+0x1e>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	b103      	cbz	r3, 8006c4e <_write_r+0x1e>
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	20000688 	.word	0x20000688

08006c54 <_close_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4d06      	ldr	r5, [pc, #24]	; (8006c70 <_close_r+0x1c>)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	4608      	mov	r0, r1
 8006c5e:	602b      	str	r3, [r5, #0]
 8006c60:	f000 f89a 	bl	8006d98 <_close>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d102      	bne.n	8006c6e <_close_r+0x1a>
 8006c68:	682b      	ldr	r3, [r5, #0]
 8006c6a:	b103      	cbz	r3, 8006c6e <_close_r+0x1a>
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	20000688 	.word	0x20000688

08006c74 <_fstat_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4d07      	ldr	r5, [pc, #28]	; (8006c94 <_fstat_r+0x20>)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	4611      	mov	r1, r2
 8006c80:	602b      	str	r3, [r5, #0]
 8006c82:	f000 f891 	bl	8006da8 <_fstat>
 8006c86:	1c43      	adds	r3, r0, #1
 8006c88:	d102      	bne.n	8006c90 <_fstat_r+0x1c>
 8006c8a:	682b      	ldr	r3, [r5, #0]
 8006c8c:	b103      	cbz	r3, 8006c90 <_fstat_r+0x1c>
 8006c8e:	6023      	str	r3, [r4, #0]
 8006c90:	bd38      	pop	{r3, r4, r5, pc}
 8006c92:	bf00      	nop
 8006c94:	20000688 	.word	0x20000688

08006c98 <_isatty_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4d06      	ldr	r5, [pc, #24]	; (8006cb4 <_isatty_r+0x1c>)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	f000 f888 	bl	8006db8 <_isatty>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_isatty_r+0x1a>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_isatty_r+0x1a>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	20000688 	.word	0x20000688

08006cb8 <_lseek_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	; (8006cd8 <_lseek_r+0x20>)
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	4608      	mov	r0, r1
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f000 f87e 	bl	8006dc8 <_lseek>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_lseek_r+0x1e>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_lseek_r+0x1e>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	20000688 	.word	0x20000688

08006cdc <__malloc_lock>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	; (8006ce4 <__malloc_lock+0x8>)
 8006cde:	f7ff bb55 	b.w	800638c <__retarget_lock_acquire_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	20000680 	.word	0x20000680

08006ce8 <__malloc_unlock>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	; (8006cf0 <__malloc_unlock+0x8>)
 8006cea:	f7ff bb50 	b.w	800638e <__retarget_lock_release_recursive>
 8006cee:	bf00      	nop
 8006cf0:	20000680 	.word	0x20000680

08006cf4 <_read_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d07      	ldr	r5, [pc, #28]	; (8006d14 <_read_r+0x20>)
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	4608      	mov	r0, r1
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	2200      	movs	r2, #0
 8006d00:	602a      	str	r2, [r5, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	f000 f868 	bl	8006dd8 <_read>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d102      	bne.n	8006d12 <_read_r+0x1e>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	b103      	cbz	r3, 8006d12 <_read_r+0x1e>
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	20000688 	.word	0x20000688

08006d18 <lrintf>:
 8006d18:	ee10 3a10 	vmov	r3, s0
 8006d1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006d20:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8006d24:	281e      	cmp	r0, #30
 8006d26:	b082      	sub	sp, #8
 8006d28:	dc2e      	bgt.n	8006d88 <lrintf+0x70>
 8006d2a:	1c41      	adds	r1, r0, #1
 8006d2c:	da02      	bge.n	8006d34 <lrintf+0x1c>
 8006d2e:	2000      	movs	r0, #0
 8006d30:	b002      	add	sp, #8
 8006d32:	4770      	bx	lr
 8006d34:	2816      	cmp	r0, #22
 8006d36:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8006d3a:	dd09      	ble.n	8006d50 <lrintf+0x38>
 8006d3c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d44:	3a96      	subs	r2, #150	; 0x96
 8006d46:	4090      	lsls	r0, r2
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	d0f1      	beq.n	8006d30 <lrintf+0x18>
 8006d4c:	4240      	negs	r0, r0
 8006d4e:	e7ef      	b.n	8006d30 <lrintf+0x18>
 8006d50:	4b10      	ldr	r3, [pc, #64]	; (8006d94 <lrintf+0x7c>)
 8006d52:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006d56:	ed93 7a00 	vldr	s14, [r3]
 8006d5a:	ee37 0a00 	vadd.f32	s0, s14, s0
 8006d5e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006d62:	eddd 7a01 	vldr	s15, [sp, #4]
 8006d66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d6a:	ee17 3a90 	vmov	r3, s15
 8006d6e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006d72:	d0dc      	beq.n	8006d2e <lrintf+0x16>
 8006d74:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006d78:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8006d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d80:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006d84:	40d8      	lsrs	r0, r3
 8006d86:	e7df      	b.n	8006d48 <lrintf+0x30>
 8006d88:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006d8c:	ee17 0a90 	vmov	r0, s15
 8006d90:	e7ce      	b.n	8006d30 <lrintf+0x18>
 8006d92:	bf00      	nop
 8006d94:	08006f08 	.word	0x08006f08

08006d98 <_close>:
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <_close+0xc>)
 8006d9a:	2258      	movs	r2, #88	; 0x58
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006da2:	4770      	bx	lr
 8006da4:	20000688 	.word	0x20000688

08006da8 <_fstat>:
 8006da8:	4b02      	ldr	r3, [pc, #8]	; (8006db4 <_fstat+0xc>)
 8006daa:	2258      	movs	r2, #88	; 0x58
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	f04f 30ff 	mov.w	r0, #4294967295
 8006db2:	4770      	bx	lr
 8006db4:	20000688 	.word	0x20000688

08006db8 <_isatty>:
 8006db8:	4b02      	ldr	r3, [pc, #8]	; (8006dc4 <_isatty+0xc>)
 8006dba:	2258      	movs	r2, #88	; 0x58
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20000688 	.word	0x20000688

08006dc8 <_lseek>:
 8006dc8:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <_lseek+0xc>)
 8006dca:	2258      	movs	r2, #88	; 0x58
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd2:	4770      	bx	lr
 8006dd4:	20000688 	.word	0x20000688

08006dd8 <_read>:
 8006dd8:	4b02      	ldr	r3, [pc, #8]	; (8006de4 <_read+0xc>)
 8006dda:	2258      	movs	r2, #88	; 0x58
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295
 8006de2:	4770      	bx	lr
 8006de4:	20000688 	.word	0x20000688

08006de8 <_sbrk>:
 8006de8:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <_sbrk+0x14>)
 8006dea:	6819      	ldr	r1, [r3, #0]
 8006dec:	4602      	mov	r2, r0
 8006dee:	b909      	cbnz	r1, 8006df4 <_sbrk+0xc>
 8006df0:	4903      	ldr	r1, [pc, #12]	; (8006e00 <_sbrk+0x18>)
 8006df2:	6019      	str	r1, [r3, #0]
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	4402      	add	r2, r0
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	4770      	bx	lr
 8006dfc:	200000c4 	.word	0x200000c4
 8006e00:	20000690 	.word	0x20000690

08006e04 <_write>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <_write+0xc>)
 8006e06:	2258      	movs	r2, #88	; 0x58
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0e:	4770      	bx	lr
 8006e10:	20000688 	.word	0x20000688

08006e14 <_init>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	bf00      	nop
 8006e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1a:	bc08      	pop	{r3}
 8006e1c:	469e      	mov	lr, r3
 8006e1e:	4770      	bx	lr

08006e20 <_fini>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr
