
quadcopter_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006294  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006518  08006518  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006520  08006520  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006524  08006524  00016524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000070  08006598  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  08006598  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afcd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003982  00000000  00000000  0003b06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0003e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  0003fb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac72  00000000  00000000  00040b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cc1  00000000  00000000  0005b7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cc82  00000000  00000000  0007246b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010f0ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed8  00000000  00000000  0010f140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  00114018  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  001140b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800641c 	.word	0x0800641c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800641c 	.word	0x0800641c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058a:	4b21      	ldr	r3, [pc, #132]	; (8000610 <MX_ADC1_Init+0x98>)
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <MX_ADC1_Init+0x9c>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <MX_ADC1_Init+0x98>)
 8000592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000598:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <MX_ADC1_Init+0x98>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <MX_ADC1_Init+0x98>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <MX_ADC1_Init+0x98>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_ADC1_Init+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_ADC1_Init+0x98>)
 80005ba:	4a17      	ldr	r2, [pc, #92]	; (8000618 <MX_ADC1_Init+0xa0>)
 80005bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_ADC1_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_ADC1_Init+0x98>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_ADC1_Init+0x98>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d8:	480d      	ldr	r0, [pc, #52]	; (8000610 <MX_ADC1_Init+0x98>)
 80005da:	f001 f867 	bl	80016ac <HAL_ADC_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005e4:	f000 fa88 	bl	8000af8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80005f0:	2304      	movs	r3, #4
 80005f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_ADC1_Init+0x98>)
 80005fa:	f001 f89b 	bl	8001734 <HAL_ADC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000604:	f000 fa78 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000c8 	.word	0x200000c8
 8000614:	40012000 	.word	0x40012000
 8000618:	0f000001 	.word	0x0f000001

0800061c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a2f      	ldr	r2, [pc, #188]	; (80006f8 <HAL_ADC_MspInit+0xdc>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d157      	bne.n	80006ee <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <HAL_ADC_MspInit+0xe0>)
 8000644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000646:	4a2d      	ldr	r2, [pc, #180]	; (80006fc <HAL_ADC_MspInit+0xe0>)
 8000648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800064c:	6453      	str	r3, [r2, #68]	; 0x44
 800064e:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <HAL_ADC_MspInit+0xe0>)
 8000650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <HAL_ADC_MspInit+0xe0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a26      	ldr	r2, [pc, #152]	; (80006fc <HAL_ADC_MspInit+0xe0>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <HAL_ADC_MspInit+0xe0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8000676:	2301      	movs	r3, #1
 8000678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067a:	2303      	movs	r3, #3
 800067c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	481d      	ldr	r0, [pc, #116]	; (8000700 <HAL_ADC_MspInit+0xe4>)
 800068a:	f001 ff95 	bl	80025b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 8000690:	4a1d      	ldr	r2, [pc, #116]	; (8000708 <HAL_ADC_MspInit+0xec>)
 8000692:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 80006a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 80006b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 80006b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 80006c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 80006d4:	f001 fb6e 	bl	8001db4 <HAL_DMA_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006de:	f000 fa0b 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 80006e6:	639a      	str	r2, [r3, #56]	; 0x38
 80006e8:	4a06      	ldr	r2, [pc, #24]	; (8000704 <HAL_ADC_MspInit+0xe8>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40012000 	.word	0x40012000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020400 	.word	0x40020400
 8000704:	20000110 	.word	0x20000110
 8000708:	40026410 	.word	0x40026410

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <MX_DMA_Init+0xa8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a26      	ldr	r2, [pc, #152]	; (80007b4 <MX_DMA_Init+0xa8>)
 800071c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <MX_DMA_Init+0xa8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <MX_DMA_Init+0xa8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <MX_DMA_Init+0xa8>)
 8000738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_DMA_Init+0xa8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	200c      	movs	r0, #12
 8000750:	f001 faf9 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000754:	200c      	movs	r0, #12
 8000756:	f001 fb12 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	200e      	movs	r0, #14
 8000760:	f001 faf1 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000764:	200e      	movs	r0, #14
 8000766:	f001 fb0a 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	200f      	movs	r0, #15
 8000770:	f001 fae9 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000774:	200f      	movs	r0, #15
 8000776:	f001 fb02 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	2010      	movs	r0, #16
 8000780:	f001 fae1 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000784:	2010      	movs	r0, #16
 8000786:	f001 fafa 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2038      	movs	r0, #56	; 0x38
 8000790:	f001 fad9 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000794:	2038      	movs	r0, #56	; 0x38
 8000796:	f001 faf2 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	203a      	movs	r0, #58	; 0x3a
 80007a0:	f001 fad1 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007a4:	203a      	movs	r0, #58	; 0x3a
 80007a6:	f001 faea 	bl	8001d7e <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <MX_GPIO_Init+0x10c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a3b      	ldr	r2, [pc, #236]	; (80008c4 <MX_GPIO_Init+0x10c>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <MX_GPIO_Init+0x10c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <MX_GPIO_Init+0x10c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <MX_GPIO_Init+0x10c>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b32      	ldr	r3, [pc, #200]	; (80008c4 <MX_GPIO_Init+0x10c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <MX_GPIO_Init+0x10c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2d      	ldr	r2, [pc, #180]	; (80008c4 <MX_GPIO_Init+0x10c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_GPIO_Init+0x10c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_GPIO_Init+0x10c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a26      	ldr	r2, [pc, #152]	; (80008c4 <MX_GPIO_Init+0x10c>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_GPIO_Init+0x10c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000844:	4820      	ldr	r0, [pc, #128]	; (80008c8 <MX_GPIO_Init+0x110>)
 8000846:	f002 f83b 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000850:	481e      	ldr	r0, [pc, #120]	; (80008cc <MX_GPIO_Init+0x114>)
 8000852:	f002 f835 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin|SPI2_CE_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f243 0106 	movw	r1, #12294	; 0x3006
 800085c:	481c      	ldr	r0, [pc, #112]	; (80008d0 <MX_GPIO_Init+0x118>)
 800085e:	f002 f82f 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4813      	ldr	r0, [pc, #76]	; (80008c8 <MX_GPIO_Init+0x110>)
 800087c:	f001 fe9c 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|Buzzer_Pin;
 8000880:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_GPIO_Init+0x114>)
 800089a:	f001 fe8d 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|SPI2_CE_Pin|SPI2_CS_Pin;
 800089e:	f243 0306 	movw	r3, #12294	; 0x3006
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_GPIO_Init+0x118>)
 80008b8:	f001 fe7e 	bl	80025b8 <HAL_GPIO_Init>

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020800 	.word	0x40020800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020400 	.word	0x40020400

080008d4 <HAL_TIM_PeriodElapsedCallback>:

uint16_t loop_time[4];
uint8_t software_fail_safe = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  if (htim == LOOP_TIM)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a2e      	ldr	r2, [pc, #184]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d155      	bne.n	8000990 <HAL_TIM_PeriodElapsedCallback+0xbc>
  {
	  if(channel[4] == 2000 && software_fail_safe < 10) // arming
 80008e4:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80008e6:	891b      	ldrh	r3, [r3, #8]
 80008e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80008ec:	d138      	bne.n	8000960 <HAL_TIM_PeriodElapsedCallback+0x8c>
 80008ee:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b09      	cmp	r3, #9
 80008f4:	d834      	bhi.n	8000960 <HAL_TIM_PeriodElapsedCallback+0x8c>
	  {

		  if(channel[2] > 1011) // 69
 80008f6:	4b29      	ldr	r3, [pc, #164]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80008f8:	889b      	ldrh	r3, [r3, #4]
 80008fa:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80008fe:	d316      	bcc.n	800092e <HAL_TIM_PeriodElapsedCallback+0x5a>
		  {
			  for(int i = 0; i < 4; i++)
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	e00f      	b.n	8000926 <HAL_TIM_PeriodElapsedCallback+0x52>
				  motor_value[i] = (channel[2] - 1000) * 2 + 47;
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000908:	889b      	ldrh	r3, [r3, #4]
 800090a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800090e:	b29b      	uxth	r3, r3
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	b29b      	uxth	r3, r3
 8000914:	332f      	adds	r3, #47	; 0x2f
 8000916:	b299      	uxth	r1, r3
 8000918:	4a22      	ldr	r2, [pc, #136]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for(int i = 0; i < 4; i++)
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	3301      	adds	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	2b03      	cmp	r3, #3
 800092a:	ddec      	ble.n	8000906 <HAL_TIM_PeriodElapsedCallback+0x32>
 800092c:	e00d      	b.n	800094a <HAL_TIM_PeriodElapsedCallback+0x76>
		  }

		  else
		  {
			  for(int i = 0; i < 4; i++)
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	e007      	b.n	8000944 <HAL_TIM_PeriodElapsedCallback+0x70>
				  motor_value[i] = 69; // minimum value to spin smoothly
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	2145      	movs	r1, #69	; 0x45
 800093a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  for(int i = 0; i < 4; i++)
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	3301      	adds	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	2b03      	cmp	r3, #3
 8000948:	ddf4      	ble.n	8000934 <HAL_TIM_PeriodElapsedCallback+0x60>
		  }

		  dshot_write();
 800094a:	f004 fb9b 	bl	8005084 <dshot_write>
		  led1_on();
 800094e:	f004 fc85 	bl	800525c <led1_on>

		  software_fail_safe++;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e011      	b.n	8000984 <HAL_TIM_PeriodElapsedCallback+0xb0>
	  }

	  else	// disarming
	  {
		  for(int i = 0; i < 4; i++)
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	e007      	b.n	8000976 <HAL_TIM_PeriodElapsedCallback+0xa2>
			  motor_value[i] = 0;
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2100      	movs	r1, #0
 800096c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i = 0; i < 4; i++)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b03      	cmp	r3, #3
 800097a:	ddf4      	ble.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x92>
		  dshot_write();
 800097c:	f004 fb82 	bl	8005084 <dshot_write>
		  led1_off();
 8000980:	f004 fc78 	bl	8005274 <led1_off>
	  }

		  loop_time[0] = loop_runtime();
 8000984:	f004 fcbc 	bl	8005300 <loop_runtime>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800098e:	801a      	strh	r2, [r3, #0]
  }

}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000354 	.word	0x20000354
 800099c:	200000b0 	.word	0x200000b0
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	2000054c 	.word	0x2000054c
 80009a8:	20000170 	.word	0x20000170

080009ac <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == IBUS_UART_INSTANCE)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <HAL_UART_RxCpltCallback+0x24>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d104      	bne.n	80009c8 <HAL_UART_RxCpltCallback+0x1c>
	{
		ibus_read_channel();
 80009be:	f004 fc29 	bl	8005214 <ibus_read_channel>
		software_fail_safe = 0;
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <HAL_UART_RxCpltCallback+0x28>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
	}
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40011000 	.word	0x40011000
 80009d4:	2000008c 	.word	0x2000008c

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 fdd0 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f822 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff fee8 	bl	80007b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e8:	f7ff fe90 	bl	800070c <MX_DMA_Init>
  MX_SPI1_Init();
 80009ec:	f000 f88a 	bl	8000b04 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009f0:	f000 fa26 	bl	8000e40 <MX_TIM2_Init>
  MX_TIM5_Init();
 80009f4:	f000 fa86 	bl	8000f04 <MX_TIM5_Init>
  MX_TIM11_Init();
 80009f8:	f000 fae8 	bl	8000fcc <MX_TIM11_Init>
  MX_ADC1_Init();
 80009fc:	f7ff fdbc 	bl	8000578 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000a00:	f000 f8b6 	bl	8000b70 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000a04:	f000 fcc4 	bl	8001390 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  buzzer_time(100);
 8000a08:	2064      	movs	r0, #100	; 0x64
 8000a0a:	f004 f91d 	bl	8004c48 <buzzer_time>

  dshot_init(DSHOT600);
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f004 fa2c 	bl	8004e6c <dshot_init>
  ibus_init();
 8000a14:	f004 fb7a 	bl	800510c <ibus_init>
  loop_init(1000);
 8000a18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a1c:	f004 fc36 	bl	800528c <loop_init>

  loop_start();
 8000a20:	f004 fc7c 	bl	800531c <loop_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <main+0x4c>
	...

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	; 0x50
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0320 	add.w	r3, r7, #32
 8000a32:	2230      	movs	r2, #48	; 0x30
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f004 fc9e 	bl	8005378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <SystemClock_Config+0xc8>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a26      	ldr	r2, [pc, #152]	; (8000af0 <SystemClock_Config+0xc8>)
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <SystemClock_Config+0xc8>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <SystemClock_Config+0xcc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <SystemClock_Config+0xcc>)
 8000a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <SystemClock_Config+0xcc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a9c:	2360      	movs	r3, #96	; 0x60
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 0320 	add.w	r3, r7, #32
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 ff21 	bl	80028f4 <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ab8:	f000 f81e 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	230f      	movs	r3, #15
 8000abe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 f983 	bl	8002de4 <HAL_RCC_ClockConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ae4:	f000 f808 	bl	8000af8 <Error_Handler>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3750      	adds	r7, #80	; 0x50
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b0a:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b38:	2218      	movs	r2, #24
 8000b3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b50:	220a      	movs	r2, #10
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b56:	f002 fb15 	bl	8003184 <HAL_SPI_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b60:	f7ff ffca 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200001f4 	.word	0x200001f4
 8000b6c:	40013000 	.word	0x40013000

08000b70 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000b76:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <MX_SPI2_Init+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000b7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000bbc:	220a      	movs	r2, #10
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_SPI2_Init+0x64>)
 8000bc2:	f002 fadf 	bl	8003184 <HAL_SPI_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bcc:	f7ff ff94 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000019c 	.word	0x2000019c
 8000bd8:	40003800 	.word	0x40003800

08000bdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a32      	ldr	r2, [pc, #200]	; (8000cc4 <HAL_SPI_MspInit+0xe8>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12c      	bne.n	8000c58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a30      	ldr	r2, [pc, #192]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c36:	23e0      	movs	r3, #224	; 0xe0
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c46:	2305      	movs	r3, #5
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	481e      	ldr	r0, [pc, #120]	; (8000ccc <HAL_SPI_MspInit+0xf0>)
 8000c52:	f001 fcb1 	bl	80025b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c56:	e031      	b.n	8000cbc <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <HAL_SPI_MspInit+0xf4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12c      	bne.n	8000cbc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_SPI_MspInit+0xec>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000c9a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cac:	2305      	movs	r3, #5
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <HAL_SPI_MspInit+0xf8>)
 8000cb8:	f001 fc7e 	bl	80025b8 <HAL_GPIO_Init>
}
 8000cbc:	bf00      	nop
 8000cbe:	3730      	adds	r7, #48	; 0x30
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	40003800 	.word	0x40003800
 8000cd4:	40020400 	.word	0x40020400

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 fc56 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
//if(__HAL_DMA_GET_TC_FLAG_INDEX(&hdma_tim2_ch3_up))
//{
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <DMA1_Stream1_IRQHandler+0x10>)
 8000d82:	f001 f9af 	bl	80020e4 <HAL_DMA_IRQHandler>
	//__HAL_DMA_DISABLE(&hdma_tim2_ch3_up);
	//__HAL_TIM_DISABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
	//__HAL_DMA_CLEAR_FLAG(&hdma_tim2_ch3_up, DMA_FLAG_TCIF1_5);
//}
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200003fc 	.word	0x200003fc

08000d90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DMA1_Stream3_IRQHandler+0x10>)
 8000d96:	f001 f9a5 	bl	80020e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200002ac 	.word	0x200002ac

08000da4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <DMA1_Stream4_IRQHandler+0x10>)
 8000daa:	f001 f99b 	bl	80020e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000039c 	.word	0x2000039c

08000db8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <DMA1_Stream5_IRQHandler+0x10>)
 8000dbe:	f001 f991 	bl	80020e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000024c 	.word	0x2000024c

08000dcc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000dd2:	f002 fc11 	bl	80035f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000354 	.word	0x20000354

08000de0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <USART1_IRQHandler+0x10>)
 8000de6:	f003 f927 	bl	8004038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000504 	.word	0x20000504

08000df4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <DMA2_Stream0_IRQHandler+0x10>)
 8000dfa:	f001 f973 	bl	80020e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000110 	.word	0x20000110

08000e08 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <DMA2_Stream2_IRQHandler+0x10>)
 8000e0e:	f001 f969 	bl	80020e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200004a4 	.word	0x200004a4

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <MX_TIM2_Init+0xc0>)
 8000e64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <MX_TIM2_Init+0xc0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <MX_TIM2_Init+0xc0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_TIM2_Init+0xc0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <MX_TIM2_Init+0xc0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_TIM2_Init+0xc0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e88:	481d      	ldr	r0, [pc, #116]	; (8000f00 <MX_TIM2_Init+0xc0>)
 8000e8a:	f002 fab5 	bl	80033f8 <HAL_TIM_PWM_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000e94:	f7ff fe30 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4816      	ldr	r0, [pc, #88]	; (8000f00 <MX_TIM2_Init+0xc0>)
 8000ea8:	f002 ffc6 	bl	8003e38 <HAL_TIMEx_MasterConfigSynchronization>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000eb2:	f7ff fe21 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb6:	2360      	movs	r3, #96	; 0x60
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <MX_TIM2_Init+0xc0>)
 8000ece:	f002 fc9b 	bl	8003808 <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000ed8:	f7ff fe0e 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2208      	movs	r2, #8
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM2_Init+0xc0>)
 8000ee4:	f002 fc90 	bl	8003808 <HAL_TIM_PWM_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000eee:	f7ff fe03 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM2_Init+0xc0>)
 8000ef4:	f000 f9ee 	bl	80012d4 <HAL_TIM_MspPostInit>

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000045c 	.word	0x2000045c

08000f04 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f26:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <MX_TIM5_Init+0xc0>)
 8000f28:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <MX_TIM5_Init+0xc4>)
 8000f2a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f2c:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <MX_TIM5_Init+0xc0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <MX_TIM5_Init+0xc0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8000f38:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <MX_TIM5_Init+0xc0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <MX_TIM5_Init+0xc0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_TIM5_Init+0xc0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f4a:	481e      	ldr	r0, [pc, #120]	; (8000fc4 <MX_TIM5_Init+0xc0>)
 8000f4c:	f002 fa54 	bl	80033f8 <HAL_TIM_PWM_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000f56:	f7ff fdcf 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	4619      	mov	r1, r3
 8000f68:	4816      	ldr	r0, [pc, #88]	; (8000fc4 <MX_TIM5_Init+0xc0>)
 8000f6a:	f002 ff65 	bl	8003e38 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000f74:	f7ff fdc0 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f78:	2360      	movs	r3, #96	; 0x60
 8000f7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_TIM5_Init+0xc0>)
 8000f90:	f002 fc3a 	bl	8003808 <HAL_TIM_PWM_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f9a:	f7ff fdad 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	220c      	movs	r2, #12
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <MX_TIM5_Init+0xc0>)
 8000fa6:	f002 fc2f 	bl	8003808 <HAL_TIM_PWM_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000fb0:	f7ff fda2 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <MX_TIM5_Init+0xc0>)
 8000fb6:	f000 f98d 	bl	80012d4 <HAL_TIM_MspPostInit>

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000030c 	.word	0x2000030c
 8000fc8:	40000c00 	.word	0x40000c00

08000fcc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <MX_TIM11_Init+0x3c>)
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <MX_TIM11_Init+0x40>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_TIM11_Init+0x3c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_TIM11_Init+0x3c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_TIM11_Init+0x3c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_TIM11_Init+0x3c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_TIM11_Init+0x3c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_TIM11_Init+0x3c>)
 8000ff6:	f002 f94e 	bl	8003296 <HAL_TIM_Base_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8001000:	f7ff fd7a 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000354 	.word	0x20000354
 800100c:	40014800 	.word	0x40014800

08001010 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001020:	f040 8089 	bne.w	8001136 <HAL_TIM_PWM_MspInit+0x126>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	4b8c      	ldr	r3, [pc, #560]	; (800125c <HAL_TIM_PWM_MspInit+0x24c>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a8b      	ldr	r2, [pc, #556]	; (800125c <HAL_TIM_PWM_MspInit+0x24c>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b89      	ldr	r3, [pc, #548]	; (800125c <HAL_TIM_PWM_MspInit+0x24c>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001040:	4b87      	ldr	r3, [pc, #540]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 8001042:	4a88      	ldr	r2, [pc, #544]	; (8001264 <HAL_TIM_PWM_MspInit+0x254>)
 8001044:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001046:	4b86      	ldr	r3, [pc, #536]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 8001048:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800104c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800104e:	4b84      	ldr	r3, [pc, #528]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 8001050:	2240      	movs	r2, #64	; 0x40
 8001052:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001054:	4b82      	ldr	r3, [pc, #520]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800105a:	4b81      	ldr	r3, [pc, #516]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 800105c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001060:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001062:	4b7f      	ldr	r3, [pc, #508]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 8001064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001068:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800106a:	4b7d      	ldr	r3, [pc, #500]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 800106c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001070:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001072:	4b7b      	ldr	r3, [pc, #492]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 8001074:	2200      	movs	r2, #0
 8001076:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001078:	4b79      	ldr	r3, [pc, #484]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 800107a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800107e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001080:	4b77      	ldr	r3, [pc, #476]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 8001082:	2204      	movs	r2, #4
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001086:	4b76      	ldr	r3, [pc, #472]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 8001088:	2200      	movs	r2, #0
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 800108c:	4b74      	ldr	r3, [pc, #464]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 800108e:	2200      	movs	r2, #0
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001092:	4b73      	ldr	r3, [pc, #460]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 8001094:	2200      	movs	r2, #0
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001098:	4871      	ldr	r0, [pc, #452]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 800109a:	f000 fe8b 	bl	8001db4 <HAL_DMA_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 80010a4:	f7ff fd28 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a6d      	ldr	r2, [pc, #436]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
 80010ae:	4a6c      	ldr	r2, [pc, #432]	; (8001260 <HAL_TIM_PWM_MspInit+0x250>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH3_UP Init */
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 80010b4:	4b6c      	ldr	r3, [pc, #432]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 80010b6:	4a6d      	ldr	r2, [pc, #436]	; (800126c <HAL_TIM_PWM_MspInit+0x25c>)
 80010b8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 80010ba:	4b6b      	ldr	r3, [pc, #428]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 80010bc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80010c0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c2:	4b69      	ldr	r3, [pc, #420]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 80010c4:	2240      	movs	r2, #64	; 0x40
 80010c6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c8:	4b67      	ldr	r3, [pc, #412]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 80010ce:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 80010d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010d6:	4b64      	ldr	r3, [pc, #400]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 80010d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010dc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010de:	4b62      	ldr	r3, [pc, #392]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 80010e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 80010e6:	4b60      	ldr	r3, [pc, #384]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 80010ec:	4b5e      	ldr	r3, [pc, #376]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 80010ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010f2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010f4:	4b5c      	ldr	r3, [pc, #368]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80010fa:	4b5b      	ldr	r3, [pc, #364]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8001100:	4b59      	ldr	r3, [pc, #356]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 8001102:	2200      	movs	r2, #0
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001106:	4b58      	ldr	r3, [pc, #352]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 8001108:	2200      	movs	r2, #0
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 800110c:	4856      	ldr	r0, [pc, #344]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 800110e:	f000 fe51 	bl	8001db4 <HAL_DMA_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_TIM_PWM_MspInit+0x10c>
    {
      Error_Handler();
 8001118:	f7ff fcee 	bl	8000af8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a52      	ldr	r2, [pc, #328]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
 8001122:	4a51      	ldr	r2, [pc, #324]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 800112c:	621a      	str	r2, [r3, #32]
 800112e:	4a4e      	ldr	r2, [pc, #312]	; (8001268 <HAL_TIM_PWM_MspInit+0x258>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001134:	e08d      	b.n	8001252 <HAL_TIM_PWM_MspInit+0x242>
  else if(tim_pwmHandle->Instance==TIM5)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_TIM_PWM_MspInit+0x260>)
 800113c:	4293      	cmp	r3, r2
 800113e:	f040 8088 	bne.w	8001252 <HAL_TIM_PWM_MspInit+0x242>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b45      	ldr	r3, [pc, #276]	; (800125c <HAL_TIM_PWM_MspInit+0x24c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a44      	ldr	r2, [pc, #272]	; (800125c <HAL_TIM_PWM_MspInit+0x24c>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b42      	ldr	r3, [pc, #264]	; (800125c <HAL_TIM_PWM_MspInit+0x24c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 800115e:	4b45      	ldr	r3, [pc, #276]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 8001160:	4a45      	ldr	r2, [pc, #276]	; (8001278 <HAL_TIM_PWM_MspInit+0x268>)
 8001162:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8001164:	4b43      	ldr	r3, [pc, #268]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 8001166:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800116a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800116c:	4b41      	ldr	r3, [pc, #260]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 800116e:	2240      	movs	r2, #64	; 0x40
 8001170:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001172:	4b40      	ldr	r3, [pc, #256]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001178:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 800117a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001180:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 8001182:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001186:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001188:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 800118a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001190:	4b38      	ldr	r3, [pc, #224]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001196:	4b37      	ldr	r3, [pc, #220]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 8001198:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800119c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 80011a0:	2204      	movs	r2, #4
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80011aa:	4b32      	ldr	r3, [pc, #200]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80011b6:	482f      	ldr	r0, [pc, #188]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 80011b8:	f000 fdfc 	bl	8001db4 <HAL_DMA_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80011c2:	f7ff fc99 	bl	8000af8 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a2a      	ldr	r2, [pc, #168]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
 80011cc:	4a29      	ldr	r2, [pc, #164]	; (8001274 <HAL_TIM_PWM_MspInit+0x264>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 80011d4:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <HAL_TIM_PWM_MspInit+0x270>)
 80011d6:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 80011da:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80011de:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 80011ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 80011f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011fa:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 80011fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001202:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 800120c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001210:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 8001214:	2204      	movs	r2, #4
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 8001226:	2200      	movs	r2, #0
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 800122a:	4814      	ldr	r0, [pc, #80]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 800122c:	f000 fdc2 	bl	8001db4 <HAL_DMA_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_TIM_PWM_MspInit+0x22a>
      Error_Handler();
 8001236:	f7ff fc5f 	bl	8000af8 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a0f      	ldr	r2, [pc, #60]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 800124a:	639a      	str	r2, [r3, #56]	; 0x38
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <HAL_TIM_PWM_MspInit+0x26c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	2000024c 	.word	0x2000024c
 8001264:	40026088 	.word	0x40026088
 8001268:	200003fc 	.word	0x200003fc
 800126c:	40026028 	.word	0x40026028
 8001270:	40000c00 	.word	0x40000c00
 8001274:	2000039c 	.word	0x2000039c
 8001278:	40026070 	.word	0x40026070
 800127c:	200002ac 	.word	0x200002ac
 8001280:	40026058 	.word	0x40026058

08001284 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_TIM_Base_MspInit+0x48>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d115      	bne.n	80012c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_TIM_Base_MspInit+0x4c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_TIM_Base_MspInit+0x4c>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_TIM_Base_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	201a      	movs	r0, #26
 80012b8:	f000 fd45 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012bc:	201a      	movs	r0, #26
 80012be:	f000 fd5e 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40014800 	.word	0x40014800
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f4:	d11e      	bne.n	8001334 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <HAL_TIM_MspPostInit+0xb0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a21      	ldr	r2, [pc, #132]	; (8001384 <HAL_TIM_MspPostInit+0xb0>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <HAL_TIM_MspPostInit+0xb0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_2_Pin;
 8001312:	2305      	movs	r3, #5
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001322:	2301      	movs	r3, #1
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4816      	ldr	r0, [pc, #88]	; (8001388 <HAL_TIM_MspPostInit+0xb4>)
 800132e:	f001 f943 	bl	80025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001332:	e022      	b.n	800137a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <HAL_TIM_MspPostInit+0xb8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d11d      	bne.n	800137a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_TIM_MspPostInit+0xb0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_TIM_MspPostInit+0xb0>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_TIM_MspPostInit+0xb0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_4_Pin|MOTOR_1_Pin;
 800135a:	230a      	movs	r3, #10
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800136a:	2302      	movs	r3, #2
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <HAL_TIM_MspPostInit+0xb4>)
 8001376:	f001 f91f 	bl	80025b8 <HAL_GPIO_Init>
}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	40000c00 	.word	0x40000c00

08001390 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_USART1_UART_Init+0x50>)
 8001398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c8:	f002 fdb8 	bl	8003f3c <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013d2:	f7ff fb91 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000504 	.word	0x20000504
 80013e0:	40011000 	.word	0x40011000

080013e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a44      	ldr	r2, [pc, #272]	; (8001514 <HAL_UART_MspInit+0x130>)
 8001402:	4293      	cmp	r3, r2
 8001404:	f040 8082 	bne.w	800150c <HAL_UART_MspInit+0x128>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	4b42      	ldr	r3, [pc, #264]	; (8001518 <HAL_UART_MspInit+0x134>)
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	4a41      	ldr	r2, [pc, #260]	; (8001518 <HAL_UART_MspInit+0x134>)
 8001412:	f043 0310 	orr.w	r3, r3, #16
 8001416:	6453      	str	r3, [r2, #68]	; 0x44
 8001418:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <HAL_UART_MspInit+0x134>)
 800141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_UART_MspInit+0x134>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a3a      	ldr	r2, [pc, #232]	; (8001518 <HAL_UART_MspInit+0x134>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_UART_MspInit+0x134>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_UART_MspInit+0x134>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a33      	ldr	r2, [pc, #204]	; (8001518 <HAL_UART_MspInit+0x134>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_UART_MspInit+0x134>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800145c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800146e:	2307      	movs	r3, #7
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4828      	ldr	r0, [pc, #160]	; (800151c <HAL_UART_MspInit+0x138>)
 800147a:	f001 f89d 	bl	80025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800148e:	2307      	movs	r3, #7
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4821      	ldr	r0, [pc, #132]	; (8001520 <HAL_UART_MspInit+0x13c>)
 800149a:	f001 f88d 	bl	80025b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <HAL_UART_MspInit+0x144>)
 80014a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014e0:	4810      	ldr	r0, [pc, #64]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014e2:	f000 fc67 	bl	8001db4 <HAL_DMA_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80014ec:	f7ff fb04 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014f4:	639a      	str	r2, [r3, #56]	; 0x38
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <HAL_UART_MspInit+0x140>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2025      	movs	r0, #37	; 0x25
 8001502:	f000 fc20 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001506:	2025      	movs	r0, #37	; 0x25
 8001508:	f000 fc39 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40011000 	.word	0x40011000
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	200004a4 	.word	0x200004a4
 8001528:	40026440 	.word	0x40026440

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001530:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001532:	e003      	b.n	800153c <LoopCopyDataInit>

08001534 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001536:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001538:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800153a:	3104      	adds	r1, #4

0800153c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800153c:	480b      	ldr	r0, [pc, #44]	; (800156c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001540:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001542:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001544:	d3f6      	bcc.n	8001534 <CopyDataInit>
  ldr  r2, =_sbss
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001548:	e002      	b.n	8001550 <LoopFillZerobss>

0800154a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800154a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800154c:	f842 3b04 	str.w	r3, [r2], #4

08001550 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001552:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001554:	d3f9      	bcc.n	800154a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001556:	f7ff fc61 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f003 fee9 	bl	8005330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7ff fa3b 	bl	80009d8 <main>
  bx  lr    
 8001562:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001564:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001568:	08006528 	.word	0x08006528
  ldr  r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001570:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001574:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001578:	20000684 	.word	0x20000684

0800157c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <HAL_Init+0x40>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_Init+0x40>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_Init+0x40>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 fbc1 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f808 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fb90 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x54>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x58>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fbd9 	bl	8001d9a <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f000 fba1 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_InitTick+0x5c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000000 	.word	0x20000000
 800161c:	20000008 	.word	0x20000008
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000008 	.word	0x20000008
 8001648:	20000548 	.word	0x20000548

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000548 	.word	0x20000548

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008

080016ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e033      	b.n	800172a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7fe ffa6 	bl	800061c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d118      	bne.n	800171c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016f2:	f023 0302 	bic.w	r3, r3, #2
 80016f6:	f043 0202 	orr.w	r2, r3, #2
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f94a 	bl	8001998 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	f043 0201 	orr.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
 800171a:	e001      	b.n	8001720 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1c>
 800174c:	2302      	movs	r3, #2
 800174e:	e113      	b.n	8001978 <HAL_ADC_ConfigChannel+0x244>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b09      	cmp	r3, #9
 800175e:	d925      	bls.n	80017ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68d9      	ldr	r1, [r3, #12]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b29b      	uxth	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	3b1e      	subs	r3, #30
 8001776:	2207      	movs	r2, #7
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43da      	mvns	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	400a      	ands	r2, r1
 8001784:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68d9      	ldr	r1, [r3, #12]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	4603      	mov	r3, r0
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4403      	add	r3, r0
 800179e:	3b1e      	subs	r3, #30
 80017a0:	409a      	lsls	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	e022      	b.n	80017f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6919      	ldr	r1, [r3, #16]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	2207      	movs	r2, #7
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	400a      	ands	r2, r1
 80017ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6919      	ldr	r1, [r3, #16]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	4603      	mov	r3, r0
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4403      	add	r3, r0
 80017e8:	409a      	lsls	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d824      	bhi.n	8001844 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	3b05      	subs	r3, #5
 800180c:	221f      	movs	r2, #31
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	400a      	ands	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	b29b      	uxth	r3, r3
 8001828:	4618      	mov	r0, r3
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	3b05      	subs	r3, #5
 8001836:	fa00 f203 	lsl.w	r2, r0, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	635a      	str	r2, [r3, #52]	; 0x34
 8001842:	e04c      	b.n	80018de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b0c      	cmp	r3, #12
 800184a:	d824      	bhi.n	8001896 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	3b23      	subs	r3, #35	; 0x23
 800185e:	221f      	movs	r2, #31
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43da      	mvns	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	400a      	ands	r2, r1
 800186c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	3b23      	subs	r3, #35	; 0x23
 8001888:	fa00 f203 	lsl.w	r2, r0, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	631a      	str	r2, [r3, #48]	; 0x30
 8001894:	e023      	b.n	80018de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3b41      	subs	r3, #65	; 0x41
 80018a8:	221f      	movs	r2, #31
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	400a      	ands	r2, r1
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	3b41      	subs	r3, #65	; 0x41
 80018d2:	fa00 f203 	lsl.w	r2, r0, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <HAL_ADC_ConfigChannel+0x250>)
 80018e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a28      	ldr	r2, [pc, #160]	; (8001988 <HAL_ADC_ConfigChannel+0x254>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d10f      	bne.n	800190c <HAL_ADC_ConfigChannel+0x1d8>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b12      	cmp	r3, #18
 80018f2:	d10b      	bne.n	800190c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <HAL_ADC_ConfigChannel+0x254>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d12b      	bne.n	800196e <HAL_ADC_ConfigChannel+0x23a>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a1c      	ldr	r2, [pc, #112]	; (800198c <HAL_ADC_ConfigChannel+0x258>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d003      	beq.n	8001928 <HAL_ADC_ConfigChannel+0x1f4>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b11      	cmp	r3, #17
 8001926:	d122      	bne.n	800196e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_ADC_ConfigChannel+0x258>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d111      	bne.n	800196e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_ADC_ConfigChannel+0x25c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a11      	ldr	r2, [pc, #68]	; (8001994 <HAL_ADC_ConfigChannel+0x260>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	0c9a      	lsrs	r2, r3, #18
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001960:	e002      	b.n	8001968 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3b01      	subs	r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f9      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40012300 	.word	0x40012300
 8001988:	40012000 	.word	0x40012000
 800198c:	10000012 	.word	0x10000012
 8001990:	20000000 	.word	0x20000000
 8001994:	431bde83 	.word	0x431bde83

08001998 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a0:	4b79      	ldr	r3, [pc, #484]	; (8001b88 <ADC_Init+0x1f0>)
 80019a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	431a      	orrs	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	021a      	lsls	r2, r3, #8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6899      	ldr	r1, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <ADC_Init+0x1f4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d022      	beq.n	8001a76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6899      	ldr	r1, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6899      	ldr	r1, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	e00f      	b.n	8001a96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0202 	bic.w	r2, r2, #2
 8001aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6899      	ldr	r1, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7e1b      	ldrb	r3, [r3, #24]
 8001ab0:	005a      	lsls	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01b      	beq.n	8001afc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ad2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ae2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6859      	ldr	r1, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	3b01      	subs	r3, #1
 8001af0:	035a      	lsls	r2, r3, #13
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	e007      	b.n	8001b0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	051a      	lsls	r2, r3, #20
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6899      	ldr	r1, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b4e:	025a      	lsls	r2, r3, #9
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6899      	ldr	r1, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	029a      	lsls	r2, r3, #10
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	609a      	str	r2, [r3, #8]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40012300 	.word	0x40012300
 8001b8c:	0f000001 	.word	0x0f000001

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <__NVIC_EnableIRQ+0x38>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff8e 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff29 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff3e 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff8e 	bl	8001c84 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5d 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff31 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dc0:	f7ff fc44 	bl	800164c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e099      	b.n	8001f04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001df0:	e00f      	b.n	8001e12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001df2:	f7ff fc2b 	bl	800164c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d908      	bls.n	8001e12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e078      	b.n	8001f04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e8      	bne.n	8001df2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_DMA_Init+0x158>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d107      	bne.n	8001e7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	4313      	orrs	r3, r2
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f023 0307 	bic.w	r3, r3, #7
 8001e92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d117      	bne.n	8001ed6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00e      	beq.n	8001ed6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fb01 	bl	80024c0 <DMA_CheckFifoParam>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2240      	movs	r2, #64	; 0x40
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e016      	b.n	8001f04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fab8 	bl	8002454 <DMA_CalcBaseAndBitshift>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	223f      	movs	r2, #63	; 0x3f
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	f010803f 	.word	0xf010803f

08001f10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_DMA_Start_IT+0x26>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e040      	b.n	8001fb8 <HAL_DMA_Start_IT+0xa8>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d12f      	bne.n	8001faa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fa4a 	bl	80023f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	223f      	movs	r2, #63	; 0x3f
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0216 	orr.w	r2, r2, #22
 8001f7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0208 	orr.w	r2, r2, #8
 8001f96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e005      	b.n	8001fb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fce:	f7ff fb3d 	bl	800164c <HAL_GetTick>
 8001fd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d008      	beq.n	8001ff2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e052      	b.n	8002098 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0216 	bic.w	r2, r2, #22
 8002000:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002010:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <HAL_DMA_Abort+0x62>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0208 	bic.w	r2, r2, #8
 8002030:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002042:	e013      	b.n	800206c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002044:	f7ff fb02 	bl	800164c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b05      	cmp	r3, #5
 8002050:	d90c      	bls.n	800206c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2203      	movs	r2, #3
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e015      	b.n	8002098 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e4      	bne.n	8002044 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	223f      	movs	r2, #63	; 0x3f
 8002080:	409a      	lsls	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d004      	beq.n	80020be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00c      	b.n	80020d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2205      	movs	r2, #5
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020f0:	4b92      	ldr	r3, [pc, #584]	; (800233c <HAL_DMA_IRQHandler+0x258>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a92      	ldr	r2, [pc, #584]	; (8002340 <HAL_DMA_IRQHandler+0x25c>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	0a9b      	lsrs	r3, r3, #10
 80020fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	2208      	movs	r2, #8
 8002110:	409a      	lsls	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4013      	ands	r3, r2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01a      	beq.n	8002150 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0204 	bic.w	r2, r2, #4
 8002136:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	2208      	movs	r2, #8
 800213e:	409a      	lsls	r2, r3
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	f043 0201 	orr.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	2201      	movs	r2, #1
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d012      	beq.n	8002186 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	2201      	movs	r2, #1
 8002174:	409a      	lsls	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f043 0202 	orr.w	r2, r3, #2
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	2204      	movs	r2, #4
 800218c:	409a      	lsls	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d012      	beq.n	80021bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00b      	beq.n	80021bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a8:	2204      	movs	r2, #4
 80021aa:	409a      	lsls	r2, r3
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b4:	f043 0204 	orr.w	r2, r3, #4
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	2210      	movs	r2, #16
 80021c2:	409a      	lsls	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d043      	beq.n	8002254 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d03c      	beq.n	8002254 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021de:	2210      	movs	r2, #16
 80021e0:	409a      	lsls	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d018      	beq.n	8002226 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d108      	bne.n	8002214 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d024      	beq.n	8002254 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
 8002212:	e01f      	b.n	8002254 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01b      	beq.n	8002254 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
 8002224:	e016      	b.n	8002254 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d107      	bne.n	8002244 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0208 	bic.w	r2, r2, #8
 8002242:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	2220      	movs	r2, #32
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 808e 	beq.w	8002382 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8086 	beq.w	8002382 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227a:	2220      	movs	r2, #32
 800227c:	409a      	lsls	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b05      	cmp	r3, #5
 800228c:	d136      	bne.n	80022fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0216 	bic.w	r2, r2, #22
 800229c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d103      	bne.n	80022be <HAL_DMA_IRQHandler+0x1da>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0208 	bic.w	r2, r2, #8
 80022cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	223f      	movs	r2, #63	; 0x3f
 80022d4:	409a      	lsls	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d07d      	beq.n	80023ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	4798      	blx	r3
        }
        return;
 80022fa:	e078      	b.n	80023ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d01c      	beq.n	8002344 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d108      	bne.n	800232a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	2b00      	cmp	r3, #0
 800231e:	d030      	beq.n	8002382 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
 8002328:	e02b      	b.n	8002382 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d027      	beq.n	8002382 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
 800233a:	e022      	b.n	8002382 <HAL_DMA_IRQHandler+0x29e>
 800233c:	20000000 	.word	0x20000000
 8002340:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0210 	bic.w	r2, r2, #16
 8002360:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002386:	2b00      	cmp	r3, #0
 8002388:	d032      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d022      	beq.n	80023dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2205      	movs	r2, #5
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	3301      	adds	r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d307      	bcc.n	80023ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f2      	bne.n	80023ae <HAL_DMA_IRQHandler+0x2ca>
 80023c8:	e000      	b.n	80023cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
 80023ec:	e000      	b.n	80023f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80023ee:	bf00      	nop
    }
  }
}
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop

080023f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002414:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d108      	bne.n	8002438 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002436:	e007      	b.n	8002448 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	3b10      	subs	r3, #16
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800246e:	4a13      	ldr	r2, [pc, #76]	; (80024bc <DMA_CalcBaseAndBitshift+0x68>)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d909      	bls.n	8002496 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	1d1a      	adds	r2, r3, #4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	; 0x58
 8002494:	e007      	b.n	80024a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	aaaaaaab 	.word	0xaaaaaaab
 80024bc:	08006470 	.word	0x08006470

080024c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11f      	bne.n	800251a <DMA_CheckFifoParam+0x5a>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d856      	bhi.n	800258e <DMA_CheckFifoParam+0xce>
 80024e0:	a201      	add	r2, pc, #4	; (adr r2, 80024e8 <DMA_CheckFifoParam+0x28>)
 80024e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e6:	bf00      	nop
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	0800250b 	.word	0x0800250b
 80024f0:	080024f9 	.word	0x080024f9
 80024f4:	0800258f 	.word	0x0800258f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d046      	beq.n	8002592 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002508:	e043      	b.n	8002592 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002512:	d140      	bne.n	8002596 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002518:	e03d      	b.n	8002596 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002522:	d121      	bne.n	8002568 <DMA_CheckFifoParam+0xa8>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d837      	bhi.n	800259a <DMA_CheckFifoParam+0xda>
 800252a:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <DMA_CheckFifoParam+0x70>)
 800252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002530:	08002541 	.word	0x08002541
 8002534:	08002547 	.word	0x08002547
 8002538:	08002541 	.word	0x08002541
 800253c:	08002559 	.word	0x08002559
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      break;
 8002544:	e030      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d025      	beq.n	800259e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002556:	e022      	b.n	800259e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002560:	d11f      	bne.n	80025a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002566:	e01c      	b.n	80025a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d903      	bls.n	8002576 <DMA_CheckFifoParam+0xb6>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d003      	beq.n	800257c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002574:	e018      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
      break;
 800257a:	e015      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00e      	beq.n	80025a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      break;
 800258c:	e00b      	b.n	80025a6 <DMA_CheckFifoParam+0xe6>
      break;
 800258e:	bf00      	nop
 8002590:	e00a      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002592:	bf00      	nop
 8002594:	e008      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002596:	bf00      	nop
 8002598:	e006      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;
 800259a:	bf00      	nop
 800259c:	e004      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;
 800259e:	bf00      	nop
 80025a0:	e002      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025a2:	bf00      	nop
 80025a4:	e000      	b.n	80025a8 <DMA_CheckFifoParam+0xe8>
      break;
 80025a6:	bf00      	nop
    }
  } 
  
  return status; 
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop

080025b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e159      	b.n	8002888 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d4:	2201      	movs	r2, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	f040 8148 	bne.w	8002882 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d005      	beq.n	800260a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002606:	2b02      	cmp	r3, #2
 8002608:	d130      	bne.n	800266c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002640:	2201      	movs	r2, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 0201 	and.w	r2, r3, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b03      	cmp	r3, #3
 8002676:	d017      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d123      	bne.n	80026fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	08da      	lsrs	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	220f      	movs	r2, #15
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	08da      	lsrs	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3208      	adds	r2, #8
 80026f6:	69b9      	ldr	r1, [r7, #24]
 80026f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0203 	and.w	r2, r3, #3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a2 	beq.w	8002882 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b57      	ldr	r3, [pc, #348]	; (80028a0 <HAL_GPIO_Init+0x2e8>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a56      	ldr	r2, [pc, #344]	; (80028a0 <HAL_GPIO_Init+0x2e8>)
 8002748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b54      	ldr	r3, [pc, #336]	; (80028a0 <HAL_GPIO_Init+0x2e8>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800275a:	4a52      	ldr	r2, [pc, #328]	; (80028a4 <HAL_GPIO_Init+0x2ec>)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3302      	adds	r3, #2
 8002762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	220f      	movs	r2, #15
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a49      	ldr	r2, [pc, #292]	; (80028a8 <HAL_GPIO_Init+0x2f0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d019      	beq.n	80027ba <HAL_GPIO_Init+0x202>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a48      	ldr	r2, [pc, #288]	; (80028ac <HAL_GPIO_Init+0x2f4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_GPIO_Init+0x1fe>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a47      	ldr	r2, [pc, #284]	; (80028b0 <HAL_GPIO_Init+0x2f8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00d      	beq.n	80027b2 <HAL_GPIO_Init+0x1fa>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a46      	ldr	r2, [pc, #280]	; (80028b4 <HAL_GPIO_Init+0x2fc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_Init+0x1f6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a45      	ldr	r2, [pc, #276]	; (80028b8 <HAL_GPIO_Init+0x300>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_GPIO_Init+0x1f2>
 80027a6:	2304      	movs	r3, #4
 80027a8:	e008      	b.n	80027bc <HAL_GPIO_Init+0x204>
 80027aa:	2307      	movs	r3, #7
 80027ac:	e006      	b.n	80027bc <HAL_GPIO_Init+0x204>
 80027ae:	2303      	movs	r3, #3
 80027b0:	e004      	b.n	80027bc <HAL_GPIO_Init+0x204>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e002      	b.n	80027bc <HAL_GPIO_Init+0x204>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_GPIO_Init+0x204>
 80027ba:	2300      	movs	r3, #0
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	f002 0203 	and.w	r2, r2, #3
 80027c2:	0092      	lsls	r2, r2, #2
 80027c4:	4093      	lsls	r3, r2
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027cc:	4935      	ldr	r1, [pc, #212]	; (80028a4 <HAL_GPIO_Init+0x2ec>)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	089b      	lsrs	r3, r3, #2
 80027d2:	3302      	adds	r3, #2
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027da:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_GPIO_Init+0x304>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4013      	ands	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027fe:	4a2f      	ldr	r2, [pc, #188]	; (80028bc <HAL_GPIO_Init+0x304>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002804:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <HAL_GPIO_Init+0x304>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002828:	4a24      	ldr	r2, [pc, #144]	; (80028bc <HAL_GPIO_Init+0x304>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282e:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_GPIO_Init+0x304>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002852:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <HAL_GPIO_Init+0x304>)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_GPIO_Init+0x304>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800287c:	4a0f      	ldr	r2, [pc, #60]	; (80028bc <HAL_GPIO_Init+0x304>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3301      	adds	r3, #1
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	2b0f      	cmp	r3, #15
 800288c:	f67f aea2 	bls.w	80025d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40013800 	.word	0x40013800
 80028a8:	40020000 	.word	0x40020000
 80028ac:	40020400 	.word	0x40020400
 80028b0:	40020800 	.word	0x40020800
 80028b4:	40020c00 	.word	0x40020c00
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40013c00 	.word	0x40013c00

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e264      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d075      	beq.n	80029fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002912:	4ba3      	ldr	r3, [pc, #652]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b04      	cmp	r3, #4
 800291c:	d00c      	beq.n	8002938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800291e:	4ba0      	ldr	r3, [pc, #640]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002926:	2b08      	cmp	r3, #8
 8002928:	d112      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292a:	4b9d      	ldr	r3, [pc, #628]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002936:	d10b      	bne.n	8002950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	4b99      	ldr	r3, [pc, #612]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05b      	beq.n	80029fc <HAL_RCC_OscConfig+0x108>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d157      	bne.n	80029fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e23f      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002958:	d106      	bne.n	8002968 <HAL_RCC_OscConfig+0x74>
 800295a:	4b91      	ldr	r3, [pc, #580]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a90      	ldr	r2, [pc, #576]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e01d      	b.n	80029a4 <HAL_RCC_OscConfig+0xb0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x98>
 8002972:	4b8b      	ldr	r3, [pc, #556]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a8a      	ldr	r2, [pc, #552]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	4b88      	ldr	r3, [pc, #544]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a87      	ldr	r2, [pc, #540]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0xb0>
 800298c:	4b84      	ldr	r3, [pc, #528]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a83      	ldr	r2, [pc, #524]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4b81      	ldr	r3, [pc, #516]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a80      	ldr	r2, [pc, #512]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 800299e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d013      	beq.n	80029d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fe4e 	bl	800164c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe fe4a 	bl	800164c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e204      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b76      	ldr	r3, [pc, #472]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0xc0>
 80029d2:	e014      	b.n	80029fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe fe3a 	bl	800164c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe fe36 	bl	800164c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1f0      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	4b6c      	ldr	r3, [pc, #432]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0xe8>
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d063      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a16:	4b62      	ldr	r3, [pc, #392]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d11c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a22:	4b5f      	ldr	r3, [pc, #380]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d116      	bne.n	8002a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_RCC_OscConfig+0x152>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e1c4      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a46:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4952      	ldr	r1, [pc, #328]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5a:	e03a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a64:	4b4f      	ldr	r3, [pc, #316]	; (8002ba4 <HAL_RCC_OscConfig+0x2b0>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fdef 	bl	800164c <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a72:	f7fe fdeb 	bl	800164c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e1a5      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	4b46      	ldr	r3, [pc, #280]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b43      	ldr	r3, [pc, #268]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4940      	ldr	r1, [pc, #256]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
 8002aa4:	e015      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa6:	4b3f      	ldr	r3, [pc, #252]	; (8002ba4 <HAL_RCC_OscConfig+0x2b0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe fdce 	bl	800164c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab4:	f7fe fdca 	bl	800164c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e184      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d030      	beq.n	8002b40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae6:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_RCC_OscConfig+0x2b4>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe fdae 	bl	800164c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fe fdaa 	bl	800164c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e164      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x200>
 8002b12:	e015      	b.n	8002b40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_RCC_OscConfig+0x2b4>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fd97 	bl	800164c <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fe fd93 	bl	800164c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e14d      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80a0 	beq.w	8002c8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_OscConfig+0x2b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d121      	bne.n	8002bce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_RCC_OscConfig+0x2b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_RCC_OscConfig+0x2b8>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b96:	f7fe fd59 	bl	800164c <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	e011      	b.n	8002bc2 <HAL_RCC_OscConfig+0x2ce>
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	42470000 	.word	0x42470000
 8002ba8:	42470e80 	.word	0x42470e80
 8002bac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb0:	f7fe fd4c 	bl	800164c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e106      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc2:	4b85      	ldr	r3, [pc, #532]	; (8002dd8 <HAL_RCC_OscConfig+0x4e4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x2f0>
 8002bd6:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	4a80      	ldr	r2, [pc, #512]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	; 0x70
 8002be2:	e01c      	b.n	8002c1e <HAL_RCC_OscConfig+0x32a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCC_OscConfig+0x312>
 8002bec:	4b7b      	ldr	r3, [pc, #492]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a7a      	ldr	r2, [pc, #488]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002bf2:	f043 0304 	orr.w	r3, r3, #4
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	4b78      	ldr	r3, [pc, #480]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	4a77      	ldr	r2, [pc, #476]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6713      	str	r3, [r2, #112]	; 0x70
 8002c04:	e00b      	b.n	8002c1e <HAL_RCC_OscConfig+0x32a>
 8002c06:	4b75      	ldr	r3, [pc, #468]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a74      	ldr	r2, [pc, #464]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	4b72      	ldr	r3, [pc, #456]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a71      	ldr	r2, [pc, #452]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002c18:	f023 0304 	bic.w	r3, r3, #4
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7fe fd11 	bl	800164c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe fd0d 	bl	800164c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0c5      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ee      	beq.n	8002c2e <HAL_RCC_OscConfig+0x33a>
 8002c50:	e014      	b.n	8002c7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7fe fcfb 	bl	800164c <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7fe fcf7 	bl	800164c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e0af      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	4b5a      	ldr	r3, [pc, #360]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d105      	bne.n	8002c8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c82:	4b56      	ldr	r3, [pc, #344]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a55      	ldr	r2, [pc, #340]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 809b 	beq.w	8002dce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c98:	4b50      	ldr	r3, [pc, #320]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d05c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d141      	bne.n	8002d30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b4c      	ldr	r3, [pc, #304]	; (8002de0 <HAL_RCC_OscConfig+0x4ec>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fe fccb 	bl	800164c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cba:	f7fe fcc7 	bl	800164c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e081      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ccc:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	019b      	lsls	r3, r3, #6
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	061b      	lsls	r3, r3, #24
 8002cfc:	4937      	ldr	r1, [pc, #220]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_RCC_OscConfig+0x4ec>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fe fca0 	bl	800164c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe fc9c 	bl	800164c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e056      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d22:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x41c>
 8002d2e:	e04e      	b.n	8002dce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d30:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_RCC_OscConfig+0x4ec>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d36:	f7fe fc89 	bl	800164c <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe fc85 	bl	800164c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e03f      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x44a>
 8002d5c:	e037      	b.n	8002dce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e032      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <HAL_RCC_OscConfig+0x4e8>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d028      	beq.n	8002dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d121      	bne.n	8002dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d11a      	bne.n	8002dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002da0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d111      	bne.n	8002dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	3b01      	subs	r3, #1
 8002db4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d001      	beq.n	8002dce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	42470060 	.word	0x42470060

08002de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0cc      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df8:	4b68      	ldr	r3, [pc, #416]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d90c      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b65      	ldr	r3, [pc, #404]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b63      	ldr	r3, [pc, #396]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0b8      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e38:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e50:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a52      	ldr	r2, [pc, #328]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5c:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	494d      	ldr	r1, [pc, #308]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d044      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d119      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e07f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea2:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e06f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e067      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec2:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f023 0203 	bic.w	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4934      	ldr	r1, [pc, #208]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed4:	f7fe fbba 	bl	800164c <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002edc:	f7fe fbb6 	bl	800164c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e04f      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 020c 	and.w	r2, r3, #12
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d1eb      	bne.n	8002edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d20c      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e032      	b.n	8002f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f38:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4916      	ldr	r1, [pc, #88]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f6a:	f000 f821 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	490a      	ldr	r1, [pc, #40]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1c8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fb1a 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023c00 	.word	0x40023c00
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	08006458 	.word	0x08006458
 8002fa8:	20000000 	.word	0x20000000
 8002fac:	20000004 	.word	0x20000004

08002fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb0:	b5b0      	push	{r4, r5, r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	6079      	str	r1, [r7, #4]
 8002fba:	2100      	movs	r1, #0
 8002fbc:	60f9      	str	r1, [r7, #12]
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc6:	4952      	ldr	r1, [pc, #328]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fc8:	6889      	ldr	r1, [r1, #8]
 8002fca:	f001 010c 	and.w	r1, r1, #12
 8002fce:	2908      	cmp	r1, #8
 8002fd0:	d00d      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x3e>
 8002fd2:	2908      	cmp	r1, #8
 8002fd4:	f200 8094 	bhi.w	8003100 <HAL_RCC_GetSysClockFreq+0x150>
 8002fd8:	2900      	cmp	r1, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x32>
 8002fdc:	2904      	cmp	r1, #4
 8002fde:	d003      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x38>
 8002fe0:	e08e      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCC_GetSysClockFreq+0x164>)
 8002fe4:	60bb      	str	r3, [r7, #8]
       break;
 8002fe6:	e08e      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fe8:	4b4b      	ldr	r3, [pc, #300]	; (8003118 <HAL_RCC_GetSysClockFreq+0x168>)
 8002fea:	60bb      	str	r3, [r7, #8]
      break;
 8002fec:	e08b      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fee:	4948      	ldr	r1, [pc, #288]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ff0:	6849      	ldr	r1, [r1, #4]
 8002ff2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002ff6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff8:	4945      	ldr	r1, [pc, #276]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ffa:	6849      	ldr	r1, [r1, #4]
 8002ffc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003000:	2900      	cmp	r1, #0
 8003002:	d024      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003004:	4942      	ldr	r1, [pc, #264]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8003006:	6849      	ldr	r1, [r1, #4]
 8003008:	0989      	lsrs	r1, r1, #6
 800300a:	4608      	mov	r0, r1
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003014:	f04f 0500 	mov.w	r5, #0
 8003018:	ea00 0204 	and.w	r2, r0, r4
 800301c:	ea01 0305 	and.w	r3, r1, r5
 8003020:	493d      	ldr	r1, [pc, #244]	; (8003118 <HAL_RCC_GetSysClockFreq+0x168>)
 8003022:	fb01 f003 	mul.w	r0, r1, r3
 8003026:	2100      	movs	r1, #0
 8003028:	fb01 f102 	mul.w	r1, r1, r2
 800302c:	1844      	adds	r4, r0, r1
 800302e:	493a      	ldr	r1, [pc, #232]	; (8003118 <HAL_RCC_GetSysClockFreq+0x168>)
 8003030:	fba2 0101 	umull	r0, r1, r2, r1
 8003034:	1863      	adds	r3, r4, r1
 8003036:	4619      	mov	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	461a      	mov	r2, r3
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	f7fd f91e 	bl	8000280 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e04a      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b30      	ldr	r3, [pc, #192]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	461a      	mov	r2, r3
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	ea02 0400 	and.w	r4, r2, r0
 8003066:	ea03 0501 	and.w	r5, r3, r1
 800306a:	4620      	mov	r0, r4
 800306c:	4629      	mov	r1, r5
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	014b      	lsls	r3, r1, #5
 8003078:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800307c:	0142      	lsls	r2, r0, #5
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	1b00      	subs	r0, r0, r4
 8003084:	eb61 0105 	sbc.w	r1, r1, r5
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	018b      	lsls	r3, r1, #6
 8003092:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003096:	0182      	lsls	r2, r0, #6
 8003098:	1a12      	subs	r2, r2, r0
 800309a:	eb63 0301 	sbc.w	r3, r3, r1
 800309e:	f04f 0000 	mov.w	r0, #0
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	00d9      	lsls	r1, r3, #3
 80030a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ac:	00d0      	lsls	r0, r2, #3
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	1912      	adds	r2, r2, r4
 80030b4:	eb45 0303 	adc.w	r3, r5, r3
 80030b8:	f04f 0000 	mov.w	r0, #0
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	0299      	lsls	r1, r3, #10
 80030c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030c6:	0290      	lsls	r0, r2, #10
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	f7fd f8d2 	bl	8000280 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4613      	mov	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCC_GetSysClockFreq+0x160>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	0c1b      	lsrs	r3, r3, #16
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	3301      	adds	r3, #1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	60bb      	str	r3, [r7, #8]
      break;
 80030fe:	e002      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <HAL_RCC_GetSysClockFreq+0x164>)
 8003102:	60bb      	str	r3, [r7, #8]
      break;
 8003104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003106:	68bb      	ldr	r3, [r7, #8]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bdb0      	pop	{r4, r5, r7, pc}
 8003110:	40023800 	.word	0x40023800
 8003114:	00f42400 	.word	0x00f42400
 8003118:	017d7840 	.word	0x017d7840

0800311c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_RCC_GetHCLKFreq+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000000 	.word	0x20000000

08003134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003138:	f7ff fff0 	bl	800311c <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0a9b      	lsrs	r3, r3, #10
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	08006468 	.word	0x08006468

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003160:	f7ff ffdc 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0b5b      	lsrs	r3, r3, #13
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4903      	ldr	r1, [pc, #12]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	08006468 	.word	0x08006468

08003184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07b      	b.n	800328e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	2b00      	cmp	r3, #0
 800319c:	d108      	bne.n	80031b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031a6:	d009      	beq.n	80031bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
 80031ae:	e005      	b.n	80031bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fd00 	bl	8000bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003240:	ea42 0103 	orr.w	r1, r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	f003 0104 	and.w	r1, r3, #4
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f003 0210 	and.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e041      	b.n	800332c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fd ffe1 	bl	8001284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2202      	movs	r2, #2
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4619      	mov	r1, r3
 80032d4:	4610      	mov	r0, r2
 80032d6:	f000 fb7d 	bl	80039d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d001      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e044      	b.n	80033d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x6c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d013      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a19      	ldr	r2, [pc, #100]	; (80033ec <HAL_TIM_Base_Start_IT+0xb8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x6c>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d111      	bne.n	80033c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d010      	beq.n	80033d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c2:	e007      	b.n	80033d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40010000 	.word	0x40010000
 80033e8:	40000400 	.word	0x40000400
 80033ec:	40000800 	.word	0x40000800
 80033f0:	40000c00 	.word	0x40000c00
 80033f4:	40014000 	.word	0x40014000

080033f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e041      	b.n	800348e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fd fdf6 	bl	8001010 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f000 facc 	bl	80039d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_TIM_PWM_Start+0x24>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e022      	b.n	8003502 <HAL_TIM_PWM_Start+0x6a>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d109      	bne.n	80034d6 <HAL_TIM_PWM_Start+0x3e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	bf14      	ite	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	2300      	moveq	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e015      	b.n	8003502 <HAL_TIM_PWM_Start+0x6a>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d109      	bne.n	80034f0 <HAL_TIM_PWM_Start+0x58>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e008      	b.n	8003502 <HAL_TIM_PWM_Start+0x6a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e068      	b.n	80035dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start+0x82>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003518:	e013      	b.n	8003542 <HAL_TIM_PWM_Start+0xaa>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start+0x92>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003528:	e00b      	b.n	8003542 <HAL_TIM_PWM_Start+0xaa>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start+0xa2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003538:	e003      	b.n	8003542 <HAL_TIM_PWM_Start+0xaa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2202      	movs	r2, #2
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2201      	movs	r2, #1
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fc4e 	bl	8003dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <HAL_TIM_PWM_Start+0x14c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d107      	bne.n	800356a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <HAL_TIM_PWM_Start+0x14c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d018      	beq.n	80035a6 <HAL_TIM_PWM_Start+0x10e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357c:	d013      	beq.n	80035a6 <HAL_TIM_PWM_Start+0x10e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a19      	ldr	r2, [pc, #100]	; (80035e8 <HAL_TIM_PWM_Start+0x150>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <HAL_TIM_PWM_Start+0x10e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a17      	ldr	r2, [pc, #92]	; (80035ec <HAL_TIM_PWM_Start+0x154>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_TIM_PWM_Start+0x10e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <HAL_TIM_PWM_Start+0x158>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_TIM_PWM_Start+0x10e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <HAL_TIM_PWM_Start+0x15c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d111      	bne.n	80035ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b06      	cmp	r3, #6
 80035b6:	d010      	beq.n	80035da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c8:	e007      	b.n	80035da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40014000 	.word	0x40014000

080035f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b02      	cmp	r3, #2
 800360c:	d122      	bne.n	8003654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b02      	cmp	r3, #2
 800361a:	d11b      	bne.n	8003654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0202 	mvn.w	r2, #2
 8003624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9ac 	bl	8003998 <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f99e 	bl	8003984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f9af 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b04      	cmp	r3, #4
 8003660:	d122      	bne.n	80036a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b04      	cmp	r3, #4
 800366e:	d11b      	bne.n	80036a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0204 	mvn.w	r2, #4
 8003678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f982 	bl	8003998 <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f974 	bl	8003984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f985 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d122      	bne.n	80036fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d11b      	bne.n	80036fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0208 	mvn.w	r2, #8
 80036cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2204      	movs	r2, #4
 80036d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f958 	bl	8003998 <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f94a 	bl	8003984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f95b 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b10      	cmp	r3, #16
 8003708:	d122      	bne.n	8003750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b10      	cmp	r3, #16
 8003716:	d11b      	bne.n	8003750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0210 	mvn.w	r2, #16
 8003720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2208      	movs	r2, #8
 8003726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f92e 	bl	8003998 <HAL_TIM_IC_CaptureCallback>
 800373c:	e005      	b.n	800374a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f920 	bl	8003984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f931 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b01      	cmp	r3, #1
 800375c:	d10e      	bne.n	800377c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d107      	bne.n	800377c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0201 	mvn.w	r2, #1
 8003774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd f8ac 	bl	80008d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	2b80      	cmp	r3, #128	; 0x80
 8003788:	d10e      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b80      	cmp	r3, #128	; 0x80
 8003796:	d107      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fbc0 	bl	8003f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d10e      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d107      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8f6 	bl	80039c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b20      	cmp	r3, #32
 80037e0:	d10e      	bne.n	8003800 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d107      	bne.n	8003800 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0220 	mvn.w	r2, #32
 80037f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fb8a 	bl	8003f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800381e:	2302      	movs	r3, #2
 8003820:	e0ac      	b.n	800397c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b0c      	cmp	r3, #12
 800382e:	f200 809f 	bhi.w	8003970 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003832:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003838:	0800386d 	.word	0x0800386d
 800383c:	08003971 	.word	0x08003971
 8003840:	08003971 	.word	0x08003971
 8003844:	08003971 	.word	0x08003971
 8003848:	080038ad 	.word	0x080038ad
 800384c:	08003971 	.word	0x08003971
 8003850:	08003971 	.word	0x08003971
 8003854:	08003971 	.word	0x08003971
 8003858:	080038ef 	.word	0x080038ef
 800385c:	08003971 	.word	0x08003971
 8003860:	08003971 	.word	0x08003971
 8003864:	08003971 	.word	0x08003971
 8003868:	0800392f 	.word	0x0800392f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f92e 	bl	8003ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0208 	orr.w	r2, r2, #8
 8003886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0204 	bic.w	r2, r2, #4
 8003896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6999      	ldr	r1, [r3, #24]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	619a      	str	r2, [r3, #24]
      break;
 80038aa:	e062      	b.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f974 	bl	8003ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6999      	ldr	r1, [r3, #24]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	021a      	lsls	r2, r3, #8
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	619a      	str	r2, [r3, #24]
      break;
 80038ec:	e041      	b.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f9bf 	bl	8003c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0208 	orr.w	r2, r2, #8
 8003908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0204 	bic.w	r2, r2, #4
 8003918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69d9      	ldr	r1, [r3, #28]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	61da      	str	r2, [r3, #28]
      break;
 800392c:	e021      	b.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	4618      	mov	r0, r3
 8003936:	f000 fa09 	bl	8003d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69d9      	ldr	r1, [r3, #28]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	021a      	lsls	r2, r3, #8
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	61da      	str	r2, [r3, #28]
      break;
 800396e:	e000      	b.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003970:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a34      	ldr	r2, [pc, #208]	; (8003ab8 <TIM_Base_SetConfig+0xe4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00f      	beq.n	8003a0c <TIM_Base_SetConfig+0x38>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f2:	d00b      	beq.n	8003a0c <TIM_Base_SetConfig+0x38>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a31      	ldr	r2, [pc, #196]	; (8003abc <TIM_Base_SetConfig+0xe8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d007      	beq.n	8003a0c <TIM_Base_SetConfig+0x38>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <TIM_Base_SetConfig+0xec>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d003      	beq.n	8003a0c <TIM_Base_SetConfig+0x38>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a2f      	ldr	r2, [pc, #188]	; (8003ac4 <TIM_Base_SetConfig+0xf0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d108      	bne.n	8003a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a25      	ldr	r2, [pc, #148]	; (8003ab8 <TIM_Base_SetConfig+0xe4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01b      	beq.n	8003a5e <TIM_Base_SetConfig+0x8a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2c:	d017      	beq.n	8003a5e <TIM_Base_SetConfig+0x8a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a22      	ldr	r2, [pc, #136]	; (8003abc <TIM_Base_SetConfig+0xe8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <TIM_Base_SetConfig+0x8a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <TIM_Base_SetConfig+0xec>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00f      	beq.n	8003a5e <TIM_Base_SetConfig+0x8a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <TIM_Base_SetConfig+0xf0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00b      	beq.n	8003a5e <TIM_Base_SetConfig+0x8a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <TIM_Base_SetConfig+0xf4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d007      	beq.n	8003a5e <TIM_Base_SetConfig+0x8a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <TIM_Base_SetConfig+0xf8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d003      	beq.n	8003a5e <TIM_Base_SetConfig+0x8a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <TIM_Base_SetConfig+0xfc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d108      	bne.n	8003a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a08      	ldr	r2, [pc, #32]	; (8003ab8 <TIM_Base_SetConfig+0xe4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d103      	bne.n	8003aa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	615a      	str	r2, [r3, #20]
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40000c00 	.word	0x40000c00
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0201 	bic.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 0302 	bic.w	r3, r3, #2
 8003b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <TIM_OC1_SetConfig+0xc8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10c      	bne.n	8003b4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0308 	bic.w	r3, r3, #8
 8003b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <TIM_OC1_SetConfig+0xc8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d111      	bne.n	8003b76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	621a      	str	r2, [r3, #32]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	40010000 	.word	0x40010000

08003ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f023 0210 	bic.w	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f023 0320 	bic.w	r3, r3, #32
 8003bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <TIM_OC2_SetConfig+0xd4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10d      	bne.n	8003c1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <TIM_OC2_SetConfig+0xd4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d113      	bne.n	8003c4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000

08003c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0303 	bic.w	r3, r3, #3
 8003cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <TIM_OC3_SetConfig+0xd0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d10d      	bne.n	8003cf2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <TIM_OC3_SetConfig+0xd0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d113      	bne.n	8003d22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	621a      	str	r2, [r3, #32]
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40010000 	.word	0x40010000

08003d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	031b      	lsls	r3, r3, #12
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a10      	ldr	r2, [pc, #64]	; (8003de8 <TIM_OC4_SetConfig+0x9c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d109      	bne.n	8003dc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	621a      	str	r2, [r3, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40010000 	.word	0x40010000

08003dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	2201      	movs	r2, #1
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1a      	ldr	r2, [r3, #32]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	401a      	ands	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a1a      	ldr	r2, [r3, #32]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
	...

08003e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e050      	b.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d018      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9c:	d013      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a16      	ldr	r2, [pc, #88]	; (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d009      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40010000 	.word	0x40010000
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800
 8003f0c:	40000c00 	.word	0x40000c00
 8003f10:	40014000 	.word	0x40014000

08003f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e03f      	b.n	8003fce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd fa3e 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	; 0x24
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fc99 	bl	80048b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d11d      	bne.n	800402c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_UART_Receive_DMA+0x26>
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e016      	b.n	800402e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_UART_Receive_DMA+0x38>
 800400a:	2302      	movs	r3, #2
 800400c:	e00f      	b.n	800402e <HAL_UART_Receive_DMA+0x58>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	461a      	mov	r2, r3
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fa8e 	bl	8004544 <UART_Start_Receive_DMA>
 8004028:	4603      	mov	r3, r0
 800402a:	e000      	b.n	800402e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800402c:	2302      	movs	r3, #2
  }
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	; 0x28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004058:	2300      	movs	r3, #0
 800405a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10d      	bne.n	800408a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_UART_IRQHandler+0x52>
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fb81 	bl	800478a <UART_Receive_IT>
      return;
 8004088:	e17c      	b.n	8004384 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80b1 	beq.w	80041f4 <HAL_UART_IRQHandler+0x1bc>
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d105      	bne.n	80040a8 <HAL_UART_IRQHandler+0x70>
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80a6 	beq.w	80041f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_UART_IRQHandler+0x90>
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	f043 0201 	orr.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_UART_IRQHandler+0xb0>
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	f043 0202 	orr.w	r2, r3, #2
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_UART_IRQHandler+0xd0>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	f043 0204 	orr.w	r2, r3, #4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00f      	beq.n	8004132 <HAL_UART_IRQHandler+0xfa>
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d104      	bne.n	8004126 <HAL_UART_IRQHandler+0xee>
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f043 0208 	orr.w	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 811f 	beq.w	800437a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <HAL_UART_IRQHandler+0x11e>
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fb1a 	bl	800478a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <HAL_UART_IRQHandler+0x146>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d031      	beq.n	80041e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fa5a 	bl	8004638 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d123      	bne.n	80041da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d013      	beq.n	80041d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	4a77      	ldr	r2, [pc, #476]	; (800438c <HAL_UART_IRQHandler+0x354>)
 80041b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fd ff72 	bl	80020a0 <HAL_DMA_Abort_IT>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d016      	beq.n	80041f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041cc:	4610      	mov	r0, r2
 80041ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d0:	e00e      	b.n	80041f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f8f0 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	e00a      	b.n	80041f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f8ec 	bl	80043b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e0:	e006      	b.n	80041f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f8e8 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041ee:	e0c4      	b.n	800437a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	bf00      	nop
    return;
 80041f2:	e0c2      	b.n	800437a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	f040 80a2 	bne.w	8004342 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 809c 	beq.w	8004342 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8096 	beq.w	8004342 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d14f      	bne.n	80042da <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004244:	8a3b      	ldrh	r3, [r7, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8099 	beq.w	800437e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004250:	8a3a      	ldrh	r2, [r7, #16]
 8004252:	429a      	cmp	r2, r3
 8004254:	f080 8093 	bcs.w	800437e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8a3a      	ldrh	r2, [r7, #16]
 800425c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004268:	d02b      	beq.n	80042c2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004278:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004298:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0210 	bic.w	r2, r2, #16
 80042b6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fd fe7f 	bl	8001fc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f87a 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042d8:	e051      	b.n	800437e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d047      	beq.n	8004382 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80042f2:	8a7b      	ldrh	r3, [r7, #18]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d044      	beq.n	8004382 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004306:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0210 	bic.w	r2, r2, #16
 8004334:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004336:	8a7b      	ldrh	r3, [r7, #18]
 8004338:	4619      	mov	r1, r3
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f846 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004340:	e01f      	b.n	8004382 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_UART_IRQHandler+0x326>
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f9af 	bl	80046ba <UART_Transmit_IT>
    return;
 800435c:	e012      	b.n	8004384 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00d      	beq.n	8004384 <HAL_UART_IRQHandler+0x34c>
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f9f1 	bl	800475a <UART_EndTransmit_IT>
    return;
 8004378:	e004      	b.n	8004384 <HAL_UART_IRQHandler+0x34c>
    return;
 800437a:	bf00      	nop
 800437c:	e002      	b.n	8004384 <HAL_UART_IRQHandler+0x34c>
      return;
 800437e:	bf00      	nop
 8004380:	e000      	b.n	8004384 <HAL_UART_IRQHandler+0x34c>
      return;
 8004382:	bf00      	nop
  }
}
 8004384:	3728      	adds	r7, #40	; 0x28
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	08004693 	.word	0x08004693

08004390 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d12a      	bne.n	8004456 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004414:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004434:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	2b01      	cmp	r3, #1
 8004444:	d107      	bne.n	8004456 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0210 	bic.w	r2, r2, #16
 8004454:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	2b01      	cmp	r3, #1
 800445c:	d106      	bne.n	800446c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004462:	4619      	mov	r1, r3
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff ffb1 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800446a:	e002      	b.n	8004472 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7fc fa9d 	bl	80009ac <HAL_UART_RxCpltCallback>
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	2b01      	cmp	r3, #1
 800448e:	d108      	bne.n	80044a2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	b29b      	uxth	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ff96 	bl	80043cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044a0:	e002      	b.n	80044a8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7ff ff7e 	bl	80043a4 <HAL_UART_RxHalfCpltCallback>
}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044cc:	2b80      	cmp	r3, #128	; 0x80
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b21      	cmp	r3, #33	; 0x21
 80044e2:	d108      	bne.n	80044f6 <UART_DMAError+0x46>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2200      	movs	r2, #0
 80044ee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80044f0:	68b8      	ldr	r0, [r7, #8]
 80044f2:	f000 f88b 	bl	800460c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b22      	cmp	r3, #34	; 0x22
 8004516:	d108      	bne.n	800452a <UART_DMAError+0x7a>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2200      	movs	r2, #0
 8004522:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004524:	68b8      	ldr	r0, [r7, #8]
 8004526:	f000 f887 	bl	8004638 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f043 0210 	orr.w	r2, r3, #16
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004536:	68b8      	ldr	r0, [r7, #8]
 8004538:	f7ff ff3e 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	88fa      	ldrh	r2, [r7, #6]
 800455c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2222      	movs	r2, #34	; 0x22
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	4a23      	ldr	r2, [pc, #140]	; (8004600 <UART_Start_Receive_DMA+0xbc>)
 8004572:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	4a22      	ldr	r2, [pc, #136]	; (8004604 <UART_Start_Receive_DMA+0xc0>)
 800457a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	4a21      	ldr	r2, [pc, #132]	; (8004608 <UART_Start_Receive_DMA+0xc4>)
 8004582:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	2200      	movs	r2, #0
 800458a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800458c:	f107 0308 	add.w	r3, r7, #8
 8004590:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	f7fd fcb4 	bl	8001f10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0201 	orr.w	r2, r2, #1
 80045e4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	080043e5 	.word	0x080043e5
 8004604:	0800447b 	.word	0x0800447b
 8004608:	080044b1 	.word	0x080044b1

0800460c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004622:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800464e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	2b01      	cmp	r3, #1
 8004666:	d107      	bne.n	8004678 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0210 	bic.w	r2, r2, #16
 8004676:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff fe83 	bl	80043b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b21      	cmp	r3, #33	; 0x21
 80046cc:	d13e      	bne.n	800474c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	d114      	bne.n	8004702 <UART_Transmit_IT+0x48>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d110      	bne.n	8004702 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	1c9a      	adds	r2, r3, #2
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	621a      	str	r2, [r3, #32]
 8004700:	e008      	b.n	8004714 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6211      	str	r1, [r2, #32]
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29b      	uxth	r3, r3
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4619      	mov	r1, r3
 8004722:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10f      	bne.n	8004748 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004736:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004746:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e000      	b.n	800474e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004770:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff fe08 	bl	8004390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b22      	cmp	r3, #34	; 0x22
 800479c:	f040 8087 	bne.w	80048ae <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d117      	bne.n	80047da <UART_Receive_IT+0x50>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d113      	bne.n	80047da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	1c9a      	adds	r2, r3, #2
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28
 80047d8:	e026      	b.n	8004828 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ec:	d007      	beq.n	80047fe <UART_Receive_IT+0x74>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <UART_Receive_IT+0x82>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	b2da      	uxtb	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e008      	b.n	800481e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b01      	subs	r3, #1
 8004830:	b29b      	uxth	r3, r3
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4619      	mov	r1, r3
 8004836:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004838:	2b00      	cmp	r3, #0
 800483a:	d136      	bne.n	80048aa <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0220 	bic.w	r2, r2, #32
 800484a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800485a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	2b01      	cmp	r3, #1
 800487a:	d10e      	bne.n	800489a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0210 	bic.w	r2, r2, #16
 800488a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fd9a 	bl	80043cc <HAL_UARTEx_RxEventCallback>
 8004898:	e002      	b.n	80048a0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fc f886 	bl	80009ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e002      	b.n	80048b0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e000      	b.n	80048b0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80048ae:	2302      	movs	r3, #2
  }
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048bc:	b09f      	sub	sp, #124	; 0x7c
 80048be:	af00      	add	r7, sp, #0
 80048c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ce:	68d9      	ldr	r1, [r3, #12]
 80048d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	ea40 0301 	orr.w	r3, r0, r1
 80048d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80048f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048fc:	f021 010c 	bic.w	r1, r1, #12
 8004900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004906:	430b      	orrs	r3, r1
 8004908:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800490a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004916:	6999      	ldr	r1, [r3, #24]
 8004918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	ea40 0301 	orr.w	r3, r0, r1
 8004920:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4bc5      	ldr	r3, [pc, #788]	; (8004c3c <UART_SetConfig+0x384>)
 8004928:	429a      	cmp	r2, r3
 800492a:	d004      	beq.n	8004936 <UART_SetConfig+0x7e>
 800492c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4bc3      	ldr	r3, [pc, #780]	; (8004c40 <UART_SetConfig+0x388>)
 8004932:	429a      	cmp	r2, r3
 8004934:	d103      	bne.n	800493e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004936:	f7fe fc11 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 800493a:	6778      	str	r0, [r7, #116]	; 0x74
 800493c:	e002      	b.n	8004944 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800493e:	f7fe fbf9 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 8004942:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494c:	f040 80b6 	bne.w	8004abc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004952:	461c      	mov	r4, r3
 8004954:	f04f 0500 	mov.w	r5, #0
 8004958:	4622      	mov	r2, r4
 800495a:	462b      	mov	r3, r5
 800495c:	1891      	adds	r1, r2, r2
 800495e:	6439      	str	r1, [r7, #64]	; 0x40
 8004960:	415b      	adcs	r3, r3
 8004962:	647b      	str	r3, [r7, #68]	; 0x44
 8004964:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004968:	1912      	adds	r2, r2, r4
 800496a:	eb45 0303 	adc.w	r3, r5, r3
 800496e:	f04f 0000 	mov.w	r0, #0
 8004972:	f04f 0100 	mov.w	r1, #0
 8004976:	00d9      	lsls	r1, r3, #3
 8004978:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800497c:	00d0      	lsls	r0, r2, #3
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	1911      	adds	r1, r2, r4
 8004984:	6639      	str	r1, [r7, #96]	; 0x60
 8004986:	416b      	adcs	r3, r5
 8004988:	667b      	str	r3, [r7, #100]	; 0x64
 800498a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	461a      	mov	r2, r3
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	1891      	adds	r1, r2, r2
 8004996:	63b9      	str	r1, [r7, #56]	; 0x38
 8004998:	415b      	adcs	r3, r3
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800499c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80049a4:	f7fb fc6c 	bl	8000280 <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4ba5      	ldr	r3, [pc, #660]	; (8004c44 <UART_SetConfig+0x38c>)
 80049ae:	fba3 2302 	umull	r2, r3, r3, r2
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	011e      	lsls	r6, r3, #4
 80049b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b8:	461c      	mov	r4, r3
 80049ba:	f04f 0500 	mov.w	r5, #0
 80049be:	4622      	mov	r2, r4
 80049c0:	462b      	mov	r3, r5
 80049c2:	1891      	adds	r1, r2, r2
 80049c4:	6339      	str	r1, [r7, #48]	; 0x30
 80049c6:	415b      	adcs	r3, r3
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80049ce:	1912      	adds	r2, r2, r4
 80049d0:	eb45 0303 	adc.w	r3, r5, r3
 80049d4:	f04f 0000 	mov.w	r0, #0
 80049d8:	f04f 0100 	mov.w	r1, #0
 80049dc:	00d9      	lsls	r1, r3, #3
 80049de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049e2:	00d0      	lsls	r0, r2, #3
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	1911      	adds	r1, r2, r4
 80049ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ec:	416b      	adcs	r3, r5
 80049ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	461a      	mov	r2, r3
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	1891      	adds	r1, r2, r2
 80049fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80049fe:	415b      	adcs	r3, r3
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a0a:	f7fb fc39 	bl	8000280 <__aeabi_uldivmod>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4b8c      	ldr	r3, [pc, #560]	; (8004c44 <UART_SetConfig+0x38c>)
 8004a14:	fba3 1302 	umull	r1, r3, r3, r2
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	2164      	movs	r1, #100	; 0x64
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	3332      	adds	r3, #50	; 0x32
 8004a26:	4a87      	ldr	r2, [pc, #540]	; (8004c44 <UART_SetConfig+0x38c>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a34:	441e      	add	r6, r3
 8004a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f04f 0100 	mov.w	r1, #0
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	1894      	adds	r4, r2, r2
 8004a44:	623c      	str	r4, [r7, #32]
 8004a46:	415b      	adcs	r3, r3
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a4e:	1812      	adds	r2, r2, r0
 8004a50:	eb41 0303 	adc.w	r3, r1, r3
 8004a54:	f04f 0400 	mov.w	r4, #0
 8004a58:	f04f 0500 	mov.w	r5, #0
 8004a5c:	00dd      	lsls	r5, r3, #3
 8004a5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a62:	00d4      	lsls	r4, r2, #3
 8004a64:	4622      	mov	r2, r4
 8004a66:	462b      	mov	r3, r5
 8004a68:	1814      	adds	r4, r2, r0
 8004a6a:	653c      	str	r4, [r7, #80]	; 0x50
 8004a6c:	414b      	adcs	r3, r1
 8004a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	461a      	mov	r2, r3
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	1891      	adds	r1, r2, r2
 8004a7c:	61b9      	str	r1, [r7, #24]
 8004a7e:	415b      	adcs	r3, r3
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a8a:	f7fb fbf9 	bl	8000280 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4b6c      	ldr	r3, [pc, #432]	; (8004c44 <UART_SetConfig+0x38c>)
 8004a94:	fba3 1302 	umull	r1, r3, r3, r2
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	2164      	movs	r1, #100	; 0x64
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	3332      	adds	r3, #50	; 0x32
 8004aa6:	4a67      	ldr	r2, [pc, #412]	; (8004c44 <UART_SetConfig+0x38c>)
 8004aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	f003 0207 	and.w	r2, r3, #7
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4432      	add	r2, r6
 8004ab8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004aba:	e0b9      	b.n	8004c30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004abe:	461c      	mov	r4, r3
 8004ac0:	f04f 0500 	mov.w	r5, #0
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	1891      	adds	r1, r2, r2
 8004aca:	6139      	str	r1, [r7, #16]
 8004acc:	415b      	adcs	r3, r3
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ad4:	1912      	adds	r2, r2, r4
 8004ad6:	eb45 0303 	adc.w	r3, r5, r3
 8004ada:	f04f 0000 	mov.w	r0, #0
 8004ade:	f04f 0100 	mov.w	r1, #0
 8004ae2:	00d9      	lsls	r1, r3, #3
 8004ae4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ae8:	00d0      	lsls	r0, r2, #3
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	eb12 0804 	adds.w	r8, r2, r4
 8004af2:	eb43 0905 	adc.w	r9, r3, r5
 8004af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f04f 0100 	mov.w	r1, #0
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	008b      	lsls	r3, r1, #2
 8004b0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b0e:	0082      	lsls	r2, r0, #2
 8004b10:	4640      	mov	r0, r8
 8004b12:	4649      	mov	r1, r9
 8004b14:	f7fb fbb4 	bl	8000280 <__aeabi_uldivmod>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4b49      	ldr	r3, [pc, #292]	; (8004c44 <UART_SetConfig+0x38c>)
 8004b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	011e      	lsls	r6, r3, #4
 8004b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	1894      	adds	r4, r2, r2
 8004b34:	60bc      	str	r4, [r7, #8]
 8004b36:	415b      	adcs	r3, r3
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b3e:	1812      	adds	r2, r2, r0
 8004b40:	eb41 0303 	adc.w	r3, r1, r3
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	f04f 0500 	mov.w	r5, #0
 8004b4c:	00dd      	lsls	r5, r3, #3
 8004b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b52:	00d4      	lsls	r4, r2, #3
 8004b54:	4622      	mov	r2, r4
 8004b56:	462b      	mov	r3, r5
 8004b58:	1814      	adds	r4, r2, r0
 8004b5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004b5c:	414b      	adcs	r3, r1
 8004b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	008b      	lsls	r3, r1, #2
 8004b74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b78:	0082      	lsls	r2, r0, #2
 8004b7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b7e:	f7fb fb7f 	bl	8000280 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <UART_SetConfig+0x38c>)
 8004b88:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	2164      	movs	r1, #100	; 0x64
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	3332      	adds	r3, #50	; 0x32
 8004b9a:	4a2a      	ldr	r2, [pc, #168]	; (8004c44 <UART_SetConfig+0x38c>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba6:	441e      	add	r6, r3
 8004ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004baa:	4618      	mov	r0, r3
 8004bac:	f04f 0100 	mov.w	r1, #0
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	1894      	adds	r4, r2, r2
 8004bb6:	603c      	str	r4, [r7, #0]
 8004bb8:	415b      	adcs	r3, r3
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bc0:	1812      	adds	r2, r2, r0
 8004bc2:	eb41 0303 	adc.w	r3, r1, r3
 8004bc6:	f04f 0400 	mov.w	r4, #0
 8004bca:	f04f 0500 	mov.w	r5, #0
 8004bce:	00dd      	lsls	r5, r3, #3
 8004bd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bd4:	00d4      	lsls	r4, r2, #3
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	eb12 0a00 	adds.w	sl, r2, r0
 8004bde:	eb43 0b01 	adc.w	fp, r3, r1
 8004be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f04f 0100 	mov.w	r1, #0
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	008b      	lsls	r3, r1, #2
 8004bf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bfa:	0082      	lsls	r2, r0, #2
 8004bfc:	4650      	mov	r0, sl
 8004bfe:	4659      	mov	r1, fp
 8004c00:	f7fb fb3e 	bl	8000280 <__aeabi_uldivmod>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <UART_SetConfig+0x38c>)
 8004c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2164      	movs	r1, #100	; 0x64
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	3332      	adds	r3, #50	; 0x32
 8004c1c:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <UART_SetConfig+0x38c>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4432      	add	r2, r6
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	377c      	adds	r7, #124	; 0x7c
 8004c34:	46bd      	mov	sp, r7
 8004c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40011000 	.word	0x40011000
 8004c40:	40011400 	.word	0x40011400
 8004c44:	51eb851f 	.word	0x51eb851f

08004c48 <buzzer_time>:
{
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, RESET);
}

void buzzer_time(uint16_t ms)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, SET);
 8004c52:	2201      	movs	r2, #1
 8004c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c58:	4808      	ldr	r0, [pc, #32]	; (8004c7c <buzzer_time+0x34>)
 8004c5a:	f7fd fe31 	bl	80028c0 <HAL_GPIO_WritePin>
    HAL_Delay(ms);
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fc fcff 	bl	8001664 <HAL_Delay>
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, RESET);
 8004c66:	2200      	movs	r2, #0
 8004c68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c6c:	4803      	ldr	r0, [pc, #12]	; (8004c7c <buzzer_time+0x34>)
 8004c6e:	f7fd fe27 	bl	80028c0 <HAL_GPIO_WritePin>
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40020000 	.word	0x40020000

08004c80 <dshot_choose_type>:

uint16_t motor_value[4]; // motor speed value


static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d003      	beq.n	8004c98 <dshot_choose_type+0x18>
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d103      	bne.n	8004c9c <dshot_choose_type+0x1c>
	{
	case(DSHOT600):
			return DSHOT600_HZ;
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <dshot_choose_type+0x2c>)
 8004c96:	e002      	b.n	8004c9e <dshot_choose_type+0x1e>
	case(DSHOT300):
			return DSHOT300_HZ;
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <dshot_choose_type+0x30>)
 8004c9a:	e000      	b.n	8004c9e <dshot_choose_type+0x1e>
	default:
	case(DSHOT150):
			return DSHOT150_HZ;
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <dshot_choose_type+0x34>)
	}
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	00b71b00 	.word	0x00b71b00
 8004cb0:	005b8d80 	.word	0x005b8d80
 8004cb4:	002dc6c0 	.word	0x002dc6c0

08004cb8 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	ed2d 8b02 	vpush	{d8}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = SystemCoreClock; // all timer clock is same as SystemCoreClock in stm32f411ceu6
 8004cc6:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <dshot_set_timer+0xb0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler that fits dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff ffd1 	bl	8004c80 <dshot_choose_type>
 8004cde:	ee07 0a90 	vmov	s15, r0
 8004ce2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ce6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8004cea:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004d6c <dshot_set_timer+0xb4>
 8004cee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8004cf6:	f001 fb13 	bl	8006320 <lrintf>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8004d02:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <dshot_set_timer+0xb8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	897a      	ldrh	r2, [r7, #10]
 8004d08:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8004d0a:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <dshot_set_timer+0xb8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2214      	movs	r2, #20
 8004d10:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d12:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <dshot_set_timer+0xb8>)
 8004d14:	2214      	movs	r2, #20
 8004d16:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8004d18:	4b16      	ldr	r3, [pc, #88]	; (8004d74 <dshot_set_timer+0xbc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	897a      	ldrh	r2, [r7, #10]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8004d20:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <dshot_set_timer+0xbc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2214      	movs	r2, #20
 8004d26:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d28:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <dshot_set_timer+0xbc>)
 8004d2a:	2214      	movs	r2, #20
 8004d2c:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8004d2e:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <dshot_set_timer+0xbc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	897a      	ldrh	r2, [r7, #10]
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8004d36:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <dshot_set_timer+0xbc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2214      	movs	r2, #20
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <dshot_set_timer+0xbc>)
 8004d40:	2214      	movs	r2, #20
 8004d42:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <dshot_set_timer+0xb8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	897a      	ldrh	r2, [r7, #10]
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8004d4c:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <dshot_set_timer+0xb8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2214      	movs	r2, #20
 8004d52:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <dshot_set_timer+0xb8>)
 8004d56:	2214      	movs	r2, #20
 8004d58:	60da      	str	r2, [r3, #12]
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	ecbd 8b02 	vpop	{d8}
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	3c23d70a 	.word	0x3c23d70a
 8004d70:	2000030c 	.word	0x2000030c
 8004d74:	2000045c 	.word	0x2000045c

08004d78 <dshot_dma_tc_callback>:


// __HAL_TIM_DISABLE_DMA is needed to Eliminate the delay between the dshot signals sent by dma
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d108      	bne.n	8004da2 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d9e:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8004da0:	e028      	b.n	8004df4 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d108      	bne.n	8004dbe <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dba:	60da      	str	r2, [r3, #12]
}
 8004dbc:	e01a      	b.n	8004df4 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d108      	bne.n	8004dda <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd6:	60da      	str	r2, [r3, #12]
}
 8004dd8:	e00c      	b.n	8004df4 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d107      	bne.n	8004df4 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004df2:	60da      	str	r2, [r3, #12]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <dshot_put_tc_callback_function>:


static void dshot_put_tc_callback_function()
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <dshot_put_tc_callback_function+0x30>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <dshot_put_tc_callback_function+0x34>)
 8004e0a:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <dshot_put_tc_callback_function+0x38>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <dshot_put_tc_callback_function+0x34>)
 8004e12:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8004e14:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <dshot_put_tc_callback_function+0x38>)
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	4a06      	ldr	r2, [pc, #24]	; (8004e34 <dshot_put_tc_callback_function+0x34>)
 8004e1a:	63da      	str	r2, [r3, #60]	; 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <dshot_put_tc_callback_function+0x30>)
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	4a04      	ldr	r2, [pc, #16]	; (8004e34 <dshot_put_tc_callback_function+0x34>)
 8004e22:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	2000030c 	.word	0x2000030c
 8004e34:	08004d79 	.word	0x08004d79
 8004e38:	2000045c 	.word	0x2000045c

08004e3c <dshot_start_pwm>:


static void dshot_start_pwm()
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8004e40:	210c      	movs	r1, #12
 8004e42:	4808      	ldr	r0, [pc, #32]	; (8004e64 <dshot_start_pwm+0x28>)
 8004e44:	f7fe fb28 	bl	8003498 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8004e48:	2108      	movs	r1, #8
 8004e4a:	4807      	ldr	r0, [pc, #28]	; (8004e68 <dshot_start_pwm+0x2c>)
 8004e4c:	f7fe fb24 	bl	8003498 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8004e50:	2100      	movs	r1, #0
 8004e52:	4805      	ldr	r0, [pc, #20]	; (8004e68 <dshot_start_pwm+0x2c>)
 8004e54:	f7fe fb20 	bl	8003498 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8004e58:	2104      	movs	r1, #4
 8004e5a:	4802      	ldr	r0, [pc, #8]	; (8004e64 <dshot_start_pwm+0x28>)
 8004e5c:	f7fe fb1c 	bl	8003498 <HAL_TIM_PWM_Start>
}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	2000030c 	.word	0x2000030c
 8004e68:	2000045c 	.word	0x2000045c

08004e6c <dshot_init>:


void dshot_init(dshot_type_e dshot_type)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff ff1d 	bl	8004cb8 <dshot_set_timer>

	dshot_put_tc_callback_function(); // the function that starts at transfer complete interrupt
 8004e7e:	f7ff ffbf 	bl	8004e00 <dshot_put_tc_callback_function>

	dshot_start_pwm();
 8004e82:	f7ff ffdb 	bl	8004e3c <dshot_start_pwm>

	// Initialize motor value to 0
	for(int i = 0; i < 4; i++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e007      	b.n	8004e9c <dshot_init+0x30>
	{
		motor_value[i] = 0;
 8004e8c:	4a07      	ldr	r2, [pc, #28]	; (8004eac <dshot_init+0x40>)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2100      	movs	r1, #0
 8004e92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < 4; i++)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	ddf4      	ble.n	8004e8c <dshot_init+0x20>
	}

}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	2000054c 	.word	0x2000054c

08004eb0 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	b21a      	sxth	r2, r3
 8004ec4:	7afb      	ldrb	r3, [r7, #11]
 8004ec6:	b21b      	sxth	r3, r3
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b21b      	sxth	r3, r3
 8004ecc:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8004ed2:	893b      	ldrh	r3, [r7, #8]
 8004ed4:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e009      	b.n	8004ef0 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4053      	eors	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3301      	adds	r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	ddf2      	ble.n	8004edc <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8004efe:	893b      	ldrh	r3, [r7, #8]
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	813b      	strh	r3, [r7, #8]

	return packet;
 8004f0c:	893b      	ldrh	r3, [r7, #8]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal sent to dma
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8004f26:	887b      	ldrh	r3, [r7, #2]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff ffc1 	bl	8004eb0 <dshot_prepare_packet>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	e011      	b.n	8004f5c <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8004f38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	da01      	bge.n	8004f44 <dshot_prepare_dmabuffer+0x2a>
 8004f40:	220e      	movs	r2, #14
 8004f42:	e000      	b.n	8004f46 <dshot_prepare_dmabuffer+0x2c>
 8004f44:	2207      	movs	r2, #7
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	440b      	add	r3, r1
 8004f4e:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8004f50:	89fb      	ldrh	r3, [r7, #14]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b0f      	cmp	r3, #15
 8004f60:	ddea      	ble.n	8004f38 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3340      	adds	r3, #64	; 0x40
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3344      	adds	r3, #68	; 0x44
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
}
 8004f72:	bf00      	nop
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <dshot_dma_start>:


static void dshot_dma_start(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t *pData, uint16_t Length)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	807b      	strh	r3, [r7, #2]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b0c      	cmp	r3, #12
 8004f8e:	d849      	bhi.n	8005024 <dshot_dma_start+0xa8>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <dshot_dma_start+0x1c>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fcd 	.word	0x08004fcd
 8004f9c:	08005025 	.word	0x08005025
 8004fa0:	08005025 	.word	0x08005025
 8004fa4:	08005025 	.word	0x08005025
 8004fa8:	08004fe3 	.word	0x08004fe3
 8004fac:	08005025 	.word	0x08005025
 8004fb0:	08005025 	.word	0x08005025
 8004fb4:	08005025 	.word	0x08005025
 8004fb8:	08004ff9 	.word	0x08004ff9
 8004fbc:	08005025 	.word	0x08005025
 8004fc0:	08005025 	.word	0x08005025
 8004fc4:	08005025 	.word	0x08005025
 8004fc8:	0800500f 	.word	0x0800500f
    switch (channel) 
	{
		case TIM_CHANNEL_1:
			HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3334      	adds	r3, #52	; 0x34
 8004fd8:	461a      	mov	r2, r3
 8004fda:	887b      	ldrh	r3, [r7, #2]
 8004fdc:	f7fc ff98 	bl	8001f10 <HAL_DMA_Start_IT>
			break;
 8004fe0:	e020      	b.n	8005024 <dshot_dma_start+0xa8>

		case TIM_CHANNEL_2:
			HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3338      	adds	r3, #56	; 0x38
 8004fee:	461a      	mov	r2, r3
 8004ff0:	887b      	ldrh	r3, [r7, #2]
 8004ff2:	f7fc ff8d 	bl	8001f10 <HAL_DMA_Start_IT>
			break;
 8004ff6:	e015      	b.n	8005024 <dshot_dma_start+0xa8>

		case TIM_CHANNEL_3:
			HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	333c      	adds	r3, #60	; 0x3c
 8005004:	461a      	mov	r2, r3
 8005006:	887b      	ldrh	r3, [r7, #2]
 8005008:	f7fc ff82 	bl	8001f10 <HAL_DMA_Start_IT>
			break;
 800500c:	e00a      	b.n	8005024 <dshot_dma_start+0xa8>

		case TIM_CHANNEL_4:
			HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3340      	adds	r3, #64	; 0x40
 800501a:	461a      	mov	r2, r3
 800501c:	887b      	ldrh	r3, [r7, #2]
 800501e:	f7fc ff77 	bl	8001f10 <HAL_DMA_Start_IT>
			break;
 8005022:	bf00      	nop
    }
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <dshot_enable_dma_request>:


static void dshot_enable_dma_request()
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
	// TIM_DMA_CCx depends on timer channel
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8005030:	4b12      	ldr	r3, [pc, #72]	; (800507c <dshot_enable_dma_request+0x50>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	4b11      	ldr	r3, [pc, #68]	; (800507c <dshot_enable_dma_request+0x50>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800503e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8005040:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <dshot_enable_dma_request+0x54>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	4b0e      	ldr	r3, [pc, #56]	; (8005080 <dshot_enable_dma_request+0x54>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800504e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <dshot_enable_dma_request+0x54>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <dshot_enable_dma_request+0x54>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <dshot_enable_dma_request+0x50>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <dshot_enable_dma_request+0x50>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800506e:	60da      	str	r2, [r3, #12]
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	2000030c 	.word	0x2000030c
 8005080:	2000045c 	.word	0x2000045c

08005084 <dshot_write>:


void dshot_write()
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <dshot_write+0x6c>)
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	4619      	mov	r1, r3
 800508e:	4819      	ldr	r0, [pc, #100]	; (80050f4 <dshot_write+0x70>)
 8005090:	f7ff ff43 	bl	8004f1a <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8005094:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <dshot_write+0x6c>)
 8005096:	885b      	ldrh	r3, [r3, #2]
 8005098:	4619      	mov	r1, r3
 800509a:	4817      	ldr	r0, [pc, #92]	; (80050f8 <dshot_write+0x74>)
 800509c:	f7ff ff3d 	bl	8004f1a <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 80050a0:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <dshot_write+0x6c>)
 80050a2:	889b      	ldrh	r3, [r3, #4]
 80050a4:	4619      	mov	r1, r3
 80050a6:	4815      	ldr	r0, [pc, #84]	; (80050fc <dshot_write+0x78>)
 80050a8:	f7ff ff37 	bl	8004f1a <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 80050ac:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <dshot_write+0x6c>)
 80050ae:	88db      	ldrh	r3, [r3, #6]
 80050b0:	4619      	mov	r1, r3
 80050b2:	4813      	ldr	r0, [pc, #76]	; (8005100 <dshot_write+0x7c>)
 80050b4:	f7ff ff31 	bl	8004f1a <dshot_prepare_dmabuffer>

	dshot_dma_start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL, motor1_dmabuffer, 18);
 80050b8:	2312      	movs	r3, #18
 80050ba:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <dshot_write+0x70>)
 80050bc:	210c      	movs	r1, #12
 80050be:	4811      	ldr	r0, [pc, #68]	; (8005104 <dshot_write+0x80>)
 80050c0:	f7ff ff5c 	bl	8004f7c <dshot_dma_start>
	dshot_dma_start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL, motor2_dmabuffer, 18);
 80050c4:	2312      	movs	r3, #18
 80050c6:	4a0c      	ldr	r2, [pc, #48]	; (80050f8 <dshot_write+0x74>)
 80050c8:	2108      	movs	r1, #8
 80050ca:	480f      	ldr	r0, [pc, #60]	; (8005108 <dshot_write+0x84>)
 80050cc:	f7ff ff56 	bl	8004f7c <dshot_dma_start>
	dshot_dma_start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL, motor3_dmabuffer, 18);
 80050d0:	2312      	movs	r3, #18
 80050d2:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <dshot_write+0x78>)
 80050d4:	2100      	movs	r1, #0
 80050d6:	480c      	ldr	r0, [pc, #48]	; (8005108 <dshot_write+0x84>)
 80050d8:	f7ff ff50 	bl	8004f7c <dshot_dma_start>
	dshot_dma_start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL, motor4_dmabuffer, 18);
 80050dc:	2312      	movs	r3, #18
 80050de:	4a08      	ldr	r2, [pc, #32]	; (8005100 <dshot_write+0x7c>)
 80050e0:	2104      	movs	r1, #4
 80050e2:	4808      	ldr	r0, [pc, #32]	; (8005104 <dshot_write+0x80>)
 80050e4:	f7ff ff4a 	bl	8004f7c <dshot_dma_start>

	dshot_enable_dma_request();
 80050e8:	f7ff ffa0 	bl	800502c <dshot_enable_dma_request>
 80050ec:	bf00      	nop
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	2000054c 	.word	0x2000054c
 80050f4:	200005e4 	.word	0x200005e4
 80050f8:	2000059c 	.word	0x2000059c
 80050fc:	20000554 	.word	0x20000554
 8005100:	2000062c 	.word	0x2000062c
 8005104:	2000030c 	.word	0x2000030c
 8005108:	2000045c 	.word	0x2000045c

0800510c <ibus_init>:
static uint8_t ibus_buffer[32] = {0};
uint16_t channel[IBUS_USER_CHANNELS] = {0};


void ibus_init()
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
	/* Interrupt mode */
	//HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);

	/* DMA mode */
	HAL_UART_Receive_DMA(IBUS_UART, ibus_buffer, 32);
 8005110:	2220      	movs	r2, #32
 8005112:	4903      	ldr	r1, [pc, #12]	; (8005120 <ibus_init+0x14>)
 8005114:	4803      	ldr	r0, [pc, #12]	; (8005124 <ibus_init+0x18>)
 8005116:	f7fe ff5e 	bl	8003fd6 <HAL_UART_Receive_DMA>
}
 800511a:	bf00      	nop
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20000090 	.word	0x20000090
 8005124:	20000504 	.word	0x20000504

08005128 <ibus_is_valid>:


static bool ibus_is_valid()
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
	// is it ibus?
	return (ibus_buffer[0] == IBUS_LENGTH && ibus_buffer[1] == IBUS_COMMAND40);
 800512c:	4b09      	ldr	r3, [pc, #36]	; (8005154 <ibus_is_valid+0x2c>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b20      	cmp	r3, #32
 8005132:	d105      	bne.n	8005140 <ibus_is_valid+0x18>
 8005134:	4b07      	ldr	r3, [pc, #28]	; (8005154 <ibus_is_valid+0x2c>)
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d101      	bne.n	8005140 <ibus_is_valid+0x18>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <ibus_is_valid+0x1a>
 8005140:	2300      	movs	r3, #0
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	b2db      	uxtb	r3, r3
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000090 	.word	0x20000090

08005158 <ibus_checksum>:


static bool ibus_checksum()
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 	uint16_t checksum_cal = 0xffff;
 800515e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005162:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i = 0; i < 30; i++)
 8005164:	2300      	movs	r3, #0
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	e00a      	b.n	8005180 <ibus_checksum+0x28>
	{
		checksum_cal -= ibus_buffer[i];
 800516a:	4a12      	ldr	r2, [pc, #72]	; (80051b4 <ibus_checksum+0x5c>)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4413      	add	r3, r2
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	89fa      	ldrh	r2, [r7, #14]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 30; i++)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3301      	adds	r3, #1
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b1d      	cmp	r3, #29
 8005184:	ddf1      	ble.n	800516a <ibus_checksum+0x12>
	}

	checksum_ibus = ibus_buffer[31] << 8 | ibus_buffer[30]; // checksum value from ibus
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <ibus_checksum+0x5c>)
 8005188:	7fdb      	ldrb	r3, [r3, #31]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	b21a      	sxth	r2, r3
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <ibus_checksum+0x5c>)
 8005190:	7f9b      	ldrb	r3, [r3, #30]
 8005192:	b21b      	sxth	r3, r3
 8005194:	4313      	orrs	r3, r2
 8005196:	b21b      	sxth	r3, r3
 8005198:	80fb      	strh	r3, [r7, #6]
	
	return (checksum_ibus == checksum_cal);
 800519a:	88fa      	ldrh	r2, [r7, #6]
 800519c:	89fb      	ldrh	r3, [r7, #14]
 800519e:	429a      	cmp	r2, r3
 80051a0:	bf0c      	ite	eq
 80051a2:	2301      	moveq	r3, #1
 80051a4:	2300      	movne	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	20000090 	.word	0x20000090

080051b8 <ibus_little_endian>:


static void ibus_little_endian()
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	2302      	movs	r3, #2
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	e017      	b.n	80051f8 <ibus_little_endian+0x40>
	{
		channel[ch_index] = ibus_buffer[bf_index + 1] << 8 | ibus_buffer[bf_index];
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	3301      	adds	r3, #1
 80051cc:	4a0f      	ldr	r2, [pc, #60]	; (800520c <ibus_little_endian+0x54>)
 80051ce:	5cd3      	ldrb	r3, [r2, r3]
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	b21a      	sxth	r2, r3
 80051d4:	490d      	ldr	r1, [pc, #52]	; (800520c <ibus_little_endian+0x54>)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	440b      	add	r3, r1
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	b21b      	sxth	r3, r3
 80051de:	4313      	orrs	r3, r2
 80051e0:	b21b      	sxth	r3, r3
 80051e2:	b299      	uxth	r1, r3
 80051e4:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <ibus_little_endian+0x58>)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3301      	adds	r3, #1
 80051f0:	607b      	str	r3, [r7, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	3302      	adds	r3, #2
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b05      	cmp	r3, #5
 80051fc:	dde4      	ble.n	80051c8 <ibus_little_endian+0x10>
	}
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	20000090 	.word	0x20000090
 8005210:	200000b0 	.word	0x200000b0

08005214 <ibus_read_channel>:


bool ibus_read_channel()
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
	if(!ibus_is_valid())
 8005218:	f7ff ff86 	bl	8005128 <ibus_is_valid>
 800521c:	4603      	mov	r3, r0
 800521e:	f083 0301 	eor.w	r3, r3, #1
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <ibus_read_channel+0x18>
		return false;
 8005228:	2300      	movs	r3, #0
 800522a:	e011      	b.n	8005250 <ibus_read_channel+0x3c>

	if(!ibus_checksum())
 800522c:	f7ff ff94 	bl	8005158 <ibus_checksum>
 8005230:	4603      	mov	r3, r0
 8005232:	f083 0301 	eor.w	r3, r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <ibus_read_channel+0x2c>
		return false;
 800523c:	2300      	movs	r3, #0
 800523e:	e007      	b.n	8005250 <ibus_read_channel+0x3c>

	ibus_little_endian();
 8005240:	f7ff ffba 	bl	80051b8 <ibus_little_endian>

	/* Interrupt mode */
	//HAL_UART_Receive_IT(IBUS_UART, ibus_buffer, 32);

	/* DMA mode */
	HAL_UART_Receive_DMA(IBUS_UART, ibus_buffer, 32);
 8005244:	2220      	movs	r2, #32
 8005246:	4903      	ldr	r1, [pc, #12]	; (8005254 <ibus_read_channel+0x40>)
 8005248:	4803      	ldr	r0, [pc, #12]	; (8005258 <ibus_read_channel+0x44>)
 800524a:	f7fe fec4 	bl	8003fd6 <HAL_UART_Receive_DMA>

	return true;
 800524e:	2301      	movs	r3, #1
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000090 	.word	0x20000090
 8005258:	20000504 	.word	0x20000504

0800525c <led1_on>:
#include "led.h"


// LED1
void led1_on()
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8005260:	2200      	movs	r2, #0
 8005262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005266:	4802      	ldr	r0, [pc, #8]	; (8005270 <led1_on+0x14>)
 8005268:	f7fd fb2a 	bl	80028c0 <HAL_GPIO_WritePin>
}
 800526c:	bf00      	nop
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40020800 	.word	0x40020800

08005274 <led1_off>:

void led1_off()
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8005278:	2201      	movs	r2, #1
 800527a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800527e:	4802      	ldr	r0, [pc, #8]	; (8005288 <led1_off+0x14>)
 8005280:	f7fd fb1e 	bl	80028c0 <HAL_GPIO_WritePin>
}
 8005284:	bf00      	nop
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40020800 	.word	0x40020800

0800528c <loop_init>:
#include "dshot.h"



void loop_init(uint16_t loop_hz)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	80fb      	strh	r3, [r7, #6]
    uint32_t timer_clock = SystemCoreClock;
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <loop_init+0x5c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]

    uint16_t prescaler_1us = (timer_clock / 1000000) - 1;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4a13      	ldr	r2, [pc, #76]	; (80052ec <loop_init+0x60>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	0c9b      	lsrs	r3, r3, #18
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	817b      	strh	r3, [r7, #10]
    uint16_t period = (1000000 / loop_hz) - 1;
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <loop_init+0x64>)
 80052b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	813b      	strh	r3, [r7, #8]

    __HAL_TIM_SET_PRESCALER(LOOP_TIM, prescaler_1us);  
 80052ba:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <loop_init+0x68>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	897a      	ldrh	r2, [r7, #10]
 80052c0:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_TIM_SET_AUTORELOAD(LOOP_TIM, period);
 80052c2:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <loop_init+0x68>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	893a      	ldrh	r2, [r7, #8]
 80052c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80052ca:	893b      	ldrh	r3, [r7, #8]
 80052cc:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <loop_init+0x68>)
 80052ce:	60d3      	str	r3, [r2, #12]

    printf("%d Hz loop \n", loop_hz);
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	4619      	mov	r1, r3
 80052d4:	4808      	ldr	r0, [pc, #32]	; (80052f8 <loop_init+0x6c>)
 80052d6:	f000 f857 	bl	8005388 <iprintf>
    printf("loop initialized \n");
 80052da:	4808      	ldr	r0, [pc, #32]	; (80052fc <loop_init+0x70>)
 80052dc:	f000 f8da 	bl	8005494 <puts>
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000000 	.word	0x20000000
 80052ec:	431bde83 	.word	0x431bde83
 80052f0:	000f4240 	.word	0x000f4240
 80052f4:	20000354 	.word	0x20000354
 80052f8:	08006434 	.word	0x08006434
 80052fc:	08006444 	.word	0x08006444

08005300 <loop_runtime>:

uint16_t loop_runtime()
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(LOOP_TIM);
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <loop_runtime+0x18>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	b29b      	uxth	r3, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000354 	.word	0x20000354

0800531c <loop_start>:

void loop_start()
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(LOOP_TIM);
 8005320:	4802      	ldr	r0, [pc, #8]	; (800532c <loop_start+0x10>)
 8005322:	f7fe f807 	bl	8003334 <HAL_TIM_Base_Start_IT>
}
 8005326:	bf00      	nop
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000354 	.word	0x20000354

08005330 <__libc_init_array>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	4d0d      	ldr	r5, [pc, #52]	; (8005368 <__libc_init_array+0x38>)
 8005334:	4c0d      	ldr	r4, [pc, #52]	; (800536c <__libc_init_array+0x3c>)
 8005336:	1b64      	subs	r4, r4, r5
 8005338:	10a4      	asrs	r4, r4, #2
 800533a:	2600      	movs	r6, #0
 800533c:	42a6      	cmp	r6, r4
 800533e:	d109      	bne.n	8005354 <__libc_init_array+0x24>
 8005340:	4d0b      	ldr	r5, [pc, #44]	; (8005370 <__libc_init_array+0x40>)
 8005342:	4c0c      	ldr	r4, [pc, #48]	; (8005374 <__libc_init_array+0x44>)
 8005344:	f001 f86a 	bl	800641c <_init>
 8005348:	1b64      	subs	r4, r4, r5
 800534a:	10a4      	asrs	r4, r4, #2
 800534c:	2600      	movs	r6, #0
 800534e:	42a6      	cmp	r6, r4
 8005350:	d105      	bne.n	800535e <__libc_init_array+0x2e>
 8005352:	bd70      	pop	{r4, r5, r6, pc}
 8005354:	f855 3b04 	ldr.w	r3, [r5], #4
 8005358:	4798      	blx	r3
 800535a:	3601      	adds	r6, #1
 800535c:	e7ee      	b.n	800533c <__libc_init_array+0xc>
 800535e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005362:	4798      	blx	r3
 8005364:	3601      	adds	r6, #1
 8005366:	e7f2      	b.n	800534e <__libc_init_array+0x1e>
 8005368:	08006520 	.word	0x08006520
 800536c:	08006520 	.word	0x08006520
 8005370:	08006520 	.word	0x08006520
 8005374:	08006524 	.word	0x08006524

08005378 <memset>:
 8005378:	4402      	add	r2, r0
 800537a:	4603      	mov	r3, r0
 800537c:	4293      	cmp	r3, r2
 800537e:	d100      	bne.n	8005382 <memset+0xa>
 8005380:	4770      	bx	lr
 8005382:	f803 1b01 	strb.w	r1, [r3], #1
 8005386:	e7f9      	b.n	800537c <memset+0x4>

08005388 <iprintf>:
 8005388:	b40f      	push	{r0, r1, r2, r3}
 800538a:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <iprintf+0x2c>)
 800538c:	b513      	push	{r0, r1, r4, lr}
 800538e:	681c      	ldr	r4, [r3, #0]
 8005390:	b124      	cbz	r4, 800539c <iprintf+0x14>
 8005392:	69a3      	ldr	r3, [r4, #24]
 8005394:	b913      	cbnz	r3, 800539c <iprintf+0x14>
 8005396:	4620      	mov	r0, r4
 8005398:	f000 fa5e 	bl	8005858 <__sinit>
 800539c:	ab05      	add	r3, sp, #20
 800539e:	9a04      	ldr	r2, [sp, #16]
 80053a0:	68a1      	ldr	r1, [r4, #8]
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	4620      	mov	r0, r4
 80053a6:	f000 fc2f 	bl	8005c08 <_vfiprintf_r>
 80053aa:	b002      	add	sp, #8
 80053ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b0:	b004      	add	sp, #16
 80053b2:	4770      	bx	lr
 80053b4:	2000000c 	.word	0x2000000c

080053b8 <_puts_r>:
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	460e      	mov	r6, r1
 80053bc:	4605      	mov	r5, r0
 80053be:	b118      	cbz	r0, 80053c8 <_puts_r+0x10>
 80053c0:	6983      	ldr	r3, [r0, #24]
 80053c2:	b90b      	cbnz	r3, 80053c8 <_puts_r+0x10>
 80053c4:	f000 fa48 	bl	8005858 <__sinit>
 80053c8:	69ab      	ldr	r3, [r5, #24]
 80053ca:	68ac      	ldr	r4, [r5, #8]
 80053cc:	b913      	cbnz	r3, 80053d4 <_puts_r+0x1c>
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 fa42 	bl	8005858 <__sinit>
 80053d4:	4b2c      	ldr	r3, [pc, #176]	; (8005488 <_puts_r+0xd0>)
 80053d6:	429c      	cmp	r4, r3
 80053d8:	d120      	bne.n	800541c <_puts_r+0x64>
 80053da:	686c      	ldr	r4, [r5, #4]
 80053dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053de:	07db      	lsls	r3, r3, #31
 80053e0:	d405      	bmi.n	80053ee <_puts_r+0x36>
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	0598      	lsls	r0, r3, #22
 80053e6:	d402      	bmi.n	80053ee <_puts_r+0x36>
 80053e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ea:	f000 fad3 	bl	8005994 <__retarget_lock_acquire_recursive>
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	0719      	lsls	r1, r3, #28
 80053f2:	d51d      	bpl.n	8005430 <_puts_r+0x78>
 80053f4:	6923      	ldr	r3, [r4, #16]
 80053f6:	b1db      	cbz	r3, 8005430 <_puts_r+0x78>
 80053f8:	3e01      	subs	r6, #1
 80053fa:	68a3      	ldr	r3, [r4, #8]
 80053fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005400:	3b01      	subs	r3, #1
 8005402:	60a3      	str	r3, [r4, #8]
 8005404:	bb39      	cbnz	r1, 8005456 <_puts_r+0x9e>
 8005406:	2b00      	cmp	r3, #0
 8005408:	da38      	bge.n	800547c <_puts_r+0xc4>
 800540a:	4622      	mov	r2, r4
 800540c:	210a      	movs	r1, #10
 800540e:	4628      	mov	r0, r5
 8005410:	f000 f848 	bl	80054a4 <__swbuf_r>
 8005414:	3001      	adds	r0, #1
 8005416:	d011      	beq.n	800543c <_puts_r+0x84>
 8005418:	250a      	movs	r5, #10
 800541a:	e011      	b.n	8005440 <_puts_r+0x88>
 800541c:	4b1b      	ldr	r3, [pc, #108]	; (800548c <_puts_r+0xd4>)
 800541e:	429c      	cmp	r4, r3
 8005420:	d101      	bne.n	8005426 <_puts_r+0x6e>
 8005422:	68ac      	ldr	r4, [r5, #8]
 8005424:	e7da      	b.n	80053dc <_puts_r+0x24>
 8005426:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <_puts_r+0xd8>)
 8005428:	429c      	cmp	r4, r3
 800542a:	bf08      	it	eq
 800542c:	68ec      	ldreq	r4, [r5, #12]
 800542e:	e7d5      	b.n	80053dc <_puts_r+0x24>
 8005430:	4621      	mov	r1, r4
 8005432:	4628      	mov	r0, r5
 8005434:	f000 f888 	bl	8005548 <__swsetup_r>
 8005438:	2800      	cmp	r0, #0
 800543a:	d0dd      	beq.n	80053f8 <_puts_r+0x40>
 800543c:	f04f 35ff 	mov.w	r5, #4294967295
 8005440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005442:	07da      	lsls	r2, r3, #31
 8005444:	d405      	bmi.n	8005452 <_puts_r+0x9a>
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	059b      	lsls	r3, r3, #22
 800544a:	d402      	bmi.n	8005452 <_puts_r+0x9a>
 800544c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800544e:	f000 faa2 	bl	8005996 <__retarget_lock_release_recursive>
 8005452:	4628      	mov	r0, r5
 8005454:	bd70      	pop	{r4, r5, r6, pc}
 8005456:	2b00      	cmp	r3, #0
 8005458:	da04      	bge.n	8005464 <_puts_r+0xac>
 800545a:	69a2      	ldr	r2, [r4, #24]
 800545c:	429a      	cmp	r2, r3
 800545e:	dc06      	bgt.n	800546e <_puts_r+0xb6>
 8005460:	290a      	cmp	r1, #10
 8005462:	d004      	beq.n	800546e <_puts_r+0xb6>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	6022      	str	r2, [r4, #0]
 800546a:	7019      	strb	r1, [r3, #0]
 800546c:	e7c5      	b.n	80053fa <_puts_r+0x42>
 800546e:	4622      	mov	r2, r4
 8005470:	4628      	mov	r0, r5
 8005472:	f000 f817 	bl	80054a4 <__swbuf_r>
 8005476:	3001      	adds	r0, #1
 8005478:	d1bf      	bne.n	80053fa <_puts_r+0x42>
 800547a:	e7df      	b.n	800543c <_puts_r+0x84>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	250a      	movs	r5, #10
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	6022      	str	r2, [r4, #0]
 8005484:	701d      	strb	r5, [r3, #0]
 8005486:	e7db      	b.n	8005440 <_puts_r+0x88>
 8005488:	0800649c 	.word	0x0800649c
 800548c:	080064bc 	.word	0x080064bc
 8005490:	0800647c 	.word	0x0800647c

08005494 <puts>:
 8005494:	4b02      	ldr	r3, [pc, #8]	; (80054a0 <puts+0xc>)
 8005496:	4601      	mov	r1, r0
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	f7ff bf8d 	b.w	80053b8 <_puts_r>
 800549e:	bf00      	nop
 80054a0:	2000000c 	.word	0x2000000c

080054a4 <__swbuf_r>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	460e      	mov	r6, r1
 80054a8:	4614      	mov	r4, r2
 80054aa:	4605      	mov	r5, r0
 80054ac:	b118      	cbz	r0, 80054b6 <__swbuf_r+0x12>
 80054ae:	6983      	ldr	r3, [r0, #24]
 80054b0:	b90b      	cbnz	r3, 80054b6 <__swbuf_r+0x12>
 80054b2:	f000 f9d1 	bl	8005858 <__sinit>
 80054b6:	4b21      	ldr	r3, [pc, #132]	; (800553c <__swbuf_r+0x98>)
 80054b8:	429c      	cmp	r4, r3
 80054ba:	d12b      	bne.n	8005514 <__swbuf_r+0x70>
 80054bc:	686c      	ldr	r4, [r5, #4]
 80054be:	69a3      	ldr	r3, [r4, #24]
 80054c0:	60a3      	str	r3, [r4, #8]
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	071a      	lsls	r2, r3, #28
 80054c6:	d52f      	bpl.n	8005528 <__swbuf_r+0x84>
 80054c8:	6923      	ldr	r3, [r4, #16]
 80054ca:	b36b      	cbz	r3, 8005528 <__swbuf_r+0x84>
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	6820      	ldr	r0, [r4, #0]
 80054d0:	1ac0      	subs	r0, r0, r3
 80054d2:	6963      	ldr	r3, [r4, #20]
 80054d4:	b2f6      	uxtb	r6, r6
 80054d6:	4283      	cmp	r3, r0
 80054d8:	4637      	mov	r7, r6
 80054da:	dc04      	bgt.n	80054e6 <__swbuf_r+0x42>
 80054dc:	4621      	mov	r1, r4
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 f926 	bl	8005730 <_fflush_r>
 80054e4:	bb30      	cbnz	r0, 8005534 <__swbuf_r+0x90>
 80054e6:	68a3      	ldr	r3, [r4, #8]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	60a3      	str	r3, [r4, #8]
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	6022      	str	r2, [r4, #0]
 80054f2:	701e      	strb	r6, [r3, #0]
 80054f4:	6963      	ldr	r3, [r4, #20]
 80054f6:	3001      	adds	r0, #1
 80054f8:	4283      	cmp	r3, r0
 80054fa:	d004      	beq.n	8005506 <__swbuf_r+0x62>
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	07db      	lsls	r3, r3, #31
 8005500:	d506      	bpl.n	8005510 <__swbuf_r+0x6c>
 8005502:	2e0a      	cmp	r6, #10
 8005504:	d104      	bne.n	8005510 <__swbuf_r+0x6c>
 8005506:	4621      	mov	r1, r4
 8005508:	4628      	mov	r0, r5
 800550a:	f000 f911 	bl	8005730 <_fflush_r>
 800550e:	b988      	cbnz	r0, 8005534 <__swbuf_r+0x90>
 8005510:	4638      	mov	r0, r7
 8005512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005514:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <__swbuf_r+0x9c>)
 8005516:	429c      	cmp	r4, r3
 8005518:	d101      	bne.n	800551e <__swbuf_r+0x7a>
 800551a:	68ac      	ldr	r4, [r5, #8]
 800551c:	e7cf      	b.n	80054be <__swbuf_r+0x1a>
 800551e:	4b09      	ldr	r3, [pc, #36]	; (8005544 <__swbuf_r+0xa0>)
 8005520:	429c      	cmp	r4, r3
 8005522:	bf08      	it	eq
 8005524:	68ec      	ldreq	r4, [r5, #12]
 8005526:	e7ca      	b.n	80054be <__swbuf_r+0x1a>
 8005528:	4621      	mov	r1, r4
 800552a:	4628      	mov	r0, r5
 800552c:	f000 f80c 	bl	8005548 <__swsetup_r>
 8005530:	2800      	cmp	r0, #0
 8005532:	d0cb      	beq.n	80054cc <__swbuf_r+0x28>
 8005534:	f04f 37ff 	mov.w	r7, #4294967295
 8005538:	e7ea      	b.n	8005510 <__swbuf_r+0x6c>
 800553a:	bf00      	nop
 800553c:	0800649c 	.word	0x0800649c
 8005540:	080064bc 	.word	0x080064bc
 8005544:	0800647c 	.word	0x0800647c

08005548 <__swsetup_r>:
 8005548:	4b32      	ldr	r3, [pc, #200]	; (8005614 <__swsetup_r+0xcc>)
 800554a:	b570      	push	{r4, r5, r6, lr}
 800554c:	681d      	ldr	r5, [r3, #0]
 800554e:	4606      	mov	r6, r0
 8005550:	460c      	mov	r4, r1
 8005552:	b125      	cbz	r5, 800555e <__swsetup_r+0x16>
 8005554:	69ab      	ldr	r3, [r5, #24]
 8005556:	b913      	cbnz	r3, 800555e <__swsetup_r+0x16>
 8005558:	4628      	mov	r0, r5
 800555a:	f000 f97d 	bl	8005858 <__sinit>
 800555e:	4b2e      	ldr	r3, [pc, #184]	; (8005618 <__swsetup_r+0xd0>)
 8005560:	429c      	cmp	r4, r3
 8005562:	d10f      	bne.n	8005584 <__swsetup_r+0x3c>
 8005564:	686c      	ldr	r4, [r5, #4]
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800556c:	0719      	lsls	r1, r3, #28
 800556e:	d42c      	bmi.n	80055ca <__swsetup_r+0x82>
 8005570:	06dd      	lsls	r5, r3, #27
 8005572:	d411      	bmi.n	8005598 <__swsetup_r+0x50>
 8005574:	2309      	movs	r3, #9
 8005576:	6033      	str	r3, [r6, #0]
 8005578:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	f04f 30ff 	mov.w	r0, #4294967295
 8005582:	e03e      	b.n	8005602 <__swsetup_r+0xba>
 8005584:	4b25      	ldr	r3, [pc, #148]	; (800561c <__swsetup_r+0xd4>)
 8005586:	429c      	cmp	r4, r3
 8005588:	d101      	bne.n	800558e <__swsetup_r+0x46>
 800558a:	68ac      	ldr	r4, [r5, #8]
 800558c:	e7eb      	b.n	8005566 <__swsetup_r+0x1e>
 800558e:	4b24      	ldr	r3, [pc, #144]	; (8005620 <__swsetup_r+0xd8>)
 8005590:	429c      	cmp	r4, r3
 8005592:	bf08      	it	eq
 8005594:	68ec      	ldreq	r4, [r5, #12]
 8005596:	e7e6      	b.n	8005566 <__swsetup_r+0x1e>
 8005598:	0758      	lsls	r0, r3, #29
 800559a:	d512      	bpl.n	80055c2 <__swsetup_r+0x7a>
 800559c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800559e:	b141      	cbz	r1, 80055b2 <__swsetup_r+0x6a>
 80055a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055a4:	4299      	cmp	r1, r3
 80055a6:	d002      	beq.n	80055ae <__swsetup_r+0x66>
 80055a8:	4630      	mov	r0, r6
 80055aa:	f000 fa59 	bl	8005a60 <_free_r>
 80055ae:	2300      	movs	r3, #0
 80055b0:	6363      	str	r3, [r4, #52]	; 0x34
 80055b2:	89a3      	ldrh	r3, [r4, #12]
 80055b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055b8:	81a3      	strh	r3, [r4, #12]
 80055ba:	2300      	movs	r3, #0
 80055bc:	6063      	str	r3, [r4, #4]
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f043 0308 	orr.w	r3, r3, #8
 80055c8:	81a3      	strh	r3, [r4, #12]
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	b94b      	cbnz	r3, 80055e2 <__swsetup_r+0x9a>
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d8:	d003      	beq.n	80055e2 <__swsetup_r+0x9a>
 80055da:	4621      	mov	r1, r4
 80055dc:	4630      	mov	r0, r6
 80055de:	f000 f9ff 	bl	80059e0 <__smakebuf_r>
 80055e2:	89a0      	ldrh	r0, [r4, #12]
 80055e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055e8:	f010 0301 	ands.w	r3, r0, #1
 80055ec:	d00a      	beq.n	8005604 <__swsetup_r+0xbc>
 80055ee:	2300      	movs	r3, #0
 80055f0:	60a3      	str	r3, [r4, #8]
 80055f2:	6963      	ldr	r3, [r4, #20]
 80055f4:	425b      	negs	r3, r3
 80055f6:	61a3      	str	r3, [r4, #24]
 80055f8:	6923      	ldr	r3, [r4, #16]
 80055fa:	b943      	cbnz	r3, 800560e <__swsetup_r+0xc6>
 80055fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005600:	d1ba      	bne.n	8005578 <__swsetup_r+0x30>
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	0781      	lsls	r1, r0, #30
 8005606:	bf58      	it	pl
 8005608:	6963      	ldrpl	r3, [r4, #20]
 800560a:	60a3      	str	r3, [r4, #8]
 800560c:	e7f4      	b.n	80055f8 <__swsetup_r+0xb0>
 800560e:	2000      	movs	r0, #0
 8005610:	e7f7      	b.n	8005602 <__swsetup_r+0xba>
 8005612:	bf00      	nop
 8005614:	2000000c 	.word	0x2000000c
 8005618:	0800649c 	.word	0x0800649c
 800561c:	080064bc 	.word	0x080064bc
 8005620:	0800647c 	.word	0x0800647c

08005624 <__sflush_r>:
 8005624:	898a      	ldrh	r2, [r1, #12]
 8005626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562a:	4605      	mov	r5, r0
 800562c:	0710      	lsls	r0, r2, #28
 800562e:	460c      	mov	r4, r1
 8005630:	d458      	bmi.n	80056e4 <__sflush_r+0xc0>
 8005632:	684b      	ldr	r3, [r1, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	dc05      	bgt.n	8005644 <__sflush_r+0x20>
 8005638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	dc02      	bgt.n	8005644 <__sflush_r+0x20>
 800563e:	2000      	movs	r0, #0
 8005640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005646:	2e00      	cmp	r6, #0
 8005648:	d0f9      	beq.n	800563e <__sflush_r+0x1a>
 800564a:	2300      	movs	r3, #0
 800564c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005650:	682f      	ldr	r7, [r5, #0]
 8005652:	602b      	str	r3, [r5, #0]
 8005654:	d032      	beq.n	80056bc <__sflush_r+0x98>
 8005656:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	075a      	lsls	r2, r3, #29
 800565c:	d505      	bpl.n	800566a <__sflush_r+0x46>
 800565e:	6863      	ldr	r3, [r4, #4]
 8005660:	1ac0      	subs	r0, r0, r3
 8005662:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005664:	b10b      	cbz	r3, 800566a <__sflush_r+0x46>
 8005666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005668:	1ac0      	subs	r0, r0, r3
 800566a:	2300      	movs	r3, #0
 800566c:	4602      	mov	r2, r0
 800566e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005670:	6a21      	ldr	r1, [r4, #32]
 8005672:	4628      	mov	r0, r5
 8005674:	47b0      	blx	r6
 8005676:	1c43      	adds	r3, r0, #1
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	d106      	bne.n	800568a <__sflush_r+0x66>
 800567c:	6829      	ldr	r1, [r5, #0]
 800567e:	291d      	cmp	r1, #29
 8005680:	d82c      	bhi.n	80056dc <__sflush_r+0xb8>
 8005682:	4a2a      	ldr	r2, [pc, #168]	; (800572c <__sflush_r+0x108>)
 8005684:	40ca      	lsrs	r2, r1
 8005686:	07d6      	lsls	r6, r2, #31
 8005688:	d528      	bpl.n	80056dc <__sflush_r+0xb8>
 800568a:	2200      	movs	r2, #0
 800568c:	6062      	str	r2, [r4, #4]
 800568e:	04d9      	lsls	r1, r3, #19
 8005690:	6922      	ldr	r2, [r4, #16]
 8005692:	6022      	str	r2, [r4, #0]
 8005694:	d504      	bpl.n	80056a0 <__sflush_r+0x7c>
 8005696:	1c42      	adds	r2, r0, #1
 8005698:	d101      	bne.n	800569e <__sflush_r+0x7a>
 800569a:	682b      	ldr	r3, [r5, #0]
 800569c:	b903      	cbnz	r3, 80056a0 <__sflush_r+0x7c>
 800569e:	6560      	str	r0, [r4, #84]	; 0x54
 80056a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056a2:	602f      	str	r7, [r5, #0]
 80056a4:	2900      	cmp	r1, #0
 80056a6:	d0ca      	beq.n	800563e <__sflush_r+0x1a>
 80056a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056ac:	4299      	cmp	r1, r3
 80056ae:	d002      	beq.n	80056b6 <__sflush_r+0x92>
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f9d5 	bl	8005a60 <_free_r>
 80056b6:	2000      	movs	r0, #0
 80056b8:	6360      	str	r0, [r4, #52]	; 0x34
 80056ba:	e7c1      	b.n	8005640 <__sflush_r+0x1c>
 80056bc:	6a21      	ldr	r1, [r4, #32]
 80056be:	2301      	movs	r3, #1
 80056c0:	4628      	mov	r0, r5
 80056c2:	47b0      	blx	r6
 80056c4:	1c41      	adds	r1, r0, #1
 80056c6:	d1c7      	bne.n	8005658 <__sflush_r+0x34>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0c4      	beq.n	8005658 <__sflush_r+0x34>
 80056ce:	2b1d      	cmp	r3, #29
 80056d0:	d001      	beq.n	80056d6 <__sflush_r+0xb2>
 80056d2:	2b16      	cmp	r3, #22
 80056d4:	d101      	bne.n	80056da <__sflush_r+0xb6>
 80056d6:	602f      	str	r7, [r5, #0]
 80056d8:	e7b1      	b.n	800563e <__sflush_r+0x1a>
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e0:	81a3      	strh	r3, [r4, #12]
 80056e2:	e7ad      	b.n	8005640 <__sflush_r+0x1c>
 80056e4:	690f      	ldr	r7, [r1, #16]
 80056e6:	2f00      	cmp	r7, #0
 80056e8:	d0a9      	beq.n	800563e <__sflush_r+0x1a>
 80056ea:	0793      	lsls	r3, r2, #30
 80056ec:	680e      	ldr	r6, [r1, #0]
 80056ee:	bf08      	it	eq
 80056f0:	694b      	ldreq	r3, [r1, #20]
 80056f2:	600f      	str	r7, [r1, #0]
 80056f4:	bf18      	it	ne
 80056f6:	2300      	movne	r3, #0
 80056f8:	eba6 0807 	sub.w	r8, r6, r7
 80056fc:	608b      	str	r3, [r1, #8]
 80056fe:	f1b8 0f00 	cmp.w	r8, #0
 8005702:	dd9c      	ble.n	800563e <__sflush_r+0x1a>
 8005704:	6a21      	ldr	r1, [r4, #32]
 8005706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005708:	4643      	mov	r3, r8
 800570a:	463a      	mov	r2, r7
 800570c:	4628      	mov	r0, r5
 800570e:	47b0      	blx	r6
 8005710:	2800      	cmp	r0, #0
 8005712:	dc06      	bgt.n	8005722 <__sflush_r+0xfe>
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800571a:	81a3      	strh	r3, [r4, #12]
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	e78e      	b.n	8005640 <__sflush_r+0x1c>
 8005722:	4407      	add	r7, r0
 8005724:	eba8 0800 	sub.w	r8, r8, r0
 8005728:	e7e9      	b.n	80056fe <__sflush_r+0xda>
 800572a:	bf00      	nop
 800572c:	20400001 	.word	0x20400001

08005730 <_fflush_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	690b      	ldr	r3, [r1, #16]
 8005734:	4605      	mov	r5, r0
 8005736:	460c      	mov	r4, r1
 8005738:	b913      	cbnz	r3, 8005740 <_fflush_r+0x10>
 800573a:	2500      	movs	r5, #0
 800573c:	4628      	mov	r0, r5
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	b118      	cbz	r0, 800574a <_fflush_r+0x1a>
 8005742:	6983      	ldr	r3, [r0, #24]
 8005744:	b90b      	cbnz	r3, 800574a <_fflush_r+0x1a>
 8005746:	f000 f887 	bl	8005858 <__sinit>
 800574a:	4b14      	ldr	r3, [pc, #80]	; (800579c <_fflush_r+0x6c>)
 800574c:	429c      	cmp	r4, r3
 800574e:	d11b      	bne.n	8005788 <_fflush_r+0x58>
 8005750:	686c      	ldr	r4, [r5, #4]
 8005752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ef      	beq.n	800573a <_fflush_r+0xa>
 800575a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800575c:	07d0      	lsls	r0, r2, #31
 800575e:	d404      	bmi.n	800576a <_fflush_r+0x3a>
 8005760:	0599      	lsls	r1, r3, #22
 8005762:	d402      	bmi.n	800576a <_fflush_r+0x3a>
 8005764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005766:	f000 f915 	bl	8005994 <__retarget_lock_acquire_recursive>
 800576a:	4628      	mov	r0, r5
 800576c:	4621      	mov	r1, r4
 800576e:	f7ff ff59 	bl	8005624 <__sflush_r>
 8005772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005774:	07da      	lsls	r2, r3, #31
 8005776:	4605      	mov	r5, r0
 8005778:	d4e0      	bmi.n	800573c <_fflush_r+0xc>
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	059b      	lsls	r3, r3, #22
 800577e:	d4dd      	bmi.n	800573c <_fflush_r+0xc>
 8005780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005782:	f000 f908 	bl	8005996 <__retarget_lock_release_recursive>
 8005786:	e7d9      	b.n	800573c <_fflush_r+0xc>
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <_fflush_r+0x70>)
 800578a:	429c      	cmp	r4, r3
 800578c:	d101      	bne.n	8005792 <_fflush_r+0x62>
 800578e:	68ac      	ldr	r4, [r5, #8]
 8005790:	e7df      	b.n	8005752 <_fflush_r+0x22>
 8005792:	4b04      	ldr	r3, [pc, #16]	; (80057a4 <_fflush_r+0x74>)
 8005794:	429c      	cmp	r4, r3
 8005796:	bf08      	it	eq
 8005798:	68ec      	ldreq	r4, [r5, #12]
 800579a:	e7da      	b.n	8005752 <_fflush_r+0x22>
 800579c:	0800649c 	.word	0x0800649c
 80057a0:	080064bc 	.word	0x080064bc
 80057a4:	0800647c 	.word	0x0800647c

080057a8 <std>:
 80057a8:	2300      	movs	r3, #0
 80057aa:	b510      	push	{r4, lr}
 80057ac:	4604      	mov	r4, r0
 80057ae:	e9c0 3300 	strd	r3, r3, [r0]
 80057b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057b6:	6083      	str	r3, [r0, #8]
 80057b8:	8181      	strh	r1, [r0, #12]
 80057ba:	6643      	str	r3, [r0, #100]	; 0x64
 80057bc:	81c2      	strh	r2, [r0, #14]
 80057be:	6183      	str	r3, [r0, #24]
 80057c0:	4619      	mov	r1, r3
 80057c2:	2208      	movs	r2, #8
 80057c4:	305c      	adds	r0, #92	; 0x5c
 80057c6:	f7ff fdd7 	bl	8005378 <memset>
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <std+0x38>)
 80057cc:	6263      	str	r3, [r4, #36]	; 0x24
 80057ce:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <std+0x3c>)
 80057d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <std+0x40>)
 80057d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <std+0x44>)
 80057d8:	6224      	str	r4, [r4, #32]
 80057da:	6323      	str	r3, [r4, #48]	; 0x30
 80057dc:	bd10      	pop	{r4, pc}
 80057de:	bf00      	nop
 80057e0:	080061b1 	.word	0x080061b1
 80057e4:	080061d3 	.word	0x080061d3
 80057e8:	0800620b 	.word	0x0800620b
 80057ec:	0800622f 	.word	0x0800622f

080057f0 <_cleanup_r>:
 80057f0:	4901      	ldr	r1, [pc, #4]	; (80057f8 <_cleanup_r+0x8>)
 80057f2:	f000 b8af 	b.w	8005954 <_fwalk_reent>
 80057f6:	bf00      	nop
 80057f8:	08005731 	.word	0x08005731

080057fc <__sfmoreglue>:
 80057fc:	b570      	push	{r4, r5, r6, lr}
 80057fe:	1e4a      	subs	r2, r1, #1
 8005800:	2568      	movs	r5, #104	; 0x68
 8005802:	4355      	muls	r5, r2
 8005804:	460e      	mov	r6, r1
 8005806:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800580a:	f000 f979 	bl	8005b00 <_malloc_r>
 800580e:	4604      	mov	r4, r0
 8005810:	b140      	cbz	r0, 8005824 <__sfmoreglue+0x28>
 8005812:	2100      	movs	r1, #0
 8005814:	e9c0 1600 	strd	r1, r6, [r0]
 8005818:	300c      	adds	r0, #12
 800581a:	60a0      	str	r0, [r4, #8]
 800581c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005820:	f7ff fdaa 	bl	8005378 <memset>
 8005824:	4620      	mov	r0, r4
 8005826:	bd70      	pop	{r4, r5, r6, pc}

08005828 <__sfp_lock_acquire>:
 8005828:	4801      	ldr	r0, [pc, #4]	; (8005830 <__sfp_lock_acquire+0x8>)
 800582a:	f000 b8b3 	b.w	8005994 <__retarget_lock_acquire_recursive>
 800582e:	bf00      	nop
 8005830:	2000067c 	.word	0x2000067c

08005834 <__sfp_lock_release>:
 8005834:	4801      	ldr	r0, [pc, #4]	; (800583c <__sfp_lock_release+0x8>)
 8005836:	f000 b8ae 	b.w	8005996 <__retarget_lock_release_recursive>
 800583a:	bf00      	nop
 800583c:	2000067c 	.word	0x2000067c

08005840 <__sinit_lock_acquire>:
 8005840:	4801      	ldr	r0, [pc, #4]	; (8005848 <__sinit_lock_acquire+0x8>)
 8005842:	f000 b8a7 	b.w	8005994 <__retarget_lock_acquire_recursive>
 8005846:	bf00      	nop
 8005848:	20000677 	.word	0x20000677

0800584c <__sinit_lock_release>:
 800584c:	4801      	ldr	r0, [pc, #4]	; (8005854 <__sinit_lock_release+0x8>)
 800584e:	f000 b8a2 	b.w	8005996 <__retarget_lock_release_recursive>
 8005852:	bf00      	nop
 8005854:	20000677 	.word	0x20000677

08005858 <__sinit>:
 8005858:	b510      	push	{r4, lr}
 800585a:	4604      	mov	r4, r0
 800585c:	f7ff fff0 	bl	8005840 <__sinit_lock_acquire>
 8005860:	69a3      	ldr	r3, [r4, #24]
 8005862:	b11b      	cbz	r3, 800586c <__sinit+0x14>
 8005864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005868:	f7ff bff0 	b.w	800584c <__sinit_lock_release>
 800586c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005870:	6523      	str	r3, [r4, #80]	; 0x50
 8005872:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <__sinit+0x68>)
 8005874:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <__sinit+0x6c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	62a2      	str	r2, [r4, #40]	; 0x28
 800587a:	42a3      	cmp	r3, r4
 800587c:	bf04      	itt	eq
 800587e:	2301      	moveq	r3, #1
 8005880:	61a3      	streq	r3, [r4, #24]
 8005882:	4620      	mov	r0, r4
 8005884:	f000 f820 	bl	80058c8 <__sfp>
 8005888:	6060      	str	r0, [r4, #4]
 800588a:	4620      	mov	r0, r4
 800588c:	f000 f81c 	bl	80058c8 <__sfp>
 8005890:	60a0      	str	r0, [r4, #8]
 8005892:	4620      	mov	r0, r4
 8005894:	f000 f818 	bl	80058c8 <__sfp>
 8005898:	2200      	movs	r2, #0
 800589a:	60e0      	str	r0, [r4, #12]
 800589c:	2104      	movs	r1, #4
 800589e:	6860      	ldr	r0, [r4, #4]
 80058a0:	f7ff ff82 	bl	80057a8 <std>
 80058a4:	68a0      	ldr	r0, [r4, #8]
 80058a6:	2201      	movs	r2, #1
 80058a8:	2109      	movs	r1, #9
 80058aa:	f7ff ff7d 	bl	80057a8 <std>
 80058ae:	68e0      	ldr	r0, [r4, #12]
 80058b0:	2202      	movs	r2, #2
 80058b2:	2112      	movs	r1, #18
 80058b4:	f7ff ff78 	bl	80057a8 <std>
 80058b8:	2301      	movs	r3, #1
 80058ba:	61a3      	str	r3, [r4, #24]
 80058bc:	e7d2      	b.n	8005864 <__sinit+0xc>
 80058be:	bf00      	nop
 80058c0:	08006478 	.word	0x08006478
 80058c4:	080057f1 	.word	0x080057f1

080058c8 <__sfp>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	4607      	mov	r7, r0
 80058cc:	f7ff ffac 	bl	8005828 <__sfp_lock_acquire>
 80058d0:	4b1e      	ldr	r3, [pc, #120]	; (800594c <__sfp+0x84>)
 80058d2:	681e      	ldr	r6, [r3, #0]
 80058d4:	69b3      	ldr	r3, [r6, #24]
 80058d6:	b913      	cbnz	r3, 80058de <__sfp+0x16>
 80058d8:	4630      	mov	r0, r6
 80058da:	f7ff ffbd 	bl	8005858 <__sinit>
 80058de:	3648      	adds	r6, #72	; 0x48
 80058e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	d503      	bpl.n	80058f0 <__sfp+0x28>
 80058e8:	6833      	ldr	r3, [r6, #0]
 80058ea:	b30b      	cbz	r3, 8005930 <__sfp+0x68>
 80058ec:	6836      	ldr	r6, [r6, #0]
 80058ee:	e7f7      	b.n	80058e0 <__sfp+0x18>
 80058f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058f4:	b9d5      	cbnz	r5, 800592c <__sfp+0x64>
 80058f6:	4b16      	ldr	r3, [pc, #88]	; (8005950 <__sfp+0x88>)
 80058f8:	60e3      	str	r3, [r4, #12]
 80058fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058fe:	6665      	str	r5, [r4, #100]	; 0x64
 8005900:	f000 f847 	bl	8005992 <__retarget_lock_init_recursive>
 8005904:	f7ff ff96 	bl	8005834 <__sfp_lock_release>
 8005908:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800590c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005910:	6025      	str	r5, [r4, #0]
 8005912:	61a5      	str	r5, [r4, #24]
 8005914:	2208      	movs	r2, #8
 8005916:	4629      	mov	r1, r5
 8005918:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800591c:	f7ff fd2c 	bl	8005378 <memset>
 8005920:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005924:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005928:	4620      	mov	r0, r4
 800592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800592c:	3468      	adds	r4, #104	; 0x68
 800592e:	e7d9      	b.n	80058e4 <__sfp+0x1c>
 8005930:	2104      	movs	r1, #4
 8005932:	4638      	mov	r0, r7
 8005934:	f7ff ff62 	bl	80057fc <__sfmoreglue>
 8005938:	4604      	mov	r4, r0
 800593a:	6030      	str	r0, [r6, #0]
 800593c:	2800      	cmp	r0, #0
 800593e:	d1d5      	bne.n	80058ec <__sfp+0x24>
 8005940:	f7ff ff78 	bl	8005834 <__sfp_lock_release>
 8005944:	230c      	movs	r3, #12
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	e7ee      	b.n	8005928 <__sfp+0x60>
 800594a:	bf00      	nop
 800594c:	08006478 	.word	0x08006478
 8005950:	ffff0001 	.word	0xffff0001

08005954 <_fwalk_reent>:
 8005954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005958:	4606      	mov	r6, r0
 800595a:	4688      	mov	r8, r1
 800595c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005960:	2700      	movs	r7, #0
 8005962:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005966:	f1b9 0901 	subs.w	r9, r9, #1
 800596a:	d505      	bpl.n	8005978 <_fwalk_reent+0x24>
 800596c:	6824      	ldr	r4, [r4, #0]
 800596e:	2c00      	cmp	r4, #0
 8005970:	d1f7      	bne.n	8005962 <_fwalk_reent+0xe>
 8005972:	4638      	mov	r0, r7
 8005974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005978:	89ab      	ldrh	r3, [r5, #12]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d907      	bls.n	800598e <_fwalk_reent+0x3a>
 800597e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005982:	3301      	adds	r3, #1
 8005984:	d003      	beq.n	800598e <_fwalk_reent+0x3a>
 8005986:	4629      	mov	r1, r5
 8005988:	4630      	mov	r0, r6
 800598a:	47c0      	blx	r8
 800598c:	4307      	orrs	r7, r0
 800598e:	3568      	adds	r5, #104	; 0x68
 8005990:	e7e9      	b.n	8005966 <_fwalk_reent+0x12>

08005992 <__retarget_lock_init_recursive>:
 8005992:	4770      	bx	lr

08005994 <__retarget_lock_acquire_recursive>:
 8005994:	4770      	bx	lr

08005996 <__retarget_lock_release_recursive>:
 8005996:	4770      	bx	lr

08005998 <__swhatbuf_r>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	460e      	mov	r6, r1
 800599c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a0:	2900      	cmp	r1, #0
 80059a2:	b096      	sub	sp, #88	; 0x58
 80059a4:	4614      	mov	r4, r2
 80059a6:	461d      	mov	r5, r3
 80059a8:	da07      	bge.n	80059ba <__swhatbuf_r+0x22>
 80059aa:	2300      	movs	r3, #0
 80059ac:	602b      	str	r3, [r5, #0]
 80059ae:	89b3      	ldrh	r3, [r6, #12]
 80059b0:	061a      	lsls	r2, r3, #24
 80059b2:	d410      	bmi.n	80059d6 <__swhatbuf_r+0x3e>
 80059b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059b8:	e00e      	b.n	80059d8 <__swhatbuf_r+0x40>
 80059ba:	466a      	mov	r2, sp
 80059bc:	f000 fc5e 	bl	800627c <_fstat_r>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	dbf2      	blt.n	80059aa <__swhatbuf_r+0x12>
 80059c4:	9a01      	ldr	r2, [sp, #4]
 80059c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059ce:	425a      	negs	r2, r3
 80059d0:	415a      	adcs	r2, r3
 80059d2:	602a      	str	r2, [r5, #0]
 80059d4:	e7ee      	b.n	80059b4 <__swhatbuf_r+0x1c>
 80059d6:	2340      	movs	r3, #64	; 0x40
 80059d8:	2000      	movs	r0, #0
 80059da:	6023      	str	r3, [r4, #0]
 80059dc:	b016      	add	sp, #88	; 0x58
 80059de:	bd70      	pop	{r4, r5, r6, pc}

080059e0 <__smakebuf_r>:
 80059e0:	898b      	ldrh	r3, [r1, #12]
 80059e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059e4:	079d      	lsls	r5, r3, #30
 80059e6:	4606      	mov	r6, r0
 80059e8:	460c      	mov	r4, r1
 80059ea:	d507      	bpl.n	80059fc <__smakebuf_r+0x1c>
 80059ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	6123      	str	r3, [r4, #16]
 80059f4:	2301      	movs	r3, #1
 80059f6:	6163      	str	r3, [r4, #20]
 80059f8:	b002      	add	sp, #8
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	ab01      	add	r3, sp, #4
 80059fe:	466a      	mov	r2, sp
 8005a00:	f7ff ffca 	bl	8005998 <__swhatbuf_r>
 8005a04:	9900      	ldr	r1, [sp, #0]
 8005a06:	4605      	mov	r5, r0
 8005a08:	4630      	mov	r0, r6
 8005a0a:	f000 f879 	bl	8005b00 <_malloc_r>
 8005a0e:	b948      	cbnz	r0, 8005a24 <__smakebuf_r+0x44>
 8005a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a14:	059a      	lsls	r2, r3, #22
 8005a16:	d4ef      	bmi.n	80059f8 <__smakebuf_r+0x18>
 8005a18:	f023 0303 	bic.w	r3, r3, #3
 8005a1c:	f043 0302 	orr.w	r3, r3, #2
 8005a20:	81a3      	strh	r3, [r4, #12]
 8005a22:	e7e3      	b.n	80059ec <__smakebuf_r+0xc>
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <__smakebuf_r+0x7c>)
 8005a26:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	6020      	str	r0, [r4, #0]
 8005a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	9b00      	ldr	r3, [sp, #0]
 8005a34:	6163      	str	r3, [r4, #20]
 8005a36:	9b01      	ldr	r3, [sp, #4]
 8005a38:	6120      	str	r0, [r4, #16]
 8005a3a:	b15b      	cbz	r3, 8005a54 <__smakebuf_r+0x74>
 8005a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a40:	4630      	mov	r0, r6
 8005a42:	f000 fc2d 	bl	80062a0 <_isatty_r>
 8005a46:	b128      	cbz	r0, 8005a54 <__smakebuf_r+0x74>
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	f023 0303 	bic.w	r3, r3, #3
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	81a3      	strh	r3, [r4, #12]
 8005a54:	89a0      	ldrh	r0, [r4, #12]
 8005a56:	4305      	orrs	r5, r0
 8005a58:	81a5      	strh	r5, [r4, #12]
 8005a5a:	e7cd      	b.n	80059f8 <__smakebuf_r+0x18>
 8005a5c:	080057f1 	.word	0x080057f1

08005a60 <_free_r>:
 8005a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a62:	2900      	cmp	r1, #0
 8005a64:	d048      	beq.n	8005af8 <_free_r+0x98>
 8005a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a6a:	9001      	str	r0, [sp, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a72:	bfb8      	it	lt
 8005a74:	18e4      	addlt	r4, r4, r3
 8005a76:	f000 fc35 	bl	80062e4 <__malloc_lock>
 8005a7a:	4a20      	ldr	r2, [pc, #128]	; (8005afc <_free_r+0x9c>)
 8005a7c:	9801      	ldr	r0, [sp, #4]
 8005a7e:	6813      	ldr	r3, [r2, #0]
 8005a80:	4615      	mov	r5, r2
 8005a82:	b933      	cbnz	r3, 8005a92 <_free_r+0x32>
 8005a84:	6063      	str	r3, [r4, #4]
 8005a86:	6014      	str	r4, [r2, #0]
 8005a88:	b003      	add	sp, #12
 8005a8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a8e:	f000 bc2f 	b.w	80062f0 <__malloc_unlock>
 8005a92:	42a3      	cmp	r3, r4
 8005a94:	d90b      	bls.n	8005aae <_free_r+0x4e>
 8005a96:	6821      	ldr	r1, [r4, #0]
 8005a98:	1862      	adds	r2, r4, r1
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	bf04      	itt	eq
 8005a9e:	681a      	ldreq	r2, [r3, #0]
 8005aa0:	685b      	ldreq	r3, [r3, #4]
 8005aa2:	6063      	str	r3, [r4, #4]
 8005aa4:	bf04      	itt	eq
 8005aa6:	1852      	addeq	r2, r2, r1
 8005aa8:	6022      	streq	r2, [r4, #0]
 8005aaa:	602c      	str	r4, [r5, #0]
 8005aac:	e7ec      	b.n	8005a88 <_free_r+0x28>
 8005aae:	461a      	mov	r2, r3
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	b10b      	cbz	r3, 8005ab8 <_free_r+0x58>
 8005ab4:	42a3      	cmp	r3, r4
 8005ab6:	d9fa      	bls.n	8005aae <_free_r+0x4e>
 8005ab8:	6811      	ldr	r1, [r2, #0]
 8005aba:	1855      	adds	r5, r2, r1
 8005abc:	42a5      	cmp	r5, r4
 8005abe:	d10b      	bne.n	8005ad8 <_free_r+0x78>
 8005ac0:	6824      	ldr	r4, [r4, #0]
 8005ac2:	4421      	add	r1, r4
 8005ac4:	1854      	adds	r4, r2, r1
 8005ac6:	42a3      	cmp	r3, r4
 8005ac8:	6011      	str	r1, [r2, #0]
 8005aca:	d1dd      	bne.n	8005a88 <_free_r+0x28>
 8005acc:	681c      	ldr	r4, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	6053      	str	r3, [r2, #4]
 8005ad2:	4421      	add	r1, r4
 8005ad4:	6011      	str	r1, [r2, #0]
 8005ad6:	e7d7      	b.n	8005a88 <_free_r+0x28>
 8005ad8:	d902      	bls.n	8005ae0 <_free_r+0x80>
 8005ada:	230c      	movs	r3, #12
 8005adc:	6003      	str	r3, [r0, #0]
 8005ade:	e7d3      	b.n	8005a88 <_free_r+0x28>
 8005ae0:	6825      	ldr	r5, [r4, #0]
 8005ae2:	1961      	adds	r1, r4, r5
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	bf04      	itt	eq
 8005ae8:	6819      	ldreq	r1, [r3, #0]
 8005aea:	685b      	ldreq	r3, [r3, #4]
 8005aec:	6063      	str	r3, [r4, #4]
 8005aee:	bf04      	itt	eq
 8005af0:	1949      	addeq	r1, r1, r5
 8005af2:	6021      	streq	r1, [r4, #0]
 8005af4:	6054      	str	r4, [r2, #4]
 8005af6:	e7c7      	b.n	8005a88 <_free_r+0x28>
 8005af8:	b003      	add	sp, #12
 8005afa:	bd30      	pop	{r4, r5, pc}
 8005afc:	200000bc 	.word	0x200000bc

08005b00 <_malloc_r>:
 8005b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b02:	1ccd      	adds	r5, r1, #3
 8005b04:	f025 0503 	bic.w	r5, r5, #3
 8005b08:	3508      	adds	r5, #8
 8005b0a:	2d0c      	cmp	r5, #12
 8005b0c:	bf38      	it	cc
 8005b0e:	250c      	movcc	r5, #12
 8005b10:	2d00      	cmp	r5, #0
 8005b12:	4606      	mov	r6, r0
 8005b14:	db01      	blt.n	8005b1a <_malloc_r+0x1a>
 8005b16:	42a9      	cmp	r1, r5
 8005b18:	d903      	bls.n	8005b22 <_malloc_r+0x22>
 8005b1a:	230c      	movs	r3, #12
 8005b1c:	6033      	str	r3, [r6, #0]
 8005b1e:	2000      	movs	r0, #0
 8005b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b22:	f000 fbdf 	bl	80062e4 <__malloc_lock>
 8005b26:	4921      	ldr	r1, [pc, #132]	; (8005bac <_malloc_r+0xac>)
 8005b28:	680a      	ldr	r2, [r1, #0]
 8005b2a:	4614      	mov	r4, r2
 8005b2c:	b99c      	cbnz	r4, 8005b56 <_malloc_r+0x56>
 8005b2e:	4f20      	ldr	r7, [pc, #128]	; (8005bb0 <_malloc_r+0xb0>)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	b923      	cbnz	r3, 8005b3e <_malloc_r+0x3e>
 8005b34:	4621      	mov	r1, r4
 8005b36:	4630      	mov	r0, r6
 8005b38:	f000 fb2a 	bl	8006190 <_sbrk_r>
 8005b3c:	6038      	str	r0, [r7, #0]
 8005b3e:	4629      	mov	r1, r5
 8005b40:	4630      	mov	r0, r6
 8005b42:	f000 fb25 	bl	8006190 <_sbrk_r>
 8005b46:	1c43      	adds	r3, r0, #1
 8005b48:	d123      	bne.n	8005b92 <_malloc_r+0x92>
 8005b4a:	230c      	movs	r3, #12
 8005b4c:	6033      	str	r3, [r6, #0]
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f000 fbce 	bl	80062f0 <__malloc_unlock>
 8005b54:	e7e3      	b.n	8005b1e <_malloc_r+0x1e>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	1b5b      	subs	r3, r3, r5
 8005b5a:	d417      	bmi.n	8005b8c <_malloc_r+0x8c>
 8005b5c:	2b0b      	cmp	r3, #11
 8005b5e:	d903      	bls.n	8005b68 <_malloc_r+0x68>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	441c      	add	r4, r3
 8005b64:	6025      	str	r5, [r4, #0]
 8005b66:	e004      	b.n	8005b72 <_malloc_r+0x72>
 8005b68:	6863      	ldr	r3, [r4, #4]
 8005b6a:	42a2      	cmp	r2, r4
 8005b6c:	bf0c      	ite	eq
 8005b6e:	600b      	streq	r3, [r1, #0]
 8005b70:	6053      	strne	r3, [r2, #4]
 8005b72:	4630      	mov	r0, r6
 8005b74:	f000 fbbc 	bl	80062f0 <__malloc_unlock>
 8005b78:	f104 000b 	add.w	r0, r4, #11
 8005b7c:	1d23      	adds	r3, r4, #4
 8005b7e:	f020 0007 	bic.w	r0, r0, #7
 8005b82:	1ac2      	subs	r2, r0, r3
 8005b84:	d0cc      	beq.n	8005b20 <_malloc_r+0x20>
 8005b86:	1a1b      	subs	r3, r3, r0
 8005b88:	50a3      	str	r3, [r4, r2]
 8005b8a:	e7c9      	b.n	8005b20 <_malloc_r+0x20>
 8005b8c:	4622      	mov	r2, r4
 8005b8e:	6864      	ldr	r4, [r4, #4]
 8005b90:	e7cc      	b.n	8005b2c <_malloc_r+0x2c>
 8005b92:	1cc4      	adds	r4, r0, #3
 8005b94:	f024 0403 	bic.w	r4, r4, #3
 8005b98:	42a0      	cmp	r0, r4
 8005b9a:	d0e3      	beq.n	8005b64 <_malloc_r+0x64>
 8005b9c:	1a21      	subs	r1, r4, r0
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f000 faf6 	bl	8006190 <_sbrk_r>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d1dd      	bne.n	8005b64 <_malloc_r+0x64>
 8005ba8:	e7cf      	b.n	8005b4a <_malloc_r+0x4a>
 8005baa:	bf00      	nop
 8005bac:	200000bc 	.word	0x200000bc
 8005bb0:	200000c0 	.word	0x200000c0

08005bb4 <__sfputc_r>:
 8005bb4:	6893      	ldr	r3, [r2, #8]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	b410      	push	{r4}
 8005bbc:	6093      	str	r3, [r2, #8]
 8005bbe:	da08      	bge.n	8005bd2 <__sfputc_r+0x1e>
 8005bc0:	6994      	ldr	r4, [r2, #24]
 8005bc2:	42a3      	cmp	r3, r4
 8005bc4:	db01      	blt.n	8005bca <__sfputc_r+0x16>
 8005bc6:	290a      	cmp	r1, #10
 8005bc8:	d103      	bne.n	8005bd2 <__sfputc_r+0x1e>
 8005bca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bce:	f7ff bc69 	b.w	80054a4 <__swbuf_r>
 8005bd2:	6813      	ldr	r3, [r2, #0]
 8005bd4:	1c58      	adds	r0, r3, #1
 8005bd6:	6010      	str	r0, [r2, #0]
 8005bd8:	7019      	strb	r1, [r3, #0]
 8005bda:	4608      	mov	r0, r1
 8005bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <__sfputs_r>:
 8005be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be4:	4606      	mov	r6, r0
 8005be6:	460f      	mov	r7, r1
 8005be8:	4614      	mov	r4, r2
 8005bea:	18d5      	adds	r5, r2, r3
 8005bec:	42ac      	cmp	r4, r5
 8005bee:	d101      	bne.n	8005bf4 <__sfputs_r+0x12>
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	e007      	b.n	8005c04 <__sfputs_r+0x22>
 8005bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf8:	463a      	mov	r2, r7
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f7ff ffda 	bl	8005bb4 <__sfputc_r>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d1f3      	bne.n	8005bec <__sfputs_r+0xa>
 8005c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c08 <_vfiprintf_r>:
 8005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	460d      	mov	r5, r1
 8005c0e:	b09d      	sub	sp, #116	; 0x74
 8005c10:	4614      	mov	r4, r2
 8005c12:	4698      	mov	r8, r3
 8005c14:	4606      	mov	r6, r0
 8005c16:	b118      	cbz	r0, 8005c20 <_vfiprintf_r+0x18>
 8005c18:	6983      	ldr	r3, [r0, #24]
 8005c1a:	b90b      	cbnz	r3, 8005c20 <_vfiprintf_r+0x18>
 8005c1c:	f7ff fe1c 	bl	8005858 <__sinit>
 8005c20:	4b89      	ldr	r3, [pc, #548]	; (8005e48 <_vfiprintf_r+0x240>)
 8005c22:	429d      	cmp	r5, r3
 8005c24:	d11b      	bne.n	8005c5e <_vfiprintf_r+0x56>
 8005c26:	6875      	ldr	r5, [r6, #4]
 8005c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c2a:	07d9      	lsls	r1, r3, #31
 8005c2c:	d405      	bmi.n	8005c3a <_vfiprintf_r+0x32>
 8005c2e:	89ab      	ldrh	r3, [r5, #12]
 8005c30:	059a      	lsls	r2, r3, #22
 8005c32:	d402      	bmi.n	8005c3a <_vfiprintf_r+0x32>
 8005c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c36:	f7ff fead 	bl	8005994 <__retarget_lock_acquire_recursive>
 8005c3a:	89ab      	ldrh	r3, [r5, #12]
 8005c3c:	071b      	lsls	r3, r3, #28
 8005c3e:	d501      	bpl.n	8005c44 <_vfiprintf_r+0x3c>
 8005c40:	692b      	ldr	r3, [r5, #16]
 8005c42:	b9eb      	cbnz	r3, 8005c80 <_vfiprintf_r+0x78>
 8005c44:	4629      	mov	r1, r5
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff fc7e 	bl	8005548 <__swsetup_r>
 8005c4c:	b1c0      	cbz	r0, 8005c80 <_vfiprintf_r+0x78>
 8005c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c50:	07dc      	lsls	r4, r3, #31
 8005c52:	d50e      	bpl.n	8005c72 <_vfiprintf_r+0x6a>
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295
 8005c58:	b01d      	add	sp, #116	; 0x74
 8005c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5e:	4b7b      	ldr	r3, [pc, #492]	; (8005e4c <_vfiprintf_r+0x244>)
 8005c60:	429d      	cmp	r5, r3
 8005c62:	d101      	bne.n	8005c68 <_vfiprintf_r+0x60>
 8005c64:	68b5      	ldr	r5, [r6, #8]
 8005c66:	e7df      	b.n	8005c28 <_vfiprintf_r+0x20>
 8005c68:	4b79      	ldr	r3, [pc, #484]	; (8005e50 <_vfiprintf_r+0x248>)
 8005c6a:	429d      	cmp	r5, r3
 8005c6c:	bf08      	it	eq
 8005c6e:	68f5      	ldreq	r5, [r6, #12]
 8005c70:	e7da      	b.n	8005c28 <_vfiprintf_r+0x20>
 8005c72:	89ab      	ldrh	r3, [r5, #12]
 8005c74:	0598      	lsls	r0, r3, #22
 8005c76:	d4ed      	bmi.n	8005c54 <_vfiprintf_r+0x4c>
 8005c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c7a:	f7ff fe8c 	bl	8005996 <__retarget_lock_release_recursive>
 8005c7e:	e7e9      	b.n	8005c54 <_vfiprintf_r+0x4c>
 8005c80:	2300      	movs	r3, #0
 8005c82:	9309      	str	r3, [sp, #36]	; 0x24
 8005c84:	2320      	movs	r3, #32
 8005c86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c8e:	2330      	movs	r3, #48	; 0x30
 8005c90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e54 <_vfiprintf_r+0x24c>
 8005c94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c98:	f04f 0901 	mov.w	r9, #1
 8005c9c:	4623      	mov	r3, r4
 8005c9e:	469a      	mov	sl, r3
 8005ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ca4:	b10a      	cbz	r2, 8005caa <_vfiprintf_r+0xa2>
 8005ca6:	2a25      	cmp	r2, #37	; 0x25
 8005ca8:	d1f9      	bne.n	8005c9e <_vfiprintf_r+0x96>
 8005caa:	ebba 0b04 	subs.w	fp, sl, r4
 8005cae:	d00b      	beq.n	8005cc8 <_vfiprintf_r+0xc0>
 8005cb0:	465b      	mov	r3, fp
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f7ff ff93 	bl	8005be2 <__sfputs_r>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	f000 80aa 	beq.w	8005e16 <_vfiprintf_r+0x20e>
 8005cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cc4:	445a      	add	r2, fp
 8005cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8005cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80a2 	beq.w	8005e16 <_vfiprintf_r+0x20e>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cdc:	f10a 0a01 	add.w	sl, sl, #1
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ce8:	931a      	str	r3, [sp, #104]	; 0x68
 8005cea:	4654      	mov	r4, sl
 8005cec:	2205      	movs	r2, #5
 8005cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf2:	4858      	ldr	r0, [pc, #352]	; (8005e54 <_vfiprintf_r+0x24c>)
 8005cf4:	f7fa fa74 	bl	80001e0 <memchr>
 8005cf8:	9a04      	ldr	r2, [sp, #16]
 8005cfa:	b9d8      	cbnz	r0, 8005d34 <_vfiprintf_r+0x12c>
 8005cfc:	06d1      	lsls	r1, r2, #27
 8005cfe:	bf44      	itt	mi
 8005d00:	2320      	movmi	r3, #32
 8005d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d06:	0713      	lsls	r3, r2, #28
 8005d08:	bf44      	itt	mi
 8005d0a:	232b      	movmi	r3, #43	; 0x2b
 8005d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d10:	f89a 3000 	ldrb.w	r3, [sl]
 8005d14:	2b2a      	cmp	r3, #42	; 0x2a
 8005d16:	d015      	beq.n	8005d44 <_vfiprintf_r+0x13c>
 8005d18:	9a07      	ldr	r2, [sp, #28]
 8005d1a:	4654      	mov	r4, sl
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f04f 0c0a 	mov.w	ip, #10
 8005d22:	4621      	mov	r1, r4
 8005d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d28:	3b30      	subs	r3, #48	; 0x30
 8005d2a:	2b09      	cmp	r3, #9
 8005d2c:	d94e      	bls.n	8005dcc <_vfiprintf_r+0x1c4>
 8005d2e:	b1b0      	cbz	r0, 8005d5e <_vfiprintf_r+0x156>
 8005d30:	9207      	str	r2, [sp, #28]
 8005d32:	e014      	b.n	8005d5e <_vfiprintf_r+0x156>
 8005d34:	eba0 0308 	sub.w	r3, r0, r8
 8005d38:	fa09 f303 	lsl.w	r3, r9, r3
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	9304      	str	r3, [sp, #16]
 8005d40:	46a2      	mov	sl, r4
 8005d42:	e7d2      	b.n	8005cea <_vfiprintf_r+0xe2>
 8005d44:	9b03      	ldr	r3, [sp, #12]
 8005d46:	1d19      	adds	r1, r3, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	9103      	str	r1, [sp, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bfbb      	ittet	lt
 8005d50:	425b      	neglt	r3, r3
 8005d52:	f042 0202 	orrlt.w	r2, r2, #2
 8005d56:	9307      	strge	r3, [sp, #28]
 8005d58:	9307      	strlt	r3, [sp, #28]
 8005d5a:	bfb8      	it	lt
 8005d5c:	9204      	strlt	r2, [sp, #16]
 8005d5e:	7823      	ldrb	r3, [r4, #0]
 8005d60:	2b2e      	cmp	r3, #46	; 0x2e
 8005d62:	d10c      	bne.n	8005d7e <_vfiprintf_r+0x176>
 8005d64:	7863      	ldrb	r3, [r4, #1]
 8005d66:	2b2a      	cmp	r3, #42	; 0x2a
 8005d68:	d135      	bne.n	8005dd6 <_vfiprintf_r+0x1ce>
 8005d6a:	9b03      	ldr	r3, [sp, #12]
 8005d6c:	1d1a      	adds	r2, r3, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	9203      	str	r2, [sp, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	bfb8      	it	lt
 8005d76:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d7a:	3402      	adds	r4, #2
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e64 <_vfiprintf_r+0x25c>
 8005d82:	7821      	ldrb	r1, [r4, #0]
 8005d84:	2203      	movs	r2, #3
 8005d86:	4650      	mov	r0, sl
 8005d88:	f7fa fa2a 	bl	80001e0 <memchr>
 8005d8c:	b140      	cbz	r0, 8005da0 <_vfiprintf_r+0x198>
 8005d8e:	2340      	movs	r3, #64	; 0x40
 8005d90:	eba0 000a 	sub.w	r0, r0, sl
 8005d94:	fa03 f000 	lsl.w	r0, r3, r0
 8005d98:	9b04      	ldr	r3, [sp, #16]
 8005d9a:	4303      	orrs	r3, r0
 8005d9c:	3401      	adds	r4, #1
 8005d9e:	9304      	str	r3, [sp, #16]
 8005da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da4:	482c      	ldr	r0, [pc, #176]	; (8005e58 <_vfiprintf_r+0x250>)
 8005da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005daa:	2206      	movs	r2, #6
 8005dac:	f7fa fa18 	bl	80001e0 <memchr>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d03f      	beq.n	8005e34 <_vfiprintf_r+0x22c>
 8005db4:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <_vfiprintf_r+0x254>)
 8005db6:	bb1b      	cbnz	r3, 8005e00 <_vfiprintf_r+0x1f8>
 8005db8:	9b03      	ldr	r3, [sp, #12]
 8005dba:	3307      	adds	r3, #7
 8005dbc:	f023 0307 	bic.w	r3, r3, #7
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	9303      	str	r3, [sp, #12]
 8005dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc6:	443b      	add	r3, r7
 8005dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dca:	e767      	b.n	8005c9c <_vfiprintf_r+0x94>
 8005dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	e7a5      	b.n	8005d22 <_vfiprintf_r+0x11a>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	3401      	adds	r4, #1
 8005dda:	9305      	str	r3, [sp, #20]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f04f 0c0a 	mov.w	ip, #10
 8005de2:	4620      	mov	r0, r4
 8005de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005de8:	3a30      	subs	r2, #48	; 0x30
 8005dea:	2a09      	cmp	r2, #9
 8005dec:	d903      	bls.n	8005df6 <_vfiprintf_r+0x1ee>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0c5      	beq.n	8005d7e <_vfiprintf_r+0x176>
 8005df2:	9105      	str	r1, [sp, #20]
 8005df4:	e7c3      	b.n	8005d7e <_vfiprintf_r+0x176>
 8005df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e7f0      	b.n	8005de2 <_vfiprintf_r+0x1da>
 8005e00:	ab03      	add	r3, sp, #12
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	462a      	mov	r2, r5
 8005e06:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <_vfiprintf_r+0x258>)
 8005e08:	a904      	add	r1, sp, #16
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f3af 8000 	nop.w
 8005e10:	4607      	mov	r7, r0
 8005e12:	1c78      	adds	r0, r7, #1
 8005e14:	d1d6      	bne.n	8005dc4 <_vfiprintf_r+0x1bc>
 8005e16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e18:	07d9      	lsls	r1, r3, #31
 8005e1a:	d405      	bmi.n	8005e28 <_vfiprintf_r+0x220>
 8005e1c:	89ab      	ldrh	r3, [r5, #12]
 8005e1e:	059a      	lsls	r2, r3, #22
 8005e20:	d402      	bmi.n	8005e28 <_vfiprintf_r+0x220>
 8005e22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e24:	f7ff fdb7 	bl	8005996 <__retarget_lock_release_recursive>
 8005e28:	89ab      	ldrh	r3, [r5, #12]
 8005e2a:	065b      	lsls	r3, r3, #25
 8005e2c:	f53f af12 	bmi.w	8005c54 <_vfiprintf_r+0x4c>
 8005e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e32:	e711      	b.n	8005c58 <_vfiprintf_r+0x50>
 8005e34:	ab03      	add	r3, sp, #12
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	462a      	mov	r2, r5
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <_vfiprintf_r+0x258>)
 8005e3c:	a904      	add	r1, sp, #16
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f000 f880 	bl	8005f44 <_printf_i>
 8005e44:	e7e4      	b.n	8005e10 <_vfiprintf_r+0x208>
 8005e46:	bf00      	nop
 8005e48:	0800649c 	.word	0x0800649c
 8005e4c:	080064bc 	.word	0x080064bc
 8005e50:	0800647c 	.word	0x0800647c
 8005e54:	080064dc 	.word	0x080064dc
 8005e58:	080064e6 	.word	0x080064e6
 8005e5c:	00000000 	.word	0x00000000
 8005e60:	08005be3 	.word	0x08005be3
 8005e64:	080064e2 	.word	0x080064e2

08005e68 <_printf_common>:
 8005e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	4699      	mov	r9, r3
 8005e70:	688a      	ldr	r2, [r1, #8]
 8005e72:	690b      	ldr	r3, [r1, #16]
 8005e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	bfb8      	it	lt
 8005e7c:	4613      	movlt	r3, r2
 8005e7e:	6033      	str	r3, [r6, #0]
 8005e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e84:	4607      	mov	r7, r0
 8005e86:	460c      	mov	r4, r1
 8005e88:	b10a      	cbz	r2, 8005e8e <_printf_common+0x26>
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	6033      	str	r3, [r6, #0]
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	0699      	lsls	r1, r3, #26
 8005e92:	bf42      	ittt	mi
 8005e94:	6833      	ldrmi	r3, [r6, #0]
 8005e96:	3302      	addmi	r3, #2
 8005e98:	6033      	strmi	r3, [r6, #0]
 8005e9a:	6825      	ldr	r5, [r4, #0]
 8005e9c:	f015 0506 	ands.w	r5, r5, #6
 8005ea0:	d106      	bne.n	8005eb0 <_printf_common+0x48>
 8005ea2:	f104 0a19 	add.w	sl, r4, #25
 8005ea6:	68e3      	ldr	r3, [r4, #12]
 8005ea8:	6832      	ldr	r2, [r6, #0]
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	42ab      	cmp	r3, r5
 8005eae:	dc26      	bgt.n	8005efe <_printf_common+0x96>
 8005eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005eb4:	1e13      	subs	r3, r2, #0
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	bf18      	it	ne
 8005eba:	2301      	movne	r3, #1
 8005ebc:	0692      	lsls	r2, r2, #26
 8005ebe:	d42b      	bmi.n	8005f18 <_printf_common+0xb0>
 8005ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	47c0      	blx	r8
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d01e      	beq.n	8005f0c <_printf_common+0xa4>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	68e5      	ldr	r5, [r4, #12]
 8005ed2:	6832      	ldr	r2, [r6, #0]
 8005ed4:	f003 0306 	and.w	r3, r3, #6
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	bf08      	it	eq
 8005edc:	1aad      	subeq	r5, r5, r2
 8005ede:	68a3      	ldr	r3, [r4, #8]
 8005ee0:	6922      	ldr	r2, [r4, #16]
 8005ee2:	bf0c      	ite	eq
 8005ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee8:	2500      	movne	r5, #0
 8005eea:	4293      	cmp	r3, r2
 8005eec:	bfc4      	itt	gt
 8005eee:	1a9b      	subgt	r3, r3, r2
 8005ef0:	18ed      	addgt	r5, r5, r3
 8005ef2:	2600      	movs	r6, #0
 8005ef4:	341a      	adds	r4, #26
 8005ef6:	42b5      	cmp	r5, r6
 8005ef8:	d11a      	bne.n	8005f30 <_printf_common+0xc8>
 8005efa:	2000      	movs	r0, #0
 8005efc:	e008      	b.n	8005f10 <_printf_common+0xa8>
 8005efe:	2301      	movs	r3, #1
 8005f00:	4652      	mov	r2, sl
 8005f02:	4649      	mov	r1, r9
 8005f04:	4638      	mov	r0, r7
 8005f06:	47c0      	blx	r8
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d103      	bne.n	8005f14 <_printf_common+0xac>
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f14:	3501      	adds	r5, #1
 8005f16:	e7c6      	b.n	8005ea6 <_printf_common+0x3e>
 8005f18:	18e1      	adds	r1, r4, r3
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	2030      	movs	r0, #48	; 0x30
 8005f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f22:	4422      	add	r2, r4
 8005f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f2c:	3302      	adds	r3, #2
 8005f2e:	e7c7      	b.n	8005ec0 <_printf_common+0x58>
 8005f30:	2301      	movs	r3, #1
 8005f32:	4622      	mov	r2, r4
 8005f34:	4649      	mov	r1, r9
 8005f36:	4638      	mov	r0, r7
 8005f38:	47c0      	blx	r8
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d0e6      	beq.n	8005f0c <_printf_common+0xa4>
 8005f3e:	3601      	adds	r6, #1
 8005f40:	e7d9      	b.n	8005ef6 <_printf_common+0x8e>
	...

08005f44 <_printf_i>:
 8005f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f48:	460c      	mov	r4, r1
 8005f4a:	4691      	mov	r9, r2
 8005f4c:	7e27      	ldrb	r7, [r4, #24]
 8005f4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f50:	2f78      	cmp	r7, #120	; 0x78
 8005f52:	4680      	mov	r8, r0
 8005f54:	469a      	mov	sl, r3
 8005f56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f5a:	d807      	bhi.n	8005f6c <_printf_i+0x28>
 8005f5c:	2f62      	cmp	r7, #98	; 0x62
 8005f5e:	d80a      	bhi.n	8005f76 <_printf_i+0x32>
 8005f60:	2f00      	cmp	r7, #0
 8005f62:	f000 80d8 	beq.w	8006116 <_printf_i+0x1d2>
 8005f66:	2f58      	cmp	r7, #88	; 0x58
 8005f68:	f000 80a3 	beq.w	80060b2 <_printf_i+0x16e>
 8005f6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f74:	e03a      	b.n	8005fec <_printf_i+0xa8>
 8005f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f7a:	2b15      	cmp	r3, #21
 8005f7c:	d8f6      	bhi.n	8005f6c <_printf_i+0x28>
 8005f7e:	a001      	add	r0, pc, #4	; (adr r0, 8005f84 <_printf_i+0x40>)
 8005f80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f84:	08005fdd 	.word	0x08005fdd
 8005f88:	08005ff1 	.word	0x08005ff1
 8005f8c:	08005f6d 	.word	0x08005f6d
 8005f90:	08005f6d 	.word	0x08005f6d
 8005f94:	08005f6d 	.word	0x08005f6d
 8005f98:	08005f6d 	.word	0x08005f6d
 8005f9c:	08005ff1 	.word	0x08005ff1
 8005fa0:	08005f6d 	.word	0x08005f6d
 8005fa4:	08005f6d 	.word	0x08005f6d
 8005fa8:	08005f6d 	.word	0x08005f6d
 8005fac:	08005f6d 	.word	0x08005f6d
 8005fb0:	080060fd 	.word	0x080060fd
 8005fb4:	08006021 	.word	0x08006021
 8005fb8:	080060df 	.word	0x080060df
 8005fbc:	08005f6d 	.word	0x08005f6d
 8005fc0:	08005f6d 	.word	0x08005f6d
 8005fc4:	0800611f 	.word	0x0800611f
 8005fc8:	08005f6d 	.word	0x08005f6d
 8005fcc:	08006021 	.word	0x08006021
 8005fd0:	08005f6d 	.word	0x08005f6d
 8005fd4:	08005f6d 	.word	0x08005f6d
 8005fd8:	080060e7 	.word	0x080060e7
 8005fdc:	680b      	ldr	r3, [r1, #0]
 8005fde:	1d1a      	adds	r2, r3, #4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	600a      	str	r2, [r1, #0]
 8005fe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0a3      	b.n	8006138 <_printf_i+0x1f4>
 8005ff0:	6825      	ldr	r5, [r4, #0]
 8005ff2:	6808      	ldr	r0, [r1, #0]
 8005ff4:	062e      	lsls	r6, r5, #24
 8005ff6:	f100 0304 	add.w	r3, r0, #4
 8005ffa:	d50a      	bpl.n	8006012 <_printf_i+0xce>
 8005ffc:	6805      	ldr	r5, [r0, #0]
 8005ffe:	600b      	str	r3, [r1, #0]
 8006000:	2d00      	cmp	r5, #0
 8006002:	da03      	bge.n	800600c <_printf_i+0xc8>
 8006004:	232d      	movs	r3, #45	; 0x2d
 8006006:	426d      	negs	r5, r5
 8006008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800600c:	485e      	ldr	r0, [pc, #376]	; (8006188 <_printf_i+0x244>)
 800600e:	230a      	movs	r3, #10
 8006010:	e019      	b.n	8006046 <_printf_i+0x102>
 8006012:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006016:	6805      	ldr	r5, [r0, #0]
 8006018:	600b      	str	r3, [r1, #0]
 800601a:	bf18      	it	ne
 800601c:	b22d      	sxthne	r5, r5
 800601e:	e7ef      	b.n	8006000 <_printf_i+0xbc>
 8006020:	680b      	ldr	r3, [r1, #0]
 8006022:	6825      	ldr	r5, [r4, #0]
 8006024:	1d18      	adds	r0, r3, #4
 8006026:	6008      	str	r0, [r1, #0]
 8006028:	0628      	lsls	r0, r5, #24
 800602a:	d501      	bpl.n	8006030 <_printf_i+0xec>
 800602c:	681d      	ldr	r5, [r3, #0]
 800602e:	e002      	b.n	8006036 <_printf_i+0xf2>
 8006030:	0669      	lsls	r1, r5, #25
 8006032:	d5fb      	bpl.n	800602c <_printf_i+0xe8>
 8006034:	881d      	ldrh	r5, [r3, #0]
 8006036:	4854      	ldr	r0, [pc, #336]	; (8006188 <_printf_i+0x244>)
 8006038:	2f6f      	cmp	r7, #111	; 0x6f
 800603a:	bf0c      	ite	eq
 800603c:	2308      	moveq	r3, #8
 800603e:	230a      	movne	r3, #10
 8006040:	2100      	movs	r1, #0
 8006042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006046:	6866      	ldr	r6, [r4, #4]
 8006048:	60a6      	str	r6, [r4, #8]
 800604a:	2e00      	cmp	r6, #0
 800604c:	bfa2      	ittt	ge
 800604e:	6821      	ldrge	r1, [r4, #0]
 8006050:	f021 0104 	bicge.w	r1, r1, #4
 8006054:	6021      	strge	r1, [r4, #0]
 8006056:	b90d      	cbnz	r5, 800605c <_printf_i+0x118>
 8006058:	2e00      	cmp	r6, #0
 800605a:	d04d      	beq.n	80060f8 <_printf_i+0x1b4>
 800605c:	4616      	mov	r6, r2
 800605e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006062:	fb03 5711 	mls	r7, r3, r1, r5
 8006066:	5dc7      	ldrb	r7, [r0, r7]
 8006068:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800606c:	462f      	mov	r7, r5
 800606e:	42bb      	cmp	r3, r7
 8006070:	460d      	mov	r5, r1
 8006072:	d9f4      	bls.n	800605e <_printf_i+0x11a>
 8006074:	2b08      	cmp	r3, #8
 8006076:	d10b      	bne.n	8006090 <_printf_i+0x14c>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	07df      	lsls	r7, r3, #31
 800607c:	d508      	bpl.n	8006090 <_printf_i+0x14c>
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	6861      	ldr	r1, [r4, #4]
 8006082:	4299      	cmp	r1, r3
 8006084:	bfde      	ittt	le
 8006086:	2330      	movle	r3, #48	; 0x30
 8006088:	f806 3c01 	strble.w	r3, [r6, #-1]
 800608c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006090:	1b92      	subs	r2, r2, r6
 8006092:	6122      	str	r2, [r4, #16]
 8006094:	f8cd a000 	str.w	sl, [sp]
 8006098:	464b      	mov	r3, r9
 800609a:	aa03      	add	r2, sp, #12
 800609c:	4621      	mov	r1, r4
 800609e:	4640      	mov	r0, r8
 80060a0:	f7ff fee2 	bl	8005e68 <_printf_common>
 80060a4:	3001      	adds	r0, #1
 80060a6:	d14c      	bne.n	8006142 <_printf_i+0x1fe>
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	b004      	add	sp, #16
 80060ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b2:	4835      	ldr	r0, [pc, #212]	; (8006188 <_printf_i+0x244>)
 80060b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	680e      	ldr	r6, [r1, #0]
 80060bc:	061f      	lsls	r7, r3, #24
 80060be:	f856 5b04 	ldr.w	r5, [r6], #4
 80060c2:	600e      	str	r6, [r1, #0]
 80060c4:	d514      	bpl.n	80060f0 <_printf_i+0x1ac>
 80060c6:	07d9      	lsls	r1, r3, #31
 80060c8:	bf44      	itt	mi
 80060ca:	f043 0320 	orrmi.w	r3, r3, #32
 80060ce:	6023      	strmi	r3, [r4, #0]
 80060d0:	b91d      	cbnz	r5, 80060da <_printf_i+0x196>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	f023 0320 	bic.w	r3, r3, #32
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	2310      	movs	r3, #16
 80060dc:	e7b0      	b.n	8006040 <_printf_i+0xfc>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	f043 0320 	orr.w	r3, r3, #32
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	2378      	movs	r3, #120	; 0x78
 80060e8:	4828      	ldr	r0, [pc, #160]	; (800618c <_printf_i+0x248>)
 80060ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060ee:	e7e3      	b.n	80060b8 <_printf_i+0x174>
 80060f0:	065e      	lsls	r6, r3, #25
 80060f2:	bf48      	it	mi
 80060f4:	b2ad      	uxthmi	r5, r5
 80060f6:	e7e6      	b.n	80060c6 <_printf_i+0x182>
 80060f8:	4616      	mov	r6, r2
 80060fa:	e7bb      	b.n	8006074 <_printf_i+0x130>
 80060fc:	680b      	ldr	r3, [r1, #0]
 80060fe:	6826      	ldr	r6, [r4, #0]
 8006100:	6960      	ldr	r0, [r4, #20]
 8006102:	1d1d      	adds	r5, r3, #4
 8006104:	600d      	str	r5, [r1, #0]
 8006106:	0635      	lsls	r5, r6, #24
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	d501      	bpl.n	8006110 <_printf_i+0x1cc>
 800610c:	6018      	str	r0, [r3, #0]
 800610e:	e002      	b.n	8006116 <_printf_i+0x1d2>
 8006110:	0671      	lsls	r1, r6, #25
 8006112:	d5fb      	bpl.n	800610c <_printf_i+0x1c8>
 8006114:	8018      	strh	r0, [r3, #0]
 8006116:	2300      	movs	r3, #0
 8006118:	6123      	str	r3, [r4, #16]
 800611a:	4616      	mov	r6, r2
 800611c:	e7ba      	b.n	8006094 <_printf_i+0x150>
 800611e:	680b      	ldr	r3, [r1, #0]
 8006120:	1d1a      	adds	r2, r3, #4
 8006122:	600a      	str	r2, [r1, #0]
 8006124:	681e      	ldr	r6, [r3, #0]
 8006126:	6862      	ldr	r2, [r4, #4]
 8006128:	2100      	movs	r1, #0
 800612a:	4630      	mov	r0, r6
 800612c:	f7fa f858 	bl	80001e0 <memchr>
 8006130:	b108      	cbz	r0, 8006136 <_printf_i+0x1f2>
 8006132:	1b80      	subs	r0, r0, r6
 8006134:	6060      	str	r0, [r4, #4]
 8006136:	6863      	ldr	r3, [r4, #4]
 8006138:	6123      	str	r3, [r4, #16]
 800613a:	2300      	movs	r3, #0
 800613c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006140:	e7a8      	b.n	8006094 <_printf_i+0x150>
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	4632      	mov	r2, r6
 8006146:	4649      	mov	r1, r9
 8006148:	4640      	mov	r0, r8
 800614a:	47d0      	blx	sl
 800614c:	3001      	adds	r0, #1
 800614e:	d0ab      	beq.n	80060a8 <_printf_i+0x164>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	079b      	lsls	r3, r3, #30
 8006154:	d413      	bmi.n	800617e <_printf_i+0x23a>
 8006156:	68e0      	ldr	r0, [r4, #12]
 8006158:	9b03      	ldr	r3, [sp, #12]
 800615a:	4298      	cmp	r0, r3
 800615c:	bfb8      	it	lt
 800615e:	4618      	movlt	r0, r3
 8006160:	e7a4      	b.n	80060ac <_printf_i+0x168>
 8006162:	2301      	movs	r3, #1
 8006164:	4632      	mov	r2, r6
 8006166:	4649      	mov	r1, r9
 8006168:	4640      	mov	r0, r8
 800616a:	47d0      	blx	sl
 800616c:	3001      	adds	r0, #1
 800616e:	d09b      	beq.n	80060a8 <_printf_i+0x164>
 8006170:	3501      	adds	r5, #1
 8006172:	68e3      	ldr	r3, [r4, #12]
 8006174:	9903      	ldr	r1, [sp, #12]
 8006176:	1a5b      	subs	r3, r3, r1
 8006178:	42ab      	cmp	r3, r5
 800617a:	dcf2      	bgt.n	8006162 <_printf_i+0x21e>
 800617c:	e7eb      	b.n	8006156 <_printf_i+0x212>
 800617e:	2500      	movs	r5, #0
 8006180:	f104 0619 	add.w	r6, r4, #25
 8006184:	e7f5      	b.n	8006172 <_printf_i+0x22e>
 8006186:	bf00      	nop
 8006188:	080064ed 	.word	0x080064ed
 800618c:	080064fe 	.word	0x080064fe

08006190 <_sbrk_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4d06      	ldr	r5, [pc, #24]	; (80061ac <_sbrk_r+0x1c>)
 8006194:	2300      	movs	r3, #0
 8006196:	4604      	mov	r4, r0
 8006198:	4608      	mov	r0, r1
 800619a:	602b      	str	r3, [r5, #0]
 800619c:	f000 f928 	bl	80063f0 <_sbrk>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_sbrk_r+0x1a>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_sbrk_r+0x1a>
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	20000680 	.word	0x20000680

080061b0 <__sread>:
 80061b0:	b510      	push	{r4, lr}
 80061b2:	460c      	mov	r4, r1
 80061b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b8:	f000 f8a0 	bl	80062fc <_read_r>
 80061bc:	2800      	cmp	r0, #0
 80061be:	bfab      	itete	ge
 80061c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061c2:	89a3      	ldrhlt	r3, [r4, #12]
 80061c4:	181b      	addge	r3, r3, r0
 80061c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061ca:	bfac      	ite	ge
 80061cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80061ce:	81a3      	strhlt	r3, [r4, #12]
 80061d0:	bd10      	pop	{r4, pc}

080061d2 <__swrite>:
 80061d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d6:	461f      	mov	r7, r3
 80061d8:	898b      	ldrh	r3, [r1, #12]
 80061da:	05db      	lsls	r3, r3, #23
 80061dc:	4605      	mov	r5, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	4616      	mov	r6, r2
 80061e2:	d505      	bpl.n	80061f0 <__swrite+0x1e>
 80061e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e8:	2302      	movs	r3, #2
 80061ea:	2200      	movs	r2, #0
 80061ec:	f000 f868 	bl	80062c0 <_lseek_r>
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061fa:	81a3      	strh	r3, [r4, #12]
 80061fc:	4632      	mov	r2, r6
 80061fe:	463b      	mov	r3, r7
 8006200:	4628      	mov	r0, r5
 8006202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006206:	f000 b817 	b.w	8006238 <_write_r>

0800620a <__sseek>:
 800620a:	b510      	push	{r4, lr}
 800620c:	460c      	mov	r4, r1
 800620e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006212:	f000 f855 	bl	80062c0 <_lseek_r>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	bf15      	itete	ne
 800621c:	6560      	strne	r0, [r4, #84]	; 0x54
 800621e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006226:	81a3      	strheq	r3, [r4, #12]
 8006228:	bf18      	it	ne
 800622a:	81a3      	strhne	r3, [r4, #12]
 800622c:	bd10      	pop	{r4, pc}

0800622e <__sclose>:
 800622e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006232:	f000 b813 	b.w	800625c <_close_r>
	...

08006238 <_write_r>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	4d07      	ldr	r5, [pc, #28]	; (8006258 <_write_r+0x20>)
 800623c:	4604      	mov	r4, r0
 800623e:	4608      	mov	r0, r1
 8006240:	4611      	mov	r1, r2
 8006242:	2200      	movs	r2, #0
 8006244:	602a      	str	r2, [r5, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	f000 f8e0 	bl	800640c <_write>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d102      	bne.n	8006256 <_write_r+0x1e>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	b103      	cbz	r3, 8006256 <_write_r+0x1e>
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	bd38      	pop	{r3, r4, r5, pc}
 8006258:	20000680 	.word	0x20000680

0800625c <_close_r>:
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	4d06      	ldr	r5, [pc, #24]	; (8006278 <_close_r+0x1c>)
 8006260:	2300      	movs	r3, #0
 8006262:	4604      	mov	r4, r0
 8006264:	4608      	mov	r0, r1
 8006266:	602b      	str	r3, [r5, #0]
 8006268:	f000 f89a 	bl	80063a0 <_close>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d102      	bne.n	8006276 <_close_r+0x1a>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	b103      	cbz	r3, 8006276 <_close_r+0x1a>
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	20000680 	.word	0x20000680

0800627c <_fstat_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	4d07      	ldr	r5, [pc, #28]	; (800629c <_fstat_r+0x20>)
 8006280:	2300      	movs	r3, #0
 8006282:	4604      	mov	r4, r0
 8006284:	4608      	mov	r0, r1
 8006286:	4611      	mov	r1, r2
 8006288:	602b      	str	r3, [r5, #0]
 800628a:	f000 f891 	bl	80063b0 <_fstat>
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	d102      	bne.n	8006298 <_fstat_r+0x1c>
 8006292:	682b      	ldr	r3, [r5, #0]
 8006294:	b103      	cbz	r3, 8006298 <_fstat_r+0x1c>
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	bd38      	pop	{r3, r4, r5, pc}
 800629a:	bf00      	nop
 800629c:	20000680 	.word	0x20000680

080062a0 <_isatty_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4d06      	ldr	r5, [pc, #24]	; (80062bc <_isatty_r+0x1c>)
 80062a4:	2300      	movs	r3, #0
 80062a6:	4604      	mov	r4, r0
 80062a8:	4608      	mov	r0, r1
 80062aa:	602b      	str	r3, [r5, #0]
 80062ac:	f000 f888 	bl	80063c0 <_isatty>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_isatty_r+0x1a>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_isatty_r+0x1a>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20000680 	.word	0x20000680

080062c0 <_lseek_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4d07      	ldr	r5, [pc, #28]	; (80062e0 <_lseek_r+0x20>)
 80062c4:	4604      	mov	r4, r0
 80062c6:	4608      	mov	r0, r1
 80062c8:	4611      	mov	r1, r2
 80062ca:	2200      	movs	r2, #0
 80062cc:	602a      	str	r2, [r5, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	f000 f87e 	bl	80063d0 <_lseek>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_lseek_r+0x1e>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_lseek_r+0x1e>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	20000680 	.word	0x20000680

080062e4 <__malloc_lock>:
 80062e4:	4801      	ldr	r0, [pc, #4]	; (80062ec <__malloc_lock+0x8>)
 80062e6:	f7ff bb55 	b.w	8005994 <__retarget_lock_acquire_recursive>
 80062ea:	bf00      	nop
 80062ec:	20000678 	.word	0x20000678

080062f0 <__malloc_unlock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	; (80062f8 <__malloc_unlock+0x8>)
 80062f2:	f7ff bb50 	b.w	8005996 <__retarget_lock_release_recursive>
 80062f6:	bf00      	nop
 80062f8:	20000678 	.word	0x20000678

080062fc <_read_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d07      	ldr	r5, [pc, #28]	; (800631c <_read_r+0x20>)
 8006300:	4604      	mov	r4, r0
 8006302:	4608      	mov	r0, r1
 8006304:	4611      	mov	r1, r2
 8006306:	2200      	movs	r2, #0
 8006308:	602a      	str	r2, [r5, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	f000 f868 	bl	80063e0 <_read>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d102      	bne.n	800631a <_read_r+0x1e>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	b103      	cbz	r3, 800631a <_read_r+0x1e>
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	20000680 	.word	0x20000680

08006320 <lrintf>:
 8006320:	ee10 3a10 	vmov	r3, s0
 8006324:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006328:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 800632c:	281e      	cmp	r0, #30
 800632e:	b082      	sub	sp, #8
 8006330:	dc2e      	bgt.n	8006390 <lrintf+0x70>
 8006332:	1c41      	adds	r1, r0, #1
 8006334:	da02      	bge.n	800633c <lrintf+0x1c>
 8006336:	2000      	movs	r0, #0
 8006338:	b002      	add	sp, #8
 800633a:	4770      	bx	lr
 800633c:	2816      	cmp	r0, #22
 800633e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8006342:	dd09      	ble.n	8006358 <lrintf+0x38>
 8006344:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006348:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800634c:	3a96      	subs	r2, #150	; 0x96
 800634e:	4090      	lsls	r0, r2
 8006350:	2900      	cmp	r1, #0
 8006352:	d0f1      	beq.n	8006338 <lrintf+0x18>
 8006354:	4240      	negs	r0, r0
 8006356:	e7ef      	b.n	8006338 <lrintf+0x18>
 8006358:	4b10      	ldr	r3, [pc, #64]	; (800639c <lrintf+0x7c>)
 800635a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800635e:	ed93 7a00 	vldr	s14, [r3]
 8006362:	ee37 0a00 	vadd.f32	s0, s14, s0
 8006366:	ed8d 0a01 	vstr	s0, [sp, #4]
 800636a:	eddd 7a01 	vldr	s15, [sp, #4]
 800636e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006372:	ee17 3a90 	vmov	r3, s15
 8006376:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800637a:	d0dc      	beq.n	8006336 <lrintf+0x16>
 800637c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006380:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8006384:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006388:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800638c:	40d8      	lsrs	r0, r3
 800638e:	e7df      	b.n	8006350 <lrintf+0x30>
 8006390:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006394:	ee17 0a90 	vmov	r0, s15
 8006398:	e7ce      	b.n	8006338 <lrintf+0x18>
 800639a:	bf00      	nop
 800639c:	08006510 	.word	0x08006510

080063a0 <_close>:
 80063a0:	4b02      	ldr	r3, [pc, #8]	; (80063ac <_close+0xc>)
 80063a2:	2258      	movs	r2, #88	; 0x58
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	f04f 30ff 	mov.w	r0, #4294967295
 80063aa:	4770      	bx	lr
 80063ac:	20000680 	.word	0x20000680

080063b0 <_fstat>:
 80063b0:	4b02      	ldr	r3, [pc, #8]	; (80063bc <_fstat+0xc>)
 80063b2:	2258      	movs	r2, #88	; 0x58
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ba:	4770      	bx	lr
 80063bc:	20000680 	.word	0x20000680

080063c0 <_isatty>:
 80063c0:	4b02      	ldr	r3, [pc, #8]	; (80063cc <_isatty+0xc>)
 80063c2:	2258      	movs	r2, #88	; 0x58
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	2000      	movs	r0, #0
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	20000680 	.word	0x20000680

080063d0 <_lseek>:
 80063d0:	4b02      	ldr	r3, [pc, #8]	; (80063dc <_lseek+0xc>)
 80063d2:	2258      	movs	r2, #88	; 0x58
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	f04f 30ff 	mov.w	r0, #4294967295
 80063da:	4770      	bx	lr
 80063dc:	20000680 	.word	0x20000680

080063e0 <_read>:
 80063e0:	4b02      	ldr	r3, [pc, #8]	; (80063ec <_read+0xc>)
 80063e2:	2258      	movs	r2, #88	; 0x58
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ea:	4770      	bx	lr
 80063ec:	20000680 	.word	0x20000680

080063f0 <_sbrk>:
 80063f0:	4b04      	ldr	r3, [pc, #16]	; (8006404 <_sbrk+0x14>)
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	4602      	mov	r2, r0
 80063f6:	b909      	cbnz	r1, 80063fc <_sbrk+0xc>
 80063f8:	4903      	ldr	r1, [pc, #12]	; (8006408 <_sbrk+0x18>)
 80063fa:	6019      	str	r1, [r3, #0]
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	4402      	add	r2, r0
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	4770      	bx	lr
 8006404:	200000c4 	.word	0x200000c4
 8006408:	20000688 	.word	0x20000688

0800640c <_write>:
 800640c:	4b02      	ldr	r3, [pc, #8]	; (8006418 <_write+0xc>)
 800640e:	2258      	movs	r2, #88	; 0x58
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	f04f 30ff 	mov.w	r0, #4294967295
 8006416:	4770      	bx	lr
 8006418:	20000680 	.word	0x20000680

0800641c <_init>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	bf00      	nop
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr

08006428 <_fini>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	bf00      	nop
 800642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642e:	bc08      	pop	{r3}
 8006430:	469e      	mov	lr, r3
 8006432:	4770      	bx	lr
